using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Xna.Framework;
using ReLogic.Utilities;
using Terraria.Audio;
using Terraria.Chat;
using Terraria.DataStructures;
using Terraria.Enums;
using Terraria.GameContent;
using Terraria.GameContent.Achievements;
using Terraria.GameContent.Biomes;
using Terraria.GameContent.Creative;
using Terraria.GameContent.Events;
using Terraria.GameContent.Generation;
using Terraria.GameContent.Tile_Entities;
using Terraria.GameContent.UI.States;
using Terraria.Graphics.Capture;
using Terraria.ID;
using Terraria.IO;
using Terraria.Localization;
using Terraria.Map;
using Terraria.ObjectData;
using Terraria.Utilities;
using Terraria.WorldBuilding;

namespace Terraria
{
	// Token: 0x0200004F RID: 79
	public class WorldGen
	{
		// Token: 0x1700015B RID: 347
		// (get) Token: 0x06000DFB RID: 3579 RVA: 0x003F9270 File Offset: 0x003F7470
		public static UnifiedRandom genRand
		{
			get
			{
				if (WorldGen._lastSeed != WorldGen._genRandSeed)
				{
					WorldGen._genRand = new UnifiedRandom(WorldGen._lastSeed);
					WorldGen._genRandSeed = WorldGen._lastSeed;
				}
				if (WorldGen._genRand == null)
				{
					WorldGen._genRand = new UnifiedRandom(WorldGen._lastSeed);
					WorldGen._genRandSeed = WorldGen._lastSeed;
				}
				return WorldGen._genRand;
			}
		}

		// Token: 0x06000DFC RID: 3580 RVA: 0x003F92C8 File Offset: 0x003F74C8
		public static void SetupStatueList()
		{
			List<Point16> list = new List<Point16>();
			for (int i = 0; i < 44; i++)
			{
				list.Add(new Point16(105, i));
			}
			list[34] = new Point16(349, 0);
			list[43] = new Point16(105, 50);
			list.Add(new Point16(105, 63));
			list.Add(new Point16(105, 64));
			list.Add(new Point16(105, 65));
			list.Add(new Point16(105, 66));
			list.Add(new Point16(105, 68));
			list.Add(new Point16(105, 69));
			list.Add(new Point16(105, 70));
			list.Add(new Point16(105, 71));
			list.Add(new Point16(105, 72));
			list.Add(new Point16(105, 73));
			list.Add(new Point16(105, 75));
			list.Add(new Point16(105, 51));
			list.Add(new Point16(105, 52));
			list.Add(new Point16(105, 53));
			list.Add(new Point16(105, 54));
			list.Add(new Point16(105, 55));
			list.Add(new Point16(105, 56));
			list.Add(new Point16(105, 57));
			list.Add(new Point16(105, 58));
			list.Add(new Point16(105, 59));
			list.Add(new Point16(105, 60));
			list.Add(new Point16(105, 61));
			list.Add(new Point16(105, 62));
			list.Add(new Point16(105, 77));
			list.Add(new Point16(105, 78));
			list.Add(new Point16(105, 67));
			list.Add(new Point16(105, 74));
			list.Add(new Point16(105, 37));
			list.Add(new Point16(105, 2));
			GenVars.statueList = list.ToArray();
		}

		// Token: 0x06000DFD RID: 3581 RVA: 0x003F94D8 File Offset: 0x003F76D8
		public static void PlaceStatueTrap(int x, int y)
		{
			for (int i = -10; i <= 10; i++)
			{
				for (int j = -10; j <= 10; j++)
				{
					Tile tile = Main.tile[x + i, y + j + 1];
					Tile tile2 = Main.tile[x + i, y + j];
					if (!tile2.active() && WorldGen.SolidTile2(tile) && tile.type != 162)
					{
						WorldGen.PlaceTile(x + i, y + j, 135, true, false, -1, 0);
						if (tile2.active() && tile2.type == 135)
						{
							WorldUtils.WireLine(new Point(x, y), new Point(x + i, y + j));
							return;
						}
					}
				}
			}
		}

		// Token: 0x06000DFE RID: 3582 RVA: 0x003F9590 File Offset: 0x003F7790
		private static EntitySource_TileBreak GetProjectileSource_TileBreak(int x, int y)
		{
			return new EntitySource_TileBreak(x, y);
		}

		// Token: 0x06000DFF RID: 3583 RVA: 0x003F9590 File Offset: 0x003F7790
		private static EntitySource_TileBreak GetNPCSource_TileBreak(int x, int y)
		{
			return new EntitySource_TileBreak(x, y);
		}

		// Token: 0x06000E00 RID: 3584 RVA: 0x003F9599 File Offset: 0x003F7799
		public static EntitySource_ShakeTree GetNPCSource_ShakeTree(int x, int y)
		{
			return new EntitySource_ShakeTree(x, y);
		}

		// Token: 0x06000E01 RID: 3585 RVA: 0x003F9599 File Offset: 0x003F7799
		private static EntitySource_ShakeTree GetProjectileSource_ShakeTree(int x, int y)
		{
			return new EntitySource_ShakeTree(x, y);
		}

		// Token: 0x06000E02 RID: 3586 RVA: 0x003F9599 File Offset: 0x003F7799
		private static EntitySource_ShakeTree GetItemSource_ShakeTree(int x, int y)
		{
			return new EntitySource_ShakeTree(x, y);
		}

		// Token: 0x06000E03 RID: 3587 RVA: 0x003F95A2 File Offset: 0x003F77A2
		private static IEntitySource GetProjectileSource_PlayerOrWires(int x, int y, bool fromWiring, Player player)
		{
			if (fromWiring)
			{
				return new EntitySource_Wiring(x, y);
			}
			return new EntitySource_TileInteraction(player, x, y);
		}

		// Token: 0x06000E04 RID: 3588 RVA: 0x003F95B8 File Offset: 0x003F77B8
		public static bool EmptyLiquid(int x, int y)
		{
			if (!WorldGen.InWorld(x, y, 0))
			{
				return false;
			}
			Tile tile = Main.tile[x, y];
			if (tile == null)
			{
				return false;
			}
			tile.liquidType();
			if (tile.nactive() && Main.tileSolid[(int)tile.type] && !Main.tileSolidTop[(int)tile.type])
			{
				return false;
			}
			tile.Clear(TileDataType.Liquid);
			WorldGen.SquareTileFrame(x, y, false);
			if (Main.netMode != 0)
			{
				NetMessage.sendWater(x, y);
			}
			else
			{
				Liquid.AddWater(x, y);
			}
			return true;
		}

		// Token: 0x06000E05 RID: 3589 RVA: 0x003F9638 File Offset: 0x003F7838
		public static bool PlaceLiquid(int x, int y, byte liquidType, byte amount)
		{
			if (!WorldGen.InWorld(x, y, 0))
			{
				return false;
			}
			Tile tile = Main.tile[x, y];
			if (tile == null)
			{
				return false;
			}
			byte b = tile.liquidType();
			if (tile.nactive() && Main.tileSolid[(int)tile.type] && !Main.tileSolidTop[(int)tile.type])
			{
				return false;
			}
			if (tile.liquid == 0 || liquidType == b)
			{
				tile.liquidType((int)liquidType);
				if (amount + tile.liquid > 255)
				{
					amount = byte.MaxValue - tile.liquid;
				}
				Tile tile2 = tile;
				tile2.liquid += amount;
				WorldGen.SquareTileFrame(x, y, true);
				if (Main.netMode != 0)
				{
					NetMessage.sendWater(x, y);
				}
				return true;
			}
			int num = 0;
			bool waterNearby = b == 0;
			bool lavaNearby = b == 1;
			bool honeyNearby = b == 2;
			bool shimmerNearby = b == 3;
			int num2 = 0;
			Liquid.GetLiquidMergeTypes((int)liquidType, out num, out num2, waterNearby, lavaNearby, honeyNearby, shimmerNearby);
			if (num != 0)
			{
				tile.liquid = 0;
				tile.liquidType(0);
				WorldGen.PlaceTile(x, y, num, true, false, -1, 0);
				WorldGen.SquareTileFrame(x, y, true);
				if (Main.netMode != 0)
				{
					NetMessage.SendTileSquare(-1, x - 1, y - 1, WorldGen.GetLiquidChangeType((int)liquidType, (int)b));
				}
				return true;
			}
			return false;
		}

		// Token: 0x06000E06 RID: 3590 RVA: 0x003F9758 File Offset: 0x003F7958
		public static void PlayLiquidChangeSound(TileChangeType eventType, int x, int y, int count = 1)
		{
			switch (eventType)
			{
			case TileChangeType.LavaWater:
				SoundEngine.PlaySound(SoundID.LiquidsWaterLava, x * 16 + count * 8, y * 16 + count * 8);
				return;
			case TileChangeType.HoneyWater:
				SoundEngine.PlaySound(SoundID.LiquidsHoneyWater, x * 16 + count * 8, y * 16 + count * 8);
				return;
			case TileChangeType.HoneyLava:
				SoundEngine.PlaySound(SoundID.LiquidsHoneyLava, x * 16 + count * 8, y * 16 + count * 8);
				return;
			case TileChangeType.ShimmerWater:
				SoundEngine.PlaySound(19, x * 16 + count * 8, y * 16 + count * 8, 4, 1f, 0f);
				return;
			case TileChangeType.ShimmerLava:
				SoundEngine.PlaySound(19, x * 16 + count * 8, y * 16 + count * 8, 4, 1f, 0f);
				return;
			case TileChangeType.ShimmerHoney:
				SoundEngine.PlaySound(19, x * 16 + count * 8, y * 16 + count * 8, 4, 1f, 0f);
				return;
			default:
				return;
			}
		}

		// Token: 0x06000E07 RID: 3591 RVA: 0x003F9848 File Offset: 0x003F7A48
		public static TileChangeType GetLiquidChangeType(int liquidType, int otherLiquidType)
		{
			if ((liquidType == 0 && otherLiquidType == 1) || (liquidType == 1 && otherLiquidType == 0))
			{
				return TileChangeType.LavaWater;
			}
			if ((liquidType == 0 && otherLiquidType == 2) || (liquidType == 2 && otherLiquidType == 0))
			{
				return TileChangeType.HoneyWater;
			}
			if ((liquidType == 1 && otherLiquidType == 2) || (liquidType == 2 && otherLiquidType == 1))
			{
				return TileChangeType.HoneyLava;
			}
			if ((liquidType == 0 && otherLiquidType == 3) || (liquidType == 3 && otherLiquidType == 0))
			{
				return TileChangeType.ShimmerWater;
			}
			if ((liquidType == 1 && otherLiquidType == 3) || (liquidType == 3 && otherLiquidType == 1))
			{
				return TileChangeType.ShimmerLava;
			}
			if ((liquidType == 2 && otherLiquidType == 3) || (liquidType == 3 && otherLiquidType == 2))
			{
				return TileChangeType.ShimmerHoney;
			}
			return TileChangeType.None;
		}

		// Token: 0x06000E08 RID: 3592 RVA: 0x003F98BC File Offset: 0x003F7ABC
		public static bool MoveTownNPC(int x, int y, int n)
		{
			if (!WorldGen.StartRoomCheck(x, y))
			{
				string newText = Lang.inter[40].Value;
				switch (WorldGen.roomCheckFailureReason)
				{
				case TownNPCRoomCheckFailureReason.TooCloseToWorldEdge:
					newText = Language.GetTextValue("TownNPCHousingFailureReasons.TooCloseToWorldEdge");
					break;
				case TownNPCRoomCheckFailureReason.RoomIsTooBig:
					newText = Language.GetTextValue("TownNPCHousingFailureReasons.RoomIsTooBig");
					break;
				case TownNPCRoomCheckFailureReason.RoomIsTooSmall:
					newText = Language.GetTextValue("TownNPCHousingFailureReasons.RoomIsTooSmall");
					break;
				case TownNPCRoomCheckFailureReason.HoleInWallIsTooBig:
					newText = Language.GetTextValue("TownNPCHousingFailureReasons.HoleInWallIsTooBig");
					break;
				case TownNPCRoomCheckFailureReason.RoomCheckStartedInASolidTile:
					newText = Language.GetTextValue("TownNPCHousingFailureReasons.RoomCheckStartedInASolidTile");
					break;
				}
				Main.NewText(newText, byte.MaxValue, 240, 20);
				return false;
			}
			if (!WorldGen.RoomNeeds(WorldGen.prioritizedTownNPCType))
			{
				int num = 0;
				int num2 = (WorldGen.roomTorch ? 0 : 1) + (WorldGen.roomDoor ? 0 : 1) + (WorldGen.roomTable ? 0 : 1) + (WorldGen.roomChair ? 0 : 1);
				string[] array = new string[num2];
				if (!WorldGen.roomTorch)
				{
					array[num] = Language.GetTextValue("Game.HouseLightSource");
					num++;
				}
				if (!WorldGen.roomDoor)
				{
					array[num] = Language.GetTextValue("Game.HouseDoor");
					num++;
				}
				if (!WorldGen.roomTable)
				{
					array[num] = Language.GetTextValue("Game.HouseTable");
					num++;
				}
				if (!WorldGen.roomChair)
				{
					array[num] = Language.GetTextValue("Game.HouseChair");
					num++;
				}
				string key = "Game.HouseMissing_" + num2;
				object[] args = array;
				Main.NewText(Language.GetTextValue(key, args), byte.MaxValue, 240, 20);
				return false;
			}
			int type = WorldGen.prioritizedTownNPCType;
			if (n >= 0)
			{
				type = Main.npc[n].type;
			}
			bool flag = NPCID.Sets.IsTownPet[type];
			if (WorldGen.roomHasStinkbug && !flag)
			{
				Main.NewText(Language.GetTextValue("TownNPCHousingFailureReasons.RoomHasAStinkbug"), byte.MaxValue, 240, 20);
				return false;
			}
			if (WorldGen.roomHasEchoStinkbug && !flag)
			{
				Main.NewText(Language.GetTextValue("TownNPCHousingFailureReasons.RoomHasAnEchoStinkbug"), byte.MaxValue, 240, 20);
				return false;
			}
			WorldGen.ScoreRoom(-1, type);
			if (WorldGen.hiScore <= 0)
			{
				if (WorldGen.roomOccupied)
				{
					Main.NewText(Lang.inter[41].Value, byte.MaxValue, 240, 20);
				}
				else if (WorldGen.roomEvil)
				{
					Main.NewText(Lang.inter[42].Value, byte.MaxValue, 240, 20);
				}
				else
				{
					Main.NewText(Lang.inter[40].Value, byte.MaxValue, 240, 20);
				}
				return false;
			}
			if (n >= 0 && !WorldGen.CheckSpecialTownNPCSpawningConditions(Main.npc[n].type))
			{
				Main.NewText(Lang.inter[55].Value + " " + Main.npc[n].TypeName, byte.MaxValue, 240, 20);
				return false;
			}
			return true;
		}

		// Token: 0x06000E09 RID: 3593 RVA: 0x003F9B80 File Offset: 0x003F7D80
		public static void moveRoom(int x, int y, int n)
		{
			if (Main.netMode == 1)
			{
				NetMessage.SendData(60, -1, -1, null, n, (float)x, (float)y, 0f, 0, 0, 0);
				return;
			}
			WorldGen.prioritizedTownNPCType = Main.npc[n].type;
			Main.npc[n].homeless = true;
			WorldGen.SpawnTownNPC(x, y);
			WorldGen.TownManager.SetRoom(Main.npc[n].type, Main.npc[n].homeTileX, Main.npc[n].homeTileY);
		}

		// Token: 0x06000E0A RID: 3594 RVA: 0x003F9C04 File Offset: 0x003F7E04
		public static bool IsNPCEvictable(int n)
		{
			if (n < 0)
			{
				return false;
			}
			Rectangle hitbox = Main.LocalPlayer.Hitbox;
			hitbox.Inflate(Main.LogicCheckScreenWidth / 2, Main.LogicCheckScreenHeight / 2);
			NPC npc = Main.npc[n];
			Rectangle value = new Rectangle(npc.homeTileX * 16, npc.homeTileY * 16, 16, 16);
			return hitbox.Intersects(value);
		}

		// Token: 0x06000E0B RID: 3595 RVA: 0x003F9C64 File Offset: 0x003F7E64
		public static void kickOut(int n)
		{
			if (Main.netMode == 1)
			{
				NetMessage.SendData(60, -1, -1, null, n, 0f, 0f, 1f, 0, 0, 0);
				return;
			}
			Main.npc[n].homeless = true;
			WorldGen.TownManager.KickOut(Main.npc[n]);
		}

		// Token: 0x06000E0C RID: 3596 RVA: 0x003F9CB8 File Offset: 0x003F7EB8
		public static bool IsThereASpawnablePrioritizedTownNPC(int x, int y, ref bool canSpawnNewTownNPC)
		{
			if (WorldGen.CheckSpecialTownNPCSpawningConditions(WorldGen.prioritizedTownNPCType) && NPC.AnyNPCs(WorldGen.prioritizedTownNPCType))
			{
				canSpawnNewTownNPC = false;
				return true;
			}
			List<int> list = new List<int>();
			WorldGen.TownManager.AddOccupantsToList(x, y, list);
			for (int i = 0; i < list.Count; i++)
			{
				int num = list[i];
				if (Main.townNPCCanSpawn[num] && !NPC.AnyNPCs(num) && WorldGen.CheckSpecialTownNPCSpawningConditions(num))
				{
					WorldGen.prioritizedTownNPCType = num;
					canSpawnNewTownNPC = true;
					return true;
				}
			}
			for (int j = 0; j < (int)NPCID.Count; j++)
			{
				if (Main.townNPCCanSpawn[j] && WorldGen.CheckSpecialTownNPCSpawningConditions(j))
				{
					if (NPC.AnyNPCs(j))
					{
						Main.townNPCCanSpawn[j] = false;
					}
					else
					{
						if (WorldGen.TownManager.HasRoomQuick(j))
						{
							WorldGen.prioritizedTownNPCType = j;
							canSpawnNewTownNPC = true;
							return true;
						}
						if (!NPCID.Sets.IsTownPet[WorldGen.prioritizedTownNPCType] || NPCID.Sets.IsTownPet[j])
						{
							WorldGen.prioritizedTownNPCType = j;
							canSpawnNewTownNPC = true;
							return true;
						}
					}
				}
			}
			return false;
		}

		// Token: 0x06000E0D RID: 3597 RVA: 0x003F9DA0 File Offset: 0x003F7FA0
		public static bool IsThereASpawnablePrioritizedTownNPC_Old(int x, int y)
		{
			if (WorldGen.CheckSpecialTownNPCSpawningConditions(WorldGen.prioritizedTownNPCType) && NPC.AnyNPCs(WorldGen.prioritizedTownNPCType))
			{
				return true;
			}
			List<int> list = new List<int>();
			WorldGen.TownManager.AddOccupantsToList(x, y, list);
			for (int i = 0; i < list.Count; i++)
			{
				int num = list[i];
				if (Main.townNPCCanSpawn[num] && !NPC.AnyNPCs(num) && WorldGen.CheckSpecialTownNPCSpawningConditions(num))
				{
					WorldGen.prioritizedTownNPCType = num;
					return true;
				}
			}
			int num2 = -1;
			for (int j = 0; j < (int)NPCID.Count; j++)
			{
				if (Main.townNPCCanSpawn[j] && WorldGen.CheckSpecialTownNPCSpawningConditions(j))
				{
					if (NPC.AnyNPCs(j))
					{
						Main.townNPCCanSpawn[j] = false;
					}
					else if (WorldGen.TownManager.HasRoomQuick(j))
					{
						if (num2 == -1)
						{
							num2 = j;
						}
					}
					else if (!NPCID.Sets.IsTownPet[WorldGen.prioritizedTownNPCType] || NPCID.Sets.IsTownPet[j])
					{
						WorldGen.prioritizedTownNPCType = j;
						return true;
					}
				}
			}
			if (num2 != -1)
			{
				WorldGen.prioritizedTownNPCType = num2;
				return true;
			}
			return false;
		}

		// Token: 0x06000E0E RID: 3598 RVA: 0x003F9E98 File Offset: 0x003F8098
		public static bool CheckSpecialTownNPCSpawningConditions(int type)
		{
			if (type != 160)
			{
				return true;
			}
			if (!NPC.unlockedTruffleSpawn && (double)WorldGen.roomY2 > Main.worldSurface)
			{
				return false;
			}
			int num;
			int num2;
			int num3;
			int num4;
			WorldGen.Housing_GetTestedRoomBounds(out num, out num2, out num3, out num4);
			int num5 = 0;
			for (int i = num + 1; i < num2; i++)
			{
				for (int j = num3 + 2; j < num4 + 2; j++)
				{
					Tile tile = Main.tile[i, j];
					if (tile.active() && (tile.type == 70 || tile.type == 71 || tile.type == 72 || tile.type == 528))
					{
						num5++;
					}
				}
			}
			return num5 >= SceneMetrics.MushroomTileThreshold;
		}

		// Token: 0x06000E0F RID: 3599 RVA: 0x003F9F58 File Offset: 0x003F8158
		public static void UnspawnTravelNPC()
		{
			int num = -1;
			for (int i = 0; i < 200; i++)
			{
				if (Main.npc[i].active && Main.npc[i].type == 368)
				{
					num = i;
					break;
				}
			}
			if (num < 0)
			{
				return;
			}
			int num2 = (int)(Main.npc[num].Center.X / 16f);
			int num3 = (int)(Main.npc[num].Center.Y / 16f);
			bool flag = true;
			Rectangle value = new Rectangle(num2 * 16 + 8 - NPC.sWidth / 2 - NPC.safeRangeX, num3 * 16 + 8 - NPC.sHeight / 2 - NPC.safeRangeY, NPC.sWidth + NPC.safeRangeX * 2, NPC.sHeight + NPC.safeRangeY * 2);
			for (int j = 0; j < 255; j++)
			{
				if (Main.player[j].active)
				{
					Rectangle rectangle = new Rectangle((int)Main.player[j].position.X, (int)Main.player[j].position.Y, Main.player[j].width, Main.player[j].height);
					if (rectangle.Intersects(value))
					{
						flag = false;
						break;
					}
				}
			}
			if (flag)
			{
				string fullName = Main.npc[num].FullName;
				if (Main.netMode == 0)
				{
					Main.NewText(Lang.misc[35].Format(fullName), 50, 125, byte.MaxValue);
				}
				else if (Main.netMode == 2)
				{
					ChatHelper.BroadcastChatMessage(NetworkText.FromKey(Lang.misc[35].Key, new object[]
					{
						Main.npc[num].GetFullNetName()
					}), new Color(50, 125, 255), -1);
				}
				Main.npc[num].active = false;
				Main.npc[num].netSkip = -1;
				Main.npc[num].life = 0;
				NetMessage.SendData(23, -1, -1, null, num, 0f, 0f, 0f, 0, 0, 0);
			}
		}

		// Token: 0x06000E10 RID: 3600 RVA: 0x003FA160 File Offset: 0x003F8360
		public static void SpawnTravelNPC()
		{
			if (Main.eclipse || !Main.dayTime)
			{
				return;
			}
			if (Main.invasionType > 0 && Main.invasionDelay == 0 && Main.invasionSize > 0)
			{
				return;
			}
			for (int i = 0; i < 200; i++)
			{
				if (Main.npc[i].active && Main.npc[i].type == 368)
				{
					return;
				}
			}
			Chest.SetupTravelShop();
			NetMessage.SendTravelShop(-1);
			int[] array = new int[200];
			int num = 0;
			for (int j = 0; j < 200; j++)
			{
				if (Main.npc[j].active && Main.npc[j].townNPC && Main.npc[j].type != 37 && !Main.npc[j].homeless)
				{
					array[num] = j;
					num++;
				}
			}
			if (num == 0)
			{
				return;
			}
			int num2 = array[Main.rand.Next(num)];
			WorldGen.bestX = Main.npc[num2].homeTileX;
			WorldGen.bestY = Main.npc[num2].homeTileY;
			int minValue = WorldGen.bestX;
			int num3 = WorldGen.bestX;
			int num4 = WorldGen.bestY;
			int num5 = WorldGen.bestX;
			while (num5 > WorldGen.bestX - 10 && (WorldGen.SolidTile(num5, num4, false) || Main.tileSolidTop[(int)Main.tile[num5, num4].type]) && (!Main.tile[num5, num4 - 1].active() || !Main.tileSolid[(int)Main.tile[num5, num4 - 1].type] || Main.tileSolidTop[(int)Main.tile[num5, num4 - 1].type]) && (!Main.tile[num5, num4 - 2].active() || !Main.tileSolid[(int)Main.tile[num5, num4 - 2].type] || Main.tileSolidTop[(int)Main.tile[num5, num4 - 2].type]) && (!Main.tile[num5, num4 - 3].active() || !Main.tileSolid[(int)Main.tile[num5, num4 - 3].type] || Main.tileSolidTop[(int)Main.tile[num5, num4 - 3].type]))
			{
				minValue = num5;
				num5--;
			}
			int num6 = WorldGen.bestX;
			while (num6 < WorldGen.bestX + 10 && (WorldGen.SolidTile(num6, num4, false) || Main.tileSolidTop[(int)Main.tile[num6, num4].type]) && (!Main.tile[num6, num4 - 1].active() || !Main.tileSolid[(int)Main.tile[num6, num4 - 1].type] || Main.tileSolidTop[(int)Main.tile[num6, num4 - 1].type]) && (!Main.tile[num6, num4 - 2].active() || !Main.tileSolid[(int)Main.tile[num6, num4 - 2].type] || Main.tileSolidTop[(int)Main.tile[num6, num4 - 2].type]) && (!Main.tile[num6, num4 - 3].active() || !Main.tileSolid[(int)Main.tile[num6, num4 - 3].type] || Main.tileSolidTop[(int)Main.tile[num6, num4 - 3].type]))
			{
				num3 = num6;
				num6++;
			}
			for (int k = 0; k < 30; k++)
			{
				int num7 = Main.rand.Next(minValue, num3 + 1);
				if (k < 20)
				{
					if (num7 < WorldGen.bestX - 1 || num7 > WorldGen.bestX + 1)
					{
						WorldGen.bestX = num7;
						break;
					}
				}
				else if (num7 != WorldGen.bestX)
				{
					WorldGen.bestX = num7;
					break;
				}
			}
			int num8 = WorldGen.bestX;
			int num9 = WorldGen.bestY;
			bool flag = false;
			if (!flag && (double)num9 <= Main.worldSurface)
			{
				for (int l = 20; l < 500; l++)
				{
					for (int m = 0; m < 2; m++)
					{
						if (m == 0)
						{
							num8 = WorldGen.bestX + l * 2;
						}
						else
						{
							num8 = WorldGen.bestX - l * 2;
						}
						if (num8 > 10 && num8 < Main.maxTilesX - 10)
						{
							int num10 = WorldGen.bestY - l;
							double num11 = (double)(WorldGen.bestY + l);
							if (num10 < 10)
							{
								num10 = 10;
							}
							if (num11 > Main.worldSurface)
							{
								num11 = Main.worldSurface;
							}
							int num12 = num10;
							while ((double)num12 < num11)
							{
								num9 = num12;
								if (Main.tile[num8, num9].nactive() && Main.tileSolid[(int)Main.tile[num8, num9].type])
								{
									if (Main.tile[num8, num9 - 3].liquid == 0 && Main.tile[num8, num9 - 2].liquid == 0 && Main.tile[num8, num9 - 1].liquid == 0 && !Collision.SolidTiles(num8 - 1, num8 + 1, num9 - 3, num9 - 1))
									{
										flag = true;
										Rectangle value = new Rectangle(num8 * 16 + 8 - NPC.sWidth / 2 - NPC.safeRangeX, num9 * 16 + 8 - NPC.sHeight / 2 - NPC.safeRangeY, NPC.sWidth + NPC.safeRangeX * 2, NPC.sHeight + NPC.safeRangeY * 2);
										for (int n = 0; n < 255; n++)
										{
											if (Main.player[n].active)
											{
												Rectangle rectangle = new Rectangle((int)Main.player[n].position.X, (int)Main.player[n].position.Y, Main.player[n].width, Main.player[n].height);
												if (rectangle.Intersects(value))
												{
													flag = false;
													break;
												}
											}
										}
										break;
									}
									break;
								}
								else
								{
									num12++;
								}
							}
						}
						if (flag)
						{
							break;
						}
					}
					if (flag)
					{
						break;
					}
				}
			}
			int num13 = NPC.NewNPC(NPC.GetSpawnSourceForTownSpawn(), num8 * 16, num9 * 16, 368, 1, 0f, 0f, 0f, 0f, 255);
			Main.npc[num13].homeTileX = WorldGen.bestX;
			Main.npc[num13].homeTileY = WorldGen.bestY;
			Main.npc[num13].homeless = true;
			if (num8 < WorldGen.bestX)
			{
				Main.npc[num13].direction = 1;
			}
			else if (num8 > WorldGen.bestX)
			{
				Main.npc[num13].direction = -1;
			}
			Main.npc[num13].netUpdate = true;
			string fullName = Main.npc[num13].FullName;
			if (Main.netMode == 0)
			{
				Main.NewText(Language.GetTextValue("Announcement.HasArrived", fullName), 50, 125, byte.MaxValue);
				return;
			}
			if (Main.netMode == 2)
			{
				ChatHelper.BroadcastChatMessage(NetworkText.FromKey("Announcement.HasArrived", new object[]
				{
					Main.npc[num13].GetFullNetName()
				}), new Color(50, 125, 255), -1);
			}
		}

		// Token: 0x06000E11 RID: 3601 RVA: 0x003FA8C4 File Offset: 0x003F8AC4
		public static TownNPCSpawnResult SpawnTownNPC(int x, int y)
		{
			if (Main.wallHouse[(int)Main.tile[x, y].wall])
			{
				WorldGen.canSpawn = true;
			}
			if (!WorldGen.canSpawn)
			{
				return TownNPCSpawnResult.Blocked;
			}
			if (!WorldGen.StartRoomCheck(x, y))
			{
				return TownNPCSpawnResult.Blocked;
			}
			if (!WorldGen.RoomNeeds(WorldGen.prioritizedTownNPCType))
			{
				return TownNPCSpawnResult.Blocked;
			}
			int num = WorldGen.FindAHomelessNPC();
			int type = WorldGen.prioritizedTownNPCType;
			if (num != -1)
			{
				type = Main.npc[num].type;
			}
			Point zero = Point.Zero;
			bool flag = NPCID.Sets.IsTownPet[type] && WorldGen.TownManager.HasRoom(type, out zero);
			if ((WorldGen.roomHasStinkbug || WorldGen.roomHasEchoStinkbug) && !flag)
			{
				return TownNPCSpawnResult.Blocked;
			}
			WorldGen.ScoreRoom(-1, type);
			if (WorldGen.hiScore <= 0)
			{
				return TownNPCSpawnResult.Blocked;
			}
			bool flag2 = true;
			if (!WorldGen.IsThereASpawnablePrioritizedTownNPC(WorldGen.bestX, WorldGen.bestY, ref flag2))
			{
				return TownNPCSpawnResult.Blocked;
			}
			type = WorldGen.prioritizedTownNPCType;
			if (num != -1)
			{
				Main.townNPCCanSpawn[WorldGen.prioritizedTownNPCType] = false;
				Main.npc[num].homeTileX = WorldGen.bestX;
				Main.npc[num].homeTileY = WorldGen.bestY;
				Main.npc[num].homeless = false;
				AchievementsHelper.NotifyProgressionEvent(8);
				WorldGen.prioritizedTownNPCType = 0;
				return TownNPCSpawnResult.RelocatedHomeless;
			}
			if (flag2 && num == -1)
			{
				Point point;
				if (WorldGen.TownManager.HasRoom(type, out point) && !WorldGen.currentlyTryingToUseAlternateHousingSpot)
				{
					int num2 = WorldGen.bestX;
					int num3 = WorldGen.bestY;
					WorldGen.currentlyTryingToUseAlternateHousingSpot = true;
					TownNPCSpawnResult townNPCSpawnResult = WorldGen.SpawnTownNPC(point.X, point.Y - 2);
					WorldGen.currentlyTryingToUseAlternateHousingSpot = false;
					WorldGen.bestX = num2;
					WorldGen.bestY = num3;
					if (townNPCSpawnResult == TownNPCSpawnResult.Successful)
					{
						return townNPCSpawnResult;
					}
				}
				int num4 = WorldGen.bestX;
				int num5 = WorldGen.bestY;
				int npcTypeToSpawn = WorldGen.prioritizedTownNPCType;
				if (WorldGen.IsRoomConsideredAlreadyOccupied(num4, num5, npcTypeToSpawn))
				{
					return TownNPCSpawnResult.BlockedInfiHousing;
				}
				bool flag3 = false;
				if (!flag3)
				{
					flag3 = true;
					Rectangle value = new Rectangle(num4 * 16 + 8 - NPC.sWidth / 2 - NPC.safeRangeX, num5 * 16 + 8 - NPC.sHeight / 2 - NPC.safeRangeY, NPC.sWidth + NPC.safeRangeX * 2, NPC.sHeight + NPC.safeRangeY * 2);
					for (int i = 0; i < 255; i++)
					{
						if (Main.player[i].active)
						{
							Rectangle rectangle = new Rectangle((int)Main.player[i].position.X, (int)Main.player[i].position.Y, Main.player[i].width, Main.player[i].height);
							if (rectangle.Intersects(value))
							{
								flag3 = false;
								break;
							}
						}
					}
				}
				if (!flag3 && (double)num5 <= Main.worldSurface)
				{
					for (int j = 1; j < 500; j++)
					{
						for (int k = 0; k < 2; k++)
						{
							if (k == 0)
							{
								num4 = WorldGen.bestX + j;
							}
							else
							{
								num4 = WorldGen.bestX - j;
							}
							if (num4 > 10 && num4 < Main.maxTilesX - 10)
							{
								int num6 = WorldGen.bestY - j;
								double num7 = (double)(WorldGen.bestY + j);
								if (num6 < 10)
								{
									num6 = 10;
								}
								if (num7 > Main.worldSurface)
								{
									num7 = Main.worldSurface;
								}
								int num8 = num6;
								while ((double)num8 < num7)
								{
									num5 = num8;
									if (Main.tile[num4, num5].nactive() && Main.tileSolid[(int)Main.tile[num4, num5].type])
									{
										if (!Collision.SolidTiles(num4 - 1, num4 + 1, num5 - 3, num5 - 1))
										{
											flag3 = true;
											Rectangle value2 = new Rectangle(num4 * 16 + 8 - NPC.sWidth / 2 - NPC.safeRangeX, num5 * 16 + 8 - NPC.sHeight / 2 - NPC.safeRangeY, NPC.sWidth + NPC.safeRangeX * 2, NPC.sHeight + NPC.safeRangeY * 2);
											for (int l = 0; l < 255; l++)
											{
												if (Main.player[l].active)
												{
													Rectangle rectangle2 = new Rectangle((int)Main.player[l].position.X, (int)Main.player[l].position.Y, Main.player[l].width, Main.player[l].height);
													if (rectangle2.Intersects(value2))
													{
														flag3 = false;
														break;
													}
												}
											}
											break;
										}
										break;
									}
									else
									{
										num8++;
									}
								}
							}
							if (flag3)
							{
								break;
							}
						}
						if (flag3)
						{
							break;
						}
					}
				}
				int num9 = NPC.NewNPC(NPC.GetSpawnSourceForTownSpawn(), num4 * 16, num5 * 16, type, 1, 0f, 0f, 0f, 0f, 255);
				Main.townNPCCanSpawn[type] = false;
				Main.npc[num9].homeTileX = WorldGen.bestX;
				Main.npc[num9].homeTileY = WorldGen.bestY;
				if (num4 < WorldGen.bestX)
				{
					Main.npc[num9].direction = 1;
				}
				else if (num4 > WorldGen.bestX)
				{
					Main.npc[num9].direction = -1;
				}
				Main.npc[num9].netUpdate = true;
				string fullName = Main.npc[num9].FullName;
				if (Main.netMode == 0)
				{
					Main.NewText(Language.GetTextValue("Announcement.HasArrived", fullName), 50, 125, byte.MaxValue);
				}
				else if (Main.netMode == 2)
				{
					ChatHelper.BroadcastChatMessage(NetworkText.FromKey("Announcement.HasArrived", new object[]
					{
						Main.npc[num9].GetFullNetName()
					}), new Color(50, 125, 255), -1);
				}
				AchievementsHelper.NotifyProgressionEvent(8);
				int type2 = Main.npc[num9].type;
				if (type2 <= 160)
				{
					switch (type2)
					{
					case 17:
						NPC.unlockedMerchantSpawn = true;
						break;
					case 18:
						NPC.unlockedNurseSpawn = true;
						break;
					case 19:
						NPC.unlockedArmsDealerSpawn = true;
						break;
					default:
						if (type2 != 38)
						{
							if (type2 == 160)
							{
								AchievementsHelper.NotifyProgressionEvent(18);
								NPC.unlockedTruffleSpawn = true;
								NetMessage.SendData(7, -1, -1, null, 0, 0f, 0f, 0f, 0, 0, 0);
							}
						}
						else
						{
							NPC.unlockedDemolitionistSpawn = true;
						}
						break;
					}
				}
				else if (type2 <= 208)
				{
					if (type2 != 207)
					{
						if (type2 == 208)
						{
							NPC.unlockedPartyGirlSpawn = true;
						}
					}
					else
					{
						NPC.unlockedDyeTraderSpawn = true;
					}
				}
				else if (type2 != 663)
				{
					if (type2 == 678)
					{
						NPC.unlockedSlimeGreenSpawn = true;
					}
				}
				else
				{
					NPC.unlockedPrincessSpawn = true;
				}
				WorldGen.CheckAchievement_RealEstateAndTownSlimes();
				WorldGen.prioritizedTownNPCType = 0;
			}
			return TownNPCSpawnResult.Successful;
		}

		// Token: 0x06000E12 RID: 3602 RVA: 0x003FAF1C File Offset: 0x003F911C
		private static int FindAHomelessNPC()
		{
			int result = -1;
			for (int i = 0; i < 200; i++)
			{
				if (Main.npc[i].active && Main.npc[i].homeless && Main.npc[i].type == WorldGen.prioritizedTownNPCType && WorldGen.CheckSpecialTownNPCSpawningConditions(Main.npc[i].type))
				{
					result = i;
					break;
				}
			}
			return result;
		}

		// Token: 0x06000E13 RID: 3603 RVA: 0x003FAF84 File Offset: 0x003F9184
		private static bool IsRoomConsideredAlreadyOccupied(int spawnTileX, int spawnTileY, int npcTypeToSpawn)
		{
			bool result = false;
			for (int i = 0; i < 200; i++)
			{
				NPC npc = Main.npc[i];
				if (npc.active && npc.townNPC && !npc.homeless && npc.homeTileX == spawnTileX && npc.homeTileY == spawnTileY && !WorldGen.TownManager.CanNPCsLiveWithEachOther(npcTypeToSpawn, npc))
				{
					result = true;
					break;
				}
			}
			return result;
		}

		// Token: 0x06000E14 RID: 3604 RVA: 0x003FAFE8 File Offset: 0x003F91E8
		public static void CheckAchievement_RealEstateAndTownSlimes()
		{
			bool[] array = new bool[(int)NPCID.Count];
			for (int i = 0; i < 200; i++)
			{
				if (Main.npc[i].active && Main.npc[i].type >= 0 && Main.npc[i].type < (int)NPCID.Count)
				{
					array[Main.npc[i].type] = true;
				}
			}
			if (array[38] && array[17] && array[107] && array[19] && array[22] && array[124] && array[228] && array[178] && array[18] && array[229] && array[209] && array[54] && array[108] && array[160] && array[20] && array[369] && array[207] && array[227] && array[208] && array[441] && array[353] && array[550] && array[588] && array[633] && array[663])
			{
				AchievementsHelper.NotifyProgressionEvent(17);
			}
			if (array[670] && array[678] && array[679] && array[680] && array[681] && array[682] && array[683] && array[684])
			{
				AchievementsHelper.NotifyProgressionEvent(26);
			}
		}

		// Token: 0x06000E15 RID: 3605 RVA: 0x003FB188 File Offset: 0x003F9388
		public static bool RoomNeeds(int npcType)
		{
			WorldGen.roomChair = false;
			WorldGen.roomDoor = false;
			WorldGen.roomTable = false;
			WorldGen.roomTorch = false;
			for (int i = 0; i < TileID.Sets.RoomNeeds.CountsAsChair.Length; i++)
			{
				if (WorldGen.houseTile[TileID.Sets.RoomNeeds.CountsAsChair[i]])
				{
					WorldGen.roomChair = true;
					break;
				}
			}
			for (int j = 0; j < TileID.Sets.RoomNeeds.CountsAsTable.Length; j++)
			{
				if (WorldGen.houseTile[TileID.Sets.RoomNeeds.CountsAsTable[j]])
				{
					WorldGen.roomTable = true;
					break;
				}
			}
			for (int k = 0; k < TileID.Sets.RoomNeeds.CountsAsTorch.Length; k++)
			{
				if (WorldGen.houseTile[TileID.Sets.RoomNeeds.CountsAsTorch[k]])
				{
					WorldGen.roomTorch = true;
					break;
				}
			}
			for (int l = 0; l < TileID.Sets.RoomNeeds.CountsAsDoor.Length; l++)
			{
				if (WorldGen.houseTile[TileID.Sets.RoomNeeds.CountsAsDoor[l]])
				{
					WorldGen.roomDoor = true;
					break;
				}
			}
			if (WorldGen.roomChair && WorldGen.roomTable && WorldGen.roomDoor && WorldGen.roomTorch)
			{
				WorldGen.canSpawn = true;
			}
			else
			{
				WorldGen.canSpawn = false;
			}
			return WorldGen.canSpawn;
		}

		// Token: 0x06000E16 RID: 3606 RVA: 0x003FB280 File Offset: 0x003F9480
		public static void QuickFindHome(int npc)
		{
			bool flag = Main.tileSolid[379];
			Main.tileSolid[379] = true;
			if (Main.npc[npc].homeTileX > 10 && Main.npc[npc].homeTileY > 10 && Main.npc[npc].homeTileX < Main.maxTilesX - 10 && Main.npc[npc].homeTileY < Main.maxTilesY)
			{
				WorldGen.canSpawn = false;
				WorldGen.StartRoomCheck(Main.npc[npc].homeTileX, Main.npc[npc].homeTileY - 1);
				if (!WorldGen.canSpawn)
				{
					for (int i = Main.npc[npc].homeTileX - 1; i < Main.npc[npc].homeTileX + 2; i++)
					{
						int num = Main.npc[npc].homeTileY - 1;
						while (num < Main.npc[npc].homeTileY + 2 && !WorldGen.StartRoomCheck(i, num))
						{
							num++;
						}
					}
				}
				if (!WorldGen.canSpawn)
				{
					int num2 = 10;
					for (int j = Main.npc[npc].homeTileX - num2; j <= Main.npc[npc].homeTileX + num2; j += 2)
					{
						int num3 = Main.npc[npc].homeTileY - num2;
						while (num3 <= Main.npc[npc].homeTileY + num2 && !WorldGen.StartRoomCheck(j, num3))
						{
							num3 += 2;
						}
					}
				}
				if (WorldGen.canSpawn)
				{
					WorldGen.RoomNeeds(Main.npc[npc].type);
					if (WorldGen.canSpawn)
					{
						WorldGen.ScoreRoom(npc, Main.npc[npc].type);
					}
					if (WorldGen.canSpawn && WorldGen.hiScore > 0)
					{
						WorldGen.canSpawn = WorldGen.IsRoomConsideredOccupiedForNPCIndex(npc);
					}
					if (WorldGen.canSpawn && WorldGen.hiScore > 0)
					{
						Main.npc[npc].homeTileX = WorldGen.bestX;
						Main.npc[npc].homeTileY = WorldGen.bestY;
						Main.npc[npc].homeless = false;
						AchievementsHelper.NotifyProgressionEvent(8);
						WorldGen.canSpawn = false;
					}
					else
					{
						Main.npc[npc].homeless = true;
					}
				}
				else
				{
					Main.npc[npc].homeless = true;
				}
			}
			Main.tileSolid[379] = flag;
		}

		// Token: 0x06000E17 RID: 3607 RVA: 0x003FB4A8 File Offset: 0x003F96A8
		private static bool IsRoomConsideredOccupiedForNPCIndex(int npc)
		{
			bool result = true;
			for (int i = 0; i < 200; i++)
			{
				if (i != npc)
				{
					NPC npc2 = Main.npc[i];
					if (npc2.active && npc2.townNPC && !npc2.homeless && npc2.homeTileX == WorldGen.bestX && npc2.homeTileY == WorldGen.bestY && !WorldGen.TownManager.CanNPCsLiveWithEachOther(Main.npc[npc], npc2))
					{
						result = false;
						break;
					}
				}
			}
			return result;
		}

		// Token: 0x06000E18 RID: 3608 RVA: 0x003FB520 File Offset: 0x003F9720
		private static bool ScoreRoom_IsThisRoomOccupiedBySomeone(int ignoreNPC = -1, int npcTypeAsking = -1)
		{
			for (int i = 0; i < 200; i++)
			{
				if (Main.npc[i].active && Main.npc[i].townNPC && ignoreNPC != i && !Main.npc[i].homeless)
				{
					for (int j = 0; j < WorldGen.numRoomTiles; j++)
					{
						if (Main.npc[i].homeTileX == WorldGen.roomX[j] && Main.npc[i].homeTileY == WorldGen.roomY[j])
						{
							bool flag = false;
							for (int k = 0; k < WorldGen.numRoomTiles; k++)
							{
								if (Main.npc[i].homeTileX == WorldGen.roomX[k] && Main.npc[i].homeTileY - 1 == WorldGen.roomY[k])
								{
									if (!WorldGen.TownManager.CanNPCsLiveWithEachOther(npcTypeAsking, Main.npc[i]))
									{
										flag = true;
										break;
									}
									WorldGen.sharedRoomX = Main.npc[i].homeTileX;
								}
							}
							if (flag)
							{
								return true;
							}
						}
					}
				}
			}
			return false;
		}

		// Token: 0x06000E19 RID: 3609 RVA: 0x003FB630 File Offset: 0x003F9830
		public static void CountTileTypesInArea(int[] tileTypeCounts, int startX, int endX, int startY, int endY)
		{
			for (int i = startX; i <= endX; i++)
			{
				for (int j = startY; j <= endY; j++)
				{
					if (Main.tile[i, j].active())
					{
						tileTypeCounts[(int)Main.tile[i, j].type]++;
					}
				}
			}
		}

		// Token: 0x06000E1A RID: 3610 RVA: 0x003FB688 File Offset: 0x003F9888
		public static int GetTileTypeCountByCategory(int[] tileTypeCounts, TileScanGroup group)
		{
			switch (group)
			{
			case TileScanGroup.None:
				return 0;
			case TileScanGroup.Corruption:
				return tileTypeCounts[23] + tileTypeCounts[24] + tileTypeCounts[25] + tileTypeCounts[32] + tileTypeCounts[112] + tileTypeCounts[163] + tileTypeCounts[400] + tileTypeCounts[398] + -5 * tileTypeCounts[27];
			case TileScanGroup.Crimson:
				return tileTypeCounts[199] + tileTypeCounts[203] + tileTypeCounts[200] + tileTypeCounts[401] + tileTypeCounts[399] + tileTypeCounts[234] + tileTypeCounts[352] - 5 * tileTypeCounts[27];
			case TileScanGroup.Hallow:
				return tileTypeCounts[109] + tileTypeCounts[110] + tileTypeCounts[113] + tileTypeCounts[117] + tileTypeCounts[116] + tileTypeCounts[164] + tileTypeCounts[403] + tileTypeCounts[402];
			case TileScanGroup.TotalGoodEvil:
			{
				int tileTypeCountByCategory = WorldGen.GetTileTypeCountByCategory(tileTypeCounts, TileScanGroup.Hallow);
				int tileTypeCountByCategory2 = WorldGen.GetTileTypeCountByCategory(tileTypeCounts, TileScanGroup.Corruption);
				int tileTypeCountByCategory3 = WorldGen.GetTileTypeCountByCategory(tileTypeCounts, TileScanGroup.Crimson);
				int num = 5 * tileTypeCounts[27];
				int num2 = tileTypeCountByCategory2 + tileTypeCountByCategory3 + num;
				return tileTypeCountByCategory - num2;
			}
			default:
				return 0;
			}
		}

		// Token: 0x06000E1B RID: 3611 RVA: 0x003FB788 File Offset: 0x003F9988
		public static void ScoreRoom(int ignoreNPC = -1, int npcTypeAskingToScoreRoom = -1)
		{
			WorldGen.roomOccupied = false;
			WorldGen.roomEvil = false;
			WorldGen.sharedRoomX = -1;
			if (WorldGen.ScoreRoom_IsThisRoomOccupiedBySomeone(ignoreNPC, npcTypeAskingToScoreRoom))
			{
				WorldGen.roomOccupied = true;
				WorldGen.hiScore = -1;
				return;
			}
			WorldGen.hiScore = 0;
			int num = 50;
			int num2;
			int num3;
			int num4;
			int num5;
			WorldGen.Housing_GetTestedRoomBounds(out num2, out num3, out num4, out num5);
			int[] tileTypeCounts = new int[(int)TileID.Count];
			WorldGen.CountTileTypesInArea(tileTypeCounts, num2 + 1, num3 - 1, num4 + 2, num5 + 1);
			int num6 = -WorldGen.GetTileTypeCountByCategory(tileTypeCounts, TileScanGroup.TotalGoodEvil);
			if (num6 < 50)
			{
				num6 = 0;
			}
			num -= num6;
			if (num6 > 0)
			{
				WorldGen.roomEvil = true;
			}
			if (num <= -250)
			{
				WorldGen.hiScore = num;
				return;
			}
			num2 = WorldGen.roomX1;
			num3 = WorldGen.roomX2;
			num4 = WorldGen.roomY1;
			num5 = WorldGen.roomY2;
			for (int i = num2 + 1; i < num3; i++)
			{
				for (int j = num4 + 2; j < num5 + 2; j++)
				{
					if (Main.tile[i, j].nactive() && WorldGen.ScoreRoom_CanBeHomeSpot(i, j))
					{
						int num7 = num;
						if (Main.tileSolid[(int)Main.tile[i, j].type] && !Main.tileSolidTop[(int)Main.tile[i, j].type] && !Collision.SolidTiles(i - 1, i + 1, j - 3, j - 1) && Main.tile[i - 1, j].nactive() && Main.tileSolid[(int)Main.tile[i - 1, j].type] && Main.tile[i + 1, j].nactive() && Main.tileSolid[(int)Main.tile[i + 1, j].type])
						{
							int num8 = 0;
							int num9 = 0;
							for (int k = i - 2; k < i + 3; k++)
							{
								for (int l = j - 4; l < j; l++)
								{
									Tile tile = Main.tile[k, l];
									if (tile.nactive() && !TileID.Sets.IgnoredInHouseScore[(int)tile.type] && (tile.type != 11 || WorldGen.IsOpenDoorAnchorFrame(k, l)))
									{
										if (k == i)
										{
											num8++;
										}
										else if (TileID.Sets.BasicChest[(int)tile.type])
										{
											num9++;
										}
										else if (tile.type == 10 || tile.type == 388)
										{
											num7 -= 20;
										}
										else if (WorldGen.IsOpenDoorAnchorFrame(k, l) || tile.type == 389)
										{
											num7 -= 20;
										}
										else if (Main.tileSolid[(int)tile.type])
										{
											num7 -= 5;
										}
										else
										{
											num7 += 5;
										}
									}
								}
							}
							if (WorldGen.sharedRoomX >= 0 && num7 >= 1 && Math.Abs(WorldGen.sharedRoomX - i) < 3)
							{
								num7 = 1;
							}
							if (num7 > 0 && num9 > 0)
							{
								num7 -= 30 * num9;
								if (num7 < 1)
								{
									num7 = 1;
								}
							}
							if (num7 > 0 && num8 > 0)
							{
								num7 -= 15 * num8;
								if (num7 <= 0)
								{
									num7 = 0;
								}
							}
							if (num7 > WorldGen.hiScore)
							{
								bool flag = WorldGen.Housing_CheckIfInRoom(i, j);
								bool[] array = new bool[3];
								for (int m = 1; m <= 3; m++)
								{
									if (!Main.tile[i, j - m].active() || !Main.tileSolid[(int)Main.tile[i, j - m].type])
									{
										array[m - 1] = true;
									}
									if (!WorldGen.Housing_CheckIfInRoom(i, j - m))
									{
										array[m - 1] = false;
									}
								}
								bool[] array2 = array;
								for (int n = 0; n < array2.Length; n++)
								{
									if (!array2[n])
									{
										flag = false;
										break;
									}
								}
								if (flag && !WorldGen.Housing_CheckIfIsCeiling(i, j))
								{
									WorldGen.hiScore = num7;
									WorldGen.bestX = i;
									WorldGen.bestY = j;
								}
							}
						}
					}
				}
			}
		}

		// Token: 0x06000E1C RID: 3612 RVA: 0x003FBB78 File Offset: 0x003F9D78
		public static void Housing_GetTestedRoomBounds(out int startX, out int endX, out int startY, out int endY)
		{
			int num = 40;
			int num2 = 5;
			int num3 = 3;
			startX = WorldGen.roomX1 - num2 - 1 - num;
			endX = WorldGen.roomX2 + num2 + 1 + num;
			startY = WorldGen.roomY1 - num3 - 1 - num;
			endY = WorldGen.roomY2 + num3 + 1 + num;
			if (startX < 5)
			{
				startX = 5;
			}
			if (endX >= Main.maxTilesX - 5)
			{
				endX = Main.maxTilesX - 6;
			}
			if (startY < 5)
			{
				startY = 5;
			}
			if (endY >= Main.maxTilesY - 5)
			{
				endY = Main.maxTilesY - 6;
			}
		}

		// Token: 0x06000E1D RID: 3613 RVA: 0x003FBBF8 File Offset: 0x003F9DF8
		private static bool ScoreRoom_CanBeHomeSpot(int x, int y)
		{
			Tile tile = Main.tile[x, y];
			if (tile.active())
			{
				ushort type = tile.type;
				if (type == 379)
				{
					return false;
				}
			}
			return true;
		}

		// Token: 0x06000E1E RID: 3614 RVA: 0x003FBC2C File Offset: 0x003F9E2C
		private static bool Housing_CheckIfIsCeiling(int i, int j)
		{
			bool result = false;
			int k = 0;
			while (k < WorldGen.roomCeilingsCount)
			{
				if (WorldGen.roomCeilingX[k] == i)
				{
					if (WorldGen.roomCeilingY[k] == j)
					{
						result = true;
						break;
					}
					break;
				}
				else
				{
					k++;
				}
			}
			return result;
		}

		// Token: 0x06000E1F RID: 3615 RVA: 0x003FBC64 File Offset: 0x003F9E64
		private static bool Housing_CheckIfInRoom(int i, int j)
		{
			bool result = false;
			for (int k = 0; k < WorldGen.numRoomTiles; k++)
			{
				if (WorldGen.roomX[k] == i && WorldGen.roomY[k] == j)
				{
					result = true;
					break;
				}
			}
			return result;
		}

		// Token: 0x06000E20 RID: 3616 RVA: 0x003FBC9C File Offset: 0x003F9E9C
		public static bool StartRoomCheck(int x, int y)
		{
			WorldGen.roomHasStinkbug = false;
			WorldGen.roomHasEchoStinkbug = false;
			WorldGen.roomX1 = x;
			WorldGen.roomX2 = x;
			WorldGen.roomY1 = y;
			WorldGen.roomY2 = y;
			WorldGen.numRoomTiles = 0;
			WorldGen.roomCeilingsCount = 0;
			for (int i = 0; i < (int)TileID.Count; i++)
			{
				WorldGen.houseTile[i] = false;
			}
			WorldGen.canSpawn = true;
			if (Main.tile[x, y].nactive() && Main.tileSolid[(int)Main.tile[x, y].type])
			{
				WorldGen.roomCheckFailureReason = TownNPCRoomCheckFailureReason.RoomCheckStartedInASolidTile;
				WorldGen.canSpawn = false;
				return false;
			}
			WorldGen.roomCheckFailureReason = TownNPCRoomCheckFailureReason.None;
			WorldGen.CheckRoom(x, y);
			if (!WorldGen.canSpawn)
			{
				return false;
			}
			if (WorldGen.numRoomTiles < 60)
			{
				WorldGen.roomCheckFailureReason = TownNPCRoomCheckFailureReason.RoomIsTooSmall;
				WorldGen.canSpawn = false;
				return false;
			}
			return WorldGen.canSpawn;
		}

		// Token: 0x06000E21 RID: 3617 RVA: 0x003FBD68 File Offset: 0x003F9F68
		public static void CheckRoom(int x, int y)
		{
			if (!WorldGen.canSpawn)
			{
				return;
			}
			if (x < 10 || y < 10 || x >= Main.maxTilesX - 10 || y >= WorldGen.lastMaxTilesY - 10)
			{
				WorldGen.roomCheckFailureReason = TownNPCRoomCheckFailureReason.TooCloseToWorldEdge;
				WorldGen.canSpawn = false;
				return;
			}
			for (int i = 0; i < WorldGen.numRoomTiles; i++)
			{
				if (WorldGen.roomX[i] == x && WorldGen.roomY[i] == y)
				{
					return;
				}
			}
			WorldGen.roomX[WorldGen.numRoomTiles] = x;
			WorldGen.roomY[WorldGen.numRoomTiles] = y;
			bool flag = false;
			int j = 0;
			while (j < WorldGen.roomCeilingsCount)
			{
				if (WorldGen.roomCeilingX[j] == x)
				{
					flag = true;
					if (WorldGen.roomCeilingY[j] > y)
					{
						WorldGen.roomCeilingY[j] = y;
						break;
					}
					break;
				}
				else
				{
					j++;
				}
			}
			if (!flag)
			{
				WorldGen.roomCeilingX[WorldGen.roomCeilingsCount] = x;
				WorldGen.roomCeilingY[WorldGen.roomCeilingsCount] = y;
				WorldGen.roomCeilingsCount++;
			}
			WorldGen.numRoomTiles++;
			if (WorldGen.numRoomTiles >= WorldGen.maxRoomTiles)
			{
				WorldGen.roomCheckFailureReason = TownNPCRoomCheckFailureReason.RoomIsTooBig;
				WorldGen.canSpawn = false;
				return;
			}
			if (Main.tile[x, y].nactive())
			{
				WorldGen.houseTile[(int)Main.tile[x, y].type] = true;
				if (Main.tileSolid[(int)Main.tile[x, y].type])
				{
					return;
				}
				if (Main.tile[x, y].type == 11 && (Main.tile[x, y].frameX == 0 || Main.tile[x, y].frameX == 54 || Main.tile[x, y].frameX == 72 || Main.tile[x, y].frameX == 126))
				{
					return;
				}
				if (Main.tile[x, y].type == 389)
				{
					return;
				}
				if (Main.tile[x, y].type == 386 && ((Main.tile[x, y].frameX < 36 && Main.tile[x, y].frameY == 18) || (Main.tile[x, y].frameX >= 36 && Main.tile[x, y].frameY == 0)))
				{
					return;
				}
			}
			if (x < WorldGen.roomX1)
			{
				WorldGen.roomX1 = x;
			}
			if (x > WorldGen.roomX2)
			{
				WorldGen.roomX2 = x;
			}
			if (y < WorldGen.roomY1)
			{
				WorldGen.roomY1 = y;
			}
			if (y > WorldGen.roomY2)
			{
				WorldGen.roomY2 = y;
			}
			if (Main.tile[x, y].type == 630)
			{
				WorldGen.roomHasStinkbug = true;
			}
			if (Main.tile[x, y].type == 631)
			{
				WorldGen.roomHasEchoStinkbug = true;
			}
			bool flag2 = false;
			bool flag3 = false;
			for (int k = -2; k < 3; k++)
			{
				if (Main.wallHouse[(int)Main.tile[x + k, y].wall])
				{
					flag2 = true;
				}
				if (Main.tile[x + k, y].nactive() && (Main.tileSolid[(int)Main.tile[x + k, y].type] || TileID.Sets.HousingWalls[(int)Main.tile[x + k, y].type]))
				{
					flag2 = true;
				}
				if (Main.wallHouse[(int)Main.tile[x, y + k].wall])
				{
					flag3 = true;
				}
				if (Main.tile[x, y + k].nactive() && (Main.tileSolid[(int)Main.tile[x, y + k].type] || TileID.Sets.HousingWalls[(int)Main.tile[x, y + k].type]))
				{
					flag3 = true;
				}
			}
			if (!flag2 || !flag3)
			{
				WorldGen.roomCheckFailureReason = TownNPCRoomCheckFailureReason.HoleInWallIsTooBig;
				WorldGen.canSpawn = false;
				return;
			}
			for (int l = x - 1; l < x + 2; l++)
			{
				for (int m = y - 1; m < y + 2; m++)
				{
					if ((l != x || m != y) && WorldGen.canSpawn)
					{
						WorldGen.CheckRoom(l, m);
					}
				}
			}
		}

		// Token: 0x06000E22 RID: 3618 RVA: 0x003FC160 File Offset: 0x003FA360
		public static void dropMeteor()
		{
			bool flag = true;
			if (Main.netMode == 1)
			{
				return;
			}
			for (int i = 0; i < 255; i++)
			{
				if (Main.player[i].active)
				{
					flag = false;
					break;
				}
			}
			int num = 0;
			double num2 = (double)Main.maxTilesX / 4200.0;
			int num3 = (int)(400.0 * num2);
			for (int j = 5; j < Main.maxTilesX - 5; j++)
			{
				int num4 = 5;
				while ((double)num4 < Main.worldSurface)
				{
					if (Main.tile[j, num4].active() && Main.tile[j, num4].type == 37)
					{
						num++;
						if (num > num3)
						{
							return;
						}
					}
					num4++;
				}
			}
			double num5 = 600.0;
			int num6 = 0;
			while (!flag)
			{
				double num7 = (double)Main.maxTilesX * 0.08;
				int num8 = Main.rand.Next(150, Main.maxTilesX - 150);
				while ((double)num8 > (double)Main.spawnTileX - num7 && (double)num8 < (double)Main.spawnTileX + num7)
				{
					num8 = Main.rand.Next(150, Main.maxTilesX - 150);
				}
				int k = (int)(Main.worldSurface * 0.3);
				while (k < Main.maxTilesY)
				{
					Tile tile = Main.tile[num8, k];
					if (tile.active() && Main.tileSolid[(int)tile.type] && !TileID.Sets.Platforms[(int)tile.type])
					{
						int num9 = 0;
						int num10 = 15;
						for (int l = num8 - num10; l < num8 + num10; l++)
						{
							for (int m = k - num10; m < k + num10; m++)
							{
								if (WorldGen.SolidTile(l, m, false))
								{
									num9++;
									if (Main.tile[l, m].type == 189 || Main.tile[l, m].type == 202)
									{
										num9 -= 100;
									}
								}
								else if (Main.tile[l, m].liquid > 0)
								{
									num9--;
								}
							}
						}
						if ((double)num9 < num5)
						{
							num5 -= 0.5;
							break;
						}
						flag = WorldGen.meteor(num8, k, false);
						if (flag)
						{
							break;
						}
						break;
					}
					else
					{
						k++;
					}
				}
				num6++;
				if (num5 < 100.0)
				{
					return;
				}
				if (num6 >= Main.maxTilesX * 5)
				{
					return;
				}
			}
		}

		// Token: 0x06000E23 RID: 3619 RVA: 0x003FC3F8 File Offset: 0x003FA5F8
		public static bool meteor(int i, int j, bool ignorePlayers = false)
		{
			if (i < 50 || i > Main.maxTilesX - 50)
			{
				return false;
			}
			if (j < 50 || j > Main.maxTilesY - 50)
			{
				return false;
			}
			int num = 35;
			Rectangle rectangle = new Rectangle((i - num) * 16, (j - num) * 16, num * 2 * 16, num * 2 * 16);
			for (int k = 0; k < 255; k++)
			{
				if (Main.player[k].active && !ignorePlayers)
				{
					Rectangle value = new Rectangle((int)(Main.player[k].position.X + (float)(Main.player[k].width / 2) - (float)(NPC.sWidth / 2) - (float)NPC.safeRangeX), (int)(Main.player[k].position.Y + (float)(Main.player[k].height / 2) - (float)(NPC.sHeight / 2) - (float)NPC.safeRangeY), NPC.sWidth + NPC.safeRangeX * 2, NPC.sHeight + NPC.safeRangeY * 2);
					if (rectangle.Intersects(value))
					{
						return false;
					}
				}
			}
			for (int l = 0; l < 200; l++)
			{
				if (Main.npc[l].active)
				{
					Rectangle value2 = new Rectangle((int)Main.npc[l].position.X, (int)Main.npc[l].position.Y, Main.npc[l].width, Main.npc[l].height);
					if (rectangle.Intersects(value2))
					{
						return false;
					}
				}
			}
			for (int m = i - num; m < i + num; m++)
			{
				for (int n = j - num; n < j + num; n++)
				{
					if (Main.tile[m, n].active())
					{
						if (TileID.Sets.BasicChest[(int)Main.tile[m, n].type] || Main.tileDungeon[(int)Main.tile[m, n].type])
						{
							return false;
						}
						ushort type = Main.tile[m, n].type;
						if (type <= 470)
						{
							if (type != 226 && type != 470)
							{
								goto IL_22E;
							}
						}
						else if (type != 475 && type != 488 && type != 597)
						{
							goto IL_22E;
						}
						return false;
					}
					IL_22E:;
				}
			}
			WorldGen.stopDrops = true;
			num = WorldGen.genRand.Next(17, 23);
			for (int num2 = i - num; num2 < i + num; num2++)
			{
				for (int num3 = j - num; num3 < j + num; num3++)
				{
					if (num3 > j + Main.rand.Next(-2, 3) - 5)
					{
						double num4 = (double)Math.Abs(i - num2);
						double num5 = (double)Math.Abs(j - num3);
						if (Math.Sqrt(num4 * num4 + num5 * num5) < (double)num * 0.9 + (double)Main.rand.Next(-4, 5))
						{
							if (!Main.tileSolid[(int)Main.tile[num2, num3].type])
							{
								Main.tile[num2, num3].active(false);
							}
							Main.tile[num2, num3].type = 37;
						}
					}
				}
			}
			num = WorldGen.genRand.Next(8, 14);
			for (int num6 = i - num; num6 < i + num; num6++)
			{
				for (int num7 = j - num; num7 < j + num; num7++)
				{
					if (num7 > j + Main.rand.Next(-2, 3) - 4)
					{
						double num8 = (double)Math.Abs(i - num6);
						double num9 = (double)Math.Abs(j - num7);
						if (Math.Sqrt(num8 * num8 + num9 * num9) < (double)num * 0.8 + (double)Main.rand.Next(-3, 4))
						{
							Main.tile[num6, num7].active(false);
						}
					}
				}
			}
			num = WorldGen.genRand.Next(25, 35);
			for (int num10 = i - num; num10 < i + num; num10++)
			{
				for (int num11 = j - num; num11 < j + num; num11++)
				{
					double num12 = (double)Math.Abs(i - num10);
					double num13 = (double)Math.Abs(j - num11);
					if (Math.Sqrt(num12 * num12 + num13 * num13) < (double)num * 0.7)
					{
						if (TileID.Sets.GetsDestroyedForMeteors[(int)Main.tile[num10, num11].type])
						{
							WorldGen.KillTile(num10, num11, false, false, false);
						}
						Main.tile[num10, num11].liquid = 0;
					}
					if (Main.tile[num10, num11].type == 37)
					{
						if (!WorldGen.SolidTile(num10 - 1, num11, false) && !WorldGen.SolidTile(num10 + 1, num11, false) && !WorldGen.SolidTile(num10, num11 - 1, false) && !WorldGen.SolidTile(num10, num11 + 1, false))
						{
							Main.tile[num10, num11].active(false);
						}
						else if ((Main.tile[num10, num11].halfBrick() || Main.tile[num10 - 1, num11].topSlope()) && !WorldGen.SolidTile(num10, num11 + 1, false))
						{
							Main.tile[num10, num11].active(false);
						}
					}
					WorldGen.SquareTileFrame(num10, num11, true);
					WorldGen.SquareWallFrame(num10, num11, true);
				}
			}
			num = WorldGen.genRand.Next(23, 32);
			for (int num14 = i - num; num14 < i + num; num14++)
			{
				for (int num15 = j - num; num15 < j + num; num15++)
				{
					if (num15 > j + WorldGen.genRand.Next(-3, 4) - 3 && Main.tile[num14, num15].active() && Main.rand.Next(10) == 0)
					{
						double num16 = (double)Math.Abs(i - num14);
						double num17 = (double)Math.Abs(j - num15);
						if (Math.Sqrt(num16 * num16 + num17 * num17) < (double)num * 0.8)
						{
							if (TileID.Sets.GetsDestroyedForMeteors[(int)Main.tile[num14, num15].type])
							{
								WorldGen.KillTile(num14, num15, false, false, false);
							}
							Main.tile[num14, num15].type = 37;
							WorldGen.SquareTileFrame(num14, num15, true);
						}
					}
				}
			}
			num = WorldGen.genRand.Next(30, 38);
			for (int num18 = i - num; num18 < i + num; num18++)
			{
				for (int num19 = j - num; num19 < j + num; num19++)
				{
					if (num19 > j + WorldGen.genRand.Next(-2, 3) && Main.tile[num18, num19].active() && Main.rand.Next(20) == 0)
					{
						double num20 = (double)Math.Abs(i - num18);
						double num21 = (double)Math.Abs(j - num19);
						if (Math.Sqrt(num20 * num20 + num21 * num21) < (double)num * 0.85)
						{
							if (TileID.Sets.GetsDestroyedForMeteors[(int)Main.tile[num18, num19].type])
							{
								WorldGen.KillTile(num18, num19, false, false, false);
							}
							Main.tile[num18, num19].type = 37;
							WorldGen.SquareTileFrame(num18, num19, true);
						}
					}
				}
			}
			WorldGen.stopDrops = false;
			if (Main.netMode == 0)
			{
				Main.NewText(Lang.gen[59].Value, 50, byte.MaxValue, 130);
			}
			else if (Main.netMode == 2)
			{
				ChatHelper.BroadcastChatMessage(NetworkText.FromKey(Lang.gen[59].Key, new object[0]), new Color(50, 255, 130), -1);
			}
			if (Main.netMode != 1)
			{
				NetMessage.SendTileSquare(-1, i, j, 40, TileChangeType.None);
			}
			return true;
		}

		// Token: 0x06000E24 RID: 3620 RVA: 0x003FCBBC File Offset: 0x003FADBC
		public static void setWorldSize()
		{
			Main.bottomWorld = (float)(Main.maxTilesY * 16);
			Main.rightWorld = (float)(Main.maxTilesX * 16);
			Main.maxSectionsX = Main.maxTilesX / 200;
			Main.maxSectionsY = Main.maxTilesY / 150;
		}

		// Token: 0x06000E25 RID: 3621 RVA: 0x003FCBFA File Offset: 0x003FADFA
		public static int GetWorldSize()
		{
			if (Main.maxTilesX <= 4200)
			{
				return 0;
			}
			if (Main.maxTilesX <= 6400)
			{
				return 1;
			}
			return 2;
		}

		// Token: 0x06000E26 RID: 3622 RVA: 0x003FCC1C File Offset: 0x003FAE1C
		public static void worldGenCallback(object threadContext)
		{
			SoundEngine.PlaySound(10, -1, -1, 1, 1f, 0f);
			WorldGen.clearWorld();
			WorldGen.GenerateWorld(Main.ActiveWorldFileData.Seed, threadContext as GenerationProgress);
			WorldFile.SaveWorld(Main.ActiveWorldFileData.IsCloudSave, true);
			if (Main.menuMode == 10 || Main.menuMode == 888)
			{
				Main.menuMode = 6;
			}
			SoundEngine.PlaySound(10, -1, -1, 1, 1f, 0f);
			WorldGen.generatingWorld = false;
		}

		// Token: 0x06000E27 RID: 3623 RVA: 0x003FCCA0 File Offset: 0x003FAEA0
		public static Task CreateNewWorld(GenerationProgress progress = null)
		{
			WorldGen.generatingWorld = true;
			Main.rand = new UnifiedRandom(Main.ActiveWorldFileData.Seed);
			WorldGen.gen = true;
			Main.menuMode = 888;
			try
			{
				Main.MenuUI.SetState(new UIWorldLoad());
			}
			catch
			{
			}
			return Task.Factory.StartNew(new Action<object>(WorldGen.worldGenCallback), progress);
		}

		// Token: 0x06000E28 RID: 3624 RVA: 0x003FCD14 File Offset: 0x003FAF14
		public static void JustQuit()
		{
			try
			{
				SoundEngine.PlaySound(34, -1, -1, 0, 1f, 0f);
				SoundEngine.PlaySound(35, -1, -1, 0, 1f, 0f);
			}
			catch
			{
			}
			Main.invasionProgress = -1;
			Main.invasionProgressDisplayLeft = 0;
			Main.invasionProgressAlpha = 0f;
			Main.invasionProgressIcon = 0;
			Main.menuMode = 10;
			Main.gameMenu = true;
			SoundEngine.StopTrackedSounds();
			CaptureInterface.ResetFocus();
			Main.ActivePlayerFileData.StopPlayTimer();
			Main.fastForwardTimeToDawn = false;
			Main.fastForwardTimeToDusk = false;
			Main.UpdateTimeRate();
			if (Main.netMode == 0)
			{
				Main.GoToWorldSelect();
				Main.player[Main.myPlayer].position = new Vector2(0f, 0f);
				return;
			}
			if (Main.netMode == 1)
			{
				Main.menuMode = 0;
				Netplay.Disconnect = true;
				Main.netMode = 0;
			}
		}

		// Token: 0x06000E29 RID: 3625 RVA: 0x003FCDF4 File Offset: 0x003FAFF4
		public static void SaveAndQuitCallBack(object threadContext)
		{
			int netMode = Main.netMode;
			try
			{
				SoundEngine.PlaySound(34, -1, -1, 0, 1f, 0f);
				SoundEngine.PlaySound(35, -1, -1, 0, 1f, 0f);
			}
			catch
			{
			}
			if (netMode == 0)
			{
				WorldFile.CacheSaveTime();
			}
			Main.invasionProgress = -1;
			Main.invasionProgressDisplayLeft = 0;
			Main.invasionProgressAlpha = 0f;
			Main.invasionProgressIcon = 0;
			Main.menuMode = 10;
			Main.gameMenu = true;
			SoundEngine.StopTrackedSounds();
			CaptureInterface.ResetFocus();
			Main.ActivePlayerFileData.StopPlayTimer();
			Player.SavePlayer(Main.ActivePlayerFileData, false);
			Player.ClearPlayerTempInfo();
			Rain.ClearRain();
			if (netMode == 0)
			{
				WorldFile.SaveWorld();
				SoundEngine.PlaySound(10, -1, -1, 1, 1f, 0f);
			}
			else
			{
				Netplay.Disconnect = true;
				Main.netMode = 0;
			}
			Main.fastForwardTimeToDawn = false;
			Main.fastForwardTimeToDusk = false;
			Main.UpdateTimeRate();
			Main.menuMode = 0;
			if (threadContext != null)
			{
				((Action)threadContext)();
			}
		}

		// Token: 0x06000E2A RID: 3626 RVA: 0x003FCEF0 File Offset: 0x003FB0F0
		public static void SaveAndQuit(Action callback = null)
		{
			SoundEngine.PlaySound(11, -1, -1, 1, 1f, 0f);
			ThreadPool.QueueUserWorkItem(new WaitCallback(WorldGen.SaveAndQuitCallBack), callback);
		}

		// Token: 0x06000E2B RID: 3627 RVA: 0x003FCF1A File Offset: 0x003FB11A
		public static void RenameWorld(WorldFileData data, string newName, Action<string> callback = null)
		{
			data.SetAsActive();
			ThreadPool.QueueUserWorkItem(new WaitCallback(WorldGen.RenameWorldCallBack), Tuple.Create<string, Action<string>>(newName, callback));
		}

		// Token: 0x06000E2C RID: 3628 RVA: 0x003FCF3C File Offset: 0x003FB13C
		public static void RenameWorldCallBack(object threadContext)
		{
			if (threadContext == null)
			{
				return;
			}
			Tuple<string, Action<string>> tuple = threadContext as Tuple<string, Action<string>>;
			if (tuple == null)
			{
				return;
			}
			string item = tuple.Item1;
			Action<string> item2 = tuple.Item2;
			WorldGen.noMapUpdate = true;
			Main.ToggleGameplayUpdates(false);
			WorldFile.LoadWorld(Main.ActiveWorldFileData.IsCloudSave);
			WorldGen.noMapUpdate = false;
			if (WorldGen.loadFailed || !WorldGen.loadSuccess)
			{
				Main.LoadWorlds();
				Main.GoToWorldSelect();
				return;
			}
			Main.sectionManager.SetAllSectionsLoaded();
			double time = Main.time;
			bool dayTime = Main.dayTime;
			WorldFile.SetOngoingToTemps();
			WorldFile.CacheSaveTime();
			Main.time = time;
			Main.dayTime = dayTime;
			Main.worldName = item;
			WorldFile.SaveWorld();
			Rain.ClearRain();
			Main.fastForwardTimeToDawn = false;
			Main.fastForwardTimeToDusk = false;
			Main.UpdateTimeRate();
			if (item2 != null)
			{
				item2(item);
			}
		}

		// Token: 0x06000E2D RID: 3629 RVA: 0x003FCFF8 File Offset: 0x003FB1F8
		public static void playWorldCallBack(object threadContext)
		{
			if (Main.rand == null)
			{
				Main.rand = new UnifiedRandom((int)DateTime.Now.Ticks);
			}
			for (int i = 0; i < 255; i++)
			{
				if (i != Main.myPlayer)
				{
					Main.player[i].active = false;
				}
			}
			WorldGen.noMapUpdate = true;
			Main.ToggleGameplayUpdates(false);
			WorldFile.LoadWorld(Main.ActiveWorldFileData.IsCloudSave);
			if (WorldGen.loadFailed || !WorldGen.loadSuccess)
			{
				WorldFile.LoadWorld(Main.ActiveWorldFileData.IsCloudSave);
				if (WorldGen.loadFailed || !WorldGen.loadSuccess)
				{
					bool isCloudSave = Main.ActiveWorldFileData.IsCloudSave;
					if (FileUtilities.Exists(Main.worldPathName + ".bak", isCloudSave))
					{
						WorldGen.worldBackup = true;
					}
					else
					{
						WorldGen.worldBackup = false;
					}
					if (!Main.dedServ)
					{
						if (WorldGen.worldBackup)
						{
							Main.menuMode = 200;
							return;
						}
						Main.menuMode = 201;
						return;
					}
					else
					{
						if (!WorldGen.worldBackup)
						{
							Console.WriteLine(Language.GetTextValue("Error.LoadFailedNoBackup"));
							return;
						}
						FileUtilities.Copy(Main.worldPathName, Main.worldPathName + ".bad", isCloudSave, true);
						FileUtilities.Copy(Main.worldPathName + ".bak", Main.worldPathName, isCloudSave, true);
						FileUtilities.Delete(Main.worldPathName + ".bak", isCloudSave, false);
						WorldFile.LoadWorld(Main.ActiveWorldFileData.IsCloudSave);
						if (WorldGen.loadFailed || !WorldGen.loadSuccess)
						{
							WorldFile.LoadWorld(Main.ActiveWorldFileData.IsCloudSave);
							if (WorldGen.loadFailed || !WorldGen.loadSuccess)
							{
								FileUtilities.Copy(Main.worldPathName, Main.worldPathName + ".bak", isCloudSave, true);
								FileUtilities.Copy(Main.worldPathName + ".bad", Main.worldPathName, isCloudSave, true);
								FileUtilities.Delete(Main.worldPathName + ".bad", isCloudSave, false);
								Console.WriteLine(Language.GetTextValue("Error.LoadFailed"));
								return;
							}
						}
					}
				}
			}
			if (Main.mapEnabled)
			{
				Main.Map.Load();
			}
			if (Main.netMode != 2)
			{
				Main.sectionManager.SetAllSectionsLoaded();
			}
			while (Main.loadMapLock)
			{
				float num = (float)Main.loadMapLastX / (float)Main.maxTilesX;
				Main.statusText = string.Concat(new object[]
				{
					Lang.gen[68].Value,
					" ",
					(int)(num * 100f + 1f),
					"%"
				});
				Thread.Sleep(0);
				if (!Main.mapEnabled)
				{
					break;
				}
			}
			if (Main.gameMenu)
			{
				Main.gameMenu = false;
			}
			if (Main.netMode == 0 && Main.anglerWhoFinishedToday.Contains(Main.player[Main.myPlayer].name))
			{
				Main.anglerQuestFinished = true;
			}
			Main.player[Main.myPlayer].Spawn(PlayerSpawnContext.SpawningIntoWorld);
			WorldGen._lastSeed = Main.ActiveWorldFileData.Seed;
			WorldFile.SetOngoingToTemps();
			SoundEngine.PlaySound(11, -1, -1, 1, 1f, 0f);
			Main.resetClouds = true;
			WorldGen.noMapUpdate = false;
		}

		// Token: 0x06000E2E RID: 3630 RVA: 0x003FD2F1 File Offset: 0x003FB4F1
		public static void playWorld()
		{
			ThreadPool.QueueUserWorkItem(new WaitCallback(WorldGen.playWorldCallBack), 1);
		}

		// Token: 0x06000E2F RID: 3631 RVA: 0x003FD30B File Offset: 0x003FB50B
		public static void saveAndPlayCallBack(object threadContext)
		{
			WorldFile.SaveWorld();
		}

		// Token: 0x06000E30 RID: 3632 RVA: 0x003FD312 File Offset: 0x003FB512
		public static void saveAndPlay()
		{
			ThreadPool.QueueUserWorkItem(new WaitCallback(WorldGen.saveAndPlayCallBack), 1);
		}

		// Token: 0x06000E31 RID: 3633 RVA: 0x003FD32C File Offset: 0x003FB52C
		public static void saveToonWhilePlayingCallBack(object threadContext)
		{
			Player.SavePlayer(Main.ActivePlayerFileData, false);
		}

		// Token: 0x06000E32 RID: 3634 RVA: 0x003FD339 File Offset: 0x003FB539
		public static void saveToonWhilePlaying()
		{
			ThreadPool.QueueUserWorkItem(new WaitCallback(WorldGen.saveToonWhilePlayingCallBack), 1);
		}

		// Token: 0x06000E33 RID: 3635 RVA: 0x003FD354 File Offset: 0x003FB554
		public static void serverLoadWorldCallBack()
		{
			Main.rand = new UnifiedRandom((int)DateTime.Now.Ticks);
			WorldFile.LoadWorld(Main.ActiveWorldFileData.IsCloudSave);
			if (WorldGen.loadFailed || !WorldGen.loadSuccess)
			{
				WorldFile.LoadWorld(Main.ActiveWorldFileData.IsCloudSave);
				if (WorldGen.loadFailed || !WorldGen.loadSuccess)
				{
					bool isCloudSave = Main.ActiveWorldFileData.IsCloudSave;
					if (FileUtilities.Exists(Main.worldPathName + ".bak", isCloudSave))
					{
						WorldGen.worldBackup = true;
					}
					else
					{
						WorldGen.worldBackup = false;
					}
					if (!Main.dedServ)
					{
						if (WorldGen.worldBackup)
						{
							Main.menuMode = 200;
							return;
						}
						Main.menuMode = 201;
						return;
					}
					else
					{
						if (!WorldGen.worldBackup)
						{
							Console.WriteLine(Language.GetTextValue("Error.LoadFailedNoBackup"));
							return;
						}
						FileUtilities.Copy(Main.worldPathName + ".bak", Main.worldPathName, isCloudSave, true);
						FileUtilities.Delete(Main.worldPathName + ".bak", isCloudSave, false);
						WorldFile.LoadWorld(Main.ActiveWorldFileData.IsCloudSave);
						if (WorldGen.loadFailed || !WorldGen.loadSuccess)
						{
							WorldFile.LoadWorld(Main.ActiveWorldFileData.IsCloudSave);
							if (WorldGen.loadFailed || !WorldGen.loadSuccess)
							{
								Console.WriteLine(Language.GetTextValue("Error.LoadFailed"));
								return;
							}
						}
					}
				}
			}
			WorldGen._lastSeed = Main.ActiveWorldFileData.Seed;
			SoundEngine.PlaySound(10, -1, -1, 1, 1f, 0f);
			WorldFile.SetOngoingToTemps();
			WorldGen.Hooks.WorldLoaded();
		}

		// Token: 0x06000E34 RID: 3636 RVA: 0x003FD4CD File Offset: 0x003FB6CD
		public static Task serverLoadWorld()
		{
			return Task.Factory.StartNew(new Action(WorldGen.serverLoadWorldCallBack));
		}

		// Token: 0x06000E35 RID: 3637 RVA: 0x003FD4E8 File Offset: 0x003FB6E8
		public static void clearWorld()
		{
			WorldGen.ResetTreeShakes();
			Main.ladyBugRainBoost = 0;
			Main.getGoodWorld = false;
			Main.drunkWorld = false;
			Main.tenthAnniversaryWorld = false;
			Main.dontStarveWorld = false;
			Main.notTheBeesWorld = false;
			Main.remixWorld = false;
			Main.noTrapsWorld = false;
			Main.zenithWorld = false;
			Main.afterPartyOfDoom = false;
			Main.shimmerAlpha = 0f;
			Main.shimmerDarken = 0f;
			Main.shimmerBrightenDelay = 0f;
			NPC.ResetBadgerHatTime();
			NPC.freeCake = false;
			NPC.mechQueen = -1;
			Main.mapDelay = 2;
			Main.waterStyle = 0;
			Main.ResetWindCounter(true);
			WorldGen.TownManager = new TownRoomManager();
			PressurePlateHelper.Reset();
			WorldGen.TownManager.Clear();
			NPC.ResetKillCount();
			Main.instance.ClearCachedTileDraws();
			MapHelper.ResetMapData();
			TileEntity.Clear();
			Main.checkXMas();
			Main.checkHalloween();
			DontStarveDarknessDamageDealer.Reset();
			Wiring.ClearAll();
			Main.ParticleSystem_World_BehindPlayers.Particles.Clear();
			Main.ParticleSystem_World_OverPlayers.Particles.Clear();
			if (Main.mapReady)
			{
				for (int i = 0; i < WorldGen.lastMaxTilesX; i++)
				{
					float num = (float)i / (float)WorldGen.lastMaxTilesX;
					Main.statusText = Lang.gen[65].Value;
				}
				if (Main.Map != null)
				{
					Main.Map.Clear();
				}
			}
			NPC.MoonLordCountdown = 0;
			Main.forceHalloweenForToday = false;
			Main.forceXMasForToday = false;
			NPC.RevengeManager.Reset();
			Main.pumpkinMoon = false;
			Main.clearMap = true;
			Main.mapTime = 0;
			Main.updateMap = false;
			Main.mapReady = false;
			Main.refreshMap = false;
			Main.eclipse = false;
			Main.slimeRain = false;
			Main.slimeRainTime = 0.0;
			Main.slimeWarningTime = 0;
			Main.sundialCooldown = 0;
			Main.moondialCooldown = 0;
			Main.fastForwardTimeToDawn = false;
			Main.fastForwardTimeToDusk = false;
			BirthdayParty.WorldClear();
			LanternNight.WorldClear();
			WorldGen.mysticLogsEvent.WorldClear();
			CreditsRollEvent.Reset();
			Sandstorm.WorldClear();
			Main.DroneCameraTracker.WorldClear();
			Main.LocalGolfState.WorldClear();
			Main.CurrentPan = Vector2.Zero;
			Main.UpdateTimeRate();
			Main.wofNPCIndex = -1;
			NPC.waveKills = 0f;
			WorldGen.spawnHardBoss = 0;
			WorldGen.totalSolid2 = 0;
			WorldGen.totalGood2 = 0;
			WorldGen.totalEvil2 = 0;
			WorldGen.totalBlood2 = 0;
			WorldGen.totalSolid = 0;
			WorldGen.totalGood = 0;
			WorldGen.totalEvil = 0;
			WorldGen.totalBlood = 0;
			WorldFile.ResetTemps();
			Main.maxRaining = 0f;
			WorldGen.totalX = 0;
			WorldGen.totalD = 0;
			WorldGen.tEvil = 0;
			WorldGen.tBlood = 0;
			WorldGen.tGood = 0;
			WorldGen.spawnEye = false;
			WorldGen.prioritizedTownNPCType = 0;
			WorldGen.shadowOrbCount = 0;
			WorldGen.altarCount = 0;
			WorldGen.SavedOreTiers.Copper = -1;
			WorldGen.SavedOreTiers.Iron = -1;
			WorldGen.SavedOreTiers.Silver = -1;
			WorldGen.SavedOreTiers.Gold = -1;
			WorldGen.SavedOreTiers.Cobalt = -1;
			WorldGen.SavedOreTiers.Mythril = -1;
			WorldGen.SavedOreTiers.Adamantite = -1;
			GenVars.shimmerPosition = Vector2D.Zero;
			Main.cloudBGActive = 0f;
			Main.raining = false;
			Main.hardMode = false;
			Main.helpText = 0;
			Main.BartenderHelpTextIndex = 0;
			Main.dungeonX = 0;
			Main.dungeonY = 0;
			NPC.downedBoss1 = false;
			NPC.downedBoss2 = false;
			NPC.downedBoss3 = false;
			NPC.downedQueenBee = false;
			NPC.downedSlimeKing = false;
			NPC.downedMechBossAny = false;
			NPC.downedMechBoss1 = false;
			NPC.downedMechBoss2 = false;
			NPC.downedMechBoss3 = false;
			NPC.downedFishron = false;
			NPC.downedAncientCultist = false;
			NPC.downedMoonlord = false;
			NPC.downedHalloweenKing = false;
			NPC.downedHalloweenTree = false;
			NPC.downedChristmasIceQueen = false;
			NPC.downedChristmasSantank = false;
			NPC.downedChristmasTree = false;
			NPC.downedPlantBoss = false;
			NPC.downedGolemBoss = false;
			NPC.downedEmpressOfLight = false;
			NPC.downedQueenSlime = false;
			NPC.downedDeerclops = false;
			NPC.combatBookWasUsed = false;
			NPC.combatBookVolumeTwoWasUsed = false;
			NPC.peddlersSatchelWasUsed = false;
			NPC.savedStylist = false;
			NPC.savedGoblin = false;
			NPC.savedWizard = false;
			NPC.savedMech = false;
			NPC.savedTaxCollector = false;
			NPC.savedAngler = false;
			NPC.savedBartender = false;
			NPC.savedGolfer = false;
			NPC.boughtCat = false;
			NPC.boughtDog = false;
			NPC.boughtBunny = false;
			NPC.unlockedSlimeBlueSpawn = false;
			NPC.unlockedSlimeGreenSpawn = false;
			NPC.unlockedSlimeOldSpawn = false;
			NPC.unlockedSlimePurpleSpawn = false;
			NPC.unlockedSlimeRainbowSpawn = false;
			NPC.unlockedSlimeRedSpawn = false;
			NPC.unlockedSlimeYellowSpawn = false;
			NPC.unlockedSlimeCopperSpawn = false;
			NPC.unlockedMerchantSpawn = false;
			NPC.unlockedDemolitionistSpawn = false;
			NPC.unlockedPartyGirlSpawn = false;
			NPC.unlockedDyeTraderSpawn = false;
			NPC.unlockedTruffleSpawn = false;
			NPC.unlockedArmsDealerSpawn = false;
			NPC.unlockedNurseSpawn = false;
			NPC.unlockedPrincessSpawn = false;
			Array.Clear(NPC.ShimmeredTownNPCs, 0, NPC.ShimmeredTownNPCs.Length);
			NPC.downedGoblins = false;
			NPC.downedClown = false;
			NPC.downedFrost = false;
			NPC.downedPirates = false;
			NPC.downedMartians = false;
			NPC.downedTowerSolar = (NPC.downedTowerVortex = (NPC.downedTowerNebula = (NPC.downedTowerStardust = (NPC.LunarApocalypseIsUp = false))));
			NPC.TowerActiveSolar = (NPC.TowerActiveVortex = (NPC.TowerActiveNebula = (NPC.TowerActiveStardust = false)));
			DD2Event.ResetProgressEntirely();
			NPC.ClearFoundActiveNPCs();
			Main.BestiaryTracker.Reset();
			Main.PylonSystem.Reset();
			CreativePowerManager.Instance.Reset();
			Main.CreativeMenu.Reset();
			WorldGen.shadowOrbSmashed = false;
			WorldGen.spawnMeteor = false;
			WorldGen.stopDrops = false;
			Main.invasionDelay = 0;
			Main.invasionType = 0;
			Main.invasionSize = 0;
			Main.invasionWarn = 0;
			Main.invasionX = 0.0;
			Main.invasionSizeStart = 0;
			Main.treeX[0] = Main.maxTilesX;
			Main.treeX[1] = Main.maxTilesX;
			Main.treeX[2] = Main.maxTilesX;
			Main.treeStyle[0] = 0;
			Main.treeStyle[1] = 0;
			Main.treeStyle[2] = 0;
			Main.treeStyle[3] = 0;
			WorldGen.noLiquidCheck = false;
			Liquid.numLiquid = 0;
			LiquidBuffer.numLiquidBuffer = 0;
			if (Main.netMode == 1 || WorldGen.lastMaxTilesX > Main.maxTilesX || WorldGen.lastMaxTilesY > Main.maxTilesY)
			{
				for (int j = 0; j < WorldGen.lastMaxTilesX; j++)
				{
					float num2 = (float)j / (float)WorldGen.lastMaxTilesX;
					Main.statusText = string.Concat(new object[]
					{
						Lang.gen[46].Value,
						" ",
						(int)(num2 * 100f + 1f),
						"%"
					});
					for (int k = 0; k < WorldGen.lastMaxTilesY; k++)
					{
						Main.tile[j, k] = null;
					}
				}
			}
			WorldGen.lastMaxTilesX = Main.maxTilesX;
			WorldGen.lastMaxTilesY = Main.maxTilesY;
			if (Main.netMode != 2)
			{
				Main.sectionManager = new WorldSections(Main.maxTilesX / 200, Main.maxTilesY / 150);
			}
			if (Main.netMode != 1)
			{
				for (int l = 0; l < Main.maxTilesX; l++)
				{
					float num3 = (float)l / (float)Main.maxTilesX;
					Main.statusText = string.Concat(new object[]
					{
						Lang.gen[47].Value,
						" ",
						(int)(num3 * 100f + 1f),
						"%"
					});
					for (int m = 0; m < Main.maxTilesY; m++)
					{
						if (Main.tile[l, m] == null)
						{
							Main.tile[l, m] = new Tile();
						}
						else
						{
							Main.tile[l, m].ClearEverything();
						}
					}
				}
			}
			for (int n = 0; n < Main.countsAsHostForGameplay.Length; n++)
			{
				Main.countsAsHostForGameplay[n] = false;
			}
			CombatText.clearAll();
			PopupText.ClearAll();
			for (int num4 = 0; num4 < 6000; num4++)
			{
				Main.dust[num4] = new Dust();
				Main.dust[num4].dustIndex = num4;
			}
			for (int num5 = 0; num5 < 600; num5++)
			{
				Main.gore[num5] = new Gore();
			}
			for (int num6 = 0; num6 < 400; num6++)
			{
				Main.item[num6] = new Item();
				Main.item[num6].whoAmI = num6;
				Main.timeItemSlotCannotBeReusedFor[num6] = 0;
			}
			for (int num7 = 0; num7 < 200; num7++)
			{
				Main.npc[num7] = new NPC();
				Main.npc[num7].whoAmI = num7;
			}
			for (int num8 = 0; num8 < 1000; num8++)
			{
				Main.projectile[num8] = new Projectile();
				Main.projectile[num8].whoAmI = num8;
			}
			for (int num9 = 0; num9 < 8000; num9++)
			{
				Main.chest[num9] = null;
			}
			for (int num10 = 0; num10 < 1000; num10++)
			{
				Main.sign[num10] = null;
			}
			for (int num11 = 0; num11 < Liquid.maxLiquid; num11++)
			{
				Main.liquid[num11] = new Liquid();
			}
			for (int num12 = 0; num12 < 50000; num12++)
			{
				Main.liquidBuffer[num12] = new LiquidBuffer();
			}
			WorldGen.setWorldSize();
			Star.SpawnStars(-1);
			WorldGen.worldCleared = true;
		}

		// Token: 0x06000E36 RID: 3638 RVA: 0x003FDD68 File Offset: 0x003FBF68
		public static void setBG(int bg, int style)
		{
			if (bg == 0)
			{
				WorldGen.treeBG1 = style;
				WorldGen.SetForestBGSet(style, Main.treeMntBGSet1, Main.treeBGSet1);
				return;
			}
			if (bg == 10)
			{
				WorldGen.treeBG2 = style;
				WorldGen.SetForestBGSet(style, Main.treeMntBGSet2, Main.treeBGSet2);
				return;
			}
			if (bg == 11)
			{
				WorldGen.treeBG3 = style;
				WorldGen.SetForestBGSet(style, Main.treeMntBGSet3, Main.treeBGSet3);
				return;
			}
			if (bg == 12)
			{
				WorldGen.treeBG4 = style;
				WorldGen.SetForestBGSet(style, Main.treeMntBGSet4, Main.treeBGSet4);
				return;
			}
			if (bg == 1)
			{
				WorldGen.corruptBG = style;
				switch (style)
				{
				case 1:
					Main.corruptBG[0] = 56;
					Main.corruptBG[1] = 57;
					Main.corruptBG[2] = 58;
					return;
				case 2:
					Main.corruptBG[0] = 211;
					Main.corruptBG[1] = 212;
					Main.corruptBG[2] = 213;
					return;
				case 3:
					Main.corruptBG[0] = 225;
					Main.corruptBG[1] = 226;
					Main.corruptBG[2] = 227;
					return;
				case 4:
					Main.corruptBG[0] = 240;
					Main.corruptBG[1] = 241;
					Main.corruptBG[2] = 242;
					return;
				default:
					Main.corruptBG[0] = 12;
					Main.corruptBG[1] = 13;
					Main.corruptBG[2] = 14;
					return;
				}
			}
			else if (bg == 2)
			{
				WorldGen.jungleBG = style;
				switch (style)
				{
				case 1:
					Main.jungleBG[0] = 59;
					Main.jungleBG[1] = 60;
					Main.jungleBG[2] = 61;
					return;
				case 2:
					Main.jungleBG[0] = 222;
					Main.jungleBG[1] = 223;
					Main.jungleBG[2] = 224;
					return;
				case 3:
					Main.jungleBG[0] = 237;
					Main.jungleBG[1] = 238;
					Main.jungleBG[2] = 239;
					return;
				case 4:
					Main.jungleBG[0] = 284;
					Main.jungleBG[1] = 285;
					Main.jungleBG[2] = 286;
					return;
				case 5:
					Main.jungleBG[0] = 271;
					Main.jungleBG[1] = 272;
					Main.jungleBG[2] = 273;
					return;
				default:
					Main.jungleBG[0] = 15;
					Main.jungleBG[1] = 16;
					Main.jungleBG[2] = 17;
					return;
				}
			}
			else
			{
				if (bg == 3)
				{
					WorldGen.snowBG = style;
					Main.snowMntBG[0] = 35;
					Main.snowMntBG[1] = 36;
					if (style <= 22)
					{
						switch (style)
						{
						case 1:
							Main.snowBG[0] = 97;
							Main.snowBG[1] = 96;
							Main.snowBG[2] = 95;
							return;
						case 2:
							Main.snowMntBG[0] = 98;
							Main.snowMntBG[1] = 99;
							Main.snowBG[0] = -1;
							Main.snowBG[1] = -1;
							Main.snowBG[2] = -1;
							return;
						case 3:
							Main.snowMntBG[0] = 98;
							Main.snowMntBG[1] = 100;
							Main.snowBG[0] = -1;
							Main.snowBG[1] = -1;
							Main.snowBG[2] = -1;
							return;
						case 4:
							Main.snowMntBG[0] = 98;
							Main.snowMntBG[1] = 101;
							Main.snowBG[0] = -1;
							Main.snowBG[1] = -1;
							Main.snowBG[2] = -1;
							return;
						case 5:
							Main.snowMntBG[0] = -1;
							Main.snowMntBG[1] = -1;
							Main.snowBG[0] = 258;
							Main.snowBG[1] = 259;
							Main.snowBG[2] = 260;
							return;
						case 6:
							Main.snowMntBG[0] = -1;
							Main.snowMntBG[1] = -1;
							Main.snowBG[0] = 263;
							Main.snowBG[1] = 264;
							Main.snowBG[2] = 265;
							return;
						case 7:
							Main.snowMntBG[0] = 269;
							Main.snowMntBG[1] = 270;
							Main.snowBG[0] = 267;
							Main.snowBG[1] = 266;
							Main.snowBG[2] = 268;
							return;
						default:
							if (style == 21)
							{
								Main.snowMntBG[0] = 98;
								Main.snowMntBG[1] = 99;
								Main.snowBG[0] = 95;
								Main.snowBG[1] = 96;
								Main.snowBG[2] = 97;
								return;
							}
							if (style == 22)
							{
								Main.snowMntBG[0] = 98;
								Main.snowMntBG[1] = 99;
								Main.snowBG[0] = 37;
								Main.snowBG[1] = 38;
								Main.snowBG[2] = 39;
								return;
							}
							break;
						}
					}
					else if (style <= 32)
					{
						if (style == 31)
						{
							Main.snowMntBG[0] = 98;
							Main.snowMntBG[1] = 100;
							Main.snowBG[0] = 95;
							Main.snowBG[1] = 96;
							Main.snowBG[2] = 97;
							return;
						}
						if (style == 32)
						{
							Main.snowMntBG[0] = 98;
							Main.snowMntBG[1] = 100;
							Main.snowBG[0] = 37;
							Main.snowBG[1] = 38;
							Main.snowBG[2] = 39;
							return;
						}
					}
					else
					{
						if (style == 41)
						{
							Main.snowMntBG[0] = 98;
							Main.snowMntBG[1] = 101;
							Main.snowBG[0] = 95;
							Main.snowBG[1] = 96;
							Main.snowBG[2] = 97;
							return;
						}
						if (style == 42)
						{
							Main.snowMntBG[0] = 98;
							Main.snowMntBG[1] = 101;
							Main.snowBG[0] = 37;
							Main.snowBG[1] = 38;
							Main.snowBG[2] = 39;
							return;
						}
					}
					Main.snowBG[0] = 37;
					Main.snowBG[1] = 38;
					Main.snowBG[2] = 39;
					return;
				}
				if (bg == 4)
				{
					WorldGen.hallowBG = style;
					switch (style)
					{
					case 1:
						Main.hallowBG[0] = 102;
						Main.hallowBG[1] = 103;
						Main.hallowBG[2] = 104;
						return;
					case 2:
						Main.hallowBG[0] = 219;
						Main.hallowBG[1] = 220;
						Main.hallowBG[2] = 221;
						return;
					case 3:
						Main.hallowBG[0] = 243;
						Main.hallowBG[1] = 244;
						Main.hallowBG[2] = 245;
						return;
					case 4:
						Main.hallowBG[0] = -1;
						Main.hallowBG[1] = 261;
						Main.hallowBG[2] = 262;
						return;
					default:
						Main.hallowBG[0] = 29;
						Main.hallowBG[1] = 30;
						Main.hallowBG[2] = 31;
						return;
					}
				}
				else if (bg == 5)
				{
					WorldGen.crimsonBG = style;
					switch (style)
					{
					case 1:
						Main.crimsonBG[0] = 105;
						Main.crimsonBG[1] = 106;
						Main.crimsonBG[2] = 107;
						return;
					case 2:
						Main.crimsonBG[0] = 174;
						Main.crimsonBG[1] = -1;
						Main.crimsonBG[2] = 175;
						return;
					case 3:
						Main.crimsonBG[0] = 214;
						Main.crimsonBG[1] = 215;
						Main.crimsonBG[2] = 216;
						return;
					case 4:
						Main.crimsonBG[0] = -1;
						Main.crimsonBG[1] = 229;
						Main.crimsonBG[2] = 230;
						return;
					case 5:
						Main.crimsonBG[0] = 255;
						Main.crimsonBG[1] = 256;
						Main.crimsonBG[2] = 257;
						return;
					default:
						Main.crimsonBG[0] = 43;
						Main.crimsonBG[1] = 44;
						Main.crimsonBG[2] = 45;
						return;
					}
				}
				else if (bg == 6)
				{
					WorldGen.desertBG = style;
					switch (style)
					{
					case 1:
						Main.desertBG[0] = 108;
						Main.desertBG[1] = 109;
						Main.desertBG[2] = -1;
						return;
					case 2:
						Main.desertBG[0] = 207;
						Main.desertBG[1] = 208;
						Main.desertBG[2] = -1;
						return;
					case 3:
						Main.desertBG[0] = 217;
						Main.desertBG[1] = 218;
						Main.desertBG[2] = -1;
						return;
					case 4:
						Main.desertBG[0] = 248;
						Main.desertBG[1] = 249;
						Main.desertBG[2] = 250;
						return;
					default:
						Main.desertBG[0] = 21;
						Main.desertBG[1] = 20;
						Main.desertBG[2] = -1;
						return;
					}
				}
				else if (bg == 7)
				{
					WorldGen.oceanBG = style;
					switch (style)
					{
					case 1:
						Main.oceanBG = 110;
						return;
					case 2:
						Main.oceanBG = 111;
						return;
					case 3:
						Main.oceanBG = 209;
						return;
					case 4:
						Main.oceanBG = 210;
						return;
					case 5:
						Main.oceanBG = 283;
						return;
					default:
						Main.oceanBG = 28;
						return;
					}
				}
				else
				{
					if (bg != 8)
					{
						if (bg == 9)
						{
							WorldGen.underworldBG = style;
							if (style == 1)
							{
								Main.underworldBG[0] = 5;
								Main.underworldBG[1] = 6;
								Main.underworldBG[2] = 7;
								Main.underworldBG[3] = 8;
								Main.underworldBG[4] = 9;
								return;
							}
							if (style != 2)
							{
								Main.underworldBG[0] = 0;
								Main.underworldBG[1] = 1;
								Main.underworldBG[2] = 2;
								Main.underworldBG[3] = 3;
								Main.underworldBG[4] = 4;
								return;
							}
							Main.underworldBG[0] = 10;
							Main.underworldBG[1] = 11;
							Main.underworldBG[2] = 12;
							Main.underworldBG[3] = 13;
							Main.underworldBG[4] = 9;
						}
						return;
					}
					WorldGen.mushroomBG = style;
					switch (style)
					{
					case 1:
						Main.mushroomBG[0] = 231;
						Main.mushroomBG[1] = 232;
						Main.mushroomBG[2] = 233;
						return;
					case 2:
						Main.mushroomBG[0] = 234;
						Main.mushroomBG[1] = 235;
						Main.mushroomBG[2] = 236;
						return;
					case 3:
						Main.mushroomBG[0] = 287;
						Main.mushroomBG[1] = 288;
						Main.mushroomBG[2] = 289;
						return;
					default:
						Main.mushroomBG[0] = 46;
						Main.mushroomBG[1] = 47;
						Main.mushroomBG[2] = 48;
						return;
					}
				}
			}
		}

		// Token: 0x06000E37 RID: 3639 RVA: 0x003FE6B4 File Offset: 0x003FC8B4
		private static void SetForestBGSet(int style, int[] mountainSet, int[] treeSet)
		{
			mountainSet[0] = 7;
			mountainSet[1] = 8;
			if (style == 1)
			{
				treeSet[0] = 50;
				treeSet[1] = 51;
				treeSet[2] = 52;
				return;
			}
			if (style == 2)
			{
				treeSet[0] = 53;
				treeSet[1] = 54;
				treeSet[2] = 55;
				return;
			}
			if (style == 3)
			{
				mountainSet[1] = 90;
				treeSet[0] = 91;
				treeSet[1] = -1;
				treeSet[2] = 92;
				return;
			}
			if (style == 31)
			{
				mountainSet[1] = 90;
				treeSet[0] = 91;
				treeSet[1] = -1;
				treeSet[2] = 11;
				return;
			}
			if (style == 4)
			{
				mountainSet[0] = 93;
				mountainSet[1] = 94;
				treeSet[0] = -1;
				treeSet[1] = -1;
				treeSet[2] = -1;
				return;
			}
			if (style == 5)
			{
				mountainSet[0] = 93;
				mountainSet[1] = 94;
				treeSet[0] = -1;
				treeSet[1] = -1;
				treeSet[2] = 55;
				return;
			}
			if (style == 51)
			{
				mountainSet[0] = 93;
				mountainSet[1] = 94;
				treeSet[0] = -1;
				treeSet[1] = -1;
				treeSet[2] = 11;
				return;
			}
			if (style == 6)
			{
				mountainSet[0] = 171;
				mountainSet[1] = 172;
				treeSet[0] = 173;
				treeSet[1] = -1;
				treeSet[2] = -1;
				return;
			}
			if (style == 7)
			{
				mountainSet[0] = 176;
				mountainSet[1] = 177;
				treeSet[0] = 178;
				treeSet[1] = -1;
				treeSet[2] = -1;
				return;
			}
			if (style == 71)
			{
				mountainSet[0] = 176;
				mountainSet[1] = 177;
				treeSet[0] = 178;
				treeSet[1] = -1;
				treeSet[2] = 11;
				return;
			}
			if (style == 72)
			{
				mountainSet[0] = 176;
				mountainSet[1] = 177;
				treeSet[0] = 178;
				treeSet[1] = -1;
				treeSet[2] = 52;
				return;
			}
			if (style == 73)
			{
				mountainSet[0] = 176;
				mountainSet[1] = 177;
				treeSet[0] = 178;
				treeSet[1] = -1;
				treeSet[2] = 55;
				return;
			}
			if (style == 8)
			{
				mountainSet[0] = 179;
				mountainSet[1] = 180;
				treeSet[0] = 184;
				treeSet[1] = -1;
				treeSet[2] = -1;
				return;
			}
			if (style == 9)
			{
				mountainSet[0] = 277;
				mountainSet[1] = 278;
				treeSet[0] = 279;
				treeSet[1] = -1;
				treeSet[2] = -1;
				return;
			}
			if (style == 10)
			{
				mountainSet[0] = 280;
				mountainSet[1] = 281;
				treeSet[0] = 282;
				treeSet[1] = -1;
				treeSet[2] = -1;
				return;
			}
			treeSet[0] = 9;
			treeSet[1] = 10;
			treeSet[2] = 11;
		}

		// Token: 0x06000E38 RID: 3640 RVA: 0x003FE8B8 File Offset: 0x003FCAB8
		public static void RandomizeWeather()
		{
			Main.numClouds = WorldGen.genRand.Next(10, 200);
			Main.windSpeedCurrent = 0f;
			while (Main.windSpeedCurrent == 0f)
			{
				Main.windSpeedCurrent = (float)WorldGen.genRand.Next(-400, 401) * 0.001f;
				Main.windSpeedTarget = Main.windSpeedCurrent;
			}
			Cloud.resetClouds();
		}

		// Token: 0x06000E39 RID: 3641 RVA: 0x003FE924 File Offset: 0x003FCB24
		public static void RandomizeMoonState(UnifiedRandom random, bool garenteeNewStyle = false)
		{
			int moonType = Main.moonType;
			do
			{
				Main.moonType = random.Next(9);
			}
			while (garenteeNewStyle && moonType == Main.moonType);
		}

		// Token: 0x06000E3A RID: 3642 RVA: 0x003FE950 File Offset: 0x003FCB50
		public static void RandomizeBackgroundBasedOnPlayer(UnifiedRandom random, Player player)
		{
			if (player.ZoneGlowshroom)
			{
				int num = WorldGen.mushroomBG;
				while (num == WorldGen.mushroomBG)
				{
					WorldGen.setBG(8, random.Next(4));
				}
			}
			else if (player.ZoneUnderworldHeight)
			{
				int num = WorldGen.underworldBG;
				while (num == WorldGen.underworldBG)
				{
					WorldGen.setBG(9, random.Next(3));
				}
			}
			else if (player.ZoneDesert)
			{
				int num = WorldGen.desertBG;
				while (num == WorldGen.desertBG)
				{
					WorldGen.setBG(6, random.Next(5));
				}
			}
			else if (player.ZoneHallow)
			{
				int num = WorldGen.hallowBG;
				while (num == WorldGen.hallowBG)
				{
					WorldGen.setBG(4, random.Next(5));
				}
			}
			else if (player.ZoneCorrupt)
			{
				int num = WorldGen.corruptBG;
				while (num == WorldGen.corruptBG)
				{
					WorldGen.setBG(1, random.Next(5));
				}
			}
			else if (player.ZoneCrimson)
			{
				int num = WorldGen.crimsonBG;
				while (num == WorldGen.crimsonBG)
				{
					WorldGen.setBG(5, random.Next(6));
				}
			}
			else if (player.ZoneJungle)
			{
				int num = WorldGen.jungleBG;
				while (num == WorldGen.jungleBG)
				{
					WorldGen.setBG(2, random.Next(6));
				}
			}
			else if (player.ZoneSnow)
			{
				int num = WorldGen.snowBG;
				while (num == WorldGen.snowBG)
				{
					WorldGen.snowBG = random.Next(8);
					if (WorldGen.snowBG == 2 && random.Next(2) == 0)
					{
						if (random.Next(2) == 0)
						{
							WorldGen.snowBG = 21;
						}
						else
						{
							WorldGen.snowBG = 22;
						}
					}
					if (WorldGen.snowBG == 3 && random.Next(2) == 0)
					{
						if (random.Next(2) == 0)
						{
							WorldGen.snowBG = 31;
						}
						else
						{
							WorldGen.snowBG = 32;
						}
					}
					if (WorldGen.snowBG == 4 && random.Next(2) == 0)
					{
						if (random.Next(2) == 0)
						{
							WorldGen.snowBG = 41;
						}
						else
						{
							WorldGen.snowBG = 42;
						}
					}
					WorldGen.setBG(3, WorldGen.snowBG);
				}
			}
			else if (player.ZoneBeach)
			{
				int num = WorldGen.oceanBG;
				while (num == WorldGen.oceanBG)
				{
					WorldGen.setBG(7, random.Next(6));
				}
			}
			else
			{
				int num2 = (int)(player.Center.X / 16f);
				if (num2 < Main.treeX[0])
				{
					int num = WorldGen.treeBG1;
					while (WorldGen.IsBackgroundConsideredTheSame(num, WorldGen.treeBG1))
					{
						WorldGen.treeBG1 = WorldGen.RollRandomForestBGStyle(random);
					}
					WorldGen.setBG(0, WorldGen.treeBG1);
				}
				else if (num2 < Main.treeX[1])
				{
					int num = WorldGen.treeBG2;
					while (WorldGen.IsBackgroundConsideredTheSame(num, WorldGen.treeBG2))
					{
						WorldGen.treeBG2 = WorldGen.RollRandomForestBGStyle(random);
					}
					WorldGen.setBG(10, WorldGen.treeBG2);
				}
				else if (num2 < Main.treeX[2])
				{
					int num = WorldGen.treeBG3;
					while (WorldGen.IsBackgroundConsideredTheSame(num, WorldGen.treeBG3))
					{
						WorldGen.treeBG3 = WorldGen.RollRandomForestBGStyle(random);
					}
					WorldGen.setBG(11, WorldGen.treeBG3);
				}
				else
				{
					int num = WorldGen.treeBG4;
					while (WorldGen.IsBackgroundConsideredTheSame(num, WorldGen.treeBG4))
					{
						WorldGen.treeBG4 = WorldGen.RollRandomForestBGStyle(random);
					}
					WorldGen.setBG(12, WorldGen.treeBG4);
				}
			}
			WorldGen.BackgroundsCache.UpdateCache();
		}

		// Token: 0x06000E3B RID: 3643 RVA: 0x003FEC5C File Offset: 0x003FCE5C
		public static void RandomizeBackgrounds(UnifiedRandom random)
		{
			WorldGen.treeBG1 = WorldGen.RollRandomForestBGStyle(random);
			WorldGen.treeBG2 = WorldGen.RollRandomForestBGStyle(random);
			while (WorldGen.treeBG2 == WorldGen.treeBG1)
			{
				WorldGen.treeBG2 = WorldGen.RollRandomForestBGStyle(random);
			}
			WorldGen.treeBG3 = WorldGen.RollRandomForestBGStyle(random);
			while (WorldGen.treeBG3 == WorldGen.treeBG1 || WorldGen.treeBG3 == WorldGen.treeBG2)
			{
				WorldGen.treeBG3 = WorldGen.RollRandomForestBGStyle(random);
			}
			WorldGen.treeBG4 = WorldGen.RollRandomForestBGStyle(random);
			while (WorldGen.treeBG4 == WorldGen.treeBG1 || WorldGen.treeBG4 == WorldGen.treeBG2 || WorldGen.treeBG4 == WorldGen.treeBG3)
			{
				WorldGen.treeBG4 = WorldGen.RollRandomForestBGStyle(random);
			}
			WorldGen.setBG(0, WorldGen.treeBG1);
			WorldGen.setBG(10, WorldGen.treeBG2);
			WorldGen.setBG(11, WorldGen.treeBG3);
			WorldGen.setBG(12, WorldGen.treeBG4);
			WorldGen.setBG(1, random.Next(5));
			WorldGen.setBG(2, random.Next(6));
			WorldGen.snowBG = random.Next(8);
			if (WorldGen.snowBG == 2 && random.Next(2) == 0)
			{
				if (random.Next(2) == 0)
				{
					WorldGen.snowBG = 21;
				}
				else
				{
					WorldGen.snowBG = 22;
				}
			}
			if (WorldGen.snowBG == 3 && random.Next(2) == 0)
			{
				if (random.Next(2) == 0)
				{
					WorldGen.snowBG = 31;
				}
				else
				{
					WorldGen.snowBG = 32;
				}
			}
			if (WorldGen.snowBG == 4 && random.Next(2) == 0)
			{
				if (random.Next(2) == 0)
				{
					WorldGen.snowBG = 41;
				}
				else
				{
					WorldGen.snowBG = 42;
				}
			}
			WorldGen.setBG(3, WorldGen.snowBG);
			WorldGen.setBG(4, random.Next(5));
			WorldGen.setBG(5, random.Next(6));
			WorldGen.setBG(6, random.Next(5));
			WorldGen.setBG(7, random.Next(6));
			WorldGen.setBG(8, random.Next(4));
			WorldGen.setBG(9, random.Next(3));
		}

		// Token: 0x06000E3C RID: 3644 RVA: 0x003FEE34 File Offset: 0x003FD034
		private static int RollRandomForestBGStyle(UnifiedRandom random)
		{
			int num = random.Next(11);
			if ((num == 1 || num == 2) && random.Next(2) == 0)
			{
				num = random.Next(11);
			}
			if (num == 0)
			{
				num = random.Next(11);
			}
			if (num == 3 && random.Next(3) == 0)
			{
				num = 31;
			}
			if (num == 5 && random.Next(2) == 0)
			{
				num = 51;
			}
			if (num == 7 && random.Next(4) == 0)
			{
				num = random.Next(71, 74);
			}
			return num;
		}

		// Token: 0x06000E3D RID: 3645 RVA: 0x003FEEAC File Offset: 0x003FD0AC
		public static bool IsBackgroundConsideredTheSame(int oldBG, int newBG)
		{
			if (oldBG == 3 || oldBG == 31)
			{
				return newBG == 3 || newBG == 31;
			}
			if (oldBG == 5 || oldBG == 51)
			{
				return newBG == 5 || newBG == 51;
			}
			if (oldBG == 7 || (oldBG >= 71 && oldBG <= 73))
			{
				return newBG == 7 || (newBG >= 71 && newBG <= 73);
			}
			return oldBG == newBG;
		}

		// Token: 0x06000E3E RID: 3646 RVA: 0x003FEF0C File Offset: 0x003FD10C
		public static void RandomizeTreeStyle()
		{
			if (Main.maxTilesX == 4200)
			{
				Main.treeX[0] = WorldGen.genRand.Next((int)((double)Main.maxTilesX * 0.5 - (double)Main.maxTilesX * 0.25), (int)((double)Main.maxTilesX * 0.5 + (double)Main.maxTilesX * 0.25));
				Main.treeStyle[0] = WorldGen.genRand.Next(6);
				Main.treeStyle[1] = WorldGen.genRand.Next(6);
				while (Main.treeStyle[1] == Main.treeStyle[0])
				{
					Main.treeStyle[1] = WorldGen.genRand.Next(6);
				}
				Main.treeX[1] = Main.maxTilesX;
				Main.treeX[2] = Main.maxTilesX;
				for (int i = 0; i < 2; i++)
				{
					if (Main.treeStyle[i] == 0 && WorldGen.genRand.Next(3) != 0)
					{
						Main.treeStyle[i] = 4;
					}
				}
				return;
			}
			if (Main.maxTilesX == 6400)
			{
				Main.treeX[0] = WorldGen.genRand.Next((int)((double)Main.maxTilesX * 0.334 - (double)Main.maxTilesX * 0.2), (int)((double)Main.maxTilesX * 0.334 + (double)Main.maxTilesX * 0.2));
				Main.treeX[1] = WorldGen.genRand.Next((int)((double)Main.maxTilesX * 0.667 - (double)Main.maxTilesX * 0.2), (int)((double)Main.maxTilesX * 0.667 + (double)Main.maxTilesX * 0.2));
				Main.treeStyle[0] = WorldGen.genRand.Next(6);
				Main.treeStyle[1] = WorldGen.genRand.Next(6);
				Main.treeStyle[2] = WorldGen.genRand.Next(6);
				while (Main.treeStyle[1] == Main.treeStyle[0])
				{
					Main.treeStyle[1] = WorldGen.genRand.Next(6);
				}
				while (Main.treeStyle[2] == Main.treeStyle[0] || Main.treeStyle[2] == Main.treeStyle[1])
				{
					Main.treeStyle[2] = WorldGen.genRand.Next(6);
				}
				Main.treeX[2] = Main.maxTilesX;
				for (int j = 0; j < 3; j++)
				{
					if (Main.treeStyle[j] == 0 && WorldGen.genRand.Next(3) != 0)
					{
						Main.treeStyle[j] = 4;
					}
				}
				return;
			}
			Main.treeX[0] = WorldGen.genRand.Next((int)((double)Main.maxTilesX * 0.25 - (double)Main.maxTilesX * 0.15), (int)((double)Main.maxTilesX * 0.25 + (double)Main.maxTilesX * 0.15));
			Main.treeX[1] = WorldGen.genRand.Next((int)((double)Main.maxTilesX * 0.5 - (double)Main.maxTilesX * 0.15), (int)((double)Main.maxTilesX * 0.5 + (double)Main.maxTilesX * 0.15));
			Main.treeX[2] = WorldGen.genRand.Next((int)((double)Main.maxTilesX * 0.75 - (double)Main.maxTilesX * 0.15), (int)((double)Main.maxTilesX * 0.75 + (double)Main.maxTilesX * 0.15));
			Main.treeStyle[0] = WorldGen.genRand.Next(6);
			Main.treeStyle[1] = WorldGen.genRand.Next(6);
			Main.treeStyle[2] = WorldGen.genRand.Next(6);
			Main.treeStyle[3] = WorldGen.genRand.Next(6);
			while (Main.treeStyle[1] == Main.treeStyle[0])
			{
				Main.treeStyle[1] = WorldGen.genRand.Next(6);
			}
			while (Main.treeStyle[2] == Main.treeStyle[0] || Main.treeStyle[2] == Main.treeStyle[1])
			{
				Main.treeStyle[2] = WorldGen.genRand.Next(6);
			}
			while (Main.treeStyle[3] == Main.treeStyle[0] || Main.treeStyle[3] == Main.treeStyle[1] || Main.treeStyle[3] == Main.treeStyle[2])
			{
				Main.treeStyle[3] = WorldGen.genRand.Next(6);
			}
			for (int k = 0; k < 4; k++)
			{
				if (Main.treeStyle[k] == 0 && WorldGen.genRand.Next(3) != 0)
				{
					Main.treeStyle[k] = 4;
				}
			}
		}

		// Token: 0x06000E3F RID: 3647 RVA: 0x003FF394 File Offset: 0x003FD594
		public static void RandomizeCaveBackgrounds()
		{
			int maxValue = 8;
			if (Main.maxTilesX == 4200)
			{
				Main.caveBackX[0] = WorldGen.genRand.Next((int)((double)Main.maxTilesX * 0.5 - (double)Main.maxTilesX * 0.25), (int)((double)Main.maxTilesX * 0.5 + (double)Main.maxTilesX * 0.25));
				Main.caveBackX[1] = Main.maxTilesX;
				Main.caveBackX[2] = Main.maxTilesX;
				Main.caveBackStyle[0] = WorldGen.genRand.Next(maxValue);
				Main.caveBackStyle[1] = WorldGen.genRand.Next(maxValue);
				while (Main.caveBackStyle[1] == Main.caveBackStyle[0])
				{
					Main.caveBackStyle[1] = WorldGen.genRand.Next(maxValue);
				}
			}
			else if (Main.maxTilesX == 6400)
			{
				Main.caveBackX[0] = WorldGen.genRand.Next((int)((double)Main.maxTilesX * 0.334 - (double)Main.maxTilesX * 0.2), (int)((double)Main.maxTilesX * 0.334 + (double)Main.maxTilesX * 0.2));
				Main.caveBackX[1] = WorldGen.genRand.Next((int)((double)Main.maxTilesX * 0.667 - (double)Main.maxTilesX * 0.2), (int)((double)Main.maxTilesX * 0.667 + (double)Main.maxTilesX * 0.2));
				Main.caveBackX[2] = Main.maxTilesX;
				Main.caveBackStyle[0] = WorldGen.genRand.Next(maxValue);
				Main.caveBackStyle[1] = WorldGen.genRand.Next(maxValue);
				Main.caveBackStyle[2] = WorldGen.genRand.Next(maxValue);
				while (Main.caveBackStyle[1] == Main.caveBackStyle[0])
				{
					Main.caveBackStyle[1] = WorldGen.genRand.Next(maxValue);
				}
				while (Main.caveBackStyle[2] == Main.caveBackStyle[0] || Main.caveBackStyle[2] == Main.caveBackStyle[1])
				{
					Main.caveBackStyle[2] = WorldGen.genRand.Next(maxValue);
				}
			}
			else
			{
				Main.caveBackX[0] = WorldGen.genRand.Next((int)((double)Main.maxTilesX * 0.25 - (double)Main.maxTilesX * 0.15), (int)((double)Main.maxTilesX * 0.25 + (double)Main.maxTilesX * 0.15));
				Main.caveBackX[1] = WorldGen.genRand.Next((int)((double)Main.maxTilesX * 0.5 - (double)Main.maxTilesX * 0.15), (int)((double)Main.maxTilesX * 0.5 + (double)Main.maxTilesX * 0.15));
				Main.caveBackX[2] = WorldGen.genRand.Next((int)((double)Main.maxTilesX * 0.75 - (double)Main.maxTilesX * 0.15), (int)((double)Main.maxTilesX * 0.75 + (double)Main.maxTilesX * 0.15));
				Main.caveBackStyle[0] = WorldGen.genRand.Next(maxValue);
				Main.caveBackStyle[1] = WorldGen.genRand.Next(maxValue);
				Main.caveBackStyle[2] = WorldGen.genRand.Next(maxValue);
				Main.caveBackStyle[3] = WorldGen.genRand.Next(maxValue);
				while (Main.caveBackStyle[1] == Main.caveBackStyle[0])
				{
					Main.caveBackStyle[1] = WorldGen.genRand.Next(maxValue);
				}
				while (Main.caveBackStyle[2] == Main.caveBackStyle[0] || Main.caveBackStyle[2] == Main.caveBackStyle[1])
				{
					Main.caveBackStyle[2] = WorldGen.genRand.Next(maxValue);
				}
				while (Main.caveBackStyle[3] == Main.caveBackStyle[0] || Main.caveBackStyle[3] == Main.caveBackStyle[1] || Main.caveBackStyle[3] == Main.caveBackStyle[2])
				{
					Main.caveBackStyle[3] = WorldGen.genRand.Next(maxValue);
				}
			}
			Main.iceBackStyle = WorldGen.genRand.Next(4);
			Main.hellBackStyle = WorldGen.genRand.Next(3);
			Main.jungleBackStyle = WorldGen.genRand.Next(2);
		}

		// Token: 0x06000E40 RID: 3648 RVA: 0x003FF7D8 File Offset: 0x003FD9D8
		private static void ResetGenerator()
		{
			GenVars.numOrePatch = 0;
			GenVars.numTunnels = 0;
			GenVars.numLakes = 0;
			GenVars.numMushroomBiomes = 0;
			GenVars.numOceanCaveTreasure = 0;
			GenVars.numOasis = 0;
			GenVars.mudWall = false;
			GenVars.hellChest = 0;
			GenVars.JungleX = 0;
			GenVars.numMCaves = 0;
			GenVars.numIslandHouses = 0;
			GenVars.skyIslandHouseCount = 0;
			GenVars.dEnteranceX = 0;
			GenVars.numDRooms = 0;
			GenVars.numDDoors = 0;
			GenVars.generatedShadowKey = false;
			GenVars.numDungeonPlatforms = 0;
			GenVars.numJChests = 0;
			GenVars.JungleItemCount = 0;
			GenVars.lastDungeonHall = Vector2D.Zero;
		}

		// Token: 0x06000E41 RID: 3649 RVA: 0x003FF864 File Offset: 0x003FDA64
		public static bool mayanTrap(int x2, int y2)
		{
			int num = 1;
			if (WorldGen.genRand.Next(3) == 0)
			{
				num = 0;
			}
			int num2 = y2;
			while (!WorldGen.SolidOrSlopedTile(x2, num2))
			{
				num2++;
				if (num2 >= Main.maxTilesY - 300)
				{
					return false;
				}
			}
			if (Main.tile[x2, num2].type == 232 || Main.tile[x2, num2].type == 10)
			{
				return false;
			}
			num2--;
			if (Main.tile[x2, num2].liquid > 0 && Main.tile[x2, num2].lava())
			{
				return false;
			}
			if (num == -1 && WorldGen.genRand.Next(20) == 0)
			{
				num = 2;
			}
			else if (num == -1)
			{
				num = WorldGen.genRand.Next(2);
			}
			if (Main.tile[x2, num2].nactive() || Main.tile[x2 - 1, num2].nactive() || Main.tile[x2 + 1, num2].nactive() || Main.tile[x2, num2 - 1].nactive() || Main.tile[x2 - 1, num2 - 1].nactive() || Main.tile[x2 + 1, num2 - 1].nactive() || Main.tile[x2, num2 - 2].nactive() || Main.tile[x2 - 1, num2 - 2].nactive() || Main.tile[x2 + 1, num2 - 2].nactive())
			{
				return false;
			}
			if (Main.tile[x2, num2 + 1].type == 10)
			{
				return false;
			}
			if (Main.tile[x2, num2 + 1].type == 48)
			{
				return false;
			}
			if (Main.tile[x2, num2 + 1].type == 232)
			{
				return false;
			}
			if (num == 0)
			{
				int num3 = x2;
				int num4 = num2;
				num4 -= WorldGen.genRand.Next(3);
				while (WorldGen.InWorld(num3, num4, 5) && !WorldGen.SolidOrSlopedTile(num3, num4))
				{
					num3--;
				}
				int num5 = num3;
				num3 = x2;
				while (WorldGen.InWorld(num3, num4, 5) && !WorldGen.SolidOrSlopedTile(num3, num4))
				{
					num3++;
				}
				int num6 = num3;
				int num7 = x2 - num5;
				int num8 = num6 - x2;
				bool flag = false;
				bool flag2 = false;
				if (num7 > 5 && num7 < 50)
				{
					flag = true;
				}
				if (num8 > 5 && num8 < 50)
				{
					flag2 = true;
				}
				if (flag && !WorldGen.SolidOrSlopedTile(num5, num4 + 1))
				{
					flag = false;
				}
				if (flag2 && !WorldGen.SolidOrSlopedTile(num6, num4 + 1))
				{
					flag2 = false;
				}
				if (flag && (Main.tile[num5, num4].type == 10 || Main.tile[num5, num4].type == 48 || Main.tile[num5, num4 + 1].type == 10 || Main.tile[num5, num4 + 1].type == 48))
				{
					flag = false;
				}
				if (flag2 && (Main.tile[num6, num4].type == 10 || Main.tile[num6, num4].type == 48 || Main.tile[num6, num4 + 1].type == 10 || Main.tile[num6, num4 + 1].type == 48))
				{
					flag2 = false;
				}
				int num9;
				if (flag && flag2)
				{
					num9 = 1;
					num3 = num5;
					if (WorldGen.genRand.Next(2) == 0)
					{
						num3 = num6;
						num9 = -1;
					}
				}
				else if (flag2)
				{
					num3 = num6;
					num9 = -1;
				}
				else
				{
					if (!flag)
					{
						return false;
					}
					num3 = num5;
					num9 = 1;
				}
				if (Main.tile[num3, num4].wall != 87)
				{
					return false;
				}
				if (Main.tile[num3, num4].type == 190)
				{
					return false;
				}
				if (Main.tile[num3, num4].type == 135)
				{
					return false;
				}
				if (Main.tile[num3, num4].type == 137)
				{
					return false;
				}
				if (Main.tile[num3, num4].type == 232)
				{
					return false;
				}
				if (Main.tile[num3, num4].type == 237)
				{
					return false;
				}
				if (Main.tile[num3, num4].type == 10)
				{
					return false;
				}
				WorldGen.PlaceTile(x2, num2, 135, true, true, -1, 6);
				WorldGen.KillTile(num3, num4, false, false, false);
				int num10 = WorldGen.genRand.Next(3);
				if (Main.tile[x2, num2].wire())
				{
					num10 = 0;
				}
				if (Main.tile[x2, num2].wire2())
				{
					num10 = 1;
				}
				if (Main.tile[x2, num2].wire3())
				{
					num10 = 2;
				}
				int num11 = Math.Abs(num3 - x2);
				int style = 1;
				if (num11 < 10 && WorldGen.genRand.Next(3) != 0)
				{
					style = 2;
				}
				WorldGen.PlaceTile(num3, num4, 137, true, true, -1, style);
				if (num9 == 1)
				{
					Tile tile = Main.tile[num3, num4];
					tile.frameX += 18;
				}
				int i = WorldGen.genRand.Next(5);
				int num12 = num4;
				while (i > 0)
				{
					i--;
					num12--;
					if (!WorldGen.SolidTile(num3, num12, false) || !WorldGen.SolidTile(num3 - num9, num12, false) || WorldGen.SolidOrSlopedTile(num3 + num9, num12))
					{
						break;
					}
					WorldGen.PlaceTile(num3, num12, 137, true, true, -1, style);
					if (num9 == 1)
					{
						Tile tile2 = Main.tile[num3, num12];
						tile2.frameX += 18;
					}
					if (num10 == 0)
					{
						Main.tile[num3, num12].wire(true);
					}
					else if (num10 == 1)
					{
						Main.tile[num3, num12].wire2(true);
					}
					else if (num10 == 2)
					{
						Main.tile[num3, num12].wire3(true);
					}
				}
				int num13 = x2;
				int num14 = num2;
				while (num13 != num3 || num14 != num4)
				{
					if (num10 == 0)
					{
						Main.tile[num13, num14].wire(true);
					}
					else if (num10 == 1)
					{
						Main.tile[num13, num14].wire2(true);
					}
					else if (num10 == 2)
					{
						Main.tile[num13, num14].wire3(true);
					}
					if (num13 > num3)
					{
						num13--;
					}
					if (num13 < num3)
					{
						num13++;
					}
					if (num10 == 0)
					{
						Main.tile[num13, num14].wire(true);
					}
					else if (num10 == 1)
					{
						Main.tile[num13, num14].wire2(true);
					}
					else if (num10 == 2)
					{
						Main.tile[num13, num14].wire3(true);
					}
					if (num14 > num4)
					{
						num14--;
					}
					if (num14 < num4)
					{
						num14++;
					}
					if (num10 == 0)
					{
						Main.tile[num13, num14].wire(true);
					}
					else if (num10 == 1)
					{
						Main.tile[num13, num14].wire2(true);
					}
					else if (num10 == 2)
					{
						Main.tile[num13, num14].wire3(true);
					}
				}
				return true;
			}
			else
			{
				if (num != 1)
				{
					return false;
				}
				int num15 = num2;
				while (!WorldGen.SolidOrSlopedTile(x2, num15))
				{
					num15--;
					if ((double)num15 < Main.worldSurface)
					{
						return false;
					}
				}
				int num16 = Math.Abs(num15 - num2);
				if (num16 < 3)
				{
					return false;
				}
				int num17 = WorldGen.genRand.Next(3);
				if (Main.tile[x2, num2].wire())
				{
					num17 = 0;
				}
				if (Main.tile[x2, num2].wire2())
				{
					num17 = 1;
				}
				if (Main.tile[x2, num2].wire3())
				{
					num17 = 2;
				}
				int style2 = 3;
				if (num16 < 16 && WorldGen.genRand.Next(3) != 0)
				{
					style2 = 4;
				}
				if (Main.tile[x2, num15].type == 135)
				{
					return false;
				}
				if (Main.tile[x2, num15].type == 137)
				{
					return false;
				}
				if (Main.tile[x2, num15].type == 232)
				{
					return false;
				}
				if (Main.tile[x2, num15].type == 237)
				{
					return false;
				}
				if (Main.tile[x2, num15].type == 10)
				{
					return false;
				}
				if (Main.tile[x2, num15].wall != 87)
				{
					return false;
				}
				WorldGen.PlaceTile(x2, num2, 135, true, true, -1, 6);
				WorldGen.PlaceTile(x2, num15, 137, true, true, -1, style2);
				for (int j = 0; j < 2; j++)
				{
					int k = WorldGen.genRand.Next(1, 5);
					int num18 = x2;
					int num19 = -1;
					if (j == 1)
					{
						num19 = 1;
					}
					while (k > 0)
					{
						k--;
						num18 += num19;
						if (!WorldGen.SolidTile(num18, num15 - 1, false) || WorldGen.SolidOrSlopedTile(num18, num15 + 1))
						{
							break;
						}
						WorldGen.PlaceTile(num18, num15, 137, true, true, -1, style2);
						if (num17 == 0)
						{
							Main.tile[num18, num15].wire(true);
						}
						else if (num17 == 1)
						{
							Main.tile[num18, num15].wire2(true);
						}
						else if (num17 == 2)
						{
							Main.tile[num18, num15].wire3(true);
						}
					}
				}
				int num20 = x2;
				int num21 = num2;
				while (num20 != x2 || num21 != num15)
				{
					if (num17 == 0)
					{
						Main.tile[num20, num21].wire(true);
					}
					else if (num17 == 1)
					{
						Main.tile[num20, num21].wire2(true);
					}
					else if (num17 == 2)
					{
						Main.tile[num20, num21].wire3(true);
					}
					if (num20 > x2)
					{
						num20--;
					}
					if (num20 < x2)
					{
						num20++;
					}
					if (num17 == 0)
					{
						Main.tile[num20, num21].wire(true);
					}
					else if (num17 == 1)
					{
						Main.tile[num20, num21].wire2(true);
					}
					else if (num17 == 2)
					{
						Main.tile[num20, num21].wire3(true);
					}
					if (num21 > num15)
					{
						num21--;
					}
					if (num21 < num15)
					{
						num21++;
					}
					if (num17 == 0)
					{
						Main.tile[num20, num21].wire(true);
					}
					else if (num17 == 1)
					{
						Main.tile[num20, num21].wire2(true);
					}
					else if (num17 == 2)
					{
						Main.tile[num20, num21].wire3(true);
					}
				}
				return true;
			}
		}

		// Token: 0x06000E42 RID: 3650 RVA: 0x004002F8 File Offset: 0x003FE4F8
		public static bool placeLavaTrap(int x, int y)
		{
			int num = 5;
			int num2 = 50;
			int num3 = 40;
			int num4 = 20;
			int num5 = 4;
			if (Main.tile[x, y].active() || Main.tile[x, y].liquid < 255 || !Main.tile[x, y].lava())
			{
				return false;
			}
			int num6 = 0;
			for (int i = x - num; i <= x + num; i++)
			{
				for (int j = y - num; j <= y + num; j++)
				{
					if (Main.tile[i, j].lava() && !Main.tile[i, j].active() && Main.tile[i, j].liquid == 255)
					{
						num6++;
					}
				}
			}
			if (num6 < num2)
			{
				return false;
			}
			int num7 = y;
			while (!Main.tile[x, num7].active())
			{
				num7++;
				if (num7 > Main.maxTilesY - 200)
				{
					return false;
				}
			}
			if (!Main.tileSolid[(int)Main.tile[x, num7].type] || Main.tileSolidTop[(int)Main.tile[x, num7].type])
			{
				return false;
			}
			int num8 = num7;
			for (int k = x - num4; k <= x + num4; k++)
			{
				for (int l = num7 - num4; l <= num7 + num4; l++)
				{
					if (Main.tile[k, l].wire())
					{
						return false;
					}
				}
			}
			while (Main.tile[x, num7].active() && Main.tileSolid[(int)Main.tile[x, num7].type] && !Main.tileSolidTop[(int)Main.tile[x, num7].type])
			{
				num7++;
				if (num7 > Main.maxTilesY - 200)
				{
					return false;
				}
			}
			Tile tile = Main.tile[x, num7 - 1];
			if (Main.tileDungeon[(int)tile.type] || tile.type == 225 || tile.type == 226)
			{
				return false;
			}
			int num9 = num7;
			while (!Main.tile[x, num7].active())
			{
				num7++;
				if (num7 > Main.maxTilesY - 200 || Main.tile[x, num7].liquid > 0)
				{
					return false;
				}
			}
			if (!Main.tileSolid[(int)Main.tile[x, num7].type] || Main.tileSolidTop[(int)Main.tile[x, num7].type] || Main.tile[x, num7].type == 162)
			{
				return false;
			}
			int num10 = num7 - 1;
			if (num10 - num8 > num3)
			{
				return false;
			}
			if (num10 - num9 < num5)
			{
				return false;
			}
			Main.tile[x, num7].slope(0);
			Main.tile[x, num7].halfBrick(false);
			WorldGen.PlaceTile(x, num10, 135, false, true, -1, 7);
			for (int m = num8; m <= num10; m++)
			{
				Main.tile[x, m].wire(true);
				if (m < num9)
				{
					Main.tile[x, m].slope(0);
					Main.tile[x, m].halfBrick(false);
					Main.tile[x, m].actuator(true);
				}
			}
			return true;
		}

		// Token: 0x06000E43 RID: 3651 RVA: 0x00400668 File Offset: 0x003FE868
		public static bool IsTileNearby(int x, int y, int type, int distance)
		{
			for (int i = x - distance; i <= x + distance; i++)
			{
				for (int j = y - distance; j <= y + distance; j++)
				{
					if (WorldGen.InWorld(i, j, 0) && Main.tile[i, j].active() && (int)Main.tile[i, j].type == type)
					{
						return true;
					}
				}
			}
			return false;
		}

		// Token: 0x06000E44 RID: 3652 RVA: 0x004006CC File Offset: 0x003FE8CC
		private static bool placeTNTBarrel(int x, int y)
		{
			int num = y;
			while (!Main.tile[x, num].active())
			{
				num++;
				if (num > Main.maxTilesY - 350)
				{
					return false;
				}
			}
			num--;
			return !Main.tile[x, num].shimmer() && WorldGen.PlaceTile(x, num, 654, false, false, -1, 0);
		}

		// Token: 0x06000E45 RID: 3653 RVA: 0x00400734 File Offset: 0x003FE934
		public static bool placeTrap(int x2, int y2, int type = -1)
		{
			int num = y2;
			if (Vector2D.Distance(new Vector2D((double)x2, (double)y2), GenVars.shimmerPosition) < 100.0)
			{
				return false;
			}
			bool flag = false;
			bool flag2 = false;
			if (WorldGen.noTrapsWorldGen)
			{
				Main.tileSolid[138] = false;
			}
			while (!WorldGen.SolidTile(x2, num, false))
			{
				num++;
				if (num > Main.maxTilesY - 10)
				{
					return false;
				}
				if (num >= Main.maxTilesY - 300)
				{
					flag2 = true;
				}
			}
			if (WorldGen.noTrapsWorldGen)
			{
				Main.tileSolid[138] = true;
			}
			num--;
			if (!WorldGen.noTrapsWorldGen && WorldGen.IsTileNearby(x2, num, 70, 20))
			{
				return false;
			}
			if (Main.tile[x2, num].wall == 87)
			{
				return false;
			}
			if (Main.tile[x2, num].liquid > 0 && Main.tile[x2, num].lava())
			{
				flag = true;
			}
			if (Main.remixWorld)
			{
				if (type == -1 && WorldGen.genRand.Next(20) == 0)
				{
					type = 2;
				}
				else if (type == -1 && (double)num < Main.rockLayer - 30.0 && WorldGen.genRand.Next(3) != 0)
				{
					type = 3;
				}
				else if (type == -1)
				{
					type = WorldGen.genRand.Next(2);
				}
			}
			else if (type == -1 && WorldGen.genRand.Next(20) == 0)
			{
				type = 2;
			}
			else if (type == -1 && num > GenVars.lavaLine + 30 && WorldGen.genRand.Next(6) != 0)
			{
				type = 3;
			}
			else if (type == -1)
			{
				type = WorldGen.genRand.Next(2);
			}
			if (!WorldGen.InWorld(x2, num, 3))
			{
				return false;
			}
			if (flag && type != 3)
			{
				return false;
			}
			if (flag2 && type != 3)
			{
				return false;
			}
			if (Main.tile[x2, num].nactive() || Main.tile[x2 - 1, num].nactive() || Main.tile[x2 + 1, num].nactive() || Main.tile[x2, num - 1].nactive() || Main.tile[x2 - 1, num - 1].nactive() || Main.tile[x2 + 1, num - 1].nactive() || Main.tile[x2, num - 2].nactive() || Main.tile[x2 - 1, num - 2].nactive() || Main.tile[x2 + 1, num - 2].nactive())
			{
				return false;
			}
			if (Main.tile[x2, num + 1].type == 48)
			{
				return false;
			}
			if (Main.tile[x2, num + 1].type == 232)
			{
				return false;
			}
			if (type == 1)
			{
				for (int i = x2 - 3; i <= x2 + 3; i++)
				{
					for (int j = num - 3; j <= num + 3; j++)
					{
						if (Main.tile[i, j].type == 147 || Main.tile[i, j].type == 161)
						{
							type = 0;
						}
					}
				}
			}
			if (WorldGen.noTrapsWorldGen)
			{
				Main.tileSolid[138] = false;
			}
			if (type == 0)
			{
				int num2 = x2;
				int num3 = num;
				num3 -= WorldGen.genRand.Next(3);
				while (!WorldGen.SolidTile(num2, num3, false) && !Main.tileCracked[(int)Main.tile[num2, num3].type])
				{
					num2--;
					if (num2 < 0)
					{
						return false;
					}
				}
				int num4 = num2;
				num2 = x2;
				while (!WorldGen.SolidTile(num2, num3, false) && !Main.tileCracked[(int)Main.tile[num2, num3].type])
				{
					num2++;
					if (num2 > Main.maxTilesX)
					{
						return false;
					}
				}
				int num5 = num2;
				int num6 = x2 - num4;
				int num7 = num5 - x2;
				bool flag3 = false;
				bool flag4 = false;
				if (num6 > 5 && num6 < 50)
				{
					flag3 = true;
				}
				if (num7 > 5 && num7 < 50)
				{
					flag4 = true;
				}
				if (flag3 && !WorldGen.SolidTile(num4, num3 + 1, false))
				{
					flag3 = false;
				}
				if (flag4 && !WorldGen.SolidTile(num5, num3 + 1, false))
				{
					flag4 = false;
				}
				if (flag3 && (Main.tile[num4, num3].type == 10 || Main.tile[num4, num3].type == 48 || Main.tile[num4, num3 + 1].type == 10 || Main.tile[num4, num3 + 1].type == 48))
				{
					flag3 = false;
				}
				if (flag4 && (Main.tile[num5, num3].type == 10 || Main.tile[num5, num3].type == 48 || Main.tile[num5, num3 + 1].type == 10 || Main.tile[num5, num3 + 1].type == 48))
				{
					flag4 = false;
				}
				int num8;
				if (flag3 && flag4)
				{
					num8 = 1;
					num2 = num4;
					if (WorldGen.genRand.Next(2) == 0)
					{
						num2 = num5;
						num8 = -1;
					}
				}
				else if (flag4)
				{
					num2 = num5;
					num8 = -1;
				}
				else
				{
					if (!flag3)
					{
						WorldGen.trapDiag[type, 0]++;
						return false;
					}
					num2 = num4;
					num8 = 1;
				}
				if (Main.tile[num2, num3].type == 190)
				{
					WorldGen.trapDiag[type, 0]++;
					return false;
				}
				if (Main.tile[x2, num].wall > 0)
				{
					WorldGen.PlaceTile(x2, num, 135, true, true, -1, 2);
				}
				else
				{
					WorldGen.PlaceTile(x2, num, 135, true, true, -1, WorldGen.genRand.Next(2, 4));
				}
				WorldGen.KillTile(num2, num3, false, false, false);
				WorldGen.PlaceTile(num2, num3, 137, true, true, -1, 0);
				if (num8 == 1)
				{
					Tile tile = Main.tile[num2, num3];
					tile.frameX += 18;
				}
				int num9 = x2;
				int num10 = num;
				while (num9 != num2 || num10 != num3)
				{
					Main.tile[num9, num10].wire(true);
					if (num9 > num2)
					{
						num9--;
					}
					if (num9 < num2)
					{
						num9++;
					}
					Main.tile[num9, num10].wire(true);
					if (num10 > num3)
					{
						num10--;
					}
					if (num10 < num3)
					{
						num10++;
					}
					Main.tile[num9, num10].wire(true);
				}
				WorldGen.trapDiag[type, 1]++;
				return true;
			}
			else
			{
				if (type != 1)
				{
					if (type == 2)
					{
						int num11 = WorldGen.genRand.Next(4, 7);
						int num12 = x2 + WorldGen.genRand.Next(-1, 2);
						int num13 = num;
						for (int k = 0; k < num11; k++)
						{
							num13++;
							if (!WorldGen.SolidTile(num12, num13, false))
							{
								WorldGen.trapDiag[type, 0]++;
								return false;
							}
						}
						for (int l = num12 - 2; l <= num12 + 2; l++)
						{
							for (int m = num13 - 2; m <= num13 + 2; m++)
							{
								if (!WorldGen.SolidTile(l, m, false))
								{
									return false;
								}
							}
						}
						WorldGen.KillTile(num12, num13, false, false, false);
						Main.tile[num12, num13].active(true);
						Main.tile[num12, num13].type = 141;
						Main.tile[num12, num13].frameX = 0;
						Main.tile[num12, num13].frameY = (short)(18 * WorldGen.genRand.Next(2));
						WorldGen.PlaceTile(x2, num, 135, true, true, -1, WorldGen.genRand.Next(2, 4));
						int num14 = x2;
						int num15 = num;
						while (num14 != num12 || num15 != num13)
						{
							Main.tile[num14, num15].wire(true);
							if (num14 > num12)
							{
								num14--;
							}
							if (num14 < num12)
							{
								num14++;
							}
							Main.tile[num14, num15].wire(true);
							if (num15 > num13)
							{
								num15--;
							}
							if (num15 < num13)
							{
								num15++;
							}
							Main.tile[num14, num15].wire(true);
						}
						WorldGen.trapDiag[type, 1]++;
					}
					else if (type == 3)
					{
						if (Main.tile[x2 + 1, num].active())
						{
							return false;
						}
						if (Main.tile[x2, num].liquid > 0 && !Main.tile[x2, num].lava())
						{
							return false;
						}
						if (WorldGen.noTrapsWorldGen && (WorldGen.tenthAnniversaryWorldGen || WorldGen.notTheBees))
						{
							if (WorldGen.genRand.Next(3) != 0)
							{
								return false;
							}
							if (WorldGen.IsTileNearby(x2, num, 443, 30))
							{
								return false;
							}
						}
						for (int n = x2; n <= x2 + 1; n++)
						{
							int j2 = num + 1;
							if (!WorldGen.SolidTile(n, j2, false))
							{
								return false;
							}
						}
						int num16 = WorldGen.genRand.Next(2);
						for (int num17 = 0; num17 < 2; num17++)
						{
							Main.tile[x2 + num17, num].active(true);
							Main.tile[x2 + num17, num].type = 443;
							Main.tile[x2 + num17, num].frameX = (short)(18 * num17 + 36 * num16);
							Main.tile[x2 + num17, num].frameY = 0;
						}
						return true;
					}
					if (WorldGen.noTrapsWorldGen)
					{
						Main.tileSolid[138] = true;
					}
					return false;
				}
				if (WorldGen.noTrapsWorldGen)
				{
					Main.tileSolid[138] = true;
				}
				int num18 = num - 8;
				int num19 = x2 + WorldGen.genRand.Next(-1, 2);
				if (WorldGen.noTrapsWorldGen)
				{
					if (WorldGen.IsTileNearby(num19, num18, 138, 6))
					{
						return false;
					}
					if (WorldGen.IsTileNearby(num19, num18, 664, 6))
					{
						return false;
					}
				}
				else
				{
					if (WorldGen.IsTileNearby(num19, num18, 138, 10))
					{
						return false;
					}
					if (WorldGen.IsTileNearby(num19, num18, 664, 10))
					{
						return false;
					}
					if (WorldGen.IsTileNearby(num19, num18, 665, 10))
					{
						return false;
					}
				}
				bool flag5 = true;
				while (flag5)
				{
					bool flag6 = true;
					int num20 = 0;
					for (int num21 = num19 - 2; num21 <= num19 + 3; num21++)
					{
						for (int num22 = num18; num22 <= num18 + 3; num22++)
						{
							if (!WorldGen.SolidTile(num21, num22, false))
							{
								flag6 = false;
							}
							if (Main.tile[num21, num22].active())
							{
								if (Main.tile[num21, num22].type == 226)
								{
									WorldGen.trapDiag[type, 0]++;
									return false;
								}
								if (Main.tile[num21, num22].type == 0 || Main.tile[num21, num22].type == 1 || Main.tile[num21, num22].type == 59)
								{
									num20++;
								}
							}
						}
					}
					num18--;
					if ((double)num18 < Main.worldSurface)
					{
						WorldGen.trapDiag[type, 0]++;
						return false;
					}
					if (flag6 && num20 > 2)
					{
						flag5 = false;
					}
				}
				if (num - num18 <= 5 || num - num18 >= 40)
				{
					WorldGen.trapDiag[type, 0]++;
					return false;
				}
				for (int num23 = num19; num23 <= num19 + 1; num23++)
				{
					for (int num24 = num18; num24 <= num; num24++)
					{
						WorldGen.KillTile(num23, num24, false, false, false);
					}
				}
				for (int num25 = num19 - 2; num25 <= num19 + 3; num25++)
				{
					for (int num26 = num18 - 2; num26 <= num18 + 3; num26++)
					{
						if (WorldGen.SolidTile(num25, num26, false))
						{
							Main.tile[num25, num26].type = 1;
						}
					}
				}
				if (WorldGen.IsTileNearby(num19, num18, 21, 4) || WorldGen.IsTileNearby(num19, num18, 467, 4))
				{
					WorldGen.trapDiag[type, 0]++;
					return false;
				}
				WorldGen.PlaceTile(x2, num, 135, true, true, -1, 7);
				WorldGen.PlaceTile(num19, num18 + 2, 130, true, false, -1, 0);
				WorldGen.PlaceTile(num19 + 1, num18 + 2, 130, true, false, -1, 0);
				if ((WorldGen.tenthAnniversaryWorldGen || WorldGen.noTrapsWorldGen) && WorldGen.genRand.Next(3) == 0)
				{
					WorldGen.PlaceTile(num19 + 1, num18 + 1, 664, true, false, -1, 0);
				}
				else
				{
					WorldGen.PlaceTile(num19 + 1, num18 + 1, 138, true, false, -1, 0);
				}
				num18 += 2;
				Main.tile[num19, num18].wire(true);
				Main.tile[num19 + 1, num18].wire(true);
				num18++;
				WorldGen.PlaceTile(num19, num18, 130, true, false, -1, 0);
				WorldGen.PlaceTile(num19 + 1, num18, 130, true, false, -1, 0);
				Main.tile[num19, num18].wire(true);
				Main.tile[num19 + 1, num18].wire(true);
				WorldGen.PlaceTile(num19, num18 + 1, 130, true, false, -1, 0);
				WorldGen.PlaceTile(num19 + 1, num18 + 1, 130, true, false, -1, 0);
				Main.tile[num19, num18 + 1].wire(true);
				Main.tile[num19 + 1, num18 + 1].wire(true);
				int num27 = x2;
				int num28 = num;
				while (num27 != num19 || num28 != num18)
				{
					Main.tile[num27, num28].wire(true);
					if (num27 > num19)
					{
						num27--;
					}
					if (num27 < num19)
					{
						num27++;
					}
					Main.tile[num27, num28].wire(true);
					if (num28 > num18)
					{
						num28--;
					}
					if (num28 < num18)
					{
						num28++;
					}
					Main.tile[num27, num28].wire(true);
				}
				WorldGen.trapDiag[type, 1]++;
				return true;
			}
		}

		// Token: 0x06000E46 RID: 3654 RVA: 0x0040151C File Offset: 0x003FF71C
		public static int countWires(int x, int y, int size)
		{
			int num = 0;
			for (int i = x - size; i <= x + size; i++)
			{
				for (int j = y - size; j <= y + size; j++)
				{
					if (WorldGen.InWorld(i, j, 0))
					{
						if (Main.tile[i, j].wire())
						{
							num++;
						}
						if (Main.tile[i, j].wire2())
						{
							num++;
						}
						if (Main.tile[i, j].wire3())
						{
							num++;
						}
						if (Main.tile[i, j].wire4())
						{
							num++;
						}
					}
				}
			}
			return num;
		}

		// Token: 0x06000E47 RID: 3655 RVA: 0x004015B2 File Offset: 0x003FF7B2
		public static int countTiles(int x, int y, bool jungle = false, bool lavaOk = false)
		{
			WorldGen.numTileCount = 0;
			WorldGen.shroomCount = 0;
			WorldGen.lavaCount = 0;
			WorldGen.iceCount = 0;
			WorldGen.sandCount = 0;
			WorldGen.rockCount = 0;
			WorldGen.CountedTiles.Clear();
			WorldGen.nextCount(x, y, jungle, lavaOk);
			return WorldGen.numTileCount;
		}

		// Token: 0x06000E48 RID: 3656 RVA: 0x004015F0 File Offset: 0x003FF7F0
		public static void nextCount(int x, int y, bool jungle = false, bool lavaOk = false)
		{
			if (WorldGen.numTileCount >= WorldGen.maxTileCount)
			{
				return;
			}
			if (x <= 1 || x >= Main.maxTilesX - 1 || y <= 1 || y >= Main.maxTilesY - 1)
			{
				WorldGen.numTileCount = WorldGen.maxTileCount;
				return;
			}
			if (WorldGen.CountedTiles.ContainsKey(new Point(x, y)))
			{
				return;
			}
			if (Main.tile[x, y].wall == 244)
			{
				WorldGen.numTileCount = WorldGen.maxTileCount;
				return;
			}
			if (Main.tile[x, y].shimmer() && Main.tile[x, y].liquid > 0)
			{
				WorldGen.numTileCount = WorldGen.maxTileCount;
				return;
			}
			if (!jungle)
			{
				if (Main.tile[x, y].wall != 0)
				{
					WorldGen.numTileCount = WorldGen.maxTileCount;
					return;
				}
				if (!lavaOk)
				{
					if (Main.tile[x, y].lava() && Main.tile[x, y].liquid > 0)
					{
						WorldGen.lavaCount++;
						WorldGen.numTileCount = WorldGen.maxTileCount;
						return;
					}
				}
				else if (Main.tile[x, y].lava() && Main.tile[x, y].liquid > 0)
				{
					WorldGen.lavaCount++;
				}
			}
			if (Main.tile[x, y].active())
			{
				if (Main.tile[x, y].type == 70)
				{
					WorldGen.shroomCount++;
				}
				if (Main.tile[x, y].type == 1)
				{
					WorldGen.rockCount++;
				}
				if (Main.tile[x, y].type == 147 || Main.tile[x, y].type == 161)
				{
					WorldGen.iceCount++;
				}
				if (Main.tile[x, y].type == 53 || Main.tile[x, y].type == 396 || Main.tile[x, y].type == 397)
				{
					WorldGen.sandCount++;
				}
			}
			if (!WorldGen.SolidTile(x, y, false))
			{
				WorldGen.CountedTiles.Add(new Point(x, y), true);
				WorldGen.numTileCount++;
				WorldGen.nextCount(x - 1, y, jungle, lavaOk);
				WorldGen.nextCount(x + 1, y, jungle, lavaOk);
				WorldGen.nextCount(x, y - 1, jungle, lavaOk);
				WorldGen.nextCount(x, y + 1, jungle, lavaOk);
			}
		}

		// Token: 0x06000E49 RID: 3657 RVA: 0x0040186A File Offset: 0x003FFA6A
		public static int countDirtTiles(int x, int y)
		{
			WorldGen.numTileCount = 0;
			WorldGen.CountedTiles.Clear();
			WorldGen.nextDirtCount(x, y);
			return WorldGen.numTileCount;
		}

		// Token: 0x06000E4A RID: 3658 RVA: 0x00401888 File Offset: 0x003FFA88
		public static void nextDirtCount(int x, int y)
		{
			if (WorldGen.numTileCount >= WorldGen.maxTileCount)
			{
				return;
			}
			if (x <= 1 || x >= Main.maxTilesX - 1 || y <= 1 || y >= Main.maxTilesY - 1)
			{
				WorldGen.numTileCount = WorldGen.maxTileCount;
				return;
			}
			if (WorldGen.CountedTiles.ContainsKey(new Point(x, y)))
			{
				return;
			}
			if (Main.tile[x, y].active() && (Main.tile[x, y].type == 147 || Main.tile[x, y].type == 161))
			{
				WorldGen.numTileCount = WorldGen.maxTileCount;
				return;
			}
			if (Main.tile[x, y].wall == 244 || Main.tile[x, y].wall == 83 || Main.tile[x, y].wall == 3 || Main.tile[x, y].wall == 187 || Main.tile[x, y].wall == 216)
			{
				WorldGen.numTileCount = WorldGen.maxTileCount;
				return;
			}
			if (!WorldGen.SolidTile(x, y, false) && (Main.tile[x, y].wall == 2 || Main.tile[x, y].wall == 59))
			{
				WorldGen.CountedTiles.Add(new Point(x, y), true);
				WorldGen.numTileCount++;
				WorldGen.nextDirtCount(x - 1, y);
				WorldGen.nextDirtCount(x + 1, y);
				WorldGen.nextDirtCount(x, y - 1);
				WorldGen.nextDirtCount(x, y + 1);
				WorldGen.nextDirtCount(x - 1, y - 1);
				WorldGen.nextDirtCount(x - 1, y + 1);
				WorldGen.nextDirtCount(x + 1, y - 1);
				WorldGen.nextDirtCount(x + 1, y + 1);
				WorldGen.nextDirtCount(x - 2, y);
				WorldGen.nextDirtCount(x + 2, y);
			}
		}

		// Token: 0x06000E4B RID: 3659 RVA: 0x00401A60 File Offset: 0x003FFC60
		public static bool InWorld(int x, int y, int fluff = 0)
		{
			return x >= fluff && x < Main.maxTilesX - fluff && y >= fluff && y < Main.maxTilesY - fluff;
		}

		// Token: 0x06000E4C RID: 3660 RVA: 0x00401A84 File Offset: 0x003FFC84
		public static void gemCave(int x, int y)
		{
			WorldGen.countTiles(x, y, false, false);
			for (int i = 0; i < 6; i++)
			{
				WorldGen.gem[i] = false;
			}
			WorldGen.gem[WorldGen.genRand.Next(6)] = true;
			for (int j = 0; j < 6; j++)
			{
				if (WorldGen.genRand.Next(6) == 0)
				{
					WorldGen.gem[j] = true;
				}
			}
			WorldGen.Spread.Gem(x, y);
		}

		// Token: 0x06000E4D RID: 3661 RVA: 0x00401AEC File Offset: 0x003FFCEC
		public static int randGem()
		{
			int num = WorldGen.genRand.Next(6);
			while (!WorldGen.gem[num])
			{
				num = WorldGen.genRand.Next(6);
			}
			return num;
		}

		// Token: 0x06000E4E RID: 3662 RVA: 0x00401B20 File Offset: 0x003FFD20
		public static ushort randGemTile()
		{
			if (WorldGen.genRand.Next(20) != 0)
			{
				return 1;
			}
			ushort num = (ushort)WorldGen.randGem();
			if (num == 0)
			{
				return 67;
			}
			if (num == 1)
			{
				return 66;
			}
			if (num == 2)
			{
				return 63;
			}
			if (num == 3)
			{
				return 65;
			}
			if (num == 4)
			{
				return 64;
			}
			return 68;
		}

		// Token: 0x06000E4F RID: 3663 RVA: 0x00401B68 File Offset: 0x003FFD68
		public static void randMoss(bool justNeon = false)
		{
			WorldGen.neonMossType = WorldGen.genRand.NextFromList(new ushort[]
			{
				539,
				536,
				534,
				625
			});
			if (justNeon)
			{
				return;
			}
			WorldGen.mossType[0] = WorldGen.genRand.Next(5);
			WorldGen.mossType[1] = WorldGen.genRand.Next(5);
			while (WorldGen.mossType[1] == WorldGen.mossType[0])
			{
				WorldGen.mossType[1] = WorldGen.genRand.Next(5);
			}
			WorldGen.mossType[2] = WorldGen.genRand.Next(5);
			while (WorldGen.mossType[2] == WorldGen.mossType[0] || WorldGen.mossType[2] == WorldGen.mossType[1])
			{
				WorldGen.mossType[2] = WorldGen.genRand.Next(5);
			}
		}

		// Token: 0x06000E50 RID: 3664 RVA: 0x00401C28 File Offset: 0x003FFE28
		public static void neonMossBiome(int i, int j, int maxY = 99999)
		{
			Vector2D vector2D;
			vector2D.X = (double)i;
			vector2D.Y = (double)j;
			Vector2D vector2D2;
			vector2D2.X = WorldGen.genRand.NextDouble() * 4.0 - 2.0;
			vector2D2.Y = WorldGen.genRand.NextDouble() * 4.0 - 2.0;
			if (vector2D2.X == 0.0)
			{
				vector2D2.X = 1.0;
			}
			while (vector2D2.Length() < 4.0)
			{
				vector2D2 *= 1.5;
			}
			double num = (double)WorldGen.genRand.Next(60, 80);
			double num2 = (double)WorldGen.genRand.Next(30, 40);
			double num3 = (double)Main.maxTilesX / 4200.0;
			if (WorldGen.getGoodWorldGen)
			{
				num3 *= 1.5;
			}
			num *= num3;
			num2 *= num3;
			while (num2 > 0.0)
			{
				num *= 0.98;
				num2 -= 1.0;
				int num4 = (int)(vector2D.X - num);
				int num5 = (int)(vector2D.X + num);
				int num6 = (int)(vector2D.Y - num);
				int num7 = (int)(vector2D.Y + num);
				if (num4 < 1)
				{
					num4 = 1;
				}
				if (num5 > Main.maxTilesX - 1)
				{
					num5 = Main.maxTilesX - 1;
				}
				if (num6 < 1)
				{
					num6 = 1;
				}
				if (num7 > Main.maxTilesY - 1)
				{
					num7 = Main.maxTilesY - 1;
				}
				if (Main.remixWorld)
				{
					if ((double)num6 < Main.worldSurface)
					{
						num6 = (int)Main.worldSurface;
						if (vector2D2.Y < 5.0)
						{
							vector2D2.Y = 5.0;
						}
					}
				}
				else if ((double)num6 < Main.rockLayer)
				{
					num6 = (int)Main.rockLayer;
					if (vector2D2.Y < 5.0)
					{
						vector2D2.Y = 5.0;
					}
				}
				if (num7 > maxY)
				{
					num7 = maxY;
					if (vector2D2.Y > -5.0)
					{
						vector2D2.Y = -5.0;
					}
				}
				double num8 = num * (1.0 + WorldGen.genRand.NextDouble() * 0.4 - 0.2);
				for (int k = num4; k < num5; k++)
				{
					for (int l = num6; l < num7; l++)
					{
						if (new Vector2D(Math.Abs((double)k - vector2D.X), Math.Abs((double)l - vector2D.Y)).Length() < num8 * 0.8 && WorldGen.TileType(k, l) == 1 && (!Main.tile[k - 1, l].active() || !Main.tile[k + 1, l].active() || !Main.tile[k, l - 1].active() || !Main.tile[k, l + 1].active()))
						{
							WorldGen.SpreadGrass(k - 1, l, 1, (int)WorldGen.neonMossType, true, default(TileColorCache));
						}
					}
				}
				vector2D += vector2D2;
				vector2D2.X += WorldGen.genRand.NextDouble() * 4.0 - 2.0;
				vector2D2.Y += WorldGen.genRand.NextDouble() * 4.0 - 2.0;
				vector2D2.Y = Utils.Clamp<double>(vector2D2.Y, -10.0, 10.0);
				vector2D2.X = Utils.Clamp<double>(vector2D2.X, -10.0, 10.0);
			}
		}

		// Token: 0x06000E51 RID: 3665 RVA: 0x00402010 File Offset: 0x00400210
		public static void setMoss(int x, int y)
		{
			int num;
			if ((double)x < (double)Main.maxTilesX * 0.334)
			{
				num = 0;
			}
			else if ((double)x < (double)Main.maxTilesX * 0.667)
			{
				num = 1;
			}
			else
			{
				num = 2;
			}
			GenVars.mossWall = (ushort)(54 + WorldGen.mossType[num]);
			GenVars.mossTile = (ushort)(179 + WorldGen.mossType[num]);
		}

		// Token: 0x06000E52 RID: 3666 RVA: 0x00402074 File Offset: 0x00400274
		public static void FillWallHolesInArea(Rectangle worldCoordsArea)
		{
			int num = Math.Max(worldCoordsArea.Left, 0);
			int num2 = Math.Min(worldCoordsArea.Right, Main.maxTilesX);
			int num3 = 0;
			for (int i = num; i <= num2; i++)
			{
				if (i >= 0 && i < Main.maxTilesX)
				{
					num3 += WorldGen.FillWallHolesInColumn(i, worldCoordsArea.Top, worldCoordsArea.Bottom);
				}
			}
		}

		// Token: 0x06000E53 RID: 3667 RVA: 0x004020D0 File Offset: 0x004002D0
		private static int FillWallHolesInColumn(int x, int startY, int endY)
		{
			int num = 0;
			x = Utils.Clamp<int>(x, 2, Main.maxTilesX - 1 - 2);
			startY = Math.Max(startY, 2);
			endY = Math.Min(endY, Main.maxTilesY - 2);
			bool flag = false;
			for (int i = startY; i < endY; i++)
			{
				if (Main.tile[x, i].wall == 0)
				{
					if (flag)
					{
						flag = false;
						if (WorldGen.FillWallHolesInSpot(x, i, 150))
						{
							num++;
						}
					}
				}
				else
				{
					flag = true;
				}
			}
			return num;
		}

		// Token: 0x06000E54 RID: 3668 RVA: 0x00402148 File Offset: 0x00400348
		private static bool FillWallHolesInSpot(int originX, int originY, int maxWallsThreshold)
		{
			if (!WorldGen.InWorld(originX, originY, 2))
			{
				return false;
			}
			List<Point> list = new List<Point>();
			List<Point> list2 = new List<Point>();
			HashSet<Point> hashSet = new HashSet<Point>();
			Dictionary<ushort, int> dictionary = new Dictionary<ushort, int>();
			list2.Add(new Point(originX, originY));
			while (list2.Count > 0)
			{
				list.Clear();
				list.AddRange(list2);
				list2.Clear();
				while (list.Count > 0)
				{
					if (hashSet.Count >= maxWallsThreshold)
					{
						return false;
					}
					Point point = list[0];
					if (hashSet.Contains(point))
					{
						list.Remove(point);
					}
					else if (!WorldGen.InWorld(point.X, point.Y, 1))
					{
						list.Remove(point);
					}
					else
					{
						hashSet.Add(point);
						list.Remove(point);
						Tile tile = Main.tile[point.X, point.Y];
						if (tile.wall != 0)
						{
							if (dictionary.ContainsKey(tile.wall))
							{
								dictionary[tile.wall] = dictionary[tile.wall] + 1;
							}
							else
							{
								dictionary[tile.wall] = 1;
							}
						}
						else
						{
							bool flag = false;
							if (!flag)
							{
								int y = point.Y;
								for (int i = point.X - 1; i <= point.X + 1; i++)
								{
									if (!Main.tile[i, y].active())
									{
										flag = true;
										break;
									}
								}
							}
							if (!flag)
							{
								int x = point.X;
								for (int j = point.Y - 1; j <= point.Y + 1; j++)
								{
									if (!Main.tile[x, j].active())
									{
										flag = true;
										break;
									}
								}
							}
							if (flag)
							{
								Point item = new Point(point.X - 1, point.Y);
								if (!hashSet.Contains(item))
								{
									list2.Add(item);
								}
								item = new Point(point.X + 1, point.Y);
								if (!hashSet.Contains(item))
								{
									list2.Add(item);
								}
								item = new Point(point.X, point.Y - 1);
								if (!hashSet.Contains(item))
								{
									list2.Add(item);
								}
								item = new Point(point.X, point.Y + 1);
								if (!hashSet.Contains(item))
								{
									list2.Add(item);
								}
							}
						}
					}
				}
			}
			if (hashSet.Count == 1)
			{
				return false;
			}
			ushort wall = 0;
			int num = -1;
			foreach (KeyValuePair<ushort, int> keyValuePair in dictionary)
			{
				if (keyValuePair.Value > num)
				{
					wall = keyValuePair.Key;
					num = keyValuePair.Value;
				}
			}
			if (num == -1)
			{
				wall = 2;
			}
			foreach (Point point2 in hashSet)
			{
				Tile tile2 = Main.tile[point2.X, point2.Y];
				if (tile2.wall == 0)
				{
					tile2.wall = wall;
				}
			}
			return true;
		}

		// Token: 0x06000E55 RID: 3669 RVA: 0x00402498 File Offset: 0x00400698
		public static void tileCountAndDestroy()
		{
			for (int i = 10; i < Main.maxTilesX - 10; i++)
			{
				for (int j = 10; j < Main.maxTilesY - 10; j++)
				{
					if (Main.tile[i, j].active() && WorldGen.tileCounter(i, j) < WorldGen.tileCounterMax)
					{
						WorldGen.tileCounterKill();
					}
				}
			}
		}

		// Token: 0x06000E56 RID: 3670 RVA: 0x004024F3 File Offset: 0x004006F3
		public static int tileCounter(int x, int y)
		{
			WorldGen.tileCounterNum = 0;
			WorldGen.tileCounterNext(x, y);
			return WorldGen.tileCounterNum;
		}

		// Token: 0x06000E57 RID: 3671 RVA: 0x00402508 File Offset: 0x00400708
		public static void tileCounterNext(int x, int y)
		{
			if (WorldGen.tileCounterNum >= WorldGen.tileCounterMax)
			{
				return;
			}
			if (x < 5 || x > Main.maxTilesX - 5 || y < 5 || y > Main.maxTilesY - 5)
			{
				return;
			}
			if (Main.tile[x, y].active() && Main.tileSolid[(int)Main.tile[x, y].type] && TileID.Sets.CanBeClearedDuringGeneration[(int)Main.tile[x, y].type])
			{
				for (int i = 0; i < WorldGen.tileCounterNum; i++)
				{
					if (WorldGen.tileCounterX[i] == x && WorldGen.tileCounterY[i] == y)
					{
						return;
					}
				}
				WorldGen.tileCounterX[WorldGen.tileCounterNum] = x;
				WorldGen.tileCounterY[WorldGen.tileCounterNum] = y;
				WorldGen.tileCounterNum++;
				WorldGen.tileCounterNext(x - 1, y);
				WorldGen.tileCounterNext(x + 1, y);
				WorldGen.tileCounterNext(x, y - 1);
				WorldGen.tileCounterNext(x, y + 1);
			}
		}

		// Token: 0x06000E58 RID: 3672 RVA: 0x004025F8 File Offset: 0x004007F8
		public static void tileCounterKill()
		{
			for (int i = 0; i < WorldGen.tileCounterNum; i++)
			{
				int num = WorldGen.tileCounterX[i];
				int num2 = WorldGen.tileCounterY[i];
				Main.tile[num, num2].active(false);
			}
		}

		// Token: 0x06000E59 RID: 3673 RVA: 0x00402637 File Offset: 0x00400837
		private static void AddGenerationPass(string name, WorldGenLegacyMethod method)
		{
			WorldGen._generator.Append(new PassLegacy(name, method));
		}

		// Token: 0x06000E5A RID: 3674 RVA: 0x0040264A File Offset: 0x0040084A
		private static void AddGenerationPass(GenPass pass)
		{
			WorldGen._generator.Append(pass);
		}

		// Token: 0x06000E5B RID: 3675 RVA: 0x00402657 File Offset: 0x00400857
		private static void AddGenerationPass(string name, double weight, WorldGenLegacyMethod method)
		{
			WorldGen._generator.Append(new PassLegacy(name, method, weight));
		}

		// Token: 0x06000E5C RID: 3676 RVA: 0x0040266C File Offset: 0x0040086C
		public static bool checkUnderground(int x, int y)
		{
			try
			{
				int num = 120;
				int num2 = 80;
				int num3 = 3;
				if ((double)y > Main.worldSurface + (double)num2)
				{
					return true;
				}
				if ((double)y < Main.worldSurface / 2.0)
				{
					return false;
				}
				int num4 = y - num2;
				int num5 = x - num / 2;
				int num6 = 0;
				if (num5 < 0)
				{
					num5 = 0;
				}
				if (num5 >= Main.maxTilesX - num)
				{
					num5 = Main.maxTilesX - num - 1;
				}
				for (int i = num5; i < num5 + num; i++)
				{
					for (int j = num4; j < num4 + num3; j++)
					{
						if (WorldGen.SolidTile(i, j, false) || Main.tile[x, y].wall > 0)
						{
							num6++;
						}
					}
				}
				if ((double)num6 >= (double)(num * num3) * 0.8)
				{
					return true;
				}
			}
			catch
			{
			}
			return false;
		}

		// Token: 0x06000E5D RID: 3677 RVA: 0x0040275C File Offset: 0x0040095C
		public static int GetNextJungleChestItem()
		{
			int result = 211;
			switch (GenVars.JungleItemCount % 4)
			{
			case 0:
				result = 211;
				break;
			case 1:
				result = 212;
				break;
			case 2:
				result = 213;
				break;
			case 3:
				result = 964;
				break;
			}
			if (WorldGen.genRand.Next(50) == 0)
			{
				result = 753;
			}
			else if (WorldGen.genRand.Next(15) == 0)
			{
				result = 2292;
			}
			else if (WorldGen.genRand.Next(20) == 0)
			{
				result = 3017;
			}
			GenVars.JungleItemCount++;
			return result;
		}

		// Token: 0x06000E5E RID: 3678 RVA: 0x004027FC File Offset: 0x004009FC
		private static void ScanTileColumnAndRemoveClumps(int x)
		{
			int num = 0;
			int y = 0;
			for (int i = 10; i < Main.maxTilesY - 10; i++)
			{
				if (Main.tile[x, i].active() && Main.tileSolid[(int)Main.tile[x, i].type] && TileID.Sets.CanBeClearedDuringGeneration[(int)Main.tile[x, i].type])
				{
					if (num == 0)
					{
						y = i;
					}
					num++;
				}
				else
				{
					if (num > 0 && num < WorldGen.tileCounterMax)
					{
						WorldGen.SmallConsecutivesFound++;
						if (WorldGen.tileCounter(x, y) < WorldGen.tileCounterMax)
						{
							WorldGen.SmallConsecutivesEliminated++;
							WorldGen.tileCounterKill();
						}
					}
					num = 0;
				}
			}
		}

		// Token: 0x06000E5F RID: 3679 RVA: 0x004028B0 File Offset: 0x00400AB0
		public static void OreHelper(int X, int Y)
		{
			for (int i = X - 1; i <= X + 1; i++)
			{
				for (int j = Y - 1; j <= Y + 1; j++)
				{
					if (Main.tile[i, j].type == 1 || Main.tile[i, j].type == 40)
					{
						Main.tile[i, j].type = 0;
					}
				}
			}
		}

		// Token: 0x06000E60 RID: 3680 RVA: 0x00402918 File Offset: 0x00400B18
		public static bool StonePatch(int X, int Y)
		{
			int num = Y;
			while (!WorldGen.SolidTile(X, num, false))
			{
				num++;
				if ((double)num > Main.worldSurface)
				{
					return false;
				}
			}
			if (!TileID.Sets.Conversion.Grass[(int)Main.tile[X, num].type] || !TileID.Sets.Conversion.Grass[(int)Main.tile[X - 1, num].type] || !TileID.Sets.Conversion.Grass[(int)Main.tile[X + 1, num].type])
			{
				return false;
			}
			if (Main.tile[X, num].wall > 0)
			{
				return false;
			}
			for (int i = X - 10; i <= X + 10; i++)
			{
				for (int j = num + 7; j <= num + 30; j++)
				{
					if (!Main.tile[i, j].active() || Main.tileDungeon[(int)Main.tile[i, j].type] || TileID.Sets.Clouds[(int)Main.tile[i, j].type] || TileID.Sets.Conversion.Sand[(int)Main.tile[i, j].type] || Main.tile[i, j].wall == 0 || Main.tile[i, j].type == 199 || Main.tile[i, j].type == 23)
					{
						return false;
					}
				}
			}
			Vector2D vector2D;
			vector2D..ctor((double)X, (double)num);
			Vector2D vector2D2;
			vector2D2.X = WorldGen.genRand.NextDouble() * 0.6 - 0.3;
			vector2D2.Y = WorldGen.genRand.NextDouble() * 0.5 + 0.5;
			double num2 = (double)WorldGen.genRand.Next(13, 18);
			int k = WorldGen.genRand.Next(13, 19);
			if (WorldGen.genRand.Next(3) == 0)
			{
				num2 += (double)WorldGen.genRand.Next(3);
			}
			if (WorldGen.genRand.Next(3) == 0)
			{
				k += WorldGen.genRand.Next(3);
			}
			while (k > 0)
			{
				k--;
				int num3 = X - (int)num2 * 4;
				while ((double)num3 <= (double)X + num2 * 4.0)
				{
					int num4 = num - (int)num2 * 4;
					while ((double)num4 <= (double)num + num2 * 4.0)
					{
						double num5 = num2 * (0.7 + WorldGen.genRand.NextDouble() * 0.6) * 0.3;
						if (WorldGen.genRand.Next(8) == 0)
						{
							num5 *= 2.0;
						}
						Vector2D vector2D3 = vector2D - new Vector2D((double)num3, (double)num4);
						if (vector2D3.Length() < num5 * 2.0 && !Main.tile[num3, num4].active() && Main.tile[num3, num4 + 1].active() && Main.tile[num3, num4 + 1].type == 1 && WorldGen.genRand.Next(7) == 0 && WorldGen.SolidTile(num3 - 1, num4 + 1, false) && WorldGen.SolidTile(num3 + 1, num4 + 1, false))
						{
							if (WorldGen.genRand.Next(3) != 0)
							{
								WorldGen.PlaceTile(num3, num4, 186, true, false, -1, WorldGen.genRand.Next(7, 13));
							}
							if (WorldGen.genRand.Next(3) != 0)
							{
								WorldGen.PlaceSmallPile(num3, num4, WorldGen.genRand.Next(6), 1, 185);
							}
							WorldGen.PlaceSmallPile(num3, num4, WorldGen.genRand.Next(6), 0, 185);
						}
						if (vector2D3.Length() < num5)
						{
							if (Main.tileSolid[(int)Main.tile[num3, num4].type])
							{
								Main.tile[num3, num4].type = 1;
							}
							if (!WorldGen.gen)
							{
								WorldGen.SquareTileFrame(num3, num4, true);
							}
						}
						num4++;
					}
					num3++;
				}
				vector2D += vector2D2;
				vector2D2.X += WorldGen.genRand.NextDouble() * 0.2 - 0.1;
				vector2D2.Y += WorldGen.genRand.NextDouble() * 0.2 - 0.1;
				Utils.Clamp<double>(vector2D2.X, -0.3, 0.3);
				Utils.Clamp<double>(vector2D2.Y, 0.5, 1.0);
			}
			return true;
		}

		// Token: 0x06000E61 RID: 3681 RVA: 0x00402DF4 File Offset: 0x00400FF4
		public static bool ShellPile(int X, int Y)
		{
			int num = Y;
			while (!WorldGen.SolidTile(X, num, false))
			{
				num++;
				if ((double)num > Main.worldSurface)
				{
					return false;
				}
			}
			if (Main.tile[X, num].type != 53)
			{
				return false;
			}
			if (Main.tile[X, num].wall > 0)
			{
				return false;
			}
			num--;
			Vector2D vector2D;
			vector2D..ctor((double)X, (double)num);
			Vector2D vector2D2;
			vector2D2.X = WorldGen.genRand.NextDouble() * 0.6 - 0.3;
			vector2D2.Y = WorldGen.genRand.NextDouble() * 0.5 + 0.5;
			double num2 = (double)WorldGen.genRand.Next(2, 4);
			if (WorldGen.genRand.Next(10) == 0)
			{
				num2 += 1.0;
			}
			int i = WorldGen.genRand.Next(3, 6);
			while (i > 0)
			{
				i--;
				int num3 = X - (int)num2 * 4;
				while ((double)num3 <= (double)X + num2 * 4.0)
				{
					int num4 = num + (int)num2 * 4;
					while ((double)num4 > (double)num - num2 * 4.0)
					{
						double num5 = num2 * (double)WorldGen.genRand.Next(70, 91) * 0.01;
						Vector2D vector2D3 = vector2D - new Vector2D((double)num3, (double)num4);
						vector2D3.X *= 0.6;
						if (vector2D3.Length() < num5)
						{
							if (num4 <= num + 1 || WorldGen.genRand.Next(6) == 0)
							{
								Main.tile[num3, num4].type = 495;
								Main.tile[num3, num4].active(true);
								Main.tile[num3, num4].halfBrick(false);
								Main.tile[num3, num4].slope(0);
								if (!Main.tile[num3, num4 + 1].active())
								{
									Main.tile[num3, num4 + 1].type = 495;
									Main.tile[num3, num4 + 1].active(true);
									Main.tile[num3, num4 + 1].halfBrick(false);
									Main.tile[num3, num4 + 1].slope(0);
									if (!Main.tile[num3, num4 + 2].active())
									{
										Main.tile[num3, num4 + 2].type = 53;
										Main.tile[num3, num4 + 2].active(true);
										Main.tile[num3, num4 + 2].halfBrick(false);
										Main.tile[num3, num4 + 2].slope(0);
										if (!Main.tile[num3, num4 + 3].active())
										{
											Main.tile[num3, num4 + 3].type = 397;
											Main.tile[num3, num4 + 3].active(true);
											Main.tile[num3, num4 + 3].halfBrick(false);
											Main.tile[num3, num4 + 3].slope(0);
										}
									}
								}
								if (!WorldGen.gen)
								{
									WorldGen.SquareTileFrame(num3, num4, true);
								}
							}
							else if (Main.tile[num3, num4].type != 495)
							{
								Main.tile[num3, num4].active(true);
								Main.tile[num3, num4].halfBrick(false);
								Main.tile[num3, num4].slope(0);
								Main.tile[num3, num4].type = 53;
								if (!WorldGen.gen)
								{
									WorldGen.SquareTileFrame(num3, num4, true);
								}
							}
						}
						num4--;
					}
					num3++;
				}
				vector2D += vector2D2;
				vector2D2.X += WorldGen.genRand.NextDouble() * 0.2 - 0.1;
				vector2D2.Y += WorldGen.genRand.NextDouble() * 0.2 - 0.1;
				Utils.Clamp<double>(vector2D2.X, -0.3, 0.3);
				Utils.Clamp<double>(vector2D2.Y, 0.5, 1.0);
			}
			return true;
		}

		// Token: 0x06000E62 RID: 3682 RVA: 0x00403290 File Offset: 0x00401490
		public static bool MarblePileWithStatues(int X, int Y)
		{
			int num = Y;
			while (!WorldGen.SolidTile(X, num, false))
			{
				num++;
				if ((double)num > Main.worldSurface)
				{
					return false;
				}
			}
			if (Main.tile[X, num].type != 0 && Main.tile[X, num].type != 2)
			{
				return false;
			}
			if (Main.tile[X, num].wall > 0)
			{
				return false;
			}
			int num2 = 130;
			int num3 = 60;
			int num4 = (int)MathHelper.Clamp((float)(X - num2), 30f, (float)(Main.maxTilesX - 30));
			int num5 = (int)MathHelper.Clamp((float)(X + num2), 30f, (float)(Main.maxTilesX - 30));
			int num6 = (int)MathHelper.Clamp((float)(num - num3), 30f, (float)(Main.maxTilesY - 30));
			int num7 = (int)MathHelper.Clamp((float)(num + num3), 30f, (float)(Main.maxTilesY - 30));
			for (int i = num4; i <= num5; i++)
			{
				for (int j = num6; j <= num7; j++)
				{
					if (Main.tile[i, j].active() && (Main.tile[i, j].type == 367 || Main.tile[i, j].type == 191))
					{
						return false;
					}
				}
			}
			num--;
			Vector2D vector2D;
			vector2D..ctor((double)X, (double)num);
			Vector2D vector2D2;
			vector2D2.X = WorldGen.genRand.NextDouble() * 0.6 - 0.3;
			vector2D2.Y = WorldGen.genRand.NextDouble() * 0.5 + 0.5;
			double num8 = (double)WorldGen.genRand.Next(2, 4);
			if (WorldGen.genRand.Next(10) == 0)
			{
				num8 += 1.0;
			}
			int k = WorldGen.genRand.Next(3, 6);
			while (k > 0)
			{
				k--;
				int num9 = X - (int)num8 * 5;
				while ((double)num9 <= (double)X + num8 * 5.0)
				{
					int num10 = num + (int)num8 * 3;
					while ((double)num10 > (double)num - num8 * 3.0)
					{
						double num11 = num8 * (double)WorldGen.genRand.Next(70, 91) * 0.01 * 1.2;
						Vector2D vector2D3 = vector2D - new Vector2D((double)num9, (double)num10);
						if (vector2D3.Length() > 30.0)
						{
							vector2D..ctor((double)X, (double)num);
							vector2D2.X = WorldGen.genRand.NextDouble() * 0.6 - 0.3;
							vector2D2.Y = WorldGen.genRand.NextDouble() * 0.5 + 0.5;
						}
						else
						{
							vector2D3.X *= 0.25;
							vector2D3.Y *= 0.8;
							if (vector2D3.Length() < num11 && Main.tile[num9, num10].active())
							{
								Main.tile[num9, num10].active(true);
								Main.tile[num9, num10].halfBrick(false);
								Main.tile[num9, num10].slope(0);
								Main.tile[num9, num10].type = 367;
								if (!WorldGen.gen)
								{
									WorldGen.SquareTileFrame(num9, num10, true);
								}
							}
						}
						num10--;
					}
					num9++;
				}
				vector2D += vector2D2;
				vector2D2.X += WorldGen.genRand.NextDouble() * 0.2 - 0.1;
				vector2D2.Y += (0.1 + WorldGen.genRand.NextDouble() * 0.1) * 0.8;
				Utils.Clamp<double>(vector2D2.X, -0.3, 0.3);
				Utils.Clamp<double>(vector2D2.Y, 0.5, 1.0);
			}
			int num12 = 0;
			int num13 = X - (int)num8 * 5;
			while ((double)num13 <= (double)X + num8 * 5.0 && num12 < 3)
			{
				if (num13 % 2 != 1 && (num12 <= 0 || WorldGen.genRand.Next(5) == 0))
				{
					int num14 = (int)vector2D.Y - 20;
					Tile tile = Main.tile[num13, num14];
					while (tile != null && !tile.active())
					{
						num14++;
						tile = Main.tile[num13, num14];
					}
					if (tile != null && tile.type == 367 && !Main.tile[num13, num14 - 1].active() && WorldGen.Statue(num13, num14 - 1, 26))
					{
						num12++;
					}
				}
				num13++;
			}
			return true;
		}

		// Token: 0x06000E63 RID: 3683 RVA: 0x004037A4 File Offset: 0x004019A4
		public static bool Statue(int x, int y, byte paint)
		{
			int num = WorldGen.genRand.Next(2, GenVars.statueList.Length);
			int x2 = (int)GenVars.statueList[num].X;
			int y2 = (int)GenVars.statueList[num].Y;
			while (!Main.tile[x, y].active())
			{
				y++;
				if (y >= Main.maxTilesY)
				{
					break;
				}
			}
			if (y >= Main.maxTilesY)
			{
				return false;
			}
			y--;
			if (WorldGen.PlaceTile(x, y, x2, true, true, -1, y2))
			{
				for (int i = 0; i < 2; i++)
				{
					for (int j = 0; j < 3; j++)
					{
						Main.tile[x + i, y + j - 2].color(paint);
					}
				}
				return true;
			}
			return false;
		}

		// Token: 0x06000E64 RID: 3684 RVA: 0x00403860 File Offset: 0x00401A60
		public static bool OrePatch(int X, int Y)
		{
			ushort type = (ushort)WorldGen.SavedOreTiers.Copper;
			if (WorldGen.genRand.Next(3) == 0)
			{
				type = (ushort)WorldGen.SavedOreTiers.Iron;
			}
			int num = X;
			int i = Y;
			while (!WorldGen.SolidTile(num, i, false))
			{
				i++;
				if ((double)i > Main.worldSurface)
				{
					return false;
				}
			}
			if (!TileID.Sets.Conversion.Grass[(int)Main.tile[num, i].type] || !TileID.Sets.Conversion.Grass[(int)Main.tile[num - 1, i].type] || !TileID.Sets.Conversion.Grass[(int)Main.tile[num + 1, i].type])
			{
				return false;
			}
			if (Main.tile[num, i].wall > 0)
			{
				return false;
			}
			for (int j = num - 10; j <= num + 10; j++)
			{
				for (int k = i + 7; k <= i + 30; k++)
				{
					if (!Main.tile[j, k].active() || Main.tileDungeon[(int)Main.tile[j, k].type] || TileID.Sets.Clouds[(int)Main.tile[j, k].type] || TileID.Sets.Conversion.Sand[(int)Main.tile[j, k].type] || Main.tile[j, k].wall == 0)
					{
						return false;
					}
				}
			}
			i += WorldGen.genRand.Next(2);
			Main.tile[num, i].type = type;
			Main.tile[num, i].active(true);
			WorldGen.OreHelper(num, i);
			if (!WorldGen.gen)
			{
				WorldGen.SquareTileFrame(num, i, true);
			}
			int num2 = i;
			while (i < num2 + WorldGen.genRand.Next(8, 13))
			{
				num += WorldGen.genRand.Next(-1, 2);
				i += WorldGen.genRand.Next(1, 3);
				if (WorldGen.genRand.Next(3) == 0)
				{
					i++;
				}
				Main.tile[num, i].type = type;
				Main.tile[num, i].active(true);
				WorldGen.OreHelper(num, i);
				if (!WorldGen.gen)
				{
					WorldGen.SquareTileFrame(num, i, true);
				}
				if (WorldGen.genRand.Next(4) == 0)
				{
					int num3 = num + WorldGen.genRand.Next(-2, 3);
					int num4 = i + WorldGen.genRand.Next(2);
					Main.tile[num3, num4].type = type;
					Main.tile[num3, num4].active(true);
					WorldGen.OreHelper(num3, num4);
					if (!WorldGen.gen)
					{
						WorldGen.SquareTileFrame(num3, num4, true);
					}
				}
			}
			Vector2D vector2D;
			vector2D..ctor((double)num, (double)i);
			Vector2D vector2D2;
			vector2D2.X = WorldGen.genRand.NextDouble() * 0.6 - 0.3;
			vector2D2.Y = WorldGen.genRand.NextDouble() * 0.5 + 0.5;
			double num5 = (double)WorldGen.genRand.Next(5, 9);
			int l = WorldGen.genRand.Next(9, 14);
			if (WorldGen.genRand.Next(3) == 0)
			{
				num5 += (double)WorldGen.genRand.Next(2);
			}
			if (WorldGen.genRand.Next(3) == 0)
			{
				l += WorldGen.genRand.Next(2);
			}
			while (l > 0)
			{
				l--;
				int num6 = num - (int)num5 * 4;
				while ((double)num6 <= (double)num + num5 * 4.0)
				{
					int num7 = i - (int)num5 * 4;
					while ((double)num7 <= (double)i + num5 * 4.0)
					{
						double num8 = num5 * (0.5 + WorldGen.genRand.NextDouble() * 0.5) * 0.1;
						double num9 = num5 * (0.7 + WorldGen.genRand.NextDouble() * 0.6) * 0.3;
						if (WorldGen.genRand.Next(8) == 0)
						{
							num9 *= 2.0;
						}
						Vector2D vector2D3 = vector2D - new Vector2D((double)num6, (double)num7);
						if (vector2D3.Length() < num8)
						{
							Main.tile[num6, num7].active(false);
						}
						else if (vector2D3.Length() < num9)
						{
							Main.tile[num6, num7].type = type;
							if (WorldGen.genRand.Next(4) == 0)
							{
								Main.tile[num6, num7].active(true);
							}
							WorldGen.OreHelper(num6, num7);
							if (!WorldGen.gen)
							{
								WorldGen.SquareTileFrame(num6, num7, true);
							}
						}
						num7++;
					}
					num6++;
				}
				vector2D += vector2D2;
				vector2D2.X += WorldGen.genRand.NextDouble() * 0.2 - 0.1;
				vector2D2.Y += WorldGen.genRand.NextDouble() * 0.2 - 0.1;
				Utils.Clamp<double>(vector2D2.X, -0.3, 0.3);
				Utils.Clamp<double>(vector2D2.Y, 0.5, 1.0);
			}
			return true;
		}

		// Token: 0x06000E65 RID: 3685 RVA: 0x00403DC4 File Offset: 0x00401FC4
		public static bool PlaceOasis(int X, int Y)
		{
			int num = Y;
			if (Main.tile[X, num].active() || Main.tile[X, num].wall != 0)
			{
				return false;
			}
			while (!Main.tile[X, num].active() && Main.tile[X, num].wall == 0 && (double)num <= Main.worldSurface)
			{
				num++;
			}
			if ((double)num > Main.worldSurface - 10.0)
			{
				return false;
			}
			if (Main.tile[X, num].type != 53)
			{
				return false;
			}
			int num2 = 350;
			for (int i = 0; i < GenVars.numOasis; i++)
			{
				if (Vector2D.Distance(GenVars.oasisPosition[i].ToVector2D(), new Vector2D((double)X, (double)num)) < (double)num2)
				{
					return false;
				}
			}
			int num3 = WorldGen.genRand.Next(45, 61);
			int oasisHeight = GenVars.oasisHeight;
			int num4 = num3 + 50;
			int num5 = 4;
			for (int j = X - num4; j <= X + num4; j++)
			{
				for (int k = num - oasisHeight; k <= num + oasisHeight + num5; k++)
				{
					Tile tile = Main.tile[j, k];
					if (tile.active())
					{
						if (Main.tileSolid[(int)tile.type])
						{
							if ((tile.type == 151 || tile.type == 397) && Math.Abs(j - X) < num3 && Math.Abs(k - num) < oasisHeight / 2)
							{
								return false;
							}
							if (tile.type != 53)
							{
								return false;
							}
						}
					}
					else if ((tile.liquid > 0 || tile.wall > 0) && Math.Abs(j - X) < num3 && Math.Abs(k - num) < oasisHeight / 2)
					{
						return false;
					}
				}
				if (j > X - num3 / 2 && j < X - num3 / 2)
				{
					if (Main.tile[j, num - 6].active())
					{
						return false;
					}
					if (!Main.tile[j, num + 1].active())
					{
						return false;
					}
				}
			}
			int num6 = 5;
			int num7 = num;
			while (!Main.tile[X - num3, num + num6].active() || Main.tile[X - num3, num + num6].wall != 0 || !Main.tile[X + num3, num + num6].active() || Main.tile[X + num3, num + num6].wall != 0)
			{
				num++;
				if (num - num7 > 20)
				{
					break;
				}
			}
			int num8 = num3 / 2;
			int num9 = X - num3 * 3;
			int num10 = X + num3 * 3;
			int num11 = num - oasisHeight * 4;
			int num12 = num + oasisHeight * 3;
			if (num9 < 0)
			{
				num9 = 0;
			}
			if (num10 > Main.maxTilesX)
			{
				num10 = Main.maxTilesX;
			}
			if (num11 < 0)
			{
				num11 = 0;
			}
			if (num12 > Main.maxTilesY)
			{
				num12 = Main.maxTilesY;
			}
			for (int l = num9; l < num10; l++)
			{
				for (int m = num11; m < num12; m++)
				{
					double num13 = (double)Math.Abs(l - X) * 0.7;
					double num14 = (double)Math.Abs(m - num) * 1.35;
					double num15 = Math.Sqrt(num13 * num13 + num14 * num14);
					double num16 = (double)num8 * (0.53 + WorldGen.genRand.NextDouble() * 0.04);
					double num17 = (double)Math.Abs(l - X) / (double)(num10 - X);
					num17 = 1.0 - num17;
					num17 *= 2.3;
					num17 *= num17;
					num17 *= num17;
					if (num15 < num16)
					{
						if (m == num + 1)
						{
							Main.tile[l, m].liquid = 127;
						}
						else if (m > num + 1)
						{
							Main.tile[l, m].liquid = byte.MaxValue;
						}
						Main.tile[l, m].lava(false);
						Main.tile[l, m].active(false);
					}
					else if (m < num && num13 < num16 + (double)(Math.Abs(m - num) * 3) * num17)
					{
						if (Main.tile[l, m].type == 53)
						{
							Main.tile[l, m].active(false);
						}
					}
					else if (m >= num && num13 < num16 + (double)Math.Abs(m - num) * num17 && Main.tile[l, m].wall == 0)
					{
						if (Main.tile[l, m].active() && Main.tileSolid[(int)Main.tile[l, m].type] && !Main.tileSolidTop[(int)Main.tile[l, m].type])
						{
							Main.tile[l, m].slope(0);
							Main.tile[l, m].halfBrick(false);
						}
						else
						{
							Main.tile[l, m].active(true);
							Main.tile[l, m].type = 53;
							Main.tile[l, m].slope(0);
							Main.tile[l, m].halfBrick(false);
						}
					}
				}
			}
			int num18 = 50;
			num9 = X - num3 * 2;
			num10 = X + num3 * 2;
			num12 = num + oasisHeight * 2;
			for (int n = num9; n < num10; n++)
			{
				for (int num19 = num12; num19 >= num; num19--)
				{
					double num20 = (double)Math.Abs(n - X) * 0.7;
					double num21 = (double)Math.Abs(num19 - num) * 1.35;
					double num22 = Math.Sqrt(num20 * num20 + num21 * num21);
					double num23 = (double)num8 * 0.5700000000000001;
					if (num22 > num23 && !Main.tile[n, num19].active() && Main.tile[n, num19].wall == 0)
					{
						int num24 = -1;
						int num25 = -1;
						int num26 = n;
						while (num26 <= n + num18 && Main.tile[num26, num19 + 1].active() && Main.tileSolid[(int)Main.tile[num26, num19 + 1].type] && Main.tile[num26, num19].wall <= 0)
						{
							if (Main.tile[num26, num19].active() && Main.tileSolid[(int)Main.tile[num26, num19].type])
							{
								if (Main.tile[num26, num19].type == 53)
								{
								}
								num25 = num26;
								break;
							}
							if (Main.tile[num26, num19].active())
							{
								break;
							}
							num26++;
						}
						int num27 = n;
						while (num27 >= n - num18 && Main.tile[num27, num19 + 1].active() && Main.tileSolid[(int)Main.tile[num27, num19 + 1].type] && Main.tile[num27, num19].wall <= 0)
						{
							if (Main.tile[num27, num19].active() && Main.tileSolid[(int)Main.tile[num27, num19].type])
							{
								if (Main.tile[num27, num19].type == 53)
								{
								}
								num24 = num27;
								break;
							}
							if (Main.tile[num27, num19].active())
							{
								break;
							}
							num27--;
						}
						bool flag = true;
						if (num24 > -1 && num25 > -1 && flag)
						{
							int num28 = 0;
							for (int num29 = num24 + 1; num29 < num25; num29++)
							{
								if (num25 - num24 > 5 && WorldGen.genRand.Next(5) == 0)
								{
									num28 = WorldGen.genRand.Next(5, 10);
								}
								Main.tile[num29, num19].active(true);
								Main.tile[num29, num19].type = 53;
								if (num28 > 0)
								{
									num28--;
									Main.tile[num29, num19 - 1].active(true);
									Main.tile[num29, num19 - 1].type = 53;
								}
							}
						}
					}
				}
			}
			if (GenVars.numOasis < GenVars.maxOasis)
			{
				GenVars.oasisPosition[GenVars.numOasis] = new Point(X, num);
				GenVars.oasisWidth[GenVars.numOasis] = num3;
				GenVars.numOasis++;
			}
			return true;
		}

		// Token: 0x06000E66 RID: 3686 RVA: 0x00404688 File Offset: 0x00402888
		public static bool BiomeTileCheck(int x, int y)
		{
			int num = 50;
			for (int i = x - num; i <= x + num; i++)
			{
				for (int j = y - num; j <= y + num; j++)
				{
					if (WorldGen.InWorld(i, j, 0))
					{
						if (Main.tile[i, j].active())
						{
							int type = (int)Main.tile[i, j].type;
							if (type == 368 || type == 367 || type == 147 || type == 161 || type == 162 || type == 70 || type == 72 || type == 396 || type == 397)
							{
								return true;
							}
						}
						int wall = (int)Main.tile[i, j].wall;
						if (wall == 187 || wall == 216)
						{
							return true;
						}
					}
				}
			}
			return false;
		}

		// Token: 0x1700015C RID: 348
		// (get) Token: 0x06000E67 RID: 3687 RVA: 0x00404769 File Offset: 0x00402969
		public static double oceanLevel
		{
			get
			{
				return (Main.worldSurface + Main.rockLayer) / 2.0 + 40.0;
			}
		}

		// Token: 0x06000E68 RID: 3688 RVA: 0x0040478A File Offset: 0x0040298A
		public static bool oceanDepths(int x, int y)
		{
			return (double)y <= WorldGen.oceanLevel && (x < WorldGen.beachDistance || x > Main.maxTilesX - WorldGen.beachDistance);
		}

		// Token: 0x06000E69 RID: 3689 RVA: 0x004047B0 File Offset: 0x004029B0
		public static void UpdateDesertHiveBounds(int x, int y)
		{
			if (GenVars.desertHiveHigh > y)
			{
				GenVars.desertHiveHigh = y;
			}
			if (GenVars.desertHiveLow < y)
			{
				GenVars.desertHiveLow = y;
			}
			if (GenVars.desertHiveLeft > x)
			{
				GenVars.desertHiveLeft = x;
			}
			if (GenVars.desertHiveRight < x)
			{
				GenVars.desertHiveRight = x;
			}
		}

		// Token: 0x06000E6A RID: 3690 RVA: 0x004047EC File Offset: 0x004029EC
		public static void GenerateWorld(int seed, GenerationProgress customProgressObject = null)
		{
			WorldGen.remixWorldGen = WorldGen.tempRemixWorldGen;
			WorldGen.tenthAnniversaryWorldGen = WorldGen.tempTenthAnniversaryWorldGen;
			WorldGen.drunkWorldGen = false;
			WorldGen.drunkWorldGenText = false;
			Main.afterPartyOfDoom = false;
			if (seed == 5162020 || WorldGen.everythingWorldGen)
			{
				WorldGen.drunkWorldGen = true;
				WorldGen.drunkWorldGenText = true;
				Main.drunkWorld = true;
				Main.rand = new UnifiedRandom();
				seed = Main.rand.Next(999999999);
				if (!Main.dayTime)
				{
					Main.time = 0.0;
				}
			}
			else if (seed == 5162021 || seed == 5162011)
			{
				WorldGen.tenthAnniversaryWorldGen = true;
			}
			Main.notTheBeesWorld = WorldGen.notTheBees;
			if (WorldGen.notTheBees)
			{
				Main.rand = new UnifiedRandom();
				seed = Main.rand.Next(999999999);
			}
			Main.noTrapsWorld = WorldGen.noTrapsWorldGen;
			if (WorldGen.noTrapsWorldGen)
			{
				Main.rand = new UnifiedRandom();
				seed = Main.rand.Next(999999999);
			}
			if (WorldGen.getGoodWorldGen)
			{
				Main.getGoodWorld = true;
				Main.rand = new UnifiedRandom();
				seed = Main.rand.Next(999999999);
			}
			else
			{
				Main.getGoodWorld = false;
			}
			Main.tenthAnniversaryWorld = WorldGen.tenthAnniversaryWorldGen;
			if (WorldGen.tenthAnniversaryWorldGen)
			{
				Main.rand = new UnifiedRandom();
				seed = Main.rand.Next(999999999);
			}
			Main.dontStarveWorld = WorldGen.dontStarveWorldGen;
			if (WorldGen.dontStarveWorldGen)
			{
				Main.rand = new UnifiedRandom();
				seed = Main.rand.Next(999999999);
			}
			Main.remixWorld = WorldGen.remixWorldGen;
			if (WorldGen.remixWorldGen)
			{
				Main.rand = new UnifiedRandom();
				seed = Main.rand.Next(999999999);
			}
			Main.zenithWorld = WorldGen.everythingWorldGen;
			Console.WriteLine("Creating world - Seed: {0} Width: {1}, Height: {2}, Evil: {3}, IsExpert: {4}", new object[]
			{
				seed,
				Main.maxTilesX,
				Main.maxTilesY,
				WorldGen.WorldGenParam_Evil,
				Main.expertMode
			});
			Main.lockMenuBGChange = true;
			GenVars.configuration = WorldGenConfiguration.FromEmbeddedPath("Terraria.GameContent.WorldBuilding.Configuration.json");
			WorldGen.Hooks.ProcessWorldGenConfig(ref GenVars.configuration);
			WorldGen._lastSeed = seed;
			WorldGen._generator = new WorldGenerator(seed, GenVars.configuration);
			WorldGen._genRand = new UnifiedRandom(seed);
			Main.rand = new UnifiedRandom(seed);
			GenVars.structures = new StructureMap();
			GenVars.desertHiveHigh = Main.maxTilesY;
			GenVars.desertHiveLow = 0;
			GenVars.desertHiveLeft = Main.maxTilesX;
			GenVars.desertHiveRight = 0;
			GenVars.worldSurfaceLow = 0.0;
			GenVars.worldSurface = 0.0;
			GenVars.worldSurfaceHigh = 0.0;
			GenVars.rockLayerLow = 0.0;
			GenVars.rockLayer = 0.0;
			GenVars.rockLayerHigh = 0.0;
			GenVars.copper = 7;
			GenVars.iron = 6;
			GenVars.silver = 9;
			GenVars.gold = 8;
			GenVars.dungeonSide = 0;
			GenVars.jungleHut = (ushort)WorldGen.genRand.Next(5);
			GenVars.shellStartXLeft = 0;
			GenVars.shellStartYLeft = 0;
			GenVars.shellStartXRight = 0;
			GenVars.shellStartYRight = 0;
			GenVars.PyrX = null;
			GenVars.PyrY = null;
			GenVars.numPyr = 0;
			GenVars.jungleMinX = -1;
			GenVars.jungleMaxX = -1;
			GenVars.snowMinX = new int[Main.maxTilesY];
			GenVars.snowMaxX = new int[Main.maxTilesY];
			GenVars.snowTop = 0;
			GenVars.snowBottom = 0;
			GenVars.skyLakes = 1;
			if (Main.maxTilesX > 8000)
			{
				GenVars.skyLakes++;
			}
			if (Main.maxTilesX > 6000)
			{
				GenVars.skyLakes++;
			}
			GenVars.beachBordersWidth = 275;
			GenVars.beachSandRandomCenter = GenVars.beachBordersWidth + 5 + 40;
			GenVars.beachSandRandomWidthRange = 20;
			GenVars.beachSandDungeonExtraWidth = 40;
			GenVars.beachSandJungleExtraWidth = 20;
			GenVars.oceanWaterStartRandomMin = 220;
			GenVars.oceanWaterStartRandomMax = GenVars.oceanWaterStartRandomMin + 40;
			GenVars.oceanWaterForcedJungleLength = 275;
			GenVars.leftBeachEnd = 0;
			GenVars.rightBeachStart = 0;
			GenVars.evilBiomeBeachAvoidance = GenVars.beachSandRandomCenter + 60;
			GenVars.evilBiomeAvoidanceMidFixer = 50;
			GenVars.lakesBeachAvoidance = GenVars.beachSandRandomCenter + 20;
			GenVars.smallHolesBeachAvoidance = GenVars.beachSandRandomCenter + 20;
			GenVars.surfaceCavesBeachAvoidance = GenVars.beachSandRandomCenter + 20;
			GenVars.surfaceCavesBeachAvoidance2 = GenVars.beachSandRandomCenter + 20;
			GenVars.jungleOriginX = 0;
			GenVars.snowOriginLeft = 0;
			GenVars.snowOriginRight = 0;
			GenVars.logX = -1;
			GenVars.logY = -1;
			GenVars.dungeonLocation = 0;
			if (WorldGen.everythingWorldGen)
			{
				Main.starGame = true;
			}
			WorldGen.AddGenerationPass("Reset", delegate(GenerationProgress progress, GameConfiguration passConfig)
			{
				if (WorldGen.genRand.Next(2) == 0)
				{
					GenVars.crimsonLeft = false;
				}
				else
				{
					GenVars.crimsonLeft = true;
				}
				GenVars.numOceanCaveTreasure = 0;
				GenVars.skipDesertTileCheck = false;
				WorldGen.growGrassUnderground = false;
				WorldGen.gen = true;
				Liquid.ReInit();
				WorldGen.noTileActions = true;
				progress.Message = "";
				WorldGen.SetupStatueList();
				WorldGen.RandomizeWeather();
				Main.cloudAlpha = 0f;
				Main.maxRaining = 0f;
				Main.raining = false;
				WorldGen.heartCount = 0;
				GenVars.extraBastStatueCount = 0;
				GenVars.extraBastStatueCountMax = 2;
				Main.checkXMas();
				Main.checkHalloween();
				WorldGen.ResetGenerator();
				GenVars.UndergroundDesertLocation = Rectangle.Empty;
				GenVars.UndergroundDesertHiveLocation = Rectangle.Empty;
				GenVars.numLarva = 0;
				List<int> list = new List<int>
				{
					274,
					220,
					112,
					218,
					3019
				};
				if (WorldGen.remixWorldGen)
				{
					list = new List<int>
					{
						274,
						220,
						683,
						218,
						3019
					};
				}
				List<int> list2 = new List<int>();
				while (list.Count > 0)
				{
					int index = WorldGen.genRand.Next(list.Count);
					int item = list[index];
					list2.Add(item);
					list.RemoveAt(index);
				}
				GenVars.hellChestItem = list2.ToArray();
				int num = 86400;
				Main.slimeRainTime = (double)(-(double)WorldGen.genRand.Next(num * 2, num * 3));
				Main.cloudBGActive = (float)(-(float)WorldGen.genRand.Next(8640, 86400));
				WorldGen.skipFramingDuringGen = false;
				WorldGen.SavedOreTiers.Copper = 7;
				WorldGen.SavedOreTiers.Iron = 6;
				WorldGen.SavedOreTiers.Silver = 9;
				WorldGen.SavedOreTiers.Gold = 8;
				GenVars.copperBar = 20;
				GenVars.ironBar = 22;
				GenVars.silverBar = 21;
				GenVars.goldBar = 19;
				if (WorldGen.genRand.Next(2) == 0)
				{
					GenVars.copper = 166;
					GenVars.copperBar = 703;
					WorldGen.SavedOreTiers.Copper = 166;
				}
				if ((!WorldGen.dontStarveWorldGen || WorldGen.drunkWorldGen) && WorldGen.genRand.Next(2) == 0)
				{
					GenVars.iron = 167;
					GenVars.ironBar = 704;
					WorldGen.SavedOreTiers.Iron = 167;
				}
				if (WorldGen.genRand.Next(2) == 0)
				{
					GenVars.silver = 168;
					GenVars.silverBar = 705;
					WorldGen.SavedOreTiers.Silver = 168;
				}
				if ((!WorldGen.dontStarveWorldGen || WorldGen.drunkWorldGen) && WorldGen.genRand.Next(2) == 0)
				{
					GenVars.gold = 169;
					GenVars.goldBar = 706;
					WorldGen.SavedOreTiers.Gold = 169;
				}
				WorldGen.crimson = (WorldGen.genRand.Next(2) == 0);
				if (WorldGen.WorldGenParam_Evil == 0)
				{
					WorldGen.crimson = false;
				}
				if (WorldGen.WorldGenParam_Evil == 1)
				{
					WorldGen.crimson = true;
				}
				if (GenVars.jungleHut == 0)
				{
					GenVars.jungleHut = 119;
				}
				else if (GenVars.jungleHut == 1)
				{
					GenVars.jungleHut = 120;
				}
				else if (GenVars.jungleHut == 2)
				{
					GenVars.jungleHut = 158;
				}
				else if (GenVars.jungleHut == 3)
				{
					GenVars.jungleHut = 175;
				}
				else if (GenVars.jungleHut == 4)
				{
					GenVars.jungleHut = 45;
				}
				Main.worldID = WorldGen.genRand.Next(int.MaxValue);
				WorldGen.RandomizeTreeStyle();
				WorldGen.RandomizeCaveBackgrounds();
				WorldGen.RandomizeBackgrounds(WorldGen.genRand);
				WorldGen.RandomizeMoonState(WorldGen.genRand, false);
				WorldGen.TreeTops.CopyExistingWorldInfoForWorldGeneration();
				GenVars.dungeonSide = ((WorldGen.genRand.Next(2) == 0) ? -1 : 1);
				if (WorldGen.remixWorldGen)
				{
					if (GenVars.dungeonSide == -1)
					{
						double num2 = 1.0 - (double)WorldGen.genRand.Next(20, 35) * 0.01;
						GenVars.jungleOriginX = (int)((double)Main.maxTilesX * num2);
					}
					else
					{
						double num3 = (double)WorldGen.genRand.Next(20, 35) * 0.01;
						GenVars.jungleOriginX = (int)((double)Main.maxTilesX * num3);
					}
				}
				else
				{
					int minValue = 15;
					int maxValue = 30;
					if (WorldGen.tenthAnniversaryWorldGen && !WorldGen.remixWorldGen)
					{
						minValue = 25;
						maxValue = 35;
					}
					if (GenVars.dungeonSide == -1)
					{
						double num4 = 1.0 - (double)WorldGen.genRand.Next(minValue, maxValue) * 0.01;
						GenVars.jungleOriginX = (int)((double)Main.maxTilesX * num4);
					}
					else
					{
						double num5 = (double)WorldGen.genRand.Next(minValue, maxValue) * 0.01;
						GenVars.jungleOriginX = (int)((double)Main.maxTilesX * num5);
					}
				}
				int num6 = WorldGen.genRand.Next(Main.maxTilesX);
				if (WorldGen.drunkWorldGen)
				{
					GenVars.dungeonSide *= -1;
				}
				if (GenVars.dungeonSide == 1)
				{
					while ((double)num6 < (double)Main.maxTilesX * 0.6 || (double)num6 > (double)Main.maxTilesX * 0.75)
					{
						num6 = WorldGen.genRand.Next(Main.maxTilesX);
					}
				}
				else
				{
					while ((double)num6 < (double)Main.maxTilesX * 0.25 || (double)num6 > (double)Main.maxTilesX * 0.4)
					{
						num6 = WorldGen.genRand.Next(Main.maxTilesX);
					}
				}
				if (WorldGen.drunkWorldGen)
				{
					GenVars.dungeonSide *= -1;
				}
				int num7 = WorldGen.genRand.Next(50, 90);
				double num8 = (double)Main.maxTilesX / 4200.0;
				num7 += (int)((double)WorldGen.genRand.Next(20, 40) * num8);
				num7 += (int)((double)WorldGen.genRand.Next(20, 40) * num8);
				int num9 = num6 - num7;
				num7 = WorldGen.genRand.Next(50, 90);
				num7 += (int)((double)WorldGen.genRand.Next(20, 40) * num8);
				num7 += (int)((double)WorldGen.genRand.Next(20, 40) * num8);
				int num10 = num6 + num7;
				if (num9 < 0)
				{
					num9 = 0;
				}
				if (num10 > Main.maxTilesX)
				{
					num10 = Main.maxTilesX;
				}
				GenVars.snowOriginLeft = num9;
				GenVars.snowOriginRight = num10;
				GenVars.leftBeachEnd = WorldGen.genRand.Next(GenVars.beachSandRandomCenter - GenVars.beachSandRandomWidthRange, GenVars.beachSandRandomCenter + GenVars.beachSandRandomWidthRange);
				if (WorldGen.tenthAnniversaryWorldGen && !WorldGen.remixWorldGen)
				{
					GenVars.leftBeachEnd = GenVars.beachSandRandomCenter + GenVars.beachSandRandomWidthRange;
				}
				if (GenVars.dungeonSide == 1)
				{
					GenVars.leftBeachEnd += GenVars.beachSandDungeonExtraWidth;
				}
				else
				{
					GenVars.leftBeachEnd += GenVars.beachSandJungleExtraWidth;
				}
				GenVars.rightBeachStart = Main.maxTilesX - WorldGen.genRand.Next(GenVars.beachSandRandomCenter - GenVars.beachSandRandomWidthRange, GenVars.beachSandRandomCenter + GenVars.beachSandRandomWidthRange);
				if (WorldGen.tenthAnniversaryWorldGen && !WorldGen.remixWorldGen)
				{
					GenVars.rightBeachStart = Main.maxTilesX - (GenVars.beachSandRandomCenter + GenVars.beachSandRandomWidthRange);
				}
				if (GenVars.dungeonSide == -1)
				{
					GenVars.rightBeachStart -= GenVars.beachSandDungeonExtraWidth;
				}
				else
				{
					GenVars.rightBeachStart -= GenVars.beachSandJungleExtraWidth;
				}
				int num11 = 50;
				if (GenVars.dungeonSide == -1)
				{
					GenVars.dungeonLocation = WorldGen.genRand.Next(GenVars.leftBeachEnd + num11, (int)((double)Main.maxTilesX * 0.2));
				}
				else
				{
					GenVars.dungeonLocation = WorldGen.genRand.Next((int)((double)Main.maxTilesX * 0.8), GenVars.rightBeachStart - num11);
				}
				int num12 = 0;
				if (Main.maxTilesX >= 8400)
				{
					num12 = 2;
				}
				else if (Main.maxTilesX >= 6400)
				{
					num12 = 1;
				}
				GenVars.extraBastStatueCountMax = 2 + num12;
				Main.tileSolid[659] = false;
			});
			WorldGen.AddGenerationPass(new TerrainPass());
			WorldGen.AddGenerationPass("Dunes", delegate(GenerationProgress progress, GameConfiguration passConfig)
			{
				progress.Message = Lang.gen[1].Value;
				int random = passConfig.Get<WorldGenRange>("Count").GetRandom(WorldGen.genRand);
				double num = passConfig.Get<double>("ChanceOfPyramid");
				if (WorldGen.drunkWorldGen)
				{
					num = 1.0;
				}
				double num2 = (double)Main.maxTilesX / 4200.0;
				GenVars.PyrX = new int[random + 3];
				GenVars.PyrY = new int[random + 3];
				DunesBiome dunesBiome = GenVars.configuration.CreateBiome<DunesBiome>();
				for (int i = 0; i < random; i++)
				{
					progress.Set((double)i / (double)random);
					Point point = Point.Zero;
					bool flag = false;
					int num3 = 0;
					while (!flag)
					{
						point = WorldGen.RandomWorldPoint(0, 500, 0, 500);
						bool flag2 = Math.Abs(point.X - GenVars.jungleOriginX) < (int)(600.0 * num2);
						bool flag3 = Math.Abs(point.X - Main.maxTilesX / 2) < 300;
						bool flag4 = point.X > GenVars.snowOriginLeft - 300 && point.X < GenVars.snowOriginRight + 300;
						num3++;
						if (num3 >= Main.maxTilesX)
						{
							flag2 = false;
						}
						if (num3 >= Main.maxTilesX * 2)
						{
							flag4 = false;
						}
						flag = (!flag2 && !flag3 && !flag4);
					}
					dunesBiome.Place(point, GenVars.structures);
					if (WorldGen.genRand.NextDouble() <= num)
					{
						int num4 = WorldGen.genRand.Next(point.X - 200, point.X + 200);
						for (int j = 0; j < Main.maxTilesY; j++)
						{
							if (Main.tile[num4, j].active())
							{
								GenVars.PyrX[GenVars.numPyr] = num4;
								GenVars.PyrY[GenVars.numPyr] = j + 20;
								GenVars.numPyr++;
								break;
							}
						}
					}
				}
			});
			WorldGen.AddGenerationPass("Ocean Sand", delegate(GenerationProgress progress, GameConfiguration passConfig)
			{
				progress.Message = Language.GetTextValue("WorldGeneration.OceanSand");
				int i = 0;
				while (i < 3)
				{
					progress.Set((double)i / 3.0);
					int num = WorldGen.genRand.Next(Main.maxTilesX);
					while ((double)num > (double)Main.maxTilesX * 0.4 && (double)num < (double)Main.maxTilesX * 0.6)
					{
						num = WorldGen.genRand.Next(Main.maxTilesX);
					}
					int num2 = WorldGen.genRand.Next(35, 90);
					if (i == 1)
					{
						double num3 = (double)Main.maxTilesX / 4200.0;
						num2 += (int)((double)WorldGen.genRand.Next(20, 40) * num3);
					}
					if (WorldGen.genRand.Next(3) == 0)
					{
						num2 *= 2;
					}
					if (i == 1)
					{
						num2 *= 2;
					}
					int num4 = num - num2;
					num2 = WorldGen.genRand.Next(35, 90);
					if (WorldGen.genRand.Next(3) == 0)
					{
						num2 *= 2;
					}
					if (i == 1)
					{
						num2 *= 2;
					}
					int num5 = num + num2;
					if (num4 < 0)
					{
						num4 = 0;
					}
					if (num5 > Main.maxTilesX)
					{
						num5 = Main.maxTilesX;
					}
					if (i == 0)
					{
						num4 = 0;
						num5 = GenVars.leftBeachEnd;
						goto IL_136;
					}
					if (i == 2)
					{
						num4 = GenVars.rightBeachStart;
						num5 = Main.maxTilesX;
						goto IL_136;
					}
					if (i != 1)
					{
						goto IL_136;
					}
					IL_296:
					i++;
					continue;
					IL_136:
					int num6 = WorldGen.genRand.Next(50, 100);
					for (int j = num4; j < num5; j++)
					{
						if (WorldGen.genRand.Next(2) == 0)
						{
							num6 += WorldGen.genRand.Next(-1, 2);
							if (num6 < 50)
							{
								num6 = 50;
							}
							if (num6 > 200)
							{
								num6 = 200;
							}
						}
						int num7 = 0;
						while ((double)num7 < (Main.worldSurface + Main.rockLayer) / 2.0)
						{
							if (Main.tile[j, num7].active())
							{
								if (j == (num4 + num5) / 2 && WorldGen.genRand.Next(6) == 0)
								{
									GenVars.PyrX[GenVars.numPyr] = j;
									GenVars.PyrY[GenVars.numPyr] = num7;
									GenVars.numPyr++;
								}
								int num8 = num6;
								if (j - num4 < num8)
								{
									num8 = j - num4;
								}
								if (num5 - j < num8)
								{
									num8 = num5 - j;
								}
								num8 += WorldGen.genRand.Next(5);
								for (int k = num7; k < num7 + num8; k++)
								{
									if (j > num4 + WorldGen.genRand.Next(5) && j < num5 - WorldGen.genRand.Next(5))
									{
										Main.tile[j, k].type = 53;
									}
								}
								break;
							}
							num7++;
						}
					}
					goto IL_296;
				}
			});
			WorldGen.AddGenerationPass("Sand Patches", delegate(GenerationProgress progress, GameConfiguration passConfig)
			{
				int num = (int)((double)Main.maxTilesX * 0.013);
				if (WorldGen.remixWorldGen)
				{
					num /= 4;
				}
				for (int i = 0; i < num; i++)
				{
					int num2 = WorldGen.genRand.Next(0, Main.maxTilesX);
					int num3 = WorldGen.genRand.Next((int)Main.worldSurface, (int)Main.rockLayer);
					if (WorldGen.remixWorldGen)
					{
						num3 = WorldGen.genRand.Next((int)Main.rockLayer - 100, Main.maxTilesY - 350);
					}
					while ((double)num2 > (double)Main.maxTilesX * 0.46 && (double)num2 < (double)Main.maxTilesX * 0.54 && (double)num3 < Main.worldSurface + 150.0)
					{
						num2 = WorldGen.genRand.Next(0, Main.maxTilesX);
						num3 = WorldGen.genRand.Next((int)Main.worldSurface, (int)Main.rockLayer);
					}
					int num4 = WorldGen.genRand.Next(15, 70);
					int steps = WorldGen.genRand.Next(20, 130);
					WorldGen.TileRunner(num2, num3, (double)num4, steps, 53, false, 0.0, 0.0, false, true, -1);
				}
			});
			WorldGen.AddGenerationPass("Tunnels", delegate(GenerationProgress progress, GameConfiguration passConfig)
			{
				int num = (int)((double)Main.maxTilesX * 0.0015);
				if (WorldGen.remixWorldGen)
				{
					num = (int)((double)num * 1.5);
				}
				int num2 = 0;
				while (num2 < num && GenVars.numTunnels < GenVars.maxTunnels - 1)
				{
					int[] array = new int[10];
					int[] array2 = new int[10];
					int num3 = WorldGen.genRand.Next(450, Main.maxTilesX - 450);
					if (!WorldGen.remixWorldGen)
					{
						if (WorldGen.tenthAnniversaryWorldGen)
						{
							num3 = WorldGen.genRand.Next((int)((double)Main.maxTilesX * 0.2), (int)((double)Main.maxTilesX * 0.8));
						}
						else
						{
							while ((double)num3 > (double)Main.maxTilesX * 0.4 && (double)num3 < (double)Main.maxTilesX * 0.6)
							{
								num3 = WorldGen.genRand.Next(450, Main.maxTilesX - 450);
							}
						}
					}
					int num4 = 0;
					bool flag;
					do
					{
						flag = false;
						for (int i = 0; i < 10; i++)
						{
							num3 %= Main.maxTilesX;
							while (!Main.tile[num3, num4].active())
							{
								num4++;
							}
							if (Main.tile[num3, num4].type == 53)
							{
								flag = true;
							}
							array[i] = num3;
							array2[i] = num4 - WorldGen.genRand.Next(11, 16);
							num3 += WorldGen.genRand.Next(5, 11);
						}
					}
					while (flag);
					GenVars.tunnelX[GenVars.numTunnels] = array[5];
					GenVars.numTunnels++;
					for (int j = 0; j < 10; j++)
					{
						WorldGen.TileRunner(array[j], array2[j], (double)WorldGen.genRand.Next(5, 8), WorldGen.genRand.Next(6, 9), 0, true, -2.0, -0.3, false, true, -1);
						WorldGen.TileRunner(array[j], array2[j], (double)WorldGen.genRand.Next(5, 8), WorldGen.genRand.Next(6, 9), 0, true, 2.0, -0.3, false, true, -1);
					}
					num2++;
				}
			});
			WorldGen.AddGenerationPass("Mount Caves", delegate(GenerationProgress progress, GameConfiguration passConfig)
			{
				GenVars.numMCaves = 0;
				progress.Message = Lang.gen[2].Value;
				int num = (int)((double)Main.maxTilesX * 0.001);
				if (WorldGen.remixWorldGen)
				{
					num = (int)((double)num * 1.5);
				}
				for (int i = 0; i < num; i++)
				{
					progress.Set((double)i / (double)num);
					int num2 = 0;
					bool flag = false;
					bool flag2 = false;
					int num3 = WorldGen.genRand.Next((int)((double)Main.maxTilesX * 0.25), (int)((double)Main.maxTilesX * 0.75));
					while (!flag2)
					{
						flag2 = true;
						if (!WorldGen.remixWorldGen)
						{
							while (num3 > Main.maxTilesX / 2 - 90 && num3 < Main.maxTilesX / 2 + 90)
							{
								num3 = WorldGen.genRand.Next((int)((double)Main.maxTilesX * 0.25), (int)((double)Main.maxTilesX * 0.75));
							}
						}
						for (int j = 0; j < GenVars.numMCaves; j++)
						{
							if (Math.Abs(num3 - GenVars.mCaveX[j]) < 100)
							{
								num2++;
								flag2 = false;
								break;
							}
						}
						if (num2 >= Main.maxTilesX / 5)
						{
							flag = true;
							break;
						}
					}
					if (!flag)
					{
						int num4 = 0;
						while ((double)num4 < Main.worldSurface)
						{
							if (Main.tile[num3, num4].active())
							{
								for (int k = num3 - 50; k < num3 + 50; k++)
								{
									for (int l = num4 - 25; l < num4 + 25; l++)
									{
										if (Main.tile[k, l].active() && (Main.tile[k, l].type == 53 || Main.tile[k, l].type == 151 || Main.tile[k, l].type == 274))
										{
											flag = true;
										}
									}
								}
								if (!flag)
								{
									WorldGen.Mountinater(num3, num4);
									GenVars.mCaveX[GenVars.numMCaves] = num3;
									GenVars.mCaveY[GenVars.numMCaves] = num4;
									GenVars.numMCaves++;
									break;
								}
							}
							num4++;
						}
					}
				}
			});
			WorldGen.AddGenerationPass("Dirt Wall Backgrounds", delegate(GenerationProgress progress, GameConfiguration passConfig)
			{
				progress.Message = Lang.gen[3].Value;
				int num = 0;
				for (int i = 1; i < Main.maxTilesX - 1; i++)
				{
					ushort wall = 2;
					double value = (double)i / (double)Main.maxTilesX;
					progress.Set(value);
					bool flag = false;
					num += WorldGen.genRand.Next(-1, 2);
					if (num < 0)
					{
						num = 0;
					}
					if (num > 10)
					{
						num = 10;
					}
					int num2 = 0;
					while ((double)num2 < Main.worldSurface + 10.0 && (double)num2 <= Main.worldSurface + (double)num)
					{
						if (Main.tile[i, num2].active())
						{
							if (Main.tile[i, num2].type == 147)
							{
								wall = 40;
							}
							else
							{
								wall = 2;
							}
						}
						if (flag && Main.tile[i, num2].wall != 64)
						{
							Main.tile[i, num2].wall = wall;
						}
						if (Main.tile[i, num2].active() && Main.tile[i - 1, num2].active() && Main.tile[i + 1, num2].active() && Main.tile[i, num2 + 1].active() && Main.tile[i - 1, num2 + 1].active() && Main.tile[i + 1, num2 + 1].active())
						{
							flag = true;
						}
						num2++;
					}
				}
			});
			WorldGen.AddGenerationPass("Rocks In Dirt", delegate(GenerationProgress progress, GameConfiguration passConfig)
			{
				progress.Message = Lang.gen[4].Value;
				double num = (double)(Main.maxTilesX * Main.maxTilesY) * 0.00015;
				int num2 = 0;
				while ((double)num2 < num)
				{
					WorldGen.TileRunner(WorldGen.genRand.Next(0, Main.maxTilesX), WorldGen.genRand.Next(0, (int)GenVars.worldSurfaceLow + 1), (double)WorldGen.genRand.Next(4, 15), WorldGen.genRand.Next(5, 40), 1, false, 0.0, 0.0, false, true, -1);
					num2++;
				}
				progress.Set(0.34);
				num = (double)(Main.maxTilesX * Main.maxTilesY) * 0.0002;
				int num3 = 0;
				while ((double)num3 < num)
				{
					int num4 = WorldGen.genRand.Next(0, Main.maxTilesX);
					int num5 = WorldGen.genRand.Next((int)GenVars.worldSurfaceLow, (int)GenVars.worldSurfaceHigh + 1);
					if (!Main.tile[num4, num5 - 10].active())
					{
						num5 = WorldGen.genRand.Next((int)GenVars.worldSurfaceLow, (int)GenVars.worldSurfaceHigh + 1);
					}
					WorldGen.TileRunner(num4, num5, (double)WorldGen.genRand.Next(4, 10), WorldGen.genRand.Next(5, 30), 1, false, 0.0, 0.0, false, true, -1);
					num3++;
				}
				progress.Set(0.67);
				num = (double)(Main.maxTilesX * Main.maxTilesY) * 0.0045;
				int num6 = 0;
				while ((double)num6 < num)
				{
					WorldGen.TileRunner(WorldGen.genRand.Next(0, Main.maxTilesX), WorldGen.genRand.Next((int)GenVars.worldSurfaceHigh, (int)GenVars.rockLayerHigh + 1), (double)WorldGen.genRand.Next(2, 7), WorldGen.genRand.Next(2, 23), 1, false, 0.0, 0.0, false, true, -1);
					num6++;
				}
			});
			WorldGen.AddGenerationPass("Dirt In Rocks", delegate(GenerationProgress progress, GameConfiguration passConfig)
			{
				progress.Message = Lang.gen[5].Value;
				double num = (double)(Main.maxTilesX * Main.maxTilesY) * 0.005;
				int num2 = 0;
				while ((double)num2 < num)
				{
					progress.Set((double)num2 / num);
					WorldGen.TileRunner(WorldGen.genRand.Next(0, Main.maxTilesX), WorldGen.genRand.Next((int)GenVars.rockLayerLow, Main.maxTilesY), (double)WorldGen.genRand.Next(2, 6), WorldGen.genRand.Next(2, 40), 0, false, 0.0, 0.0, false, true, -1);
					num2++;
				}
				if (WorldGen.remixWorldGen)
				{
					for (int i = 0; i < Main.maxTilesX; i++)
					{
						for (int j = (int)Main.worldSurface + WorldGen.genRand.Next(-1, 3); j < Main.maxTilesY; j++)
						{
							if (Main.tile[i, j].active())
							{
								if (Main.tile[i, j].type == 0)
								{
									Main.tile[i, j].type = 1;
								}
								else if (Main.tile[i, j].type == 1)
								{
									Main.tile[i, j].type = 0;
								}
							}
						}
					}
				}
			});
			WorldGen.AddGenerationPass("Clay", delegate(GenerationProgress progress, GameConfiguration passConfig)
			{
				progress.Message = Lang.gen[6].Value;
				for (int i = 0; i < (int)((double)(Main.maxTilesX * Main.maxTilesY) * 2E-05); i++)
				{
					WorldGen.TileRunner(WorldGen.genRand.Next(0, Main.maxTilesX), WorldGen.genRand.Next(0, (int)GenVars.worldSurfaceLow), (double)WorldGen.genRand.Next(4, 14), WorldGen.genRand.Next(10, 50), 40, false, 0.0, 0.0, false, true, -1);
				}
				progress.Set(0.25);
				if (WorldGen.remixWorldGen)
				{
					for (int j = 0; j < (int)((double)(Main.maxTilesX * Main.maxTilesY) * 7E-05); j++)
					{
						WorldGen.TileRunner(WorldGen.genRand.Next(0, Main.maxTilesX), WorldGen.genRand.Next((int)GenVars.rockLayer - 25, Main.maxTilesY - 350), (double)WorldGen.genRand.Next(8, 15), WorldGen.genRand.Next(5, 50), 40, false, 0.0, 0.0, false, true, -1);
					}
				}
				else
				{
					for (int k = 0; k < (int)((double)(Main.maxTilesX * Main.maxTilesY) * 5E-05); k++)
					{
						WorldGen.TileRunner(WorldGen.genRand.Next(0, Main.maxTilesX), WorldGen.genRand.Next((int)GenVars.worldSurfaceLow, (int)GenVars.worldSurfaceHigh + 1), (double)WorldGen.genRand.Next(8, 14), WorldGen.genRand.Next(15, 45), 40, false, 0.0, 0.0, false, true, -1);
					}
					progress.Set(0.5);
					for (int l = 0; l < (int)((double)(Main.maxTilesX * Main.maxTilesY) * 2E-05); l++)
					{
						WorldGen.TileRunner(WorldGen.genRand.Next(0, Main.maxTilesX), WorldGen.genRand.Next((int)GenVars.worldSurfaceHigh, (int)GenVars.rockLayerHigh + 1), (double)WorldGen.genRand.Next(8, 15), WorldGen.genRand.Next(5, 50), 40, false, 0.0, 0.0, false, true, -1);
					}
				}
				progress.Set(0.75);
				for (int m = 5; m < Main.maxTilesX - 5; m++)
				{
					int num = 1;
					while ((double)num < Main.worldSurface - 1.0)
					{
						if (Main.tile[m, num].active())
						{
							for (int n = num; n < num + 5; n++)
							{
								if (Main.tile[m, n].type == 40)
								{
									Main.tile[m, n].type = 0;
								}
							}
							break;
						}
						num++;
					}
				}
			});
			WorldGen.AddGenerationPass("Small Holes", delegate(GenerationProgress progress, GameConfiguration passConfig)
			{
				progress.Message = Lang.gen[7].Value;
				double worldSurfaceHigh = GenVars.worldSurfaceHigh;
				for (int i = 0; i < (int)((double)(Main.maxTilesX * Main.maxTilesY) * 0.0015); i++)
				{
					double value = (double)i / ((double)(Main.maxTilesX * Main.maxTilesY) * 0.0015);
					progress.Set(value);
					int type = -1;
					if (WorldGen.genRand.Next(5) == 0)
					{
						type = -2;
					}
					int num = WorldGen.genRand.Next(0, Main.maxTilesX);
					int num2 = WorldGen.genRand.Next((int)GenVars.worldSurfaceHigh, Main.maxTilesY);
					if (!WorldGen.remixWorldGen && WorldGen.tenthAnniversaryWorldGen)
					{
						while ((double)num < (double)Main.maxTilesX * 0.2 && (double)num > (double)Main.maxTilesX * 0.8)
						{
							if ((double)num2 >= GenVars.worldSurface)
							{
								break;
							}
							num = WorldGen.genRand.Next(0, Main.maxTilesX);
							num2 = WorldGen.genRand.Next((int)GenVars.worldSurfaceHigh, Main.maxTilesY);
						}
					}
					else
					{
						while (((num < GenVars.smallHolesBeachAvoidance || num > Main.maxTilesX - GenVars.smallHolesBeachAvoidance) && (double)num2 < worldSurfaceHigh) || ((double)num > (double)Main.maxTilesX * 0.45 && (double)num < (double)Main.maxTilesX * 0.55 && (double)num2 < GenVars.worldSurface))
						{
							num = WorldGen.genRand.Next(0, Main.maxTilesX);
							num2 = WorldGen.genRand.Next((int)GenVars.worldSurfaceHigh, Main.maxTilesY);
						}
					}
					int num3 = WorldGen.genRand.Next(2, 5);
					int num4 = WorldGen.genRand.Next(2, 20);
					if (WorldGen.remixWorldGen && (double)num2 > Main.rockLayer)
					{
						num3 = (int)((double)num3 * 0.8);
						num4 = (int)((double)num4 * 0.9);
					}
					WorldGen.TileRunner(num, num2, (double)num3, num4, type, false, 0.0, 0.0, false, true, -1);
					num = WorldGen.genRand.Next(0, Main.maxTilesX);
					num2 = WorldGen.genRand.Next((int)GenVars.worldSurfaceHigh, Main.maxTilesY);
					while (((num < GenVars.smallHolesBeachAvoidance || num > Main.maxTilesX - GenVars.smallHolesBeachAvoidance) && (double)num2 < worldSurfaceHigh) || ((double)num > (double)Main.maxTilesX * 0.45 && (double)num < (double)Main.maxTilesX * 0.55 && (double)num2 < GenVars.worldSurface))
					{
						num = WorldGen.genRand.Next(0, Main.maxTilesX);
						num2 = WorldGen.genRand.Next((int)GenVars.worldSurfaceHigh, Main.maxTilesY);
					}
					num3 = WorldGen.genRand.Next(8, 15);
					num4 = WorldGen.genRand.Next(7, 30);
					if (WorldGen.remixWorldGen && (double)num2 > Main.rockLayer)
					{
						num3 = (int)((double)num3 * 0.7);
						num4 = (int)((double)num4 * 0.9);
					}
					WorldGen.TileRunner(num, num2, (double)num3, num4, type, false, 0.0, 0.0, false, true, -1);
				}
			});
			WorldGen.AddGenerationPass("Dirt Layer Caves", delegate(GenerationProgress progress, GameConfiguration passConfig)
			{
				progress.Message = Lang.gen[8].Value;
				double worldSurfaceHigh = GenVars.worldSurfaceHigh;
				int num = (int)((double)(Main.maxTilesX * Main.maxTilesY) * 3E-05);
				if (WorldGen.remixWorldGen)
				{
					num *= 2;
				}
				for (int i = 0; i < num; i++)
				{
					double value = (double)i / (double)num;
					progress.Set(value);
					if (GenVars.rockLayerHigh <= (double)Main.maxTilesY)
					{
						int type = -1;
						if (WorldGen.genRand.Next(6) == 0)
						{
							type = -2;
						}
						int num2 = WorldGen.genRand.Next(0, Main.maxTilesX);
						int num3 = WorldGen.genRand.Next((int)GenVars.worldSurfaceLow, (int)GenVars.rockLayerHigh + 1);
						while (((num2 < GenVars.smallHolesBeachAvoidance || num2 > Main.maxTilesX - GenVars.smallHolesBeachAvoidance) && (double)num3 < worldSurfaceHigh) || ((double)num2 >= (double)Main.maxTilesX * 0.45 && (double)num2 <= (double)Main.maxTilesX * 0.55 && (double)num3 < Main.worldSurface))
						{
							num2 = WorldGen.genRand.Next(0, Main.maxTilesX);
							num3 = WorldGen.genRand.Next((int)GenVars.worldSurfaceLow, (int)GenVars.rockLayerHigh + 1);
						}
						int num4 = WorldGen.genRand.Next(5, 15);
						int num5 = WorldGen.genRand.Next(30, 200);
						if (WorldGen.remixWorldGen)
						{
							num4 = (int)((double)num4 * 1.1);
							num5 = (int)((double)num5 * 1.9);
						}
						WorldGen.TileRunner(num2, num3, (double)num4, num5, type, false, 0.0, 0.0, false, true, -1);
					}
				}
			});
			WorldGen.AddGenerationPass("Rock Layer Caves", delegate(GenerationProgress progress, GameConfiguration passConfig)
			{
				progress.Message = Lang.gen[9].Value;
				int num = (int)((double)(Main.maxTilesX * Main.maxTilesY) * 0.00013);
				if (WorldGen.remixWorldGen)
				{
					num = (int)((double)num * 1.1);
				}
				for (int i = 0; i < num; i++)
				{
					double value = (double)i / (double)num;
					progress.Set(value);
					if (GenVars.rockLayerHigh <= (double)Main.maxTilesY)
					{
						int type = -1;
						if (WorldGen.genRand.Next(10) == 0)
						{
							type = -2;
						}
						int num2 = WorldGen.genRand.Next(6, 20);
						int num3 = WorldGen.genRand.Next(50, 300);
						if (WorldGen.remixWorldGen)
						{
							num2 = (int)((double)num2 * 0.7);
							num3 = (int)((double)num3 * 0.7);
						}
						WorldGen.TileRunner(WorldGen.genRand.Next(0, Main.maxTilesX), WorldGen.genRand.Next((int)GenVars.rockLayerHigh, Main.maxTilesY), (double)num2, num3, type, false, 0.0, 0.0, false, true, -1);
					}
				}
				if (WorldGen.remixWorldGen)
				{
					num = (int)((double)(Main.maxTilesX * Main.maxTilesY) * 0.00013 * 0.4);
					for (int j = 0; j < num; j++)
					{
						if (GenVars.rockLayerHigh <= (double)Main.maxTilesY)
						{
							int type2 = -1;
							if (WorldGen.genRand.Next(10) == 0)
							{
								type2 = -2;
							}
							int num4 = WorldGen.genRand.Next(7, 26);
							int steps = WorldGen.genRand.Next(50, 200);
							double num5 = (double)WorldGen.genRand.Next(100, 221) * 0.1;
							double num6 = (double)WorldGen.genRand.Next(-10, 11) * 0.02;
							int i2 = WorldGen.genRand.Next(0, Main.maxTilesX);
							int j2 = WorldGen.genRand.Next((int)GenVars.rockLayerHigh, Main.maxTilesY);
							WorldGen.TileRunner(i2, j2, (double)num4, steps, type2, false, num5, num6, true, true, -1);
							WorldGen.TileRunner(i2, j2, (double)num4, steps, type2, false, -num5, -num6, true, true, -1);
						}
					}
				}
			});
			WorldGen.AddGenerationPass("Surface Caves", delegate(GenerationProgress progress, GameConfiguration passConfig)
			{
				progress.Message = Lang.gen[10].Value;
				int num = (int)((double)Main.maxTilesX * 0.002);
				int num2 = (int)((double)Main.maxTilesX * 0.0007);
				int num3 = (int)((double)Main.maxTilesX * 0.0003);
				if (WorldGen.remixWorldGen)
				{
					num *= 3;
					num2 *= 3;
					num3 *= 3;
				}
				for (int i = 0; i < num; i++)
				{
					int num4 = WorldGen.genRand.Next(0, Main.maxTilesX);
					while (((double)num4 > (double)Main.maxTilesX * 0.45 && (double)num4 < (double)Main.maxTilesX * 0.55) || num4 < GenVars.leftBeachEnd + 20 || num4 > GenVars.rightBeachStart - 20)
					{
						num4 = WorldGen.genRand.Next(0, Main.maxTilesX);
					}
					int num5 = 0;
					while ((double)num5 < GenVars.worldSurfaceHigh)
					{
						if (Main.tile[num4, num5].active())
						{
							WorldGen.TileRunner(num4, num5, (double)WorldGen.genRand.Next(3, 6), WorldGen.genRand.Next(5, 50), -1, false, (double)WorldGen.genRand.Next(-10, 11) * 0.1, 1.0, false, true, -1);
							break;
						}
						num5++;
					}
				}
				progress.Set(0.2);
				for (int j = 0; j < num2; j++)
				{
					int num6 = WorldGen.genRand.Next(0, Main.maxTilesX);
					while (((double)num6 > (double)Main.maxTilesX * 0.43 && (double)num6 < (double)Main.maxTilesX * 0.5700000000000001) || num6 < GenVars.leftBeachEnd + 20 || num6 > GenVars.rightBeachStart - 20)
					{
						num6 = WorldGen.genRand.Next(0, Main.maxTilesX);
					}
					int num7 = 0;
					while ((double)num7 < GenVars.worldSurfaceHigh)
					{
						if (Main.tile[num6, num7].active())
						{
							WorldGen.TileRunner(num6, num7, (double)WorldGen.genRand.Next(10, 15), WorldGen.genRand.Next(50, 130), -1, false, (double)WorldGen.genRand.Next(-10, 11) * 0.1, 2.0, false, true, -1);
							break;
						}
						num7++;
					}
				}
				progress.Set(0.4);
				for (int k = 0; k < num3; k++)
				{
					int num8 = WorldGen.genRand.Next(0, Main.maxTilesX);
					while (((double)num8 > (double)Main.maxTilesX * 0.4 && (double)num8 < (double)Main.maxTilesX * 0.6) || num8 < GenVars.leftBeachEnd + 20 || num8 > GenVars.rightBeachStart - 20)
					{
						num8 = WorldGen.genRand.Next(0, Main.maxTilesX);
					}
					int num9 = 0;
					while ((double)num9 < GenVars.worldSurfaceHigh)
					{
						if (Main.tile[num8, num9].active())
						{
							WorldGen.TileRunner(num8, num9, (double)WorldGen.genRand.Next(12, 25), WorldGen.genRand.Next(150, 500), -1, false, (double)WorldGen.genRand.Next(-10, 11) * 0.1, 4.0, false, true, -1);
							WorldGen.TileRunner(num8, num9, (double)WorldGen.genRand.Next(8, 17), WorldGen.genRand.Next(60, 200), -1, false, (double)WorldGen.genRand.Next(-10, 11) * 0.1, 2.0, false, true, -1);
							WorldGen.TileRunner(num8, num9, (double)WorldGen.genRand.Next(5, 13), WorldGen.genRand.Next(40, 170), -1, false, (double)WorldGen.genRand.Next(-10, 11) * 0.1, 2.0, false, true, -1);
							break;
						}
						num9++;
					}
				}
				progress.Set(0.6);
				for (int l = 0; l < (int)((double)Main.maxTilesX * 0.0004); l++)
				{
					int num10 = WorldGen.genRand.Next(0, Main.maxTilesX);
					while (((double)num10 > (double)Main.maxTilesX * 0.4 && (double)num10 < (double)Main.maxTilesX * 0.6) || num10 < GenVars.leftBeachEnd + 20 || num10 > GenVars.rightBeachStart - 20)
					{
						num10 = WorldGen.genRand.Next(0, Main.maxTilesX);
					}
					int num11 = 0;
					while ((double)num11 < GenVars.worldSurfaceHigh)
					{
						if (Main.tile[num10, num11].active())
						{
							WorldGen.TileRunner(num10, num11, (double)WorldGen.genRand.Next(7, 12), WorldGen.genRand.Next(150, 250), -1, false, 0.0, 1.0, true, true, -1);
							break;
						}
						num11++;
					}
				}
				progress.Set(0.8);
				double num12 = (double)Main.maxTilesX / 4200.0;
				int num13 = 0;
				while ((double)num13 < 5.0 * num12)
				{
					try
					{
						int num14 = (int)Main.rockLayer;
						int num15 = Main.maxTilesY - 400;
						if (num14 >= num15)
						{
							num14 = num15 - 1;
						}
						WorldGen.Caverer(WorldGen.genRand.Next(GenVars.surfaceCavesBeachAvoidance2, Main.maxTilesX - GenVars.surfaceCavesBeachAvoidance2), WorldGen.genRand.Next(num14, num15));
					}
					catch
					{
					}
					num13++;
				}
			});
			WorldGen.AddGenerationPass("Wavy Caves", delegate(GenerationProgress progress, GameConfiguration passConfig)
			{
				if (WorldGen.dontStarveWorldGen)
				{
					progress.Message = Language.GetTextValue("WorldGeneration.WavyCaves");
					double num = (double)Main.maxTilesX / 4200.0;
					num *= num;
					int num2 = (int)(35.0 * num);
					if (Main.remixWorld)
					{
						num2 /= 3;
					}
					int num3 = 0;
					int num4 = 80;
					for (int i = 0; i < num2; i++)
					{
						double num5 = (double)i / (double)(num2 - 1);
						progress.Set(num5);
						int num6 = WorldGen.genRand.Next((int)Main.worldSurface + 100, Main.UnderworldLayer - 100);
						int num7 = 0;
						while (Math.Abs(num6 - num3) < num4)
						{
							num7++;
							if (num7 > 100)
							{
								break;
							}
							num6 = WorldGen.genRand.Next((int)Main.worldSurface + 100, Main.UnderworldLayer - 100);
						}
						num3 = num6;
						int num8 = 80;
						int startX = num8 + (int)((double)(Main.maxTilesX - num8 * 2) * num5);
						try
						{
							WorldGen.WavyCaverer(startX, num6, (double)(12 + WorldGen.genRand.Next(3, 6)), 0.25 + WorldGen.genRand.NextDouble(), WorldGen.genRand.Next(300, 500), -1);
						}
						catch
						{
						}
					}
				}
			});
			WorldGen.AddGenerationPass("Generate Ice Biome", delegate(GenerationProgress progress, GameConfiguration passConfig)
			{
				progress.Message = Lang.gen[56].Value;
				GenVars.snowTop = (int)Main.worldSurface;
				int num = GenVars.lavaLine - WorldGen.genRand.Next(160, 200);
				int num2 = GenVars.lavaLine;
				if (WorldGen.remixWorldGen)
				{
					num2 = Main.maxTilesY - 250;
					num = num2 - WorldGen.genRand.Next(160, 200);
				}
				int num3 = GenVars.snowOriginLeft;
				int num4 = GenVars.snowOriginRight;
				int num5 = 10;
				for (int i = 0; i <= num2 - 140; i++)
				{
					progress.Set((double)i / (double)(num2 - 140));
					num3 += WorldGen.genRand.Next(-4, 4);
					num4 += WorldGen.genRand.Next(-3, 5);
					if (i > 0)
					{
						num3 = (num3 + GenVars.snowMinX[i - 1]) / 2;
						num4 = (num4 + GenVars.snowMaxX[i - 1]) / 2;
					}
					if (GenVars.dungeonSide > 0)
					{
						if (WorldGen.genRand.Next(4) == 0)
						{
							num3++;
							num4++;
						}
					}
					else if (WorldGen.genRand.Next(4) == 0)
					{
						num3--;
						num4--;
					}
					GenVars.snowMinX[i] = num3;
					GenVars.snowMaxX[i] = num4;
					for (int j = num3; j < num4; j++)
					{
						if (i < num)
						{
							if (Main.tile[j, i].wall == 2)
							{
								Main.tile[j, i].wall = 40;
							}
							int type = (int)Main.tile[j, i].type;
							if (type == 0 || type == 2 || type == 23 || type == 40 || type == 53)
							{
								Main.tile[j, i].type = 147;
							}
							else if (type == 1)
							{
								Main.tile[j, i].type = 161;
							}
						}
						else
						{
							num5 += WorldGen.genRand.Next(-3, 4);
							if (WorldGen.genRand.Next(3) == 0)
							{
								num5 += WorldGen.genRand.Next(-4, 5);
								if (WorldGen.genRand.Next(3) == 0)
								{
									num5 += WorldGen.genRand.Next(-6, 7);
								}
							}
							if (num5 < 0)
							{
								num5 = WorldGen.genRand.Next(3);
							}
							else if (num5 > 50)
							{
								num5 = 50 - WorldGen.genRand.Next(3);
							}
							for (int k = i; k < i + num5; k++)
							{
								if (Main.tile[j, k].wall == 2)
								{
									Main.tile[j, k].wall = 40;
								}
								int type2 = (int)Main.tile[j, k].type;
								if (type2 == 0 || type2 == 2 || type2 == 23 || type2 == 40 || type2 == 53)
								{
									Main.tile[j, k].type = 147;
								}
								else if (type2 == 1)
								{
									Main.tile[j, k].type = 161;
								}
							}
						}
					}
					if (GenVars.snowBottom < i)
					{
						GenVars.snowBottom = i;
					}
				}
			});
			WorldGen.AddGenerationPass("Grass", delegate(GenerationProgress progress, GameConfiguration passConfig)
			{
				double num = (double)(Main.maxTilesX * Main.maxTilesY) * 0.002;
				int num2 = 0;
				while ((double)num2 < num)
				{
					progress.Set((double)num2 / num);
					int num3 = WorldGen.genRand.Next(1, Main.maxTilesX - 1);
					int num4 = WorldGen.genRand.Next((int)GenVars.worldSurfaceLow, (int)GenVars.worldSurfaceHigh);
					if (num4 >= Main.maxTilesY)
					{
						num4 = Main.maxTilesY - 2;
					}
					if (Main.tile[num3 - 1, num4].active() && Main.tile[num3 - 1, num4].type == 0 && Main.tile[num3 + 1, num4].active() && Main.tile[num3 + 1, num4].type == 0 && Main.tile[num3, num4 - 1].active() && Main.tile[num3, num4 - 1].type == 0 && Main.tile[num3, num4 + 1].active() && Main.tile[num3, num4 + 1].type == 0)
					{
						Main.tile[num3, num4].active(true);
						Main.tile[num3, num4].type = 2;
					}
					num3 = WorldGen.genRand.Next(1, Main.maxTilesX - 1);
					num4 = WorldGen.genRand.Next(0, (int)GenVars.worldSurfaceLow);
					if (num4 >= Main.maxTilesY)
					{
						num4 = Main.maxTilesY - 2;
					}
					if (Main.tile[num3 - 1, num4].active() && Main.tile[num3 - 1, num4].type == 0 && Main.tile[num3 + 1, num4].active() && Main.tile[num3 + 1, num4].type == 0 && Main.tile[num3, num4 - 1].active() && Main.tile[num3, num4 - 1].type == 0 && Main.tile[num3, num4 + 1].active() && Main.tile[num3, num4 + 1].type == 0)
					{
						Main.tile[num3, num4].active(true);
						Main.tile[num3, num4].type = 2;
					}
					num2++;
				}
			});
			WorldGen.AddGenerationPass(new JunglePass());
			WorldGen.AddGenerationPass("Mud Caves To Grass", delegate(GenerationProgress progress, GameConfiguration passConfig)
			{
				progress.Message = Lang.gen[77].Value;
				WorldGen.NotTheBees();
				for (int i = 0; i < Main.maxTilesX; i++)
				{
					for (int j = 0; j < Main.maxTilesY; j++)
					{
						if (Main.tile[i, j].active())
						{
							WorldGen.grassSpread = 0;
							WorldGen.SpreadGrass(i, j, 59, 60, true, default(TileColorCache));
						}
						progress.Set(0.2 * ((double)(i * Main.maxTilesY + j) / (double)(Main.maxTilesX * Main.maxTilesY)));
					}
				}
				WorldGen.SmallConsecutivesFound = 0;
				WorldGen.SmallConsecutivesEliminated = 0;
				double num = (double)(Main.maxTilesX - 20);
				for (int k = 10; k < Main.maxTilesX - 10; k++)
				{
					WorldGen.ScanTileColumnAndRemoveClumps(k);
					double num2 = (double)(k - 10) / num;
					progress.Set(0.2 + num2 * 0.8);
				}
			});
			WorldGen.AddGenerationPass("Full Desert", delegate(GenerationProgress progress, GameConfiguration passConfig)
			{
				progress.Message = Lang.gen[78].Value;
				Main.tileSolid[484] = false;
				int num = 0;
				int num2 = GenVars.dungeonSide;
				int num3 = Main.maxTilesX / 2;
				int num4 = WorldGen.genRand.Next(num3) / 8;
				num4 += num3 / 8;
				int x = num3 + num4 * -num2;
				int num5 = 0;
				DesertBiome desertBiome = GenVars.configuration.CreateBiome<DesertBiome>();
				while (!desertBiome.Place(new Point(x, (int)GenVars.worldSurfaceHigh + 25), GenVars.structures))
				{
					num4 = WorldGen.genRand.Next(num3) / 2;
					num4 += num3 / 8;
					num4 += WorldGen.genRand.Next(num5 / 12);
					x = num3 + num4 * -num2;
					if (++num5 > Main.maxTilesX / 4)
					{
						num2 *= -1;
						num5 = 0;
						num++;
						if (num >= 2)
						{
							GenVars.skipDesertTileCheck = true;
						}
					}
				}
				if (WorldGen.remixWorldGen)
				{
					for (int i = 50; i < Main.maxTilesX - 50; i++)
					{
						for (int j = (int)Main.rockLayer + WorldGen.genRand.Next(-1, 2); j < Main.maxTilesY - 50; j++)
						{
							if ((Main.tile[i, j].type == 396 || Main.tile[i, j].type == 397 || Main.tile[i, j].type == 53) && !WorldGen.SolidTile(i, j - 1, false))
							{
								int num6 = j;
								while (num6 < j + WorldGen.genRand.Next(4, 7) && Main.tile[i, num6 + 1].active() && (Main.tile[i, num6].type == 396 || Main.tile[i, num6].type == 397))
								{
									Main.tile[i, num6].type = 53;
									num6++;
								}
							}
						}
					}
				}
			});
			WorldGen.AddGenerationPass("Floating Islands", delegate(GenerationProgress progress, GameConfiguration passConfig)
			{
				GenVars.numIslandHouses = 0;
				GenVars.skyIslandHouseCount = 0;
				progress.Message = Lang.gen[12].Value;
				int num = (int)((double)Main.maxTilesX * 0.0008);
				int num2 = 0;
				double num3 = (double)(num + GenVars.skyLakes);
				int num4 = 0;
				while ((double)num4 < num3)
				{
					progress.Set((double)num4 / num3);
					int num5 = Main.maxTilesX;
					while (--num5 > 0)
					{
						bool flag = true;
						int num6 = WorldGen.genRand.Next((int)((double)Main.maxTilesX * 0.1), (int)((double)Main.maxTilesX * 0.9));
						while (num6 > Main.maxTilesX / 2 - 150 && num6 < Main.maxTilesX / 2 + 150)
						{
							num6 = WorldGen.genRand.Next((int)((double)Main.maxTilesX * 0.1), (int)((double)Main.maxTilesX * 0.9));
						}
						for (int i = 0; i < GenVars.numIslandHouses; i++)
						{
							if (num6 > GenVars.floatingIslandHouseX[i] - 180 && num6 < GenVars.floatingIslandHouseX[i] + 180)
							{
								flag = false;
								break;
							}
						}
						if (flag)
						{
							flag = false;
							int num7 = 0;
							int num8 = 200;
							while ((double)num8 < Main.worldSurface)
							{
								if (Main.tile[num6, num8].active())
								{
									num7 = num8;
									flag = true;
									break;
								}
								num8++;
							}
							if (flag)
							{
								int num9 = 0;
								num5 = -1;
								int num10 = WorldGen.genRand.Next(90, num7 - 100);
								num10 = Math.Min(num10, (int)GenVars.worldSurfaceLow - 50);
								if (num2 >= num)
								{
									GenVars.skyLake[GenVars.numIslandHouses] = true;
									WorldGen.CloudLake(num6, num10);
								}
								else
								{
									GenVars.skyLake[GenVars.numIslandHouses] = false;
									if (WorldGen.drunkWorldGen && !WorldGen.remixWorldGen)
									{
										if (WorldGen.genRand.Next(2) == 0)
										{
											num9 = 3;
											WorldGen.SnowCloudIsland(num6, num10);
										}
										else
										{
											num9 = 1;
											WorldGen.DesertCloudIsland(num6, num10);
										}
									}
									else
									{
										if (WorldGen.remixWorldGen && WorldGen.drunkWorldGen)
										{
											if (GenVars.crimsonLeft && num6 < Main.maxTilesX / 2)
											{
												num9 = 5;
											}
											else if (!GenVars.crimsonLeft && num6 > Main.maxTilesX / 2)
											{
												num9 = 5;
											}
											else
											{
												num9 = 4;
											}
										}
										else if (WorldGen.getGoodWorldGen || WorldGen.remixWorldGen)
										{
											if (WorldGen.crimson)
											{
												num9 = 5;
											}
											else
											{
												num9 = 4;
											}
										}
										else if (Main.tenthAnniversaryWorld)
										{
											num9 = 6;
										}
										WorldGen.CloudIsland(num6, num10);
									}
								}
								GenVars.floatingIslandHouseX[GenVars.numIslandHouses] = num6;
								GenVars.floatingIslandHouseY[GenVars.numIslandHouses] = num10;
								GenVars.floatingIslandStyle[GenVars.numIslandHouses] = num9;
								GenVars.numIslandHouses++;
								num2++;
							}
						}
					}
					num4++;
				}
			});
			WorldGen.AddGenerationPass("Mushroom Patches", delegate(GenerationProgress progress, GameConfiguration passConfig)
			{
				progress.Message = Lang.gen[13].Value;
				if (WorldGen.remixWorldGen)
				{
					for (int i = 10; i < Main.maxTilesX - 10; i++)
					{
						for (int j = Main.maxTilesY + WorldGen.genRand.Next(3) - 350; j < Main.maxTilesY - 10; j++)
						{
							if (Main.tile[i, j].type == 0)
							{
								Main.tile[i, j].type = 59;
							}
						}
					}
				}
				double num = (double)Main.maxTilesX / 700.0;
				if (num > (double)GenVars.maxMushroomBiomes)
				{
					num = (double)GenVars.maxMushroomBiomes;
				}
				int num2 = 0;
				while ((double)num2 < num)
				{
					int num3 = 0;
					bool flag = true;
					while (flag)
					{
						int num4 = WorldGen.genRand.Next((int)((double)Main.maxTilesX * 0.2), (int)((double)Main.maxTilesX * 0.8));
						if (num3 > Main.maxTilesX / 4)
						{
							num4 = WorldGen.genRand.Next((int)((double)Main.maxTilesX * 0.25), (int)((double)Main.maxTilesX * 0.975));
						}
						int num5;
						if (WorldGen.remixWorldGen)
						{
							num5 = WorldGen.genRand.Next((int)Main.worldSurface + 50, (int)Main.rockLayer - 50);
						}
						else
						{
							num5 = WorldGen.genRand.Next((int)Main.rockLayer + 50, Main.maxTilesY - 300);
						}
						flag = false;
						int num6 = 100;
						int num7 = 500;
						for (int k = num4 - num6; k < num4 + num6; k += 3)
						{
							for (int l = num5 - num6; l < num5 + num6; l += 3)
							{
								if (WorldGen.InWorld(k, l, 0))
								{
									if (Main.tile[k, l].type == 147 || Main.tile[k, l].type == 161 || Main.tile[k, l].type == 162 || Main.tile[k, l].type == 60 || Main.tile[k, l].type == 368 || Main.tile[k, l].type == 367)
									{
										flag = true;
										break;
									}
									if (GenVars.UndergroundDesertLocation.Contains(new Point(k, l)))
									{
										flag = true;
										break;
									}
								}
								else
								{
									flag = true;
								}
							}
						}
						if (!flag)
						{
							for (int m = 0; m < GenVars.numMushroomBiomes; m++)
							{
								if (Vector2D.Distance(GenVars.mushroomBiomesPosition[m].ToVector2D(), new Vector2D((double)num4, (double)num5)) < (double)num7)
								{
									flag = true;
								}
							}
						}
						if (!flag && GenVars.numMushroomBiomes < GenVars.maxMushroomBiomes)
						{
							WorldGen.ShroomPatch(num4, num5);
							for (int n = 0; n < 5; n++)
							{
								int i2 = num4 + WorldGen.genRand.Next(-40, 41);
								int j2 = num5 + WorldGen.genRand.Next(-40, 41);
								WorldGen.ShroomPatch(i2, j2);
							}
							GenVars.mushroomBiomesPosition[GenVars.numMushroomBiomes].X = num4;
							GenVars.mushroomBiomesPosition[GenVars.numMushroomBiomes].Y = num5;
							GenVars.numMushroomBiomes++;
						}
						num3++;
						if (num3 > Main.maxTilesX / 2)
						{
							break;
						}
					}
					num2++;
				}
				for (int num8 = 0; num8 < Main.maxTilesX; num8++)
				{
					progress.Set((double)num8 / (double)Main.maxTilesX);
					for (int num9 = (int)Main.worldSurface; num9 < Main.maxTilesY; num9++)
					{
						if (WorldGen.InWorld(num8, num9, 50) && Main.tile[num8, num9].active())
						{
							WorldGen.grassSpread = 0;
							WorldGen.SpreadGrass(num8, num9, 59, 70, false, default(TileColorCache));
						}
					}
				}
				for (int num10 = 0; num10 < Main.maxTilesX; num10++)
				{
					for (int num11 = (int)Main.worldSurface; num11 < Main.maxTilesY; num11++)
					{
						if (Main.tile[num10, num11].active() && Main.tile[num10, num11].type == 70)
						{
							int type = 59;
							for (int num12 = num10 - 1; num12 <= num10 + 1; num12++)
							{
								for (int num13 = num11 - 1; num13 <= num11 + 1; num13++)
								{
									if (Main.tile[num12, num13].active())
									{
										if (!Main.tile[num12 - 1, num13].active() && !Main.tile[num12 + 1, num13].active())
										{
											WorldGen.KillTile(num12, num13, false, false, false);
										}
										else if (!Main.tile[num12, num13 - 1].active() && !Main.tile[num12, num13 + 1].active())
										{
											WorldGen.KillTile(num12, num13, false, false, false);
										}
									}
									else if (Main.tile[num12 - 1, num13].active() && Main.tile[num12 + 1, num13].active())
									{
										WorldGen.PlaceTile(num12, num13, type, false, false, -1, 0);
										if (Main.tile[num12 - 1, num11].type == 70)
										{
											Main.tile[num12 - 1, num11].type = 59;
										}
										if (Main.tile[num12 + 1, num11].type == 70)
										{
											Main.tile[num12 + 1, num11].type = 59;
										}
									}
									else if (Main.tile[num12, num13 - 1].active() && Main.tile[num12, num13 + 1].active())
									{
										WorldGen.PlaceTile(num12, num13, type, false, false, -1, 0);
										if (Main.tile[num12, num11 - 1].type == 70)
										{
											Main.tile[num12, num11 - 1].type = 59;
										}
										if (Main.tile[num12, num11 + 1].type == 70)
										{
											Main.tile[num12, num11 + 1].type = 59;
										}
									}
								}
							}
							if (WorldGen.genRand.Next(4) == 0)
							{
								int num14 = num10 + WorldGen.genRand.Next(-20, 21);
								int num15 = num11 + WorldGen.genRand.Next(-20, 21);
								if (WorldGen.InWorld(num14, num15, 0) && Main.tile[num14, num15].type == 59)
								{
									Main.tile[num14, num15].type = 70;
								}
							}
						}
					}
				}
			});
			WorldGen.AddGenerationPass("Marble", delegate(GenerationProgress progress, GameConfiguration passConfig)
			{
				progress.Message = Lang.gen[80].Value;
				int num = passConfig.Get<WorldGenRange>("Count").GetRandom(WorldGen.genRand);
				double num2 = (double)(Main.maxTilesX - 160) / (double)num;
				MarbleBiome marbleBiome = GenVars.configuration.CreateBiome<MarbleBiome>();
				int num3 = 0;
				int i = 0;
				while (i < num)
				{
					double num4 = (double)i / (double)num;
					progress.Set(num4);
					Point point = WorldGen.RandomRectanglePoint((int)(num4 * (double)(Main.maxTilesX - 160)) + 80, (int)GenVars.rockLayer + 20, (int)num2, Main.maxTilesY - ((int)GenVars.rockLayer + 40) - 200);
					if (WorldGen.remixWorldGen)
					{
						point = WorldGen.RandomRectanglePoint((int)(num4 * (double)(Main.maxTilesX - 160)) + 80, (int)GenVars.worldSurface + 100, (int)num2, (int)GenVars.rockLayer - (int)GenVars.worldSurface - 100);
					}
					while ((double)point.X > (double)Main.maxTilesX * 0.45 && (double)point.X < (double)Main.maxTilesX * 0.55)
					{
						point.X = WorldGen.genRand.Next(WorldGen.beachDistance, Main.maxTilesX - WorldGen.beachDistance);
					}
					num3++;
					if (marbleBiome.Place(point, GenVars.structures))
					{
						i++;
						num3 = 0;
					}
					else if (num3 > Main.maxTilesX * 10)
					{
						num = i;
						i++;
						num3 = 0;
					}
				}
			});
			WorldGen.AddGenerationPass("Granite", delegate(GenerationProgress progress, GameConfiguration passConfig)
			{
				progress.Message = Lang.gen[81].Value;
				int num = passConfig.Get<WorldGenRange>("Count").GetRandom(WorldGen.genRand);
				double num2 = (double)(Main.maxTilesX - 200) / (double)num;
				List<Point> list = new List<Point>(num);
				int num3 = 0;
				int i = 0;
				while (i < num)
				{
					double num4 = (double)i / (double)num;
					progress.Set(num4);
					Point point = WorldGen.RandomRectanglePoint((int)(num4 * (double)(Main.maxTilesX - 200)) + 100, (int)GenVars.rockLayer + 20, (int)num2, Main.maxTilesY - ((int)GenVars.rockLayer + 40) - 200);
					if (WorldGen.remixWorldGen)
					{
						point = WorldGen.RandomRectanglePoint((int)(num4 * (double)(Main.maxTilesX - 200)) + 100, (int)GenVars.worldSurface + 100, (int)num2, (int)GenVars.rockLayer - (int)GenVars.worldSurface - 100);
					}
					while ((double)point.X > (double)Main.maxTilesX * 0.45 && (double)point.X < (double)Main.maxTilesX * 0.55)
					{
						point.X = WorldGen.genRand.Next(WorldGen.beachDistance, Main.maxTilesX - WorldGen.beachDistance);
					}
					num3++;
					if (GraniteBiome.CanPlace(point, GenVars.structures))
					{
						list.Add(point);
						i++;
					}
					else if (num3 > Main.maxTilesX * 10)
					{
						num = i;
						i++;
						num3 = 0;
					}
				}
				GraniteBiome graniteBiome = GenVars.configuration.CreateBiome<GraniteBiome>();
				for (int j = 0; j < num; j++)
				{
					graniteBiome.Place(list[j], GenVars.structures);
				}
			});
			WorldGen.AddGenerationPass("Dirt To Mud", delegate(GenerationProgress progress, GameConfiguration passConfig)
			{
				progress.Message = Lang.gen[14].Value;
				double num = (double)(Main.maxTilesX * Main.maxTilesY) * 0.001;
				int num2 = 0;
				while ((double)num2 < num)
				{
					progress.Set((double)num2 / num);
					if (WorldGen.remixWorldGen)
					{
						WorldGen.TileRunner(WorldGen.genRand.Next(0, Main.maxTilesX), WorldGen.genRand.Next((int)Main.worldSurface, (int)GenVars.rockLayerLow), (double)WorldGen.genRand.Next(2, 6), WorldGen.genRand.Next(2, 40), 59, false, 0.0, 0.0, false, true, 53);
					}
					else
					{
						WorldGen.TileRunner(WorldGen.genRand.Next(0, Main.maxTilesX), WorldGen.genRand.Next((int)GenVars.rockLayerLow, Main.maxTilesY), (double)WorldGen.genRand.Next(2, 6), WorldGen.genRand.Next(2, 40), 59, false, 0.0, 0.0, false, true, 53);
					}
					num2++;
				}
			});
			WorldGen.AddGenerationPass("Silt", delegate(GenerationProgress progress, GameConfiguration passConfig)
			{
				progress.Message = Lang.gen[15].Value;
				for (int i = 0; i < (int)((double)(Main.maxTilesX * Main.maxTilesY) * 0.0001); i++)
				{
					int num = WorldGen.genRand.Next(0, Main.maxTilesX);
					int num2 = WorldGen.genRand.Next((int)GenVars.rockLayerHigh, Main.maxTilesY);
					if (WorldGen.remixWorldGen)
					{
						num2 = WorldGen.genRand.Next((int)Main.worldSurface, (int)Main.rockLayer);
					}
					if (Main.tile[num, num2].wall != 187 && Main.tile[num, num2].wall != 216)
					{
						WorldGen.TileRunner(num, num2, (double)WorldGen.genRand.Next(5, 12), WorldGen.genRand.Next(15, 50), 123, false, 0.0, 0.0, false, true, -1);
					}
				}
				for (int j = 0; j < (int)((double)(Main.maxTilesX * Main.maxTilesY) * 0.0005); j++)
				{
					int num3 = WorldGen.genRand.Next(0, Main.maxTilesX);
					int num4 = WorldGen.genRand.Next((int)GenVars.rockLayerHigh, Main.maxTilesY);
					if (WorldGen.remixWorldGen)
					{
						num4 = WorldGen.genRand.Next((int)Main.worldSurface, (int)Main.rockLayer);
					}
					if (Main.tile[num3, num4].wall != 187 && Main.tile[num3, num4].wall != 216)
					{
						WorldGen.TileRunner(num3, num4, (double)WorldGen.genRand.Next(2, 5), WorldGen.genRand.Next(2, 5), 123, false, 0.0, 0.0, false, true, -1);
					}
				}
			});
			WorldGen.AddGenerationPass("Shinies", delegate(GenerationProgress progress, GameConfiguration passConfig)
			{
				progress.Message = Lang.gen[16].Value;
				if (WorldGen.remixWorldGen)
				{
					for (int i = 0; i < (int)((double)(Main.maxTilesX * Main.maxTilesY) * 6E-05); i++)
					{
						if (WorldGen.drunkWorldGen)
						{
							if (WorldGen.genRand.Next(2) == 0)
							{
								GenVars.copper = 7;
							}
							else
							{
								GenVars.copper = 166;
							}
						}
						WorldGen.TileRunner(WorldGen.genRand.Next(0, Main.maxTilesX), WorldGen.genRand.Next((int)GenVars.worldSurfaceLow, (int)GenVars.worldSurfaceHigh), (double)WorldGen.genRand.Next(3, 6), WorldGen.genRand.Next(2, 6), GenVars.copper, false, 0.0, 0.0, false, true, -1);
					}
					for (int j = 0; j < (int)((double)(Main.maxTilesX * Main.maxTilesY) * 8E-05); j++)
					{
						if (WorldGen.drunkWorldGen)
						{
							if (WorldGen.genRand.Next(2) == 0)
							{
								GenVars.copper = 7;
							}
							else
							{
								GenVars.copper = 166;
							}
						}
						WorldGen.TileRunner(WorldGen.genRand.Next(0, Main.maxTilesX), WorldGen.genRand.Next((int)GenVars.worldSurfaceHigh, (int)GenVars.rockLayerHigh), (double)WorldGen.genRand.Next(3, 7), WorldGen.genRand.Next(3, 7), GenVars.copper, false, 0.0, 0.0, false, true, -1);
					}
					for (int k = 0; k < (int)((double)(Main.maxTilesX * Main.maxTilesY) * 0.0002); k++)
					{
						if (WorldGen.drunkWorldGen)
						{
							if (WorldGen.genRand.Next(2) == 0)
							{
								GenVars.copper = 7;
							}
							else
							{
								GenVars.copper = 166;
							}
						}
						WorldGen.TileRunner(WorldGen.genRand.Next(0, Main.maxTilesX), WorldGen.genRand.Next((int)GenVars.rockLayerLow, Main.maxTilesY), (double)WorldGen.genRand.Next(4, 9), WorldGen.genRand.Next(4, 8), GenVars.copper, false, 0.0, 0.0, false, true, -1);
					}
					for (int l = 0; l < (int)((double)(Main.maxTilesX * Main.maxTilesY) * 3E-05); l++)
					{
						if (WorldGen.drunkWorldGen)
						{
							if (WorldGen.genRand.Next(2) == 0)
							{
								GenVars.iron = 6;
							}
							else
							{
								GenVars.iron = 167;
							}
						}
						WorldGen.TileRunner(WorldGen.genRand.Next(0, Main.maxTilesX), WorldGen.genRand.Next((int)GenVars.worldSurfaceLow, (int)GenVars.worldSurfaceHigh), (double)WorldGen.genRand.Next(3, 7), WorldGen.genRand.Next(2, 5), GenVars.iron, false, 0.0, 0.0, false, true, -1);
					}
					for (int m = 0; m < (int)((double)(Main.maxTilesX * Main.maxTilesY) * 8E-05); m++)
					{
						if (WorldGen.drunkWorldGen)
						{
							if (WorldGen.genRand.Next(2) == 0)
							{
								GenVars.iron = 6;
							}
							else
							{
								GenVars.iron = 167;
							}
						}
						WorldGen.TileRunner(WorldGen.genRand.Next(0, Main.maxTilesX), WorldGen.genRand.Next((int)GenVars.worldSurfaceHigh, (int)GenVars.rockLayerHigh), (double)WorldGen.genRand.Next(3, 6), WorldGen.genRand.Next(3, 6), GenVars.iron, false, 0.0, 0.0, false, true, -1);
					}
					for (int n = 0; n < (int)((double)(Main.maxTilesX * Main.maxTilesY) * 0.0002); n++)
					{
						if (WorldGen.drunkWorldGen)
						{
							if (WorldGen.genRand.Next(2) == 0)
							{
								GenVars.iron = 6;
							}
							else
							{
								GenVars.iron = 167;
							}
						}
						WorldGen.TileRunner(WorldGen.genRand.Next(0, Main.maxTilesX), WorldGen.genRand.Next((int)GenVars.rockLayerLow, Main.maxTilesY), (double)WorldGen.genRand.Next(4, 9), WorldGen.genRand.Next(4, 8), GenVars.iron, false, 0.0, 0.0, false, true, -1);
					}
					for (int num = 0; num < (int)((double)(Main.maxTilesX * Main.maxTilesY) * 2.6E-05); num++)
					{
						if (WorldGen.drunkWorldGen)
						{
							if (WorldGen.genRand.Next(2) == 0)
							{
								GenVars.silver = 9;
							}
							else
							{
								GenVars.silver = 168;
							}
						}
						WorldGen.TileRunner(WorldGen.genRand.Next(0, Main.maxTilesX), WorldGen.genRand.Next((int)Main.rockLayer - 100, Main.maxTilesY - 250), (double)WorldGen.genRand.Next(3, 6), WorldGen.genRand.Next(3, 6), GenVars.silver, false, 0.0, 0.0, false, true, -1);
					}
					for (int num2 = 0; num2 < (int)((double)(Main.maxTilesX * Main.maxTilesY) * 0.00015); num2++)
					{
						if (WorldGen.drunkWorldGen)
						{
							if (WorldGen.genRand.Next(2) == 0)
							{
								GenVars.silver = 9;
							}
							else
							{
								GenVars.silver = 168;
							}
						}
						WorldGen.TileRunner(WorldGen.genRand.Next(0, Main.maxTilesX), WorldGen.genRand.Next((int)Main.worldSurface, (int)Main.rockLayer), (double)WorldGen.genRand.Next(4, 9), WorldGen.genRand.Next(4, 8), GenVars.silver, false, 0.0, 0.0, false, true, -1);
					}
					for (int num3 = 0; num3 < (int)((double)(Main.maxTilesX * Main.maxTilesY) * 0.00017); num3++)
					{
						if (WorldGen.drunkWorldGen)
						{
							if (WorldGen.genRand.Next(2) == 0)
							{
								GenVars.silver = 9;
							}
							else
							{
								GenVars.silver = 168;
							}
						}
						WorldGen.TileRunner(WorldGen.genRand.Next(0, Main.maxTilesX), WorldGen.genRand.Next(0, (int)GenVars.worldSurfaceLow), (double)WorldGen.genRand.Next(4, 9), WorldGen.genRand.Next(4, 8), GenVars.silver, false, 0.0, 0.0, false, true, -1);
					}
					for (int num4 = 0; num4 < (int)((double)(Main.maxTilesX * Main.maxTilesY) * 0.00012); num4++)
					{
						if (WorldGen.drunkWorldGen)
						{
							if (WorldGen.genRand.Next(2) == 0)
							{
								GenVars.gold = 8;
							}
							else
							{
								GenVars.gold = 169;
							}
						}
						WorldGen.TileRunner(WorldGen.genRand.Next(0, Main.maxTilesX), WorldGen.genRand.Next((int)Main.worldSurface, (int)Main.rockLayer), (double)WorldGen.genRand.Next(4, 8), WorldGen.genRand.Next(4, 8), GenVars.gold, false, 0.0, 0.0, false, true, -1);
					}
					for (int num5 = 0; num5 < (int)((double)(Main.maxTilesX * Main.maxTilesY) * 0.00012); num5++)
					{
						if (WorldGen.drunkWorldGen)
						{
							if (WorldGen.genRand.Next(2) == 0)
							{
								GenVars.gold = 8;
							}
							else
							{
								GenVars.gold = 169;
							}
						}
						WorldGen.TileRunner(WorldGen.genRand.Next(0, Main.maxTilesX), WorldGen.genRand.Next(0, (int)GenVars.worldSurfaceLow - 20), (double)WorldGen.genRand.Next(4, 8), WorldGen.genRand.Next(4, 8), GenVars.gold, false, 0.0, 0.0, false, true, -1);
					}
					if (WorldGen.drunkWorldGen)
					{
						for (int num6 = 0; num6 < (int)((double)(Main.maxTilesX * Main.maxTilesY) * 2.25E-05 / 2.0); num6++)
						{
							WorldGen.TileRunner(WorldGen.genRand.Next(0, Main.maxTilesX), WorldGen.genRand.Next((int)Main.rockLayer, Main.maxTilesY), (double)WorldGen.genRand.Next(3, 6), WorldGen.genRand.Next(4, 8), 204, false, 0.0, 0.0, false, true, -1);
						}
						for (int num7 = 0; num7 < (int)((double)(Main.maxTilesX * Main.maxTilesY) * 2.25E-05 / 2.0); num7++)
						{
							WorldGen.TileRunner(WorldGen.genRand.Next(0, Main.maxTilesX), WorldGen.genRand.Next((int)Main.rockLayer, Main.maxTilesY), (double)WorldGen.genRand.Next(3, 6), WorldGen.genRand.Next(4, 8), 22, false, 0.0, 0.0, false, true, -1);
						}
					}
					if (WorldGen.crimson)
					{
						for (int num8 = 0; num8 < (int)((double)(Main.maxTilesX * Main.maxTilesY) * 4.25E-05); num8++)
						{
							WorldGen.TileRunner(WorldGen.genRand.Next(0, Main.maxTilesX), WorldGen.genRand.Next((int)Main.worldSurface, (int)Main.rockLayer), (double)WorldGen.genRand.Next(3, 6), WorldGen.genRand.Next(4, 8), 204, false, 0.0, 0.0, false, true, -1);
						}
						return;
					}
					for (int num9 = 0; num9 < (int)((double)(Main.maxTilesX * Main.maxTilesY) * 4.25E-05); num9++)
					{
						WorldGen.TileRunner(WorldGen.genRand.Next(0, Main.maxTilesX), WorldGen.genRand.Next((int)Main.worldSurface, (int)Main.rockLayer), (double)WorldGen.genRand.Next(3, 6), WorldGen.genRand.Next(4, 8), 22, false, 0.0, 0.0, false, true, -1);
					}
					return;
				}
				else
				{
					for (int num10 = 0; num10 < (int)((double)(Main.maxTilesX * Main.maxTilesY) * 6E-05); num10++)
					{
						if (WorldGen.drunkWorldGen)
						{
							if (WorldGen.genRand.Next(2) == 0)
							{
								GenVars.copper = 7;
							}
							else
							{
								GenVars.copper = 166;
							}
						}
						WorldGen.TileRunner(WorldGen.genRand.Next(0, Main.maxTilesX), WorldGen.genRand.Next((int)GenVars.worldSurfaceLow, (int)GenVars.worldSurfaceHigh), (double)WorldGen.genRand.Next(3, 6), WorldGen.genRand.Next(2, 6), GenVars.copper, false, 0.0, 0.0, false, true, -1);
					}
					for (int num11 = 0; num11 < (int)((double)(Main.maxTilesX * Main.maxTilesY) * 8E-05); num11++)
					{
						if (WorldGen.drunkWorldGen)
						{
							if (WorldGen.genRand.Next(2) == 0)
							{
								GenVars.copper = 7;
							}
							else
							{
								GenVars.copper = 166;
							}
						}
						WorldGen.TileRunner(WorldGen.genRand.Next(0, Main.maxTilesX), WorldGen.genRand.Next((int)GenVars.worldSurfaceHigh, (int)GenVars.rockLayerHigh), (double)WorldGen.genRand.Next(3, 7), WorldGen.genRand.Next(3, 7), GenVars.copper, false, 0.0, 0.0, false, true, -1);
					}
					for (int num12 = 0; num12 < (int)((double)(Main.maxTilesX * Main.maxTilesY) * 0.0002); num12++)
					{
						if (WorldGen.drunkWorldGen)
						{
							if (WorldGen.genRand.Next(2) == 0)
							{
								GenVars.copper = 7;
							}
							else
							{
								GenVars.copper = 166;
							}
						}
						WorldGen.TileRunner(WorldGen.genRand.Next(0, Main.maxTilesX), WorldGen.genRand.Next((int)GenVars.rockLayerLow, Main.maxTilesY), (double)WorldGen.genRand.Next(4, 9), WorldGen.genRand.Next(4, 8), GenVars.copper, false, 0.0, 0.0, false, true, -1);
					}
					for (int num13 = 0; num13 < (int)((double)(Main.maxTilesX * Main.maxTilesY) * 3E-05); num13++)
					{
						if (WorldGen.drunkWorldGen)
						{
							if (WorldGen.genRand.Next(2) == 0)
							{
								GenVars.iron = 6;
							}
							else
							{
								GenVars.iron = 167;
							}
						}
						WorldGen.TileRunner(WorldGen.genRand.Next(0, Main.maxTilesX), WorldGen.genRand.Next((int)GenVars.worldSurfaceLow, (int)GenVars.worldSurfaceHigh), (double)WorldGen.genRand.Next(3, 7), WorldGen.genRand.Next(2, 5), GenVars.iron, false, 0.0, 0.0, false, true, -1);
					}
					for (int num14 = 0; num14 < (int)((double)(Main.maxTilesX * Main.maxTilesY) * 8E-05); num14++)
					{
						if (WorldGen.drunkWorldGen)
						{
							if (WorldGen.genRand.Next(2) == 0)
							{
								GenVars.iron = 6;
							}
							else
							{
								GenVars.iron = 167;
							}
						}
						WorldGen.TileRunner(WorldGen.genRand.Next(0, Main.maxTilesX), WorldGen.genRand.Next((int)GenVars.worldSurfaceHigh, (int)GenVars.rockLayerHigh), (double)WorldGen.genRand.Next(3, 6), WorldGen.genRand.Next(3, 6), GenVars.iron, false, 0.0, 0.0, false, true, -1);
					}
					for (int num15 = 0; num15 < (int)((double)(Main.maxTilesX * Main.maxTilesY) * 0.0002); num15++)
					{
						if (WorldGen.drunkWorldGen)
						{
							if (WorldGen.genRand.Next(2) == 0)
							{
								GenVars.iron = 6;
							}
							else
							{
								GenVars.iron = 167;
							}
						}
						WorldGen.TileRunner(WorldGen.genRand.Next(0, Main.maxTilesX), WorldGen.genRand.Next((int)GenVars.rockLayerLow, Main.maxTilesY), (double)WorldGen.genRand.Next(4, 9), WorldGen.genRand.Next(4, 8), GenVars.iron, false, 0.0, 0.0, false, true, -1);
					}
					for (int num16 = 0; num16 < (int)((double)(Main.maxTilesX * Main.maxTilesY) * 2.6E-05); num16++)
					{
						if (WorldGen.drunkWorldGen)
						{
							if (WorldGen.genRand.Next(2) == 0)
							{
								GenVars.silver = 9;
							}
							else
							{
								GenVars.silver = 168;
							}
						}
						WorldGen.TileRunner(WorldGen.genRand.Next(0, Main.maxTilesX), WorldGen.genRand.Next((int)GenVars.worldSurfaceHigh, (int)GenVars.rockLayerHigh), (double)WorldGen.genRand.Next(3, 6), WorldGen.genRand.Next(3, 6), GenVars.silver, false, 0.0, 0.0, false, true, -1);
					}
					for (int num17 = 0; num17 < (int)((double)(Main.maxTilesX * Main.maxTilesY) * 0.00015); num17++)
					{
						if (WorldGen.drunkWorldGen)
						{
							if (WorldGen.genRand.Next(2) == 0)
							{
								GenVars.silver = 9;
							}
							else
							{
								GenVars.silver = 168;
							}
						}
						WorldGen.TileRunner(WorldGen.genRand.Next(0, Main.maxTilesX), WorldGen.genRand.Next((int)GenVars.rockLayerLow, Main.maxTilesY), (double)WorldGen.genRand.Next(4, 9), WorldGen.genRand.Next(4, 8), GenVars.silver, false, 0.0, 0.0, false, true, -1);
					}
					for (int num18 = 0; num18 < (int)((double)(Main.maxTilesX * Main.maxTilesY) * 0.00017); num18++)
					{
						if (WorldGen.drunkWorldGen)
						{
							if (WorldGen.genRand.Next(2) == 0)
							{
								GenVars.silver = 9;
							}
							else
							{
								GenVars.silver = 168;
							}
						}
						WorldGen.TileRunner(WorldGen.genRand.Next(0, Main.maxTilesX), WorldGen.genRand.Next(0, (int)GenVars.worldSurfaceLow), (double)WorldGen.genRand.Next(4, 9), WorldGen.genRand.Next(4, 8), GenVars.silver, false, 0.0, 0.0, false, true, -1);
					}
					for (int num19 = 0; num19 < (int)((double)(Main.maxTilesX * Main.maxTilesY) * 0.00012); num19++)
					{
						if (WorldGen.drunkWorldGen)
						{
							if (WorldGen.genRand.Next(2) == 0)
							{
								GenVars.gold = 8;
							}
							else
							{
								GenVars.gold = 169;
							}
						}
						WorldGen.TileRunner(WorldGen.genRand.Next(0, Main.maxTilesX), WorldGen.genRand.Next((int)GenVars.rockLayerLow, Main.maxTilesY), (double)WorldGen.genRand.Next(4, 8), WorldGen.genRand.Next(4, 8), GenVars.gold, false, 0.0, 0.0, false, true, -1);
					}
					for (int num20 = 0; num20 < (int)((double)(Main.maxTilesX * Main.maxTilesY) * 0.00012); num20++)
					{
						if (WorldGen.drunkWorldGen)
						{
							if (WorldGen.genRand.Next(2) == 0)
							{
								GenVars.gold = 8;
							}
							else
							{
								GenVars.gold = 169;
							}
						}
						WorldGen.TileRunner(WorldGen.genRand.Next(0, Main.maxTilesX), WorldGen.genRand.Next(0, (int)GenVars.worldSurfaceLow - 20), (double)WorldGen.genRand.Next(4, 8), WorldGen.genRand.Next(4, 8), GenVars.gold, false, 0.0, 0.0, false, true, -1);
					}
					if (WorldGen.drunkWorldGen)
					{
						for (int num21 = 0; num21 < (int)((double)(Main.maxTilesX * Main.maxTilesY) * 2.25E-05 / 2.0); num21++)
						{
							WorldGen.TileRunner(WorldGen.genRand.Next(0, Main.maxTilesX), WorldGen.genRand.Next((int)Main.rockLayer, Main.maxTilesY), (double)WorldGen.genRand.Next(3, 6), WorldGen.genRand.Next(4, 8), 204, false, 0.0, 0.0, false, true, -1);
						}
						for (int num22 = 0; num22 < (int)((double)(Main.maxTilesX * Main.maxTilesY) * 2.25E-05 / 2.0); num22++)
						{
							WorldGen.TileRunner(WorldGen.genRand.Next(0, Main.maxTilesX), WorldGen.genRand.Next((int)Main.rockLayer, Main.maxTilesY), (double)WorldGen.genRand.Next(3, 6), WorldGen.genRand.Next(4, 8), 22, false, 0.0, 0.0, false, true, -1);
						}
					}
					if (WorldGen.crimson)
					{
						for (int num23 = 0; num23 < (int)((double)(Main.maxTilesX * Main.maxTilesY) * 2.25E-05); num23++)
						{
							WorldGen.TileRunner(WorldGen.genRand.Next(0, Main.maxTilesX), WorldGen.genRand.Next((int)Main.rockLayer, Main.maxTilesY), (double)WorldGen.genRand.Next(3, 6), WorldGen.genRand.Next(4, 8), 204, false, 0.0, 0.0, false, true, -1);
						}
						return;
					}
					for (int num24 = 0; num24 < (int)((double)(Main.maxTilesX * Main.maxTilesY) * 2.25E-05); num24++)
					{
						WorldGen.TileRunner(WorldGen.genRand.Next(0, Main.maxTilesX), WorldGen.genRand.Next((int)Main.rockLayer, Main.maxTilesY), (double)WorldGen.genRand.Next(3, 6), WorldGen.genRand.Next(4, 8), 22, false, 0.0, 0.0, false, true, -1);
					}
					return;
				}
			});
			WorldGen.AddGenerationPass("Webs", delegate(GenerationProgress progress, GameConfiguration passConfig)
			{
				progress.Message = Lang.gen[17].Value;
				for (int i = 0; i < (int)((double)(Main.maxTilesX * Main.maxTilesY) * 0.0006); i++)
				{
					int num = WorldGen.genRand.Next(20, Main.maxTilesX - 20);
					int num2 = WorldGen.genRand.Next((int)GenVars.worldSurfaceHigh, Main.maxTilesY - 20);
					if (i < GenVars.numMCaves)
					{
						num = GenVars.mCaveX[i];
						num2 = GenVars.mCaveY[i];
					}
					if (!Main.tile[num, num2].active())
					{
						if ((double)num2 <= Main.worldSurface)
						{
							if (Main.tile[num, num2].wall <= 0)
							{
								goto IL_149;
							}
						}
						while (!Main.tile[num, num2].active() && num2 > (int)GenVars.worldSurfaceLow)
						{
							num2--;
						}
						num2++;
						int num3 = 1;
						if (WorldGen.genRand.Next(2) == 0)
						{
							num3 = -1;
						}
						while (!Main.tile[num, num2].active() && num > 10 && num < Main.maxTilesX - 10)
						{
							num += num3;
						}
						num -= num3;
						if ((double)num2 > Main.worldSurface || Main.tile[num, num2].wall > 0)
						{
							WorldGen.TileRunner(num, num2, (double)WorldGen.genRand.Next(4, 11), WorldGen.genRand.Next(2, 4), 51, true, (double)num3, -1.0, false, false, -1);
						}
					}
					IL_149:;
				}
			});
			WorldGen.AddGenerationPass("Underworld", delegate(GenerationProgress progress, GameConfiguration passConfig)
			{
				progress.Message = Lang.gen[18].Value;
				progress.Set(0.0);
				int num = Main.maxTilesY - WorldGen.genRand.Next(150, 190);
				for (int i = 0; i < Main.maxTilesX; i++)
				{
					num += WorldGen.genRand.Next(-3, 4);
					if (num < Main.maxTilesY - 190)
					{
						num = Main.maxTilesY - 190;
					}
					if (num > Main.maxTilesY - 160)
					{
						num = Main.maxTilesY - 160;
					}
					for (int j = num - 20 - WorldGen.genRand.Next(3); j < Main.maxTilesY; j++)
					{
						if (j >= num)
						{
							Main.tile[i, j].active(false);
							Main.tile[i, j].lava(false);
							Main.tile[i, j].liquid = 0;
						}
						else
						{
							Main.tile[i, j].type = 57;
						}
					}
				}
				int num2 = Main.maxTilesY - WorldGen.genRand.Next(40, 70);
				for (int k = 10; k < Main.maxTilesX - 10; k++)
				{
					num2 += WorldGen.genRand.Next(-10, 11);
					if (num2 > Main.maxTilesY - 60)
					{
						num2 = Main.maxTilesY - 60;
					}
					if (num2 < Main.maxTilesY - 100)
					{
						num2 = Main.maxTilesY - 120;
					}
					for (int l = num2; l < Main.maxTilesY - 10; l++)
					{
						if (!Main.tile[k, l].active())
						{
							Main.tile[k, l].lava(true);
							Main.tile[k, l].liquid = byte.MaxValue;
						}
					}
				}
				for (int m = 0; m < Main.maxTilesX; m++)
				{
					if (WorldGen.genRand.Next(50) == 0)
					{
						int num3 = Main.maxTilesY - 65;
						while (!Main.tile[m, num3].active() && num3 > Main.maxTilesY - 135)
						{
							num3--;
						}
						WorldGen.TileRunner(WorldGen.genRand.Next(0, Main.maxTilesX), num3 + WorldGen.genRand.Next(20, 50), (double)WorldGen.genRand.Next(15, 20), 1000, 57, true, 0.0, (double)WorldGen.genRand.Next(1, 3), true, true, -1);
					}
				}
				Liquid.QuickWater(-2, -1, -1);
				for (int n = 0; n < Main.maxTilesX; n++)
				{
					double num4 = (double)n / (double)(Main.maxTilesX - 1);
					progress.Set(num4 / 2.0 + 0.5);
					if (WorldGen.genRand.Next(13) == 0)
					{
						int num5 = Main.maxTilesY - 65;
						while ((Main.tile[n, num5].liquid > 0 || Main.tile[n, num5].active()) && num5 > Main.maxTilesY - 140)
						{
							num5--;
						}
						if ((!WorldGen.drunkWorldGen && !WorldGen.remixWorldGen) || WorldGen.genRand.Next(3) == 0 || (double)n <= (double)Main.maxTilesX * 0.4 || (double)n >= (double)Main.maxTilesX * 0.6)
						{
							WorldGen.TileRunner(n, num5 - WorldGen.genRand.Next(2, 5), (double)WorldGen.genRand.Next(5, 30), 1000, 57, true, 0.0, (double)WorldGen.genRand.Next(1, 3), true, true, -1);
						}
						double num6 = (double)WorldGen.genRand.Next(1, 3);
						if (WorldGen.genRand.Next(3) == 0)
						{
							num6 *= 0.5;
						}
						if ((!WorldGen.drunkWorldGen && !WorldGen.remixWorldGen) || WorldGen.genRand.Next(3) == 0 || (double)n <= (double)Main.maxTilesX * 0.4 || (double)n >= (double)Main.maxTilesX * 0.6)
						{
							if (WorldGen.genRand.Next(2) == 0)
							{
								WorldGen.TileRunner(n, num5 - WorldGen.genRand.Next(2, 5), (double)((int)((double)WorldGen.genRand.Next(5, 15) * num6)), (int)((double)WorldGen.genRand.Next(10, 15) * num6), 57, true, 1.0, 0.3, false, true, -1);
							}
							if (WorldGen.genRand.Next(2) == 0)
							{
								num6 = (double)WorldGen.genRand.Next(1, 3);
								WorldGen.TileRunner(n, num5 - WorldGen.genRand.Next(2, 5), (double)((int)((double)WorldGen.genRand.Next(5, 15) * num6)), (int)((double)WorldGen.genRand.Next(10, 15) * num6), 57, true, -1.0, 0.3, false, true, -1);
							}
						}
						WorldGen.TileRunner(n + WorldGen.genRand.Next(-10, 10), num5 + WorldGen.genRand.Next(-10, 10), (double)WorldGen.genRand.Next(5, 15), WorldGen.genRand.Next(5, 10), -2, false, (double)WorldGen.genRand.Next(-1, 3), (double)WorldGen.genRand.Next(-1, 3), false, true, -1);
						if (WorldGen.genRand.Next(3) == 0)
						{
							WorldGen.TileRunner(n + WorldGen.genRand.Next(-10, 10), num5 + WorldGen.genRand.Next(-10, 10), (double)WorldGen.genRand.Next(10, 30), WorldGen.genRand.Next(10, 20), -2, false, (double)WorldGen.genRand.Next(-1, 3), (double)WorldGen.genRand.Next(-1, 3), false, true, -1);
						}
						if (WorldGen.genRand.Next(5) == 0)
						{
							WorldGen.TileRunner(n + WorldGen.genRand.Next(-15, 15), num5 + WorldGen.genRand.Next(-15, 10), (double)WorldGen.genRand.Next(15, 30), WorldGen.genRand.Next(5, 20), -2, false, (double)WorldGen.genRand.Next(-1, 3), (double)WorldGen.genRand.Next(-1, 3), false, true, -1);
						}
					}
				}
				for (int num7 = 0; num7 < Main.maxTilesX; num7++)
				{
					WorldGen.TileRunner(WorldGen.genRand.Next(20, Main.maxTilesX - 20), WorldGen.genRand.Next(Main.maxTilesY - 180, Main.maxTilesY - 10), (double)WorldGen.genRand.Next(2, 7), WorldGen.genRand.Next(2, 7), -2, false, 0.0, 0.0, false, true, -1);
				}
				if (WorldGen.drunkWorldGen || WorldGen.remixWorldGen)
				{
					for (int num8 = 0; num8 < Main.maxTilesX * 2; num8++)
					{
						WorldGen.TileRunner(WorldGen.genRand.Next((int)((double)Main.maxTilesX * 0.35), (int)((double)Main.maxTilesX * 0.65)), WorldGen.genRand.Next(Main.maxTilesY - 180, Main.maxTilesY - 10), (double)WorldGen.genRand.Next(5, 20), WorldGen.genRand.Next(5, 10), -2, false, 0.0, 0.0, false, true, -1);
					}
				}
				for (int num9 = 0; num9 < Main.maxTilesX; num9++)
				{
					if (!Main.tile[num9, Main.maxTilesY - 145].active())
					{
						Main.tile[num9, Main.maxTilesY - 145].liquid = byte.MaxValue;
						Main.tile[num9, Main.maxTilesY - 145].lava(true);
					}
					if (!Main.tile[num9, Main.maxTilesY - 144].active())
					{
						Main.tile[num9, Main.maxTilesY - 144].liquid = byte.MaxValue;
						Main.tile[num9, Main.maxTilesY - 144].lava(true);
					}
				}
				for (int num10 = 0; num10 < (int)((double)(Main.maxTilesX * Main.maxTilesY) * 0.0008); num10++)
				{
					WorldGen.TileRunner(WorldGen.genRand.Next(0, Main.maxTilesX), WorldGen.genRand.Next(Main.maxTilesY - 140, Main.maxTilesY), (double)WorldGen.genRand.Next(2, 7), WorldGen.genRand.Next(3, 7), 58, false, 0.0, 0.0, false, true, -1);
				}
				if (WorldGen.remixWorldGen)
				{
					int num11 = (int)((double)Main.maxTilesX * 0.38);
					int num12 = (int)((double)Main.maxTilesX * 0.62);
					int num13 = num11;
					int num14 = Main.maxTilesY - 1;
					int num15 = Main.maxTilesY - 135;
					int num16 = Main.maxTilesY - 160;
					bool flag = false;
					Liquid.QuickWater(-2, -1, -1);
					while (num14 < Main.maxTilesY - 1 || num13 < num12)
					{
						if (!flag)
						{
							num14 -= WorldGen.genRand.Next(1, 4);
							if (num14 < num15)
							{
								flag = true;
							}
						}
						else if (num13 >= num12)
						{
							num14 += WorldGen.genRand.Next(1, 4);
							if (num14 > Main.maxTilesY - 1)
							{
								num14 = Main.maxTilesY - 1;
							}
						}
						else
						{
							if ((num13 <= Main.maxTilesX / 2 - 5 || num13 >= Main.maxTilesX / 2 + 5) && WorldGen.genRand.Next(4) == 0)
							{
								if (WorldGen.genRand.Next(3) == 0)
								{
									num14 += WorldGen.genRand.Next(-1, 2);
								}
								else if (WorldGen.genRand.Next(6) == 0)
								{
									num14 += WorldGen.genRand.Next(-2, 3);
								}
								else if (WorldGen.genRand.Next(8) == 0)
								{
									num14 += WorldGen.genRand.Next(-4, 5);
								}
							}
							if (num14 < num16)
							{
								num14 = num16;
							}
							if (num14 > num15)
							{
								num14 = num15;
							}
						}
						for (int num17 = num14; num17 > num14 - 20; num17--)
						{
							Main.tile[num13, num17].liquid = 0;
						}
						for (int num18 = num14; num18 < Main.maxTilesY; num18++)
						{
							Main.tile[num13, num18] = new Tile();
							Main.tile[num13, num18].active(true);
							Main.tile[num13, num18].type = 57;
						}
						num13++;
					}
					Liquid.QuickWater(-2, -1, -1);
					for (int num19 = num11; num19 < num12 + 15; num19++)
					{
						for (int num20 = Main.maxTilesY - 300; num20 < num15 + 20; num20++)
						{
							Main.tile[num19, num20].liquid = 0;
							if (Main.tile[num19, num20].type == 57 && Main.tile[num19, num20].active() && (!Main.tile[num19 - 1, num20 - 1].active() || !Main.tile[num19, num20 - 1].active() || !Main.tile[num19 + 1, num20 - 1].active() || !Main.tile[num19 - 1, num20].active() || !Main.tile[num19 + 1, num20].active() || !Main.tile[num19 - 1, num20 + 1].active() || !Main.tile[num19, num20 + 1].active() || !Main.tile[num19 + 1, num20 + 1].active()))
							{
								Main.tile[num19, num20].type = 633;
							}
						}
					}
					for (int num21 = num11; num21 < num12 + 15; num21++)
					{
						for (int num22 = Main.maxTilesY - 200; num22 < num15 + 20; num22++)
						{
							if (Main.tile[num21, num22].type == 633 && Main.tile[num21, num22].active() && !Main.tile[num21, num22 - 1].active() && WorldGen.genRand.Next(3) == 0)
							{
								WorldGen.TryGrowingTreeByType(634, num21, num22);
							}
						}
					}
				}
				else if (!WorldGen.drunkWorldGen)
				{
					for (int num23 = 25; num23 < Main.maxTilesX - 25; num23++)
					{
						if ((double)num23 < (double)Main.maxTilesX * 0.17 || (double)num23 > (double)Main.maxTilesX * 0.83)
						{
							for (int num24 = Main.maxTilesY - 300; num24 < Main.maxTilesY - 100 + WorldGen.genRand.Next(-1, 2); num24++)
							{
								if (Main.tile[num23, num24].type == 57 && Main.tile[num23, num24].active() && (!Main.tile[num23 - 1, num24 - 1].active() || !Main.tile[num23, num24 - 1].active() || !Main.tile[num23 + 1, num24 - 1].active() || !Main.tile[num23 - 1, num24].active() || !Main.tile[num23 + 1, num24].active() || !Main.tile[num23 - 1, num24 + 1].active() || !Main.tile[num23, num24 + 1].active() || !Main.tile[num23 + 1, num24 + 1].active()))
								{
									Main.tile[num23, num24].type = 633;
								}
							}
						}
					}
					for (int num25 = 25; num25 < Main.maxTilesX - 25; num25++)
					{
						if ((double)num25 < (double)Main.maxTilesX * 0.17 || (double)num25 > (double)Main.maxTilesX * 0.83)
						{
							for (int num26 = Main.maxTilesY - 200; num26 < Main.maxTilesY - 50; num26++)
							{
								if (Main.tile[num25, num26].type == 633 && Main.tile[num25, num26].active() && !Main.tile[num25, num26 - 1].active() && WorldGen.genRand.Next(3) == 0)
								{
									WorldGen.TryGrowingTreeByType(634, num25, num26);
								}
							}
						}
					}
				}
				WorldGen.AddHellHouses();
				if (WorldGen.drunkWorldGen)
				{
					for (int num27 = 25; num27 < Main.maxTilesX - 25; num27++)
					{
						for (int num28 = Main.maxTilesY - 300; num28 < Main.maxTilesY - 100 + WorldGen.genRand.Next(-1, 2); num28++)
						{
							if (Main.tile[num27, num28].type == 57 && Main.tile[num27, num28].active() && (!Main.tile[num27 - 1, num28 - 1].active() || !Main.tile[num27, num28 - 1].active() || !Main.tile[num27 + 1, num28 - 1].active() || !Main.tile[num27 - 1, num28].active() || !Main.tile[num27 + 1, num28].active() || !Main.tile[num27 - 1, num28 + 1].active() || !Main.tile[num27, num28 + 1].active() || !Main.tile[num27 + 1, num28 + 1].active()))
							{
								Main.tile[num27, num28].type = 633;
							}
						}
					}
					for (int num29 = 25; num29 < Main.maxTilesX - 25; num29++)
					{
						for (int num30 = Main.maxTilesY - 200; num30 < Main.maxTilesY - 50; num30++)
						{
							if (Main.tile[num29, num30].type == 633 && Main.tile[num29, num30].active() && !Main.tile[num29, num30 - 1].active() && WorldGen.genRand.Next(3) == 0)
							{
								WorldGen.TryGrowingTreeByType(634, num29, num30);
							}
						}
					}
				}
			});
			WorldGen.AddGenerationPass("Corruption", delegate(GenerationProgress progress, GameConfiguration passConfig)
			{
				int num = Main.maxTilesX;
				int num2 = 0;
				int num3 = Main.maxTilesX;
				int num4 = 0;
				for (int i = 0; i < Main.maxTilesX; i++)
				{
					int num5 = 0;
					while ((double)num5 < Main.worldSurface)
					{
						if (Main.tile[i, num5].active())
						{
							if (Main.tile[i, num5].type == 60)
							{
								if (i < num)
								{
									num = i;
								}
								if (i > num2)
								{
									num2 = i;
								}
							}
							else if (Main.tile[i, num5].type == 147 || Main.tile[i, num5].type == 161)
							{
								if (i < num3)
								{
									num3 = i;
								}
								if (i > num4)
								{
									num4 = i;
								}
							}
						}
						num5++;
					}
				}
				int num6 = 10;
				num -= num6;
				num2 += num6;
				num3 -= num6;
				num4 += num6;
				int num7 = 500;
				int num8 = 100;
				bool flag = WorldGen.crimson;
				double num9 = (double)Main.maxTilesX * 0.00045;
				if (WorldGen.remixWorldGen)
				{
					num9 *= 2.0;
				}
				else if (WorldGen.tenthAnniversaryWorldGen)
				{
					num7 *= 2;
					num8 *= 2;
				}
				if (WorldGen.drunkWorldGen)
				{
					flag = true;
					num9 /= 2.0;
				}
				if (flag)
				{
					progress.Message = Lang.gen[72].Value;
					int num10 = 0;
					while ((double)num10 < num9)
					{
						int num11 = num3;
						int num12 = num4;
						int num13 = num;
						int num14 = num2;
						double value = (double)num10 / num9;
						progress.Set(value);
						bool flag2 = false;
						int num15 = 0;
						int num16 = 0;
						int num17 = 0;
						while (!flag2)
						{
							flag2 = true;
							int num18 = Main.maxTilesX / 2;
							int num19 = 200;
							if (WorldGen.drunkWorldGen)
							{
								num19 = 100;
								if (GenVars.crimsonLeft)
								{
									num15 = WorldGen.genRand.Next(num7, (int)((double)Main.maxTilesX * 0.5));
								}
								else
								{
									num15 = WorldGen.genRand.Next((int)((double)Main.maxTilesX * 0.5), Main.maxTilesX - num7);
								}
							}
							else
							{
								num15 = WorldGen.genRand.Next(num7, Main.maxTilesX - num7);
							}
							num16 = num15 - WorldGen.genRand.Next(200) - 100;
							num17 = num15 + WorldGen.genRand.Next(200) + 100;
							if (num16 < GenVars.evilBiomeBeachAvoidance)
							{
								num16 = GenVars.evilBiomeBeachAvoidance;
							}
							if (num17 > Main.maxTilesX - GenVars.evilBiomeBeachAvoidance)
							{
								num17 = Main.maxTilesX - GenVars.evilBiomeBeachAvoidance;
							}
							if (num15 < num16 + GenVars.evilBiomeAvoidanceMidFixer)
							{
								num15 = num16 + GenVars.evilBiomeAvoidanceMidFixer;
							}
							if (num15 > num17 - GenVars.evilBiomeAvoidanceMidFixer)
							{
								num15 = num17 - GenVars.evilBiomeAvoidanceMidFixer;
							}
							if (GenVars.dungeonSide < 0 && num16 < 400)
							{
								num16 = 400;
							}
							else if (GenVars.dungeonSide > 0 && num16 > Main.maxTilesX - 400)
							{
								num16 = Main.maxTilesX - 400;
							}
							if (num16 < GenVars.dungeonLocation + num8 && num17 > GenVars.dungeonLocation - num8)
							{
								flag2 = false;
							}
							if (!WorldGen.remixWorldGen)
							{
								if (!WorldGen.tenthAnniversaryWorldGen)
								{
									if (num15 > num18 - num19 && num15 < num18 + num19)
									{
										flag2 = false;
									}
									if (num16 > num18 - num19 && num16 < num18 + num19)
									{
										flag2 = false;
									}
									if (num17 > num18 - num19 && num17 < num18 + num19)
									{
										flag2 = false;
									}
								}
								if (num15 > GenVars.UndergroundDesertLocation.X && num15 < GenVars.UndergroundDesertLocation.X + GenVars.UndergroundDesertLocation.Width)
								{
									flag2 = false;
								}
								if (num16 > GenVars.UndergroundDesertLocation.X && num16 < GenVars.UndergroundDesertLocation.X + GenVars.UndergroundDesertLocation.Width)
								{
									flag2 = false;
								}
								if (num17 > GenVars.UndergroundDesertLocation.X && num17 < GenVars.UndergroundDesertLocation.X + GenVars.UndergroundDesertLocation.Width)
								{
									flag2 = false;
								}
								if (num16 < num12 && num17 > num11)
								{
									num11++;
									num12--;
									flag2 = false;
								}
								if (num16 < num14 && num17 > num13)
								{
									num13++;
									num14--;
									flag2 = false;
								}
							}
						}
						WorldGen.CrimStart(num15, (int)GenVars.worldSurfaceLow - 10);
						for (int j = num16; j < num17; j++)
						{
							int num20 = (int)GenVars.worldSurfaceLow;
							while ((double)num20 < Main.worldSurface - 1.0)
							{
								if (Main.tile[j, num20].active())
								{
									int num21 = num20 + WorldGen.genRand.Next(10, 14);
									for (int k = num20; k < num21; k++)
									{
										if (Main.tile[j, k].type == 60 && j >= num16 + WorldGen.genRand.Next(5) && j < num17 - WorldGen.genRand.Next(5))
										{
											Main.tile[j, k].type = 662;
										}
									}
									break;
								}
								num20++;
							}
						}
						double num22 = Main.worldSurface + 40.0;
						for (int l = num16; l < num17; l++)
						{
							num22 += (double)WorldGen.genRand.Next(-2, 3);
							if (num22 < Main.worldSurface + 30.0)
							{
								num22 = Main.worldSurface + 30.0;
							}
							if (num22 > Main.worldSurface + 50.0)
							{
								num22 = Main.worldSurface + 50.0;
							}
							bool flag3 = false;
							int num23 = (int)GenVars.worldSurfaceLow;
							while ((double)num23 < num22)
							{
								if (Main.tile[l, num23].active())
								{
									if (Main.tile[l, num23].type == 53 && l >= num16 + WorldGen.genRand.Next(5) && l <= num17 - WorldGen.genRand.Next(5))
									{
										Main.tile[l, num23].type = 234;
									}
									if ((double)num23 < Main.worldSurface - 1.0 && !flag3)
									{
										if (Main.tile[l, num23].type == 0)
										{
											WorldGen.grassSpread = 0;
											WorldGen.SpreadGrass(l, num23, 0, 199, true, default(TileColorCache));
										}
										else if (Main.tile[l, num23].type == 59)
										{
											WorldGen.grassSpread = 0;
											WorldGen.SpreadGrass(l, num23, 59, 662, true, default(TileColorCache));
										}
									}
									flag3 = true;
									if (Main.tile[l, num23].wall == 216)
									{
										Main.tile[l, num23].wall = 218;
									}
									else if (Main.tile[l, num23].wall == 187)
									{
										Main.tile[l, num23].wall = 221;
									}
									if (Main.tile[l, num23].type == 1)
									{
										if (l >= num16 + WorldGen.genRand.Next(5) && l <= num17 - WorldGen.genRand.Next(5))
										{
											Main.tile[l, num23].type = 203;
										}
									}
									else if (Main.tile[l, num23].type == 2)
									{
										Main.tile[l, num23].type = 199;
									}
									else if (Main.tile[l, num23].type == 60)
									{
										Main.tile[l, num23].type = 662;
									}
									else if (Main.tile[l, num23].type == 161)
									{
										Main.tile[l, num23].type = 200;
									}
									else if (Main.tile[l, num23].type == 396)
									{
										Main.tile[l, num23].type = 401;
									}
									else if (Main.tile[l, num23].type == 397)
									{
										Main.tile[l, num23].type = 399;
									}
								}
								num23++;
							}
						}
						int num24 = WorldGen.genRand.Next(10, 15);
						for (int m = 0; m < num24; m++)
						{
							int num25 = 0;
							bool flag4 = false;
							int num26 = 0;
							while (!flag4)
							{
								num25++;
								int num27 = WorldGen.genRand.Next(num16 - num26, num17 + num26);
								int num28 = WorldGen.genRand.Next((int)(Main.worldSurface - (double)(num26 / 2)), (int)(Main.worldSurface + 100.0 + (double)num26));
								while (WorldGen.oceanDepths(num27, num28))
								{
									num27 = WorldGen.genRand.Next(num16 - num26, num17 + num26);
									num28 = WorldGen.genRand.Next((int)(Main.worldSurface - (double)(num26 / 2)), (int)(Main.worldSurface + 100.0 + (double)num26));
								}
								if (num25 > 100)
								{
									num26++;
									num25 = 0;
								}
								if (!Main.tile[num27, num28].active())
								{
									while (!Main.tile[num27, num28].active())
									{
										num28++;
									}
									num28--;
								}
								else
								{
									while (Main.tile[num27, num28].active() && (double)num28 > Main.worldSurface)
									{
										num28--;
									}
								}
								if ((num26 > 10 || (Main.tile[num27, num28 + 1].active() && Main.tile[num27, num28 + 1].type == 203)) && !WorldGen.IsTileNearby(num27, num28, 26, 3))
								{
									WorldGen.Place3x2(num27, num28, 26, 1);
									if (Main.tile[num27, num28].type == 26)
									{
										flag4 = true;
									}
								}
								if (num26 > 100)
								{
									flag4 = true;
								}
							}
						}
						num10++;
					}
					WorldGen.CrimPlaceHearts();
				}
				if (WorldGen.drunkWorldGen)
				{
					flag = false;
				}
				if (!flag)
				{
					progress.Message = Lang.gen[20].Value;
					int num29 = 0;
					while ((double)num29 < num9)
					{
						int num30 = num3;
						int num31 = num4;
						int num32 = num;
						int num33 = num2;
						double value2 = (double)num29 / num9;
						progress.Set(value2);
						bool flag5 = false;
						int num34 = 0;
						int num35 = 0;
						int num36 = 0;
						while (!flag5)
						{
							flag5 = true;
							int num37 = Main.maxTilesX / 2;
							int num38 = 200;
							if (WorldGen.drunkWorldGen)
							{
								if (!GenVars.crimsonLeft)
								{
									num34 = WorldGen.genRand.Next(num7, (int)((double)Main.maxTilesX * 0.5));
								}
								else
								{
									num34 = WorldGen.genRand.Next((int)((double)Main.maxTilesX * 0.5), Main.maxTilesX - num7);
								}
							}
							else
							{
								num34 = WorldGen.genRand.Next(num7, Main.maxTilesX - num7);
							}
							num35 = num34 - WorldGen.genRand.Next(200) - 100;
							num36 = num34 + WorldGen.genRand.Next(200) + 100;
							if (num35 < GenVars.evilBiomeBeachAvoidance)
							{
								num35 = GenVars.evilBiomeBeachAvoidance;
							}
							if (num36 > Main.maxTilesX - GenVars.evilBiomeBeachAvoidance)
							{
								num36 = Main.maxTilesX - GenVars.evilBiomeBeachAvoidance;
							}
							if (num34 < num35 + GenVars.evilBiomeAvoidanceMidFixer)
							{
								num34 = num35 + GenVars.evilBiomeAvoidanceMidFixer;
							}
							if (num34 > num36 - GenVars.evilBiomeAvoidanceMidFixer)
							{
								num34 = num36 - GenVars.evilBiomeAvoidanceMidFixer;
							}
							if (num35 < GenVars.dungeonLocation + num8 && num36 > GenVars.dungeonLocation - num8)
							{
								flag5 = false;
							}
							if (!WorldGen.remixWorldGen)
							{
								if (!WorldGen.tenthAnniversaryWorldGen)
								{
									if (num34 > num37 - num38 && num34 < num37 + num38)
									{
										flag5 = false;
									}
									if (num35 > num37 - num38 && num35 < num37 + num38)
									{
										flag5 = false;
									}
									if (num36 > num37 - num38 && num36 < num37 + num38)
									{
										flag5 = false;
									}
								}
								if (num34 > GenVars.UndergroundDesertLocation.X && num34 < GenVars.UndergroundDesertLocation.X + GenVars.UndergroundDesertLocation.Width)
								{
									flag5 = false;
								}
								if (num35 > GenVars.UndergroundDesertLocation.X && num35 < GenVars.UndergroundDesertLocation.X + GenVars.UndergroundDesertLocation.Width)
								{
									flag5 = false;
								}
								if (num36 > GenVars.UndergroundDesertLocation.X && num36 < GenVars.UndergroundDesertLocation.X + GenVars.UndergroundDesertLocation.Width)
								{
									flag5 = false;
								}
								if (num35 < num31 && num36 > num30)
								{
									num30++;
									num31--;
									flag5 = false;
								}
								if (num35 < num33 && num36 > num32)
								{
									num32++;
									num33--;
									flag5 = false;
								}
							}
						}
						int num39 = 0;
						for (int n = num35; n < num36; n++)
						{
							if (num39 > 0)
							{
								num39--;
							}
							if (n == num34 || num39 == 0)
							{
								int num40 = (int)GenVars.worldSurfaceLow;
								while ((double)num40 < Main.worldSurface - 1.0)
								{
									if (Main.tile[n, num40].active() || Main.tile[n, num40].wall > 0)
									{
										if (n == num34)
										{
											num39 = 20;
											WorldGen.ChasmRunner(n, num40, WorldGen.genRand.Next(150) + 150, true);
											break;
										}
										if (WorldGen.genRand.Next(35) == 0 && num39 == 0)
										{
											num39 = 30;
											bool makeOrb = true;
											WorldGen.ChasmRunner(n, num40, WorldGen.genRand.Next(50) + 50, makeOrb);
											break;
										}
										break;
									}
									else
									{
										num40++;
									}
								}
							}
							int num41 = (int)GenVars.worldSurfaceLow;
							while ((double)num41 < Main.worldSurface - 1.0)
							{
								if (Main.tile[n, num41].active())
								{
									int num42 = num41 + WorldGen.genRand.Next(10, 14);
									for (int num43 = num41; num43 < num42; num43++)
									{
										if (Main.tile[n, num43].type == 60 && n >= num35 + WorldGen.genRand.Next(5) && n < num36 - WorldGen.genRand.Next(5))
										{
											Main.tile[n, num43].type = 661;
										}
									}
									break;
								}
								num41++;
							}
						}
						double num44 = Main.worldSurface + 40.0;
						for (int num45 = num35; num45 < num36; num45++)
						{
							num44 += (double)WorldGen.genRand.Next(-2, 3);
							if (num44 < Main.worldSurface + 30.0)
							{
								num44 = Main.worldSurface + 30.0;
							}
							if (num44 > Main.worldSurface + 50.0)
							{
								num44 = Main.worldSurface + 50.0;
							}
							bool flag6 = false;
							int num46 = (int)GenVars.worldSurfaceLow;
							while ((double)num46 < num44)
							{
								if (Main.tile[num45, num46].active())
								{
									if (Main.tile[num45, num46].type == 53 && num45 >= num35 + WorldGen.genRand.Next(5) && num45 <= num36 - WorldGen.genRand.Next(5))
									{
										Main.tile[num45, num46].type = 112;
									}
									if ((double)num46 < Main.worldSurface - 1.0 && !flag6)
									{
										if (Main.tile[num45, num46].type == 0)
										{
											WorldGen.grassSpread = 0;
											WorldGen.SpreadGrass(num45, num46, 0, 23, true, default(TileColorCache));
										}
										else if (Main.tile[num45, num46].type == 59)
										{
											WorldGen.grassSpread = 0;
											WorldGen.SpreadGrass(num45, num46, 59, 661, true, default(TileColorCache));
										}
									}
									flag6 = true;
									if (Main.tile[num45, num46].wall == 216)
									{
										Main.tile[num45, num46].wall = 217;
									}
									else if (Main.tile[num45, num46].wall == 187)
									{
										Main.tile[num45, num46].wall = 220;
									}
									if (Main.tile[num45, num46].type == 1)
									{
										if (num45 >= num35 + WorldGen.genRand.Next(5) && num45 <= num36 - WorldGen.genRand.Next(5))
										{
											Main.tile[num45, num46].type = 25;
										}
									}
									else if (Main.tile[num45, num46].type == 2)
									{
										Main.tile[num45, num46].type = 23;
									}
									else if (Main.tile[num45, num46].type == 60)
									{
										Main.tile[num45, num46].type = 661;
									}
									else if (Main.tile[num45, num46].type == 161)
									{
										Main.tile[num45, num46].type = 163;
									}
									else if (Main.tile[num45, num46].type == 396)
									{
										Main.tile[num45, num46].type = 400;
									}
									else if (Main.tile[num45, num46].type == 397)
									{
										Main.tile[num45, num46].type = 398;
									}
								}
								num46++;
							}
						}
						for (int num47 = num35; num47 < num36; num47++)
						{
							for (int num48 = 0; num48 < Main.maxTilesY - 50; num48++)
							{
								if (Main.tile[num47, num48].active() && Main.tile[num47, num48].type == 31)
								{
									int num49 = num47 - 13;
									int num50 = num47 + 13;
									int num51 = num48 - 13;
									int num52 = num48 + 13;
									for (int num53 = num49; num53 < num50; num53++)
									{
										if (num53 > 10 && num53 < Main.maxTilesX - 10)
										{
											for (int num54 = num51; num54 < num52; num54++)
											{
												if (Math.Abs(num53 - num47) + Math.Abs(num54 - num48) < 9 + WorldGen.genRand.Next(11) && WorldGen.genRand.Next(3) != 0 && Main.tile[num53, num54].type != 31)
												{
													Main.tile[num53, num54].active(true);
													Main.tile[num53, num54].type = 25;
													if (Math.Abs(num53 - num47) <= 1 && Math.Abs(num54 - num48) <= 1)
													{
														Main.tile[num53, num54].active(false);
													}
												}
												if (Main.tile[num53, num54].type != 31 && Math.Abs(num53 - num47) <= 2 + WorldGen.genRand.Next(3) && Math.Abs(num54 - num48) <= 2 + WorldGen.genRand.Next(3))
												{
													Main.tile[num53, num54].active(false);
												}
											}
										}
									}
								}
							}
						}
						num29++;
					}
				}
			});
			WorldGen.AddGenerationPass("Lakes", delegate(GenerationProgress progress, GameConfiguration passConfig)
			{
				progress.Message = Lang.gen[19].Value;
				double num = (double)Main.maxTilesX / 4200.0;
				int num2 = WorldGen.genRand.Next((int)(num * 3.0), (int)(num * 6.0));
				for (int i = 0; i < num2; i++)
				{
					int j = Main.maxTilesX / 4;
					if (GenVars.numLakes >= GenVars.maxLakes - 1)
					{
						break;
					}
					double value = (double)i / (double)num2;
					progress.Set(value);
					while (j > 0)
					{
						bool flag = false;
						j--;
						int num3 = WorldGen.genRand.Next(GenVars.lakesBeachAvoidance, Main.maxTilesX - GenVars.lakesBeachAvoidance);
						if (WorldGen.tenthAnniversaryWorldGen && !WorldGen.remixWorldGen)
						{
							num3 = WorldGen.genRand.Next((int)((double)Main.maxTilesX * 0.15), (int)((double)Main.maxTilesX * 0.85));
						}
						else
						{
							while ((double)num3 > (double)Main.maxTilesX * 0.45 && (double)num3 < (double)Main.maxTilesX * 0.55)
							{
								num3 = WorldGen.genRand.Next(GenVars.lakesBeachAvoidance, Main.maxTilesX - GenVars.lakesBeachAvoidance);
							}
						}
						for (int k = 0; k < GenVars.numLakes; k++)
						{
							if (Math.Abs(num3 - GenVars.LakeX[k]) < 150)
							{
								flag = true;
								break;
							}
						}
						for (int l = 0; l < GenVars.numMCaves; l++)
						{
							if (Math.Abs(num3 - GenVars.mCaveX[l]) < 100)
							{
								flag = true;
								break;
							}
						}
						for (int m = 0; m < GenVars.numTunnels; m++)
						{
							if (Math.Abs(num3 - GenVars.tunnelX[m]) < 100)
							{
								flag = true;
								break;
							}
						}
						if (!flag)
						{
							int num4 = (int)GenVars.worldSurfaceLow - 20;
							while (!Main.tile[num3, num4].active())
							{
								num4++;
								if ((double)num4 >= Main.worldSurface || Main.tile[num3, num4].wall > 0)
								{
									flag = true;
									break;
								}
							}
							if (Main.tile[num3, num4].type == 53)
							{
								flag = true;
							}
							if (!flag)
							{
								int num5 = 50;
								for (int n = num3 - num5; n <= num3 + num5; n++)
								{
									for (int num6 = num4 - num5; num6 <= num4 + num5; num6++)
									{
										if (Main.tile[n, num6].type == 203 || Main.tile[n, num6].type == 25)
										{
											flag = true;
											break;
										}
									}
								}
								if (!flag)
								{
									int num7 = num4;
									num5 = 20;
									while (!WorldGen.SolidTile(num3 - num5, num4, false) || !WorldGen.SolidTile(num3 + num5, num4, false))
									{
										num4++;
										if ((double)num4 > Main.worldSurface - 50.0)
										{
											flag = true;
										}
									}
									if (num4 - num7 <= 10)
									{
										num5 = 60;
										for (int num8 = num3 - num5; num8 <= num3 + num5; num8++)
										{
											int num9 = num4 - 20;
											if (Main.tile[num8, num9].active() || Main.tile[num8, num9].wall > 0)
											{
												flag = true;
											}
										}
										if (!flag)
										{
											int num10 = 0;
											for (int num11 = num3 - num5; num11 <= num3 + num5; num11++)
											{
												for (int num12 = num4; num12 <= num4 + num5 * 2; num12++)
												{
													if (WorldGen.SolidTile(num11, num12, false))
													{
														num10++;
													}
												}
											}
											int num13 = (num5 * 2 + 1) * (num5 * 2 + 1);
											if ((double)num10 >= (double)num13 * 0.8 && !GenVars.UndergroundDesertLocation.Intersects(new Rectangle(num3 - 8, num4 - 8, 16, 16)))
											{
												WorldGen.SonOfLakinater(num3, num4, 1.0);
												GenVars.LakeX[GenVars.numLakes] = num3;
												GenVars.numLakes++;
												break;
											}
										}
									}
								}
							}
						}
					}
				}
			});
			WorldGen.AddGenerationPass("Dungeon", delegate(GenerationProgress progress, GameConfiguration passConfig)
			{
				progress.Set(1.0);
				int dungeonLocation = GenVars.dungeonLocation;
				int num = (int)((Main.worldSurface + Main.rockLayer) / 2.0) + WorldGen.genRand.Next(-200, 200);
				int num2 = (int)((Main.worldSurface + Main.rockLayer) / 2.0) + 200;
				int num3 = num;
				bool flag = false;
				for (int i = 0; i < 10; i++)
				{
					if (WorldGen.SolidTile(dungeonLocation, num3 + i, false))
					{
						flag = true;
						break;
					}
				}
				if (!flag)
				{
					while (num3 < num2 && !WorldGen.SolidTile(dungeonLocation, num3 + 10, false))
					{
						num3++;
					}
				}
				if (WorldGen.drunkWorldGen)
				{
					num3 = (int)Main.worldSurface + 70;
				}
				WorldGen.MakeDungeon(dungeonLocation, num3);
			});
			WorldGen.AddGenerationPass("Slush", delegate(GenerationProgress progress, GameConfiguration passConfig)
			{
				for (int i = GenVars.snowTop; i < GenVars.snowBottom; i++)
				{
					for (int j = GenVars.snowMinX[i]; j < GenVars.snowMaxX[i]; j++)
					{
						int type = (int)Main.tile[j, i].type;
						if (type == 123)
						{
							Main.tile[j, i].type = 224;
						}
						else if (type == 59)
						{
							bool flag = true;
							int num = 3;
							for (int k = j - num; k <= j + num; k++)
							{
								for (int l = i - num; l <= i + num; l++)
								{
									if (Main.tile[k, l].type == 60 || Main.tile[k, l].type == 70 || Main.tile[k, l].type == 71 || Main.tile[k, l].type == 72)
									{
										flag = false;
										break;
									}
								}
							}
							if (flag)
							{
								Main.tile[j, i].type = 224;
							}
						}
						else if (type == 1)
						{
							Main.tile[j, i].type = 161;
						}
					}
				}
			});
			WorldGen.AddGenerationPass("Mountain Caves", delegate(GenerationProgress progress, GameConfiguration passConfig)
			{
				progress.Message = Lang.gen[21].Value;
				for (int i = 0; i < GenVars.numMCaves; i++)
				{
					int i2 = GenVars.mCaveX[i];
					int j = GenVars.mCaveY[i];
					WorldGen.CaveOpenater(i2, j);
					WorldGen.Cavinator(i2, j, WorldGen.genRand.Next(40, 50));
				}
			});
			WorldGen.AddGenerationPass("Beaches", delegate(GenerationProgress progress, GameConfiguration passConfig)
			{
				int num = 50;
				progress.Message = Lang.gen[22].Value;
				bool floridaStyle = false;
				bool floridaStyle2 = false;
				if (WorldGen.genRand.Next(4) == 0)
				{
					if (WorldGen.genRand.Next(2) == 0)
					{
						floridaStyle = true;
					}
					else
					{
						floridaStyle2 = true;
					}
				}
				for (int i = 0; i < 2; i++)
				{
					if (i == 0)
					{
						int num2 = 0;
						int num3 = WorldGen.genRand.Next(GenVars.oceanWaterStartRandomMin, GenVars.oceanWaterStartRandomMax);
						if (GenVars.dungeonSide == 1)
						{
							num3 = GenVars.oceanWaterForcedJungleLength;
						}
						int num4 = GenVars.leftBeachEnd - num;
						if (num3 > num4)
						{
							num3 = num4;
						}
						int num5 = 0;
						double num6 = 1.0;
						int num7 = 0;
						while (!Main.tile[num3 - 1, num7].active())
						{
							num7++;
						}
						GenVars.shellStartYLeft = num7;
						num7 += WorldGen.genRand.Next(1, 5);
						for (int j = num3 - 1; j >= num2; j--)
						{
							if (j > 30)
							{
								num5++;
								num6 = WorldGen.TuneOceanDepth(num5, num6, floridaStyle);
							}
							else
							{
								num6 += 1.0;
							}
							int num8 = WorldGen.genRand.Next(15, 20);
							int num9 = 0;
							while ((double)num9 < (double)num7 + num6 + (double)num8)
							{
								if ((double)num9 < (double)num7 + num6 * 0.75 - 3.0)
								{
									Main.tile[j, num9].active(false);
									if (num9 > num7)
									{
										Main.tile[j, num9].liquid = byte.MaxValue;
										Main.tile[j, num9].lava(false);
									}
									else if (num9 == num7)
									{
										Main.tile[j, num9].liquid = 127;
										if (GenVars.shellStartXLeft == 0)
										{
											GenVars.shellStartXLeft = j;
										}
									}
								}
								else if (num9 > num7)
								{
									Main.tile[j, num9].type = 53;
									Main.tile[j, num9].active(true);
								}
								Main.tile[j, num9].wall = 0;
								num9++;
							}
						}
					}
					else
					{
						int num2 = Main.maxTilesX - WorldGen.genRand.Next(GenVars.oceanWaterStartRandomMin, GenVars.oceanWaterStartRandomMax);
						int num3 = Main.maxTilesX;
						if (GenVars.dungeonSide == -1)
						{
							num2 = Main.maxTilesX - GenVars.oceanWaterForcedJungleLength;
						}
						int num10 = GenVars.rightBeachStart + num;
						if (num2 < num10)
						{
							num2 = num10;
						}
						double num11 = 1.0;
						int num12 = 0;
						int num13 = 0;
						while (!Main.tile[num2, num13].active())
						{
							num13++;
						}
						GenVars.shellStartXRight = 0;
						GenVars.shellStartYRight = num13;
						num13 += WorldGen.genRand.Next(1, 5);
						for (int k = num2; k < num3; k++)
						{
							if (k < num3 - 30)
							{
								num12++;
								num11 = WorldGen.TuneOceanDepth(num12, num11, floridaStyle2);
							}
							else
							{
								num11 += 1.0;
							}
							int num14 = WorldGen.genRand.Next(15, 20);
							int num15 = 0;
							while ((double)num15 < (double)num13 + num11 + (double)num14)
							{
								if ((double)num15 < (double)num13 + num11 * 0.75 - 3.0)
								{
									Main.tile[k, num15].active(false);
									if (num15 > num13)
									{
										Main.tile[k, num15].liquid = byte.MaxValue;
										Main.tile[k, num15].lava(false);
									}
									else if (num15 == num13)
									{
										Main.tile[k, num15].liquid = 127;
										if (GenVars.shellStartXRight == 0)
										{
											GenVars.shellStartXRight = k;
										}
									}
								}
								else if (num15 > num13)
								{
									Main.tile[k, num15].type = 53;
									Main.tile[k, num15].active(true);
								}
								Main.tile[k, num15].wall = 0;
								num15++;
							}
						}
					}
				}
			});
			WorldGen.AddGenerationPass("Gems", delegate(GenerationProgress progress, GameConfiguration passConfig)
			{
				progress.Message = Lang.gen[23].Value;
				Main.tileSolid[484] = false;
				for (int i = 63; i <= 68; i++)
				{
					double value = (double)(i - 63) / 6.0;
					progress.Set(value);
					double num = 0.0;
					if (i == 67)
					{
						num = (double)Main.maxTilesX * 0.5;
					}
					else if (i == 66)
					{
						num = (double)Main.maxTilesX * 0.45;
					}
					else if (i == 63)
					{
						num = (double)Main.maxTilesX * 0.3;
					}
					else if (i == 65)
					{
						num = (double)Main.maxTilesX * 0.25;
					}
					else if (i == 64)
					{
						num = (double)Main.maxTilesX * 0.1;
					}
					else if (i == 68)
					{
						num = (double)Main.maxTilesX * 0.05;
					}
					num *= 0.2;
					int num2 = 0;
					while ((double)num2 < num)
					{
						int num3 = WorldGen.genRand.Next(0, Main.maxTilesX);
						int num4 = WorldGen.genRand.Next((int)Main.worldSurface, Main.maxTilesY);
						while (Main.tile[num3, num4].type != 1)
						{
							num3 = WorldGen.genRand.Next(0, Main.maxTilesX);
							num4 = WorldGen.genRand.Next((int)Main.worldSurface, Main.maxTilesY);
						}
						WorldGen.TileRunner(num3, num4, (double)WorldGen.genRand.Next(2, 6), WorldGen.genRand.Next(3, 7), i, false, 0.0, 0.0, false, true, -1);
						num2++;
					}
				}
				for (int j = 0; j < 2; j++)
				{
					int num5 = 1;
					int num6 = 5;
					int num7 = Main.maxTilesX - 5;
					if (j == 1)
					{
						num5 = -1;
						num6 = Main.maxTilesX - 5;
						num7 = 5;
					}
					for (int num8 = num6; num8 != num7; num8 += num5)
					{
						if (num8 <= GenVars.UndergroundDesertLocation.Left || num8 >= GenVars.UndergroundDesertLocation.Right)
						{
							for (int k = 10; k < Main.maxTilesY - 10; k++)
							{
								if (Main.tile[num8, k].active() && Main.tile[num8, k + 1].active() && Main.tileSand[(int)Main.tile[num8, k].type] && Main.tileSand[(int)Main.tile[num8, k + 1].type])
								{
									ushort type = Main.tile[num8, k].type;
									int num9 = num8 + num5;
									int num10 = k + 1;
									if (!Main.tile[num9, k].active())
									{
										if (!Main.tile[num9, num10].active())
										{
											while (!Main.tile[num9, num10].active())
											{
												num10++;
											}
											num10--;
											Main.tile[num8, k].active(false);
											Main.tile[num9, num10].active(true);
											Main.tile[num9, num10].type = type;
										}
									}
								}
							}
						}
					}
				}
			});
			WorldGen.AddGenerationPass("Gravitating Sand", delegate(GenerationProgress progress, GameConfiguration passConfig)
			{
				progress.Message = Lang.gen[24].Value;
				for (int i = 0; i < Main.maxTilesX; i++)
				{
					double value = (double)i / (double)(Main.maxTilesX - 1);
					progress.Set(value);
					bool flag = false;
					int num = 0;
					for (int j = Main.maxTilesY - 1; j > 0; j--)
					{
						if (WorldGen.SolidOrSlopedTile(i, j))
						{
							ushort type = Main.tile[i, j].type;
							if (flag && j < (int)Main.worldSurface && j != num - 1 && TileID.Sets.Falling[(int)type])
							{
								for (int k = j; k < num; k++)
								{
									Main.tile[i, k].ResetToType(type);
								}
							}
							flag = true;
							num = j;
						}
					}
				}
			});
			WorldGen.AddGenerationPass("Create Ocean Caves", delegate(GenerationProgress progress, GameConfiguration passConfig)
			{
				int maxValue = 3;
				if (WorldGen.remixWorldGen)
				{
					maxValue = 2;
				}
				for (int i = 0; i < 2; i++)
				{
					if ((i != 0 || GenVars.dungeonSide <= 0) && (i != 1 || GenVars.dungeonSide >= 0) && (WorldGen.genRand.Next(maxValue) == 0 || WorldGen.drunkWorldGen || WorldGen.tenthAnniversaryWorldGen))
					{
						progress.Message = Lang.gen[90].Value;
						int num = WorldGen.genRand.Next(55, 95);
						if (i == 1)
						{
							num = WorldGen.genRand.Next(Main.maxTilesX - 95, Main.maxTilesX - 55);
						}
						int num2 = 0;
						while (!Main.tile[num, num2].active())
						{
							num2++;
						}
						WorldGen.oceanCave(num, num2);
					}
				}
			});
			WorldGen.AddGenerationPass("Shimmer", delegate(GenerationProgress progress, GameConfiguration passConfig)
			{
				int num = 50;
				int num2 = (int)(Main.worldSurface + Main.rockLayer) / 2 + num;
				int num3 = (int)((double)((Main.maxTilesY - 250) * 2) + Main.rockLayer) / 3;
				if (num3 > Main.maxTilesY - 330 - 100 - 30)
				{
					num3 = Main.maxTilesY - 330 - 100 - 30;
				}
				if (num3 <= num2)
				{
					num3 = num2 + 50;
				}
				int num4 = WorldGen.genRand.Next(num2, num3);
				int num5;
				if (GenVars.dungeonSide >= 0)
				{
					num5 = WorldGen.genRand.Next(200, (int)((double)Main.maxTilesX * 0.11));
				}
				else
				{
					num5 = WorldGen.genRand.Next((int)((double)Main.maxTilesX * 0.89), Main.maxTilesX - 200);
				}
				int num6 = (int)Main.worldSurface + 150;
				int num7 = (int)(Main.rockLayer + Main.worldSurface + 200.0) / 2;
				if (num7 <= num6)
				{
					num7 = num6 + 50;
				}
				if (WorldGen.tenthAnniversaryWorldGen)
				{
					num4 = WorldGen.genRand.Next(num6, num7);
				}
				int num8 = 0;
				while (!WorldGen.ShimmerMakeBiome(num5, num4))
				{
					num8++;
					if (WorldGen.tenthAnniversaryWorldGen && num8 < 10000)
					{
						num4 = WorldGen.genRand.Next(num6, num7);
						if (GenVars.dungeonSide >= 0)
						{
							num5 = WorldGen.genRand.Next(200, (int)((double)Main.maxTilesX * 0.11));
						}
						else
						{
							num5 = WorldGen.genRand.Next((int)((double)Main.maxTilesX * 0.89), Main.maxTilesX - 200);
						}
					}
					else if (num8 > 20000)
					{
						num4 = WorldGen.genRand.Next((int)Main.worldSurface + 100 + 20, num3);
						if (GenVars.dungeonSide >= 0)
						{
							num5 = WorldGen.genRand.Next(200, (int)((double)Main.maxTilesX * 0.2));
						}
						else
						{
							num5 = WorldGen.genRand.Next((int)((double)Main.maxTilesX * 0.8), Main.maxTilesX - 200);
						}
					}
					else
					{
						num4 = WorldGen.genRand.Next((int)(Main.worldSurface + Main.rockLayer) / 2 + 20, num3);
						if (GenVars.dungeonSide >= 0)
						{
							num5 = WorldGen.genRand.Next(200, (int)((double)Main.maxTilesX * 0.11));
						}
						else
						{
							num5 = WorldGen.genRand.Next((int)((double)Main.maxTilesX * 0.89), Main.maxTilesX - 200);
						}
					}
				}
				GenVars.shimmerPosition = new Vector2D((double)num5, (double)num4);
				int num9 = 200;
				GenVars.structures.AddProtectedStructure(new Rectangle(num5 - num9 / 2, num4 - num9 / 2, num9, num9), 0);
			});
			WorldGen.AddGenerationPass("Clean Up Dirt", delegate(GenerationProgress progress, GameConfiguration passConfig)
			{
				progress.Message = Lang.gen[25].Value;
				for (int i = 3; i < Main.maxTilesX - 3; i++)
				{
					double num = (double)i / (double)Main.maxTilesX;
					progress.Set(0.5 * num);
					bool flag = true;
					int num2 = 0;
					while ((double)num2 < Main.worldSurface)
					{
						if (flag)
						{
							if (Main.tile[i, num2].wall == 2 || Main.tile[i, num2].wall == 40 || Main.tile[i, num2].wall == 64 || Main.tile[i, num2].wall == 86)
							{
								Main.tile[i, num2].wall = 0;
							}
							if (Main.tile[i, num2].type != 53 && Main.tile[i, num2].type != 112 && Main.tile[i, num2].type != 234)
							{
								if (Main.tile[i - 1, num2].wall == 2 || Main.tile[i - 1, num2].wall == 40 || Main.tile[i - 1, num2].wall == 40)
								{
									Main.tile[i - 1, num2].wall = 0;
								}
								if ((Main.tile[i - 2, num2].wall == 2 || Main.tile[i - 2, num2].wall == 40 || Main.tile[i - 2, num2].wall == 40) && WorldGen.genRand.Next(2) == 0)
								{
									Main.tile[i - 2, num2].wall = 0;
								}
								if ((Main.tile[i - 3, num2].wall == 2 || Main.tile[i - 3, num2].wall == 40 || Main.tile[i - 3, num2].wall == 40) && WorldGen.genRand.Next(2) == 0)
								{
									Main.tile[i - 3, num2].wall = 0;
								}
								if (Main.tile[i + 1, num2].wall == 2 || Main.tile[i + 1, num2].wall == 40 || Main.tile[i + 1, num2].wall == 40)
								{
									Main.tile[i + 1, num2].wall = 0;
								}
								if ((Main.tile[i + 2, num2].wall == 2 || Main.tile[i + 2, num2].wall == 40 || Main.tile[i + 2, num2].wall == 40) && WorldGen.genRand.Next(2) == 0)
								{
									Main.tile[i + 2, num2].wall = 0;
								}
								if ((Main.tile[i + 3, num2].wall == 2 || Main.tile[i + 3, num2].wall == 40 || Main.tile[i + 3, num2].wall == 40) && WorldGen.genRand.Next(2) == 0)
								{
									Main.tile[i + 3, num2].wall = 0;
								}
								if (Main.tile[i, num2].active())
								{
									flag = false;
								}
							}
						}
						else if (Main.tile[i, num2].wall == 0 && Main.tile[i, num2 + 1].wall == 0 && Main.tile[i, num2 + 2].wall == 0 && Main.tile[i, num2 + 3].wall == 0 && Main.tile[i, num2 + 4].wall == 0 && Main.tile[i - 1, num2].wall == 0 && Main.tile[i + 1, num2].wall == 0 && Main.tile[i - 2, num2].wall == 0 && Main.tile[i + 2, num2].wall == 0 && !Main.tile[i, num2].active() && !Main.tile[i, num2 + 1].active() && !Main.tile[i, num2 + 2].active() && !Main.tile[i, num2 + 3].active())
						{
							flag = true;
						}
						num2++;
					}
				}
				for (int j = Main.maxTilesX - 5; j >= 5; j--)
				{
					double num3 = (double)j / (double)Main.maxTilesX;
					progress.Set(1.0 - 0.5 * num3);
					bool flag2 = true;
					int num4 = 0;
					while ((double)num4 < Main.worldSurface)
					{
						if (flag2)
						{
							if (Main.tile[j, num4].wall == 2 || Main.tile[j, num4].wall == 40 || Main.tile[j, num4].wall == 64)
							{
								Main.tile[j, num4].wall = 0;
							}
							if (Main.tile[j, num4].type != 53)
							{
								if (Main.tile[j - 1, num4].wall == 2 || Main.tile[j - 1, num4].wall == 40 || Main.tile[j - 1, num4].wall == 40)
								{
									Main.tile[j - 1, num4].wall = 0;
								}
								if ((Main.tile[j - 2, num4].wall == 2 || Main.tile[j - 2, num4].wall == 40 || Main.tile[j - 2, num4].wall == 40) && WorldGen.genRand.Next(2) == 0)
								{
									Main.tile[j - 2, num4].wall = 0;
								}
								if ((Main.tile[j - 3, num4].wall == 2 || Main.tile[j - 3, num4].wall == 40 || Main.tile[j - 3, num4].wall == 40) && WorldGen.genRand.Next(2) == 0)
								{
									Main.tile[j - 3, num4].wall = 0;
								}
								if (Main.tile[j + 1, num4].wall == 2 || Main.tile[j + 1, num4].wall == 40 || Main.tile[j + 1, num4].wall == 40)
								{
									Main.tile[j + 1, num4].wall = 0;
								}
								if ((Main.tile[j + 2, num4].wall == 2 || Main.tile[j + 2, num4].wall == 40 || Main.tile[j + 2, num4].wall == 40) && WorldGen.genRand.Next(2) == 0)
								{
									Main.tile[j + 2, num4].wall = 0;
								}
								if ((Main.tile[j + 3, num4].wall == 2 || Main.tile[j + 3, num4].wall == 40 || Main.tile[j + 3, num4].wall == 40) && WorldGen.genRand.Next(2) == 0)
								{
									Main.tile[j + 3, num4].wall = 0;
								}
								if (Main.tile[j, num4].active())
								{
									flag2 = false;
								}
							}
						}
						else if (Main.tile[j, num4].wall == 0 && Main.tile[j, num4 + 1].wall == 0 && Main.tile[j, num4 + 2].wall == 0 && Main.tile[j, num4 + 3].wall == 0 && Main.tile[j, num4 + 4].wall == 0 && Main.tile[j - 1, num4].wall == 0 && Main.tile[j + 1, num4].wall == 0 && Main.tile[j - 2, num4].wall == 0 && Main.tile[j + 2, num4].wall == 0 && !Main.tile[j, num4].active() && !Main.tile[j, num4 + 1].active() && !Main.tile[j, num4 + 2].active() && !Main.tile[j, num4 + 3].active())
						{
							flag2 = true;
						}
						num4++;
					}
				}
			});
			WorldGen.AddGenerationPass("Pyramids", delegate(GenerationProgress progress, GameConfiguration passConfig)
			{
				Rectangle undergroundDesertLocation = GenVars.UndergroundDesertLocation;
				if (Main.tenthAnniversaryWorld)
				{
					int x = undergroundDesertLocation.Center.X;
					int j = undergroundDesertLocation.Top - 10;
					WorldGen.Pyramid(x, j);
				}
				for (int i = 0; i < GenVars.numPyr; i++)
				{
					int num = GenVars.PyrX[i];
					int num2 = GenVars.PyrY[i];
					if (num > 300 && num < Main.maxTilesX - 300 && (GenVars.dungeonSide >= 0 || (double)num >= (double)GenVars.dungeonX + (double)Main.maxTilesX * 0.15) && (GenVars.dungeonSide <= 0 || (double)num <= (double)GenVars.dungeonX - (double)Main.maxTilesX * 0.15))
					{
						if (!Main.tenthAnniversaryWorld || !undergroundDesertLocation.Contains(num, num2))
						{
							while (!Main.tile[num, num2].active() && (double)num2 < Main.worldSurface)
							{
								num2++;
							}
							if ((double)num2 < Main.worldSurface && Main.tile[num, num2].type == 53)
							{
								int num3 = Main.maxTilesX;
								for (int k = 0; k < i; k++)
								{
									int num4 = Math.Abs(num - GenVars.PyrX[k]);
									if (num4 < num3)
									{
										num3 = num4;
									}
								}
								int num5 = 220;
								if (WorldGen.drunkWorldGen)
								{
									num5 /= 2;
								}
								if (num3 >= num5)
								{
									num2--;
									WorldGen.Pyramid(num, num2);
								}
							}
						}
					}
				}
			});
			WorldGen.AddGenerationPass("Dirt Rock Wall Runner", delegate(GenerationProgress progress, GameConfiguration passConfig)
			{
				for (int i = 0; i < Main.maxTilesX; i++)
				{
					int num = WorldGen.genRand.Next(10, Main.maxTilesX - 10);
					int num2 = WorldGen.genRand.Next(10, (int)Main.worldSurface);
					if (Main.tile[num, num2].wall == 2)
					{
						WorldGen.DirtyRockRunner(num, num2);
					}
				}
			});
			WorldGen.AddGenerationPass("Living Trees", delegate(GenerationProgress progress, GameConfiguration passConfig)
			{
				int num = 200;
				double num2 = (double)Main.maxTilesX / 4200.0;
				int num3 = WorldGen.genRand.Next(0, (int)(2.0 * num2) + 1);
				if (num3 == 0 && WorldGen.genRand.Next(2) == 0)
				{
					num3++;
				}
				if (WorldGen.drunkWorldGen)
				{
					num3 += (int)(2.0 * num2);
				}
				else if (Main.tenthAnniversaryWorld)
				{
					num3 += (int)(3.0 * num2);
				}
				else if (WorldGen.remixWorldGen)
				{
					num3 += (int)(2.0 * num2);
				}
				for (int i = 0; i < num3; i++)
				{
					bool flag = false;
					int num4 = 0;
					while (!flag)
					{
						num4++;
						if (num4 > Main.maxTilesX / 2)
						{
							flag = true;
						}
						int num5 = WorldGen.genRand.Next(WorldGen.beachDistance, Main.maxTilesX - WorldGen.beachDistance);
						if (WorldGen.tenthAnniversaryWorldGen && !WorldGen.remixWorldGen)
						{
							num5 = WorldGen.genRand.Next((int)((double)Main.maxTilesX * 0.15), (int)((float)Main.maxTilesX * 0.85f));
						}
						if (num5 <= Main.maxTilesX / 2 - num || num5 >= Main.maxTilesX / 2 + num)
						{
							int num6 = 0;
							while (!Main.tile[num5, num6].active() && (double)num6 < Main.worldSurface)
							{
								num6++;
							}
							if (Main.tile[num5, num6].type == 0)
							{
								num6--;
								if (num6 > 150)
								{
									bool flag2 = true;
									for (int j = num5 - 50; j < num5 + 50; j++)
									{
										for (int k = num6 - 50; k < num6 + 50; k++)
										{
											if (Main.tile[j, k].active())
											{
												ushort type = Main.tile[j, k].type;
												if (type <= 189)
												{
													if (type != 41 && type - 43 > 1 && type != 189)
													{
														goto IL_1FA;
													}
												}
												else if (type != 196 && type != 460 && type - 481 > 2)
												{
													goto IL_1FA;
												}
												flag2 = false;
											}
											IL_1FA:;
										}
									}
									for (int l = 0; l < GenVars.numMCaves; l++)
									{
										if (num5 > GenVars.mCaveX[l] - 50 && num5 < GenVars.mCaveX[l] + 50)
										{
											flag2 = false;
											break;
										}
									}
									if (flag2)
									{
										flag = WorldGen.GrowLivingTree(num5, num6, false);
										if (flag)
										{
											for (int m = -1; m <= 1; m++)
											{
												if (m != 0)
												{
													int num7 = num5;
													int num8 = WorldGen.genRand.Next(4);
													if (WorldGen.drunkWorldGen || Main.tenthAnniversaryWorld)
													{
														num8 += WorldGen.genRand.Next(2, 5);
													}
													else if (WorldGen.remixWorldGen)
													{
														num8 += WorldGen.genRand.Next(1, 6);
													}
													for (int n = 0; n < num8; n++)
													{
														num7 += WorldGen.genRand.Next(13, 31) * m;
														if (num7 <= Main.maxTilesX / 2 - num || num7 >= Main.maxTilesX / 2 + num)
														{
															int num9 = num6;
															if (Main.tile[num7, num9].active())
															{
																while (Main.tile[num7, num9].active())
																{
																	num9--;
																}
															}
															else
															{
																while (!Main.tile[num7, num9].active())
																{
																	num9++;
																}
																num9--;
															}
															flag2 = true;
															for (int num10 = num5 - 50; num10 < num5 + 50; num10++)
															{
																for (int num11 = num6 - 50; num11 < num6 + 50; num11++)
																{
																	if (Main.tile[num10, num11].active())
																	{
																		ushort type = Main.tile[num10, num11].type;
																		if (type <= 189)
																		{
																			if (type != 41 && type - 43 > 1 && type != 189)
																			{
																				goto IL_3DD;
																			}
																		}
																		else if (type != 196 && type != 460 && type - 481 > 2)
																		{
																			goto IL_3DD;
																		}
																		flag2 = false;
																	}
																	IL_3DD:;
																}
															}
															if (flag2)
															{
																WorldGen.GrowLivingTree(num7, num9, true);
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
				Main.tileSolid[192] = false;
			});
			WorldGen.AddGenerationPass("Wood Tree Walls", delegate(GenerationProgress progress, GameConfiguration passConfig)
			{
				for (int i = 25; i < Main.maxTilesX - 25; i++)
				{
					int num = 25;
					while ((double)num < Main.worldSurface)
					{
						if (Main.tile[i, num].type == 191 || Main.tile[i, num - 1].type == 191 || Main.tile[i - 1, num].type == 191 || Main.tile[i + 1, num].type == 191 || Main.tile[i, num + 1].type == 191)
						{
							bool flag = true;
							for (int j = i - 1; j <= i + 1; j++)
							{
								for (int k = num - 1; k <= num + 1; k++)
								{
									if (j != i && k != num && Main.tile[j, k].type != 191 && Main.tile[j, k].wall != 244)
									{
										flag = false;
									}
								}
							}
							if (flag)
							{
								Main.tile[i, num].wall = 244;
							}
						}
						num++;
					}
				}
			});
			WorldGen.AddGenerationPass("Altars", delegate(GenerationProgress progress, GameConfiguration passConfig)
			{
				Main.tileSolid[484] = false;
				progress.Message = Lang.gen[26].Value;
				int num = (int)((double)(Main.maxTilesX * Main.maxTilesY) * 3.3E-06);
				if (WorldGen.remixWorldGen)
				{
					num *= 3;
				}
				for (int i = 0; i < num; i++)
				{
					progress.Set((double)i / (double)num);
					for (int j = 0; j < 10000; j++)
					{
						int num2 = WorldGen.genRand.Next(281, Main.maxTilesX - 3 - 280);
						while ((double)num2 > (double)Main.maxTilesX * 0.45 && (double)num2 < (double)Main.maxTilesX * 0.55)
						{
							num2 = WorldGen.genRand.Next(281, Main.maxTilesX - 3 - 280);
						}
						int num3 = WorldGen.genRand.Next((int)(Main.worldSurface * 2.0 + Main.rockLayer) / 3, (int)(Main.rockLayer + (double)((Main.maxTilesY - 350) * 2)) / 3);
						if (WorldGen.remixWorldGen)
						{
							num3 = WorldGen.genRand.Next(100, (int)((double)Main.maxTilesY * 0.9));
						}
						while (WorldGen.oceanDepths(num2, num3) || Vector2D.Distance(new Vector2D((double)num2, (double)num3), GenVars.shimmerPosition) < (double)WorldGen.shimmerSafetyDistance)
						{
							num2 = WorldGen.genRand.Next(281, Main.maxTilesX - 3 - 280);
							while ((double)num2 > (double)Main.maxTilesX * 0.45 && (double)num2 < (double)Main.maxTilesX * 0.55)
							{
								num2 = WorldGen.genRand.Next(281, Main.maxTilesX - 3 - 280);
							}
							num3 = WorldGen.genRand.Next((int)(Main.worldSurface * 2.0 + Main.rockLayer) / 3, (int)(Main.rockLayer + (double)((Main.maxTilesY - 350) * 2)) / 3);
							if (WorldGen.remixWorldGen)
							{
								num3 = WorldGen.genRand.Next(100, (int)((double)Main.maxTilesY * 0.9));
							}
						}
						int style = WorldGen.crimson ? 1 : 0;
						if (WorldGen.drunkWorldGen)
						{
							if (GenVars.crimsonLeft)
							{
								if (num2 < Main.maxTilesX / 2)
								{
									style = 1;
								}
								else
								{
									style = 0;
								}
							}
							else if (num2 < Main.maxTilesX / 2)
							{
								style = 0;
							}
							else
							{
								style = 1;
							}
						}
						if (!WorldGen.IsTileNearby(num2, num3, 26, 3))
						{
							WorldGen.Place3x2(num2, num3, 26, style);
						}
						if (Main.tile[num2, num3].type == 26)
						{
							break;
						}
					}
				}
			});
			WorldGen.AddGenerationPass("Wet Jungle", delegate(GenerationProgress progress, GameConfiguration passConfig)
			{
				progress.Set(1.0);
				for (int i = 0; i < Main.maxTilesX; i++)
				{
					int num = (int)GenVars.worldSurfaceLow;
					while ((double)num < Main.worldSurface - 1.0)
					{
						if (Main.tile[i, num].active())
						{
							if (Main.tile[i, num].type == 60)
							{
								Main.tile[i, num - 1].liquid = byte.MaxValue;
								Main.tile[i, num - 2].liquid = byte.MaxValue;
								break;
							}
							break;
						}
						else
						{
							num++;
						}
					}
				}
			});
			WorldGen.AddGenerationPass("Jungle Temple", delegate(GenerationProgress progress, GameConfiguration passConfig)
			{
				int num = 0;
				progress.Message = Lang.gen[70].Value;
				long num2 = 0L;
				double num3 = 0.25;
				bool flag = false;
				int num6;
				int num7;
				for (;;)
				{
					int num4 = (int)Main.rockLayer;
					int num5 = Main.maxTilesY - 500;
					if (num4 > num5 - 1)
					{
						num4 = num5 - 1;
					}
					num6 = WorldGen.genRand.Next(num4, num5);
					num7 = (int)(((WorldGen.genRand.NextDouble() * num3 + 0.1) * (double)(-(double)GenVars.dungeonSide) + 0.5) * (double)Main.maxTilesX);
					if (WorldGen.remixWorldGen)
					{
						if (WorldGen.notTheBees)
						{
							if (GenVars.dungeonSide > 0)
							{
								num7 = WorldGen.genRand.Next((int)((double)Main.maxTilesX * 0.2), (int)((double)Main.maxTilesX * 0.4));
							}
							else
							{
								num7 = WorldGen.genRand.Next((int)((double)Main.maxTilesX * 0.6), (int)((double)Main.maxTilesX * 0.8));
							}
						}
						else
						{
							num7 = WorldGen.genRand.Next((int)((double)Main.maxTilesX * 0.2), (int)((double)Main.maxTilesX * 0.8));
							while ((double)num7 > (double)Main.maxTilesX * 0.4)
							{
								if ((double)num7 >= (double)Main.maxTilesX * 0.6)
								{
									break;
								}
								num7 = WorldGen.genRand.Next((int)((double)Main.maxTilesX * 0.2), (int)((double)Main.maxTilesX * 0.8));
							}
						}
						while (Main.tile[num7, num6].active() || Main.tile[num7, num6].wall > 0 || (double)num6 > Main.worldSurface - 5.0)
						{
							num6--;
						}
						num6++;
						if (Main.tile[num7, num6].active() && (Main.tile[num7, num6].type == 60 || Main.tile[num7, num6].type == 59))
						{
							int num8 = 10;
							bool flag2 = false;
							for (int i = num7 - num8; i <= i + num8; i++)
							{
								for (int j = num6 - num8; j < num8; j++)
								{
									if (Main.tile[i, j].type == 191 || Main.tileDungeon[(int)Main.tile[i, j].type])
									{
										flag2 = true;
									}
								}
							}
							if (!flag2)
							{
								break;
							}
						}
					}
					else if (Main.tile[num7, num6].active() && Main.tile[num7, num6].type == 60)
					{
						goto Block_17;
					}
					long num9 = num2;
					num2 = num9 + 1L;
					if (num9 > 2000000L)
					{
						if (num3 == 0.35)
						{
							num++;
							if (num > 10)
							{
								goto IL_33B;
							}
						}
						num3 = Math.Min(0.35, num3 + 0.05);
						num2 = 0L;
					}
				}
				flag = true;
				num6 -= 10 + WorldGen.genRand.Next(10);
				WorldGen.makeTemple(num7, num6);
				goto IL_33B;
				Block_17:
				flag = true;
				WorldGen.makeTemple(num7, num6);
				IL_33B:
				if (!flag)
				{
					int x = Main.maxTilesX - GenVars.dungeonX;
					int y = (int)Main.rockLayer + 100;
					if (WorldGen.remixWorldGen)
					{
						if (WorldGen.notTheBees)
						{
							x = ((GenVars.dungeonSide > 0) ? ((int)((double)Main.maxTilesX * 0.3)) : ((int)((double)Main.maxTilesX * 0.7)));
						}
						else
						{
							x = ((GenVars.dungeonSide > 0) ? ((int)((double)Main.maxTilesX * 0.4)) : ((int)((double)Main.maxTilesX * 0.6)));
						}
					}
					WorldGen.makeTemple(x, y);
				}
			});
			WorldGen.AddGenerationPass("Hives", delegate(GenerationProgress progress, GameConfiguration passConfig)
			{
				progress.Message = Lang.gen[71].Value;
				double num = (double)Main.maxTilesX / 4200.0;
				double num2 = (double)(1 + WorldGen.genRand.Next((int)(5.0 * num), (int)(8.0 * num)));
				if (WorldGen.drunkWorldGen)
				{
					num2 *= 0.667;
				}
				int num3 = 10000;
				HiveBiome hiveBiome = GenVars.configuration.CreateBiome<HiveBiome>();
				HoneyPatchBiome honeyPatchBiome = GenVars.configuration.CreateBiome<HoneyPatchBiome>();
				while (num2 > 0.0 && num3 > 0)
				{
					num3--;
					Point point = WorldGen.RandomWorldPoint((int)(Main.worldSurface + Main.rockLayer) >> 1, 20, 300, 20);
					if (WorldGen.drunkWorldGen)
					{
						WorldGen.RandomWorldPoint((int)Main.worldSurface, 20, 300, 20);
					}
					if (hiveBiome.Place(point, GenVars.structures))
					{
						num2 -= 1.0;
						int num4 = WorldGen.genRand.Next(5);
						int num5 = 0;
						int num6 = 10000;
						while (num5 < num4 && num6 > 0)
						{
							double num7 = WorldGen.genRand.NextDouble() * 60.0 + 30.0;
							double num8 = WorldGen.genRand.NextDouble() * 6.2831854820251465;
							int num9 = (int)(Math.Cos(num8) * num7) + point.X;
							int y = (int)(Math.Sin(num8) * num7) + point.Y;
							num6--;
							if (num9 > 50 && num9 < Main.maxTilesX - 50 && honeyPatchBiome.Place(new Point(num9, y), GenVars.structures))
							{
								num5++;
							}
						}
					}
				}
			});
			WorldGen.AddGenerationPass("Jungle Chests", delegate(GenerationProgress progress, GameConfiguration passConfig)
			{
				int num = WorldGen.genRand.Next(40, Main.maxTilesX - 40);
				int num2 = WorldGen.genRand.Next((int)(Main.worldSurface + Main.rockLayer) / 2, Main.maxTilesY - 400);
				double num3 = (double)WorldGen.genRand.Next(7, 12);
				num3 *= (double)Main.maxTilesX / 4200.0;
				int num4 = 0;
				int num5 = 0;
				while ((double)num5 < num3)
				{
					bool flag = true;
					while (flag)
					{
						num4++;
						num = WorldGen.genRand.Next(40, Main.maxTilesX / 2 - 40);
						if (GenVars.dungeonSide < 0)
						{
							num += Main.maxTilesX / 2;
						}
						num2 = WorldGen.genRand.Next((int)(Main.worldSurface + Main.rockLayer) / 2, Main.maxTilesY - 400);
						int i = WorldGen.genRand.Next(2, 4);
						int num6 = WorldGen.genRand.Next(2, 4);
						Rectangle area = new Rectangle(num - i - 1, num2 - num6 - 1, i + 1, num6 + 1);
						if (Main.tile[num, num2].type == 60)
						{
							int num7 = 30;
							flag = false;
							for (int j = num - num7; j < num + num7; j += 3)
							{
								for (int k = num2 - num7; k < num2 + num7; k += 3)
								{
									if (Main.tile[j, k].active() && (Main.tile[j, k].type == 225 || Main.tile[j, k].type == 229 || Main.tile[j, k].type == 226 || Main.tile[j, k].type == 119 || Main.tile[j, k].type == 120))
									{
										flag = true;
									}
									if (Main.tile[j, k].wall == 86 || Main.tile[j, k].wall == 87)
									{
										flag = true;
									}
								}
							}
							if (!GenVars.structures.CanPlace(area, 1))
							{
								flag = true;
							}
						}
						if (!flag)
						{
							ushort wall = 0;
							if (GenVars.jungleHut == 119)
							{
								wall = 23;
							}
							else if (GenVars.jungleHut == 120)
							{
								wall = 24;
							}
							else if (GenVars.jungleHut == 158)
							{
								wall = 42;
							}
							else if (GenVars.jungleHut == 175)
							{
								wall = 45;
							}
							else if (GenVars.jungleHut == 45)
							{
								wall = 10;
							}
							for (int l = num - i - 1; l <= num + i + 1; l++)
							{
								for (int m = num2 - num6 - 1; m <= num2 + num6 + 1; m++)
								{
									Main.tile[l, m].active(true);
									Main.tile[l, m].type = GenVars.jungleHut;
									Main.tile[l, m].liquid = 0;
									Main.tile[l, m].lava(false);
								}
							}
							for (int n = num - i; n <= num + i; n++)
							{
								for (int num8 = num2 - num6; num8 <= num2 + num6; num8++)
								{
									Main.tile[n, num8].active(false);
									Main.tile[n, num8].wall = wall;
								}
							}
							bool flag2 = false;
							int num9 = 0;
							while (!flag2 && num9 < 100)
							{
								num9++;
								int num10 = WorldGen.genRand.Next(num - i, num + i + 1);
								int num11 = WorldGen.genRand.Next(num2 - num6, num2 + num6 - 2);
								WorldGen.PlaceTile(num10, num11, 4, true, false, -1, 3);
								if (Main.tile[num10, num11].type == 4)
								{
									flag2 = true;
								}
							}
							for (int num12 = num - i - 1; num12 <= num + i + 1; num12++)
							{
								for (int num13 = num2 + num6 - 2; num13 <= num2 + num6; num13++)
								{
									Main.tile[num12, num13].active(false);
								}
							}
							for (int num14 = num - i - 1; num14 <= num + i + 1; num14++)
							{
								for (int num15 = num2 + num6 - 2; num15 <= num2 + num6 - 1; num15++)
								{
									Main.tile[num14, num15].active(false);
								}
							}
							for (int num16 = num - i - 1; num16 <= num + i + 1; num16++)
							{
								int num17 = 4;
								int num18 = num2 + num6 + 2;
								while (!Main.tile[num16, num18].active() && num18 < Main.maxTilesY && num17 > 0)
								{
									Main.tile[num16, num18].active(true);
									Main.tile[num16, num18].type = 59;
									num18++;
									num17--;
								}
							}
							i -= WorldGen.genRand.Next(1, 3);
							int num19 = num2 - num6 - 2;
							while (i > -1)
							{
								for (int num20 = num - i - 1; num20 <= num + i + 1; num20++)
								{
									Main.tile[num20, num19].active(true);
									Main.tile[num20, num19].type = GenVars.jungleHut;
								}
								i -= WorldGen.genRand.Next(1, 3);
								num19--;
							}
							GenVars.JChestX[GenVars.numJChests] = num;
							GenVars.JChestY[GenVars.numJChests] = num2;
							GenVars.structures.AddProtectedStructure(area, 0);
							GenVars.numJChests++;
							num4 = 0;
						}
						else if (num4 > Main.maxTilesX * 10)
						{
							num5++;
							num4 = 0;
							break;
						}
					}
					num5++;
				}
				Main.tileSolid[137] = false;
			});
			WorldGen.AddGenerationPass("Settle Liquids", delegate(GenerationProgress progress, GameConfiguration passConfig)
			{
				progress.Message = Lang.gen[27].Value;
				if (WorldGen.notTheBees)
				{
					WorldGen.NotTheBees();
				}
				Liquid.worldGenTilesIgnoreWater(true);
				Liquid.QuickWater(3, -1, -1);
				WorldGen.WaterCheck();
				int i = 0;
				Liquid.quickSettle = true;
				int num = 10;
				while (i < num)
				{
					int num2 = Liquid.numLiquid + LiquidBuffer.numLiquidBuffer;
					i++;
					double num3 = 0.0;
					int num4 = num2 * 5;
					while (Liquid.numLiquid > 0)
					{
						num4--;
						if (num4 < 0)
						{
							break;
						}
						double num5 = (double)(num2 - (Liquid.numLiquid + LiquidBuffer.numLiquidBuffer)) / (double)num2;
						if (Liquid.numLiquid + LiquidBuffer.numLiquidBuffer > num2)
						{
							num2 = Liquid.numLiquid + LiquidBuffer.numLiquidBuffer;
						}
						if (num5 > num3)
						{
							num3 = num5;
						}
						else
						{
							num5 = num3;
						}
						if (i == 1)
						{
							progress.Set(num5 / 3.0 + 0.33);
						}
						int num6 = 10;
						if (i > num6)
						{
						}
						Liquid.UpdateLiquid();
					}
					WorldGen.WaterCheck();
					progress.Set((double)i * 0.1 / 3.0 + 0.66);
				}
				Liquid.quickSettle = false;
				Liquid.worldGenTilesIgnoreWater(false);
				Main.tileSolid[484] = false;
			});
			WorldGen.AddGenerationPass("Remove Water From Sand", delegate(GenerationProgress progress, GameConfiguration passConfig)
			{
				progress.Set(1.0);
				for (int i = 400; i < Main.maxTilesX - 400; i++)
				{
					int num = 100;
					while ((double)num < Main.worldSurface - 1.0)
					{
						if (Main.tile[i, num].active())
						{
							ushort type = Main.tile[i, num].type;
							if (type == 53 || type == 396 || type == 397 || type == 404 || type == 407 || type == 151)
							{
								int j = num;
								while (j > 100)
								{
									j--;
									if (Main.tile[i, j].active())
									{
										break;
									}
									Main.tile[i, j].liquid = 0;
								}
								break;
							}
							break;
						}
						else
						{
							num++;
						}
					}
				}
				Main.tileSolid[192] = true;
			});
			WorldGen.AddGenerationPass("Oasis", delegate(GenerationProgress progress, GameConfiguration passConfig)
			{
				if (WorldGen.notTheBees)
				{
					return;
				}
				progress.Set(1.0);
				int num = Main.maxTilesX / 2100;
				num += WorldGen.genRand.Next(2);
				for (int i = 0; i < num; i++)
				{
					int num2 = WorldGen.beachDistance + 300;
					int j = Main.maxTilesX * 2;
					while (j > 0)
					{
						j--;
						int x = WorldGen.genRand.Next(num2, Main.maxTilesX - num2);
						int y = WorldGen.genRand.Next(100, (int)Main.worldSurface);
						if (WorldGen.PlaceOasis(x, y))
						{
							j = -1;
						}
					}
				}
			});
			WorldGen.AddGenerationPass("Shell Piles", delegate(GenerationProgress progress, GameConfiguration passConfig)
			{
				if (WorldGen.dontStarveWorldGen)
				{
					int num = (int)(5.0 * ((double)Main.maxTilesX / 4200.0));
					int num2 = 0;
					int num3 = 100;
					int num4 = Main.maxTilesX / 2;
					int num5 = num4 - num3;
					int num6 = num4 + num3;
					int i = 0;
					while (i < 80)
					{
						int num7 = WorldGen.genRand.Next(100, Main.maxTilesX - 100);
						if (num7 < num5 || num7 > num6)
						{
							goto IL_81;
						}
						num7 = WorldGen.genRand.Next(100, Main.maxTilesX - 100);
						if (num7 < num5 || num7 > num6)
						{
							goto IL_81;
						}
						IL_9E:
						i++;
						continue;
						IL_81:
						int y = (int)Main.worldSurface / 2;
						if (!WorldGen.MarblePileWithStatues(num7, y))
						{
							goto IL_9E;
						}
						num2++;
						if (num2 < num)
						{
							goto IL_9E;
						}
						break;
					}
				}
				if (WorldGen.notTheBees)
				{
					return;
				}
				progress.Set(1.0);
				if (WorldGen.genRand.Next(2) == 0)
				{
					int shellStartXLeft = GenVars.shellStartXLeft;
					int shellStartYLeft = GenVars.shellStartYLeft;
					for (int j = shellStartXLeft - 20; j <= shellStartXLeft + 20; j++)
					{
						for (int k = shellStartYLeft - 10; k <= shellStartYLeft + 10; k++)
						{
							if (Main.tile[j, k].active() && Main.tile[j, k].type == 53 && !Main.tile[j, k - 1].active() && Main.tile[j, k - 1].liquid == 0 && !Main.tile[j - 1, k].active() && Main.tile[j - 1, k].liquid > 0)
							{
								GenVars.shellStartXLeft = j;
								GenVars.shellStartYLeft = k;
							}
						}
					}
					GenVars.shellStartYLeft -= 50;
					GenVars.shellStartXLeft -= WorldGen.genRand.Next(5);
					if (WorldGen.genRand.Next(2) == 0)
					{
						GenVars.shellStartXLeft -= WorldGen.genRand.Next(10);
					}
					if (WorldGen.genRand.Next(3) == 0)
					{
						GenVars.shellStartXLeft -= WorldGen.genRand.Next(15);
					}
					if (WorldGen.genRand.Next(4) != 0)
					{
						WorldGen.ShellPile(GenVars.shellStartXLeft, GenVars.shellStartYLeft);
					}
					int maxValue = WorldGen.genRand.Next(2, 4);
					if (WorldGen.genRand.Next(maxValue) == 0)
					{
						WorldGen.ShellPile(GenVars.shellStartXLeft - WorldGen.genRand.Next(10, 35), GenVars.shellStartYLeft);
					}
					if (WorldGen.genRand.Next(maxValue) == 0)
					{
						WorldGen.ShellPile(GenVars.shellStartXLeft - WorldGen.genRand.Next(40, 65), GenVars.shellStartYLeft);
					}
					if (WorldGen.genRand.Next(maxValue) == 0)
					{
						WorldGen.ShellPile(GenVars.shellStartXLeft - WorldGen.genRand.Next(70, 95), GenVars.shellStartYLeft);
					}
					if (WorldGen.genRand.Next(maxValue) == 0)
					{
						WorldGen.ShellPile(GenVars.shellStartXLeft - WorldGen.genRand.Next(100, 125), GenVars.shellStartYLeft);
					}
					if (WorldGen.genRand.Next(maxValue) == 0)
					{
						WorldGen.ShellPile(GenVars.shellStartXLeft + WorldGen.genRand.Next(10, 25), GenVars.shellStartYLeft);
					}
				}
				if (WorldGen.genRand.Next(2) == 0)
				{
					int shellStartXRight = GenVars.shellStartXRight;
					int shellStartYRight = GenVars.shellStartYRight;
					for (int l = shellStartXRight - 20; l <= shellStartXRight + 20; l++)
					{
						for (int m = shellStartYRight - 10; m <= shellStartYRight + 10; m++)
						{
							if (Main.tile[l, m].active() && Main.tile[l, m].type == 53 && !Main.tile[l, m - 1].active() && Main.tile[l, m - 1].liquid == 0 && !Main.tile[l + 1, m].active() && Main.tile[l + 1, m].liquid > 0)
							{
								GenVars.shellStartXRight = l;
								GenVars.shellStartYRight = m;
							}
						}
					}
					GenVars.shellStartYRight -= 50;
					GenVars.shellStartXRight += WorldGen.genRand.Next(5);
					if (WorldGen.genRand.Next(2) == 0)
					{
						GenVars.shellStartXLeft += WorldGen.genRand.Next(10);
					}
					if (WorldGen.genRand.Next(3) == 0)
					{
						GenVars.shellStartXLeft += WorldGen.genRand.Next(15);
					}
					if (WorldGen.genRand.Next(4) != 0)
					{
						WorldGen.ShellPile(GenVars.shellStartXRight, GenVars.shellStartYRight);
					}
					int maxValue2 = WorldGen.genRand.Next(2, 4);
					if (WorldGen.genRand.Next(maxValue2) == 0)
					{
						WorldGen.ShellPile(GenVars.shellStartXRight + WorldGen.genRand.Next(10, 35), GenVars.shellStartYRight);
					}
					if (WorldGen.genRand.Next(maxValue2) == 0)
					{
						WorldGen.ShellPile(GenVars.shellStartXRight + WorldGen.genRand.Next(40, 65), GenVars.shellStartYRight);
					}
					if (WorldGen.genRand.Next(maxValue2) == 0)
					{
						WorldGen.ShellPile(GenVars.shellStartXRight + WorldGen.genRand.Next(70, 95), GenVars.shellStartYRight);
					}
					if (WorldGen.genRand.Next(maxValue2) == 0)
					{
						WorldGen.ShellPile(GenVars.shellStartXRight + WorldGen.genRand.Next(100, 125), GenVars.shellStartYRight);
					}
					if (WorldGen.genRand.Next(maxValue2) == 0)
					{
						WorldGen.ShellPile(GenVars.shellStartXRight - WorldGen.genRand.Next(10, 25), GenVars.shellStartYRight);
					}
				}
			});
			WorldGen.AddGenerationPass("Smooth World", delegate(GenerationProgress progress, GameConfiguration passConfig)
			{
				progress.Message = Lang.gen[60].Value;
				Main.tileSolid[(int)GenVars.crackedType] = true;
				for (int i = 20; i < Main.maxTilesX - 20; i++)
				{
					double value = (double)i / (double)Main.maxTilesX;
					progress.Set(value);
					for (int j = 20; j < Main.maxTilesY - 20; j++)
					{
						if (Main.tile[i, j].type != 48 && Main.tile[i, j].type != 137 && Main.tile[i, j].type != 232 && Main.tile[i, j].type != 191 && Main.tile[i, j].type != 151 && Main.tile[i, j].type != 274)
						{
							if (!Main.tile[i, j - 1].active() && Main.tile[i - 1, j].type != 136 && Main.tile[i + 1, j].type != 136)
							{
								if (WorldGen.SolidTile(i, j, false) && TileID.Sets.CanBeClearedDuringGeneration[(int)Main.tile[i, j].type])
								{
									if (!Main.tile[i - 1, j].halfBrick() && !Main.tile[i + 1, j].halfBrick() && Main.tile[i - 1, j].slope() == 0 && Main.tile[i + 1, j].slope() == 0)
									{
										if (WorldGen.SolidTile(i, j + 1, false))
										{
											if (!WorldGen.SolidTile(i - 1, j, false) && !Main.tile[i - 1, j + 1].halfBrick() && WorldGen.SolidTile(i - 1, j + 1, false) && WorldGen.SolidTile(i + 1, j, false) && !Main.tile[i + 1, j - 1].active())
											{
												if (WorldGen.genRand.Next(2) == 0)
												{
													WorldGen.SlopeTile(i, j, 2, false);
												}
												else
												{
													WorldGen.PoundTile(i, j);
												}
											}
											else if (!WorldGen.SolidTile(i + 1, j, false) && !Main.tile[i + 1, j + 1].halfBrick() && WorldGen.SolidTile(i + 1, j + 1, false) && WorldGen.SolidTile(i - 1, j, false) && !Main.tile[i - 1, j - 1].active())
											{
												if (WorldGen.genRand.Next(2) == 0)
												{
													WorldGen.SlopeTile(i, j, 1, false);
												}
												else
												{
													WorldGen.PoundTile(i, j);
												}
											}
											else if (WorldGen.SolidTile(i + 1, j + 1, false) && WorldGen.SolidTile(i - 1, j + 1, false) && !Main.tile[i + 1, j].active() && !Main.tile[i - 1, j].active())
											{
												WorldGen.PoundTile(i, j);
											}
											if (WorldGen.SolidTile(i, j, false))
											{
												if (WorldGen.SolidTile(i - 1, j, false) && WorldGen.SolidTile(i + 1, j + 2, false) && !Main.tile[i + 1, j].active() && !Main.tile[i + 1, j + 1].active() && !Main.tile[i - 1, j - 1].active())
												{
													WorldGen.KillTile(i, j, false, false, false);
												}
												else if (WorldGen.SolidTile(i + 1, j, false) && WorldGen.SolidTile(i - 1, j + 2, false) && !Main.tile[i - 1, j].active() && !Main.tile[i - 1, j + 1].active() && !Main.tile[i + 1, j - 1].active())
												{
													WorldGen.KillTile(i, j, false, false, false);
												}
												else if (!Main.tile[i - 1, j + 1].active() && !Main.tile[i - 1, j].active() && WorldGen.SolidTile(i + 1, j, false) && WorldGen.SolidTile(i, j + 2, false))
												{
													if (WorldGen.genRand.Next(5) == 0)
													{
														WorldGen.KillTile(i, j, false, false, false);
													}
													else if (WorldGen.genRand.Next(5) == 0)
													{
														WorldGen.PoundTile(i, j);
													}
													else
													{
														WorldGen.SlopeTile(i, j, 2, false);
													}
												}
												else if (!Main.tile[i + 1, j + 1].active() && !Main.tile[i + 1, j].active() && WorldGen.SolidTile(i - 1, j, false) && WorldGen.SolidTile(i, j + 2, false))
												{
													if (WorldGen.genRand.Next(5) == 0)
													{
														WorldGen.KillTile(i, j, false, false, false);
													}
													else if (WorldGen.genRand.Next(5) == 0)
													{
														WorldGen.PoundTile(i, j);
													}
													else
													{
														WorldGen.SlopeTile(i, j, 1, false);
													}
												}
											}
										}
										if (WorldGen.SolidTile(i, j, false) && !Main.tile[i - 1, j].active() && !Main.tile[i + 1, j].active())
										{
											WorldGen.KillTile(i, j, false, false, false);
										}
									}
								}
								else if (!Main.tile[i, j].active() && Main.tile[i, j + 1].type != 151 && Main.tile[i, j + 1].type != 274)
								{
									if (Main.tile[i + 1, j].type != 190 && Main.tile[i + 1, j].type != 48 && Main.tile[i + 1, j].type != 232 && WorldGen.SolidTile(i - 1, j + 1, false) && WorldGen.SolidTile(i + 1, j, false) && !Main.tile[i - 1, j].active() && !Main.tile[i + 1, j - 1].active())
									{
										if (Main.tile[i + 1, j].type == 495)
										{
											WorldGen.PlaceTile(i, j, (int)Main.tile[i + 1, j].type, false, false, -1, 0);
										}
										else
										{
											WorldGen.PlaceTile(i, j, (int)Main.tile[i, j + 1].type, false, false, -1, 0);
										}
										if (WorldGen.genRand.Next(2) == 0)
										{
											WorldGen.SlopeTile(i, j, 2, false);
										}
										else
										{
											WorldGen.PoundTile(i, j);
										}
									}
									if (Main.tile[i - 1, j].type != 190 && Main.tile[i - 1, j].type != 48 && Main.tile[i - 1, j].type != 232 && WorldGen.SolidTile(i + 1, j + 1, false) && WorldGen.SolidTile(i - 1, j, false) && !Main.tile[i + 1, j].active() && !Main.tile[i - 1, j - 1].active())
									{
										if (Main.tile[i - 1, j].type == 495)
										{
											WorldGen.PlaceTile(i, j, (int)Main.tile[i - 1, j].type, false, false, -1, 0);
										}
										else
										{
											WorldGen.PlaceTile(i, j, (int)Main.tile[i, j + 1].type, false, false, -1, 0);
										}
										if (WorldGen.genRand.Next(2) == 0)
										{
											WorldGen.SlopeTile(i, j, 1, false);
										}
										else
										{
											WorldGen.PoundTile(i, j);
										}
									}
								}
							}
							else if (!Main.tile[i, j + 1].active() && WorldGen.genRand.Next(2) == 0 && WorldGen.SolidTile(i, j, false) && !Main.tile[i - 1, j].halfBrick() && !Main.tile[i + 1, j].halfBrick() && Main.tile[i - 1, j].slope() == 0 && Main.tile[i + 1, j].slope() == 0 && WorldGen.SolidTile(i, j - 1, false))
							{
								if (WorldGen.SolidTile(i - 1, j, false) && !WorldGen.SolidTile(i + 1, j, false) && WorldGen.SolidTile(i - 1, j - 1, false))
								{
									WorldGen.SlopeTile(i, j, 3, false);
								}
								else if (WorldGen.SolidTile(i + 1, j, false) && !WorldGen.SolidTile(i - 1, j, false) && WorldGen.SolidTile(i + 1, j - 1, false))
								{
									WorldGen.SlopeTile(i, j, 4, false);
								}
							}
							if (TileID.Sets.Conversion.Sand[(int)Main.tile[i, j].type])
							{
								Tile.SmoothSlope(i, j, false, false);
							}
						}
					}
				}
				for (int k = 20; k < Main.maxTilesX - 20; k++)
				{
					for (int l = 20; l < Main.maxTilesY - 20; l++)
					{
						if (WorldGen.genRand.Next(2) == 0 && !Main.tile[k, l - 1].active() && Main.tile[k, l].type != 137 && Main.tile[k, l].type != 48 && Main.tile[k, l].type != 232 && Main.tile[k, l].type != 191 && Main.tile[k, l].type != 151 && Main.tile[k, l].type != 274 && Main.tile[k, l].type != 75 && Main.tile[k, l].type != 76 && WorldGen.SolidTile(k, l, false) && Main.tile[k - 1, l].type != 137 && Main.tile[k + 1, l].type != 137)
						{
							if (WorldGen.SolidTile(k, l + 1, false) && WorldGen.SolidTile(k + 1, l, false) && !Main.tile[k - 1, l].active())
							{
								WorldGen.SlopeTile(k, l, 2, false);
							}
							if (WorldGen.SolidTile(k, l + 1, false) && WorldGen.SolidTile(k - 1, l, false) && !Main.tile[k + 1, l].active())
							{
								WorldGen.SlopeTile(k, l, 1, false);
							}
						}
						if (Main.tile[k, l].slope() == 1 && !WorldGen.SolidTile(k - 1, l, false))
						{
							WorldGen.SlopeTile(k, l, 0, false);
							WorldGen.PoundTile(k, l);
						}
						if (Main.tile[k, l].slope() == 2 && !WorldGen.SolidTile(k + 1, l, false))
						{
							WorldGen.SlopeTile(k, l, 0, false);
							WorldGen.PoundTile(k, l);
						}
					}
				}
				Main.tileSolid[137] = true;
				Main.tileSolid[190] = false;
				Main.tileSolid[192] = false;
				Main.tileSolid[(int)GenVars.crackedType] = false;
			});
			WorldGen.AddGenerationPass("Waterfalls", delegate(GenerationProgress progress, GameConfiguration passConfig)
			{
				progress.Message = Lang.gen[69].Value;
				Main.tileSolid[191] = false;
				for (int i = 20; i < Main.maxTilesX - 20; i++)
				{
					double num = (double)i / (double)Main.maxTilesX;
					progress.Set(num * 0.5);
					for (int j = 20; j < Main.maxTilesY - 20; j++)
					{
						if (WorldGen.SolidTile(i, j, false) && !Main.tile[i - 1, j].active() && WorldGen.SolidTile(i, j + 1, false) && !Main.tile[i + 1, j].active() && (Main.tile[i - 1, j].liquid > 0 || Main.tile[i + 1, j].liquid > 0))
						{
							bool flag = true;
							int num2 = WorldGen.genRand.Next(8, 20);
							int num3 = WorldGen.genRand.Next(8, 20);
							num2 = j - num2;
							num3 += j;
							for (int k = num2; k <= num3; k++)
							{
								if (Main.tile[i, k].halfBrick())
								{
									flag = false;
								}
							}
							if ((Main.tile[i, j].type == 75 || Main.tile[i, j].type == 76) && WorldGen.genRand.Next(10) != 0)
							{
								flag = false;
							}
							if (flag)
							{
								WorldGen.PoundTile(i, j);
							}
						}
					}
				}
				for (int l = 20; l < Main.maxTilesX - 20; l++)
				{
					double num4 = (double)l / (double)Main.maxTilesX;
					progress.Set(num4 * 0.5 + 0.5);
					for (int m = 20; m < Main.maxTilesY - 20; m++)
					{
						if (Main.tile[l, m].type != 48 && Main.tile[l, m].type != 232 && WorldGen.SolidTile(l, m, false) && WorldGen.SolidTile(l, m + 1, false))
						{
							if (!WorldGen.SolidTile(l + 1, m, false) && Main.tile[l - 1, m].halfBrick() && Main.tile[l - 2, m].liquid > 0)
							{
								WorldGen.PoundTile(l, m);
							}
							if (!WorldGen.SolidTile(l - 1, m, false) && Main.tile[l + 1, m].halfBrick() && Main.tile[l + 2, m].liquid > 0)
							{
								WorldGen.PoundTile(l, m);
							}
						}
					}
				}
				Main.tileSolid[191] = true;
			});
			WorldGen.AddGenerationPass("Ice", delegate(GenerationProgress progress, GameConfiguration passConfig)
			{
				if (WorldGen.notTheBees)
				{
					WorldGen.NotTheBees();
				}
				progress.Set(1.0);
				for (int i = 10; i < Main.maxTilesX - 10; i++)
				{
					for (int j = (int)Main.worldSurface; j < Main.maxTilesY - 100; j++)
					{
						if (Main.tile[i, j].liquid > 0 && (!Main.tile[i, j].lava() || WorldGen.remixWorldGen))
						{
							WorldGen.MakeWateryIceThing(i, j);
						}
					}
				}
				Main.tileSolid[226] = false;
				Main.tileSolid[162] = false;
			});
			WorldGen.AddGenerationPass("Wall Variety", delegate(GenerationProgress progress, GameConfiguration passConfig)
			{
				progress.Message = Lang.gen[79].Value;
				double num = (double)(Main.maxTilesX * Main.maxTilesY) / 5040000.0;
				int i = (int)(300.0 * num);
				int num2 = i;
				ShapeData shapeData = new ShapeData();
				while (i > 0)
				{
					progress.Set(1.0 - (double)i / (double)num2);
					Point point = WorldGen.RandomWorldPoint((int)GenVars.worldSurface, 2, 190, 2);
					while (Vector2D.Distance(new Vector2D((double)point.X, (double)point.Y), GenVars.shimmerPosition) < (double)WorldGen.shimmerSafetyDistance)
					{
						point = WorldGen.RandomWorldPoint((int)GenVars.worldSurface, 2, 190, 2);
					}
					Tile tile = Main.tile[point.X, point.Y];
					Tile tile2 = Main.tile[point.X, point.Y - 1];
					ushort num3 = 0;
					if (tile.type == 60)
					{
						num3 = (ushort)(204 + WorldGen.genRand.Next(4));
					}
					else if (tile.type == 1 && tile2.wall == 0)
					{
						if (WorldGen.remixWorldGen)
						{
							if ((double)point.Y > GenVars.rockLayer)
							{
								num3 = (ushort)(196 + WorldGen.genRand.Next(4));
							}
							else if (point.Y > GenVars.lavaLine && WorldGen.genRand.Next(2) == 0)
							{
								num3 = (ushort)(208 + WorldGen.genRand.Next(4));
							}
							else
							{
								num3 = (ushort)(212 + WorldGen.genRand.Next(4));
							}
						}
						else if ((double)point.Y < GenVars.rockLayer)
						{
							num3 = (ushort)(196 + WorldGen.genRand.Next(4));
						}
						else if (point.Y < GenVars.lavaLine)
						{
							num3 = (ushort)(212 + WorldGen.genRand.Next(4));
						}
						else
						{
							num3 = (ushort)(208 + WorldGen.genRand.Next(4));
						}
					}
					if (tile.active() && num3 != 0 && !tile2.active())
					{
						bool foundInvalidTile = false;
						bool flag;
						if (tile.type == 60)
						{
							flag = WorldUtils.Gen(new Point(point.X, point.Y - 1), new ShapeFloodFill(1000), Actions.Chain(new GenAction[]
							{
								new Modifiers.IsNotSolid(),
								new Actions.Blank().Output(shapeData),
								new Actions.ContinueWrapper(Actions.Chain(new GenAction[]
								{
									new Modifiers.IsTouching(true, new ushort[]
									{
										147,
										161,
										396,
										397,
										70,
										191
									}),
									new Actions.Custom(delegate(int x, int y, object[] args)
									{
										foundInvalidTile = true;
										return true;
									})
								}))
							}));
						}
						else
						{
							flag = WorldUtils.Gen(new Point(point.X, point.Y - 1), new ShapeFloodFill(1000), Actions.Chain(new GenAction[]
							{
								new Modifiers.IsNotSolid(),
								new Actions.Blank().Output(shapeData),
								new Actions.ContinueWrapper(Actions.Chain(new GenAction[]
								{
									new Modifiers.IsTouching(true, new ushort[]
									{
										60,
										147,
										161,
										396,
										397,
										70,
										191
									}),
									new Modifiers.IsTouching(true, new ushort[]
									{
										147,
										161,
										396,
										397,
										70,
										191
									}),
									new Actions.Custom(delegate(int x, int y, object[] args)
									{
										foundInvalidTile = true;
										return true;
									})
								}))
							}));
						}
						if (shapeData.Count > 50 && flag && !foundInvalidTile)
						{
							WorldUtils.Gen(new Point(point.X, point.Y), new ModShapes.OuterOutline(shapeData, true, true), Actions.Chain(new GenAction[]
							{
								new Modifiers.SkipWalls(new ushort[]
								{
									87
								}),
								new Actions.PlaceWall(num3, true)
							}));
							i--;
						}
						shapeData.Clear();
					}
				}
			});
			WorldGen.AddGenerationPass("Life Crystals", delegate(GenerationProgress progress, GameConfiguration passConfig)
			{
				if (WorldGen.getGoodWorldGen)
				{
					Main.tileSolid[56] = false;
				}
				if (WorldGen.notTheBees)
				{
					WorldGen.NotTheBees();
				}
				progress.Message = Lang.gen[28].Value;
				double num = (double)(Main.maxTilesX * Main.maxTilesY) * 2E-05;
				if (WorldGen.tenthAnniversaryWorldGen)
				{
					num *= 1.2;
				}
				if (Main.starGame)
				{
					num *= Main.starGameMath(0.2);
				}
				for (int i = 0; i < (int)num; i++)
				{
					double value = (double)i / ((double)(Main.maxTilesX * Main.maxTilesY) * 2E-05);
					progress.Set(value);
					bool flag = false;
					int num2 = 0;
					while (!flag)
					{
						int j = WorldGen.genRand.Next((int)(Main.worldSurface * 2.0 + Main.rockLayer) / 3, Main.maxTilesY - 300);
						if (WorldGen.remixWorldGen)
						{
							j = WorldGen.genRand.Next((int)Main.worldSurface, Main.maxTilesY - 400);
						}
						if (WorldGen.AddLifeCrystal(WorldGen.genRand.Next(Main.offLimitBorderTiles, Main.maxTilesX - Main.offLimitBorderTiles), j))
						{
							flag = true;
						}
						else
						{
							num2++;
							if (num2 >= 10000)
							{
								flag = true;
							}
						}
					}
				}
				Main.tileSolid[225] = false;
			});
			WorldGen.AddGenerationPass("Statues", delegate(GenerationProgress progress, GameConfiguration passConfig)
			{
				progress.Message = Lang.gen[29].Value;
				int num = 0;
				double num2 = (double)Main.maxTilesX / 4200.0;
				int num3 = (int)((double)(GenVars.statueList.Length * 2) * num2);
				if (WorldGen.noTrapsWorldGen)
				{
					num3 *= 15;
					if (WorldGen.tenthAnniversaryWorldGen || WorldGen.notTheBees)
					{
						num3 /= 5;
					}
				}
				if (Main.starGame)
				{
					num3 = (int)((double)num3 * Main.starGameMath(0.2));
				}
				for (int i = 0; i < num3; i++)
				{
					if (num >= GenVars.statueList.Length)
					{
						num = 0;
					}
					int x = (int)GenVars.statueList[num].X;
					int y = (int)GenVars.statueList[num].Y;
					double value = (double)(i / num3);
					progress.Set(value);
					bool flag = false;
					int num4 = 0;
					while (!flag)
					{
						int num5 = WorldGen.genRand.Next(20, Main.maxTilesX - 20);
						int num6 = WorldGen.genRand.Next((int)(Main.worldSurface * 2.0 + Main.rockLayer) / 3, Main.maxTilesY - 300);
						if (WorldGen.remixWorldGen)
						{
							WorldGen.genRand.Next((int)Main.worldSurface, Main.maxTilesY - 400);
						}
						while (WorldGen.oceanDepths(num5, num6))
						{
							num5 = WorldGen.genRand.Next(20, Main.maxTilesX - 20);
							num6 = WorldGen.genRand.Next((int)(Main.worldSurface * 2.0 + Main.rockLayer) / 3, Main.maxTilesY - 300);
							if (WorldGen.remixWorldGen)
							{
								WorldGen.genRand.Next((int)Main.worldSurface, Main.maxTilesY - 400);
							}
						}
						while (!Main.tile[num5, num6].active())
						{
							num6++;
							if (num6 >= Main.maxTilesY)
							{
								break;
							}
						}
						if (num6 < Main.maxTilesY)
						{
							num6--;
							if (!Main.tile[num5, num6].shimmer())
							{
								WorldGen.PlaceTile(num5, num6, x, true, true, -1, y);
							}
							if (Main.tile[num5, num6].active() && (int)Main.tile[num5, num6].type == x)
							{
								flag = true;
								if (GenVars.StatuesWithTraps.Contains(num))
								{
									WorldGen.PlaceStatueTrap(num5, num6);
								}
								num++;
							}
							else
							{
								num4++;
								if (num4 >= 10000)
								{
									flag = true;
								}
							}
						}
					}
				}
			});
			WorldGen.AddGenerationPass("Buried Chests", delegate(GenerationProgress progress, GameConfiguration passConfig)
			{
				progress.Message = Lang.gen[30].Value;
				Main.tileSolid[226] = true;
				Main.tileSolid[162] = true;
				Main.tileSolid[225] = true;
				CaveHouseBiome caveHouseBiome = GenVars.configuration.CreateBiome<CaveHouseBiome>();
				int random = passConfig.Get<WorldGenRange>("CaveHouseCount").GetRandom(WorldGen.genRand);
				int random2 = passConfig.Get<WorldGenRange>("UnderworldChestCount").GetRandom(WorldGen.genRand);
				int num = passConfig.Get<WorldGenRange>("CaveChestCount").GetRandom(WorldGen.genRand);
				int random3 = passConfig.Get<WorldGenRange>("AdditionalDesertHouseCount").GetRandom(WorldGen.genRand);
				if (Main.starGame)
				{
					num = (int)((double)num * Main.starGameMath(0.2));
				}
				int num2 = random + random2 + num + random3;
				int num3 = 10000;
				int num4 = 0;
				while (num4 < num && num3 > 0)
				{
					progress.Set((double)num4 / (double)num2);
					int num5 = WorldGen.genRand.Next(20, Main.maxTilesX - 20);
					int num6 = WorldGen.genRand.Next((int)((GenVars.worldSurfaceHigh + 20.0 + Main.rockLayer) / 2.0), Main.maxTilesY - 230);
					if (WorldGen.remixWorldGen)
					{
						num6 = WorldGen.genRand.Next((int)Main.worldSurface, Main.maxTilesY - 400);
					}
					ushort wall = Main.tile[num5, num6].wall;
					if (Main.wallDungeon[(int)wall] || wall == 87 || WorldGen.oceanDepths(num5, num6) || !WorldGen.AddBuriedChest(num5, num6, 0, false, -1, false, 0))
					{
						num3--;
						num4--;
					}
					num4++;
				}
				num3 = 10000;
				int num7 = 0;
				while (num7 < random2 && num3 > 0)
				{
					progress.Set((double)(num7 + num) / (double)num2);
					int num8 = WorldGen.genRand.Next(20, Main.maxTilesX - 20);
					int num9 = WorldGen.genRand.Next(Main.UnderworldLayer, Main.maxTilesY - 50);
					if (Main.wallDungeon[(int)Main.tile[num8, num9].wall] || !WorldGen.AddBuriedChest(num8, num9, 0, false, -1, false, 0))
					{
						num3--;
						num7--;
					}
					num7++;
				}
				num3 = 10000;
				int num10 = 0;
				while (num10 < random && num3 > 0)
				{
					progress.Set((double)(num10 + num + random2) / (double)num2);
					int x = WorldGen.genRand.Next(80, Main.maxTilesX - 80);
					int y = WorldGen.genRand.Next((int)(GenVars.worldSurfaceHigh + 20.0), Main.maxTilesY - 230);
					if (WorldGen.remixWorldGen)
					{
						y = WorldGen.genRand.Next((int)Main.worldSurface, Main.maxTilesY - 400);
					}
					if (WorldGen.oceanDepths(x, y) || !caveHouseBiome.Place(new Point(x, y), GenVars.structures))
					{
						num3--;
						num10--;
					}
					num10++;
				}
				num3 = 10000;
				Rectangle undergroundDesertHiveLocation = GenVars.UndergroundDesertHiveLocation;
				if ((double)undergroundDesertHiveLocation.Y < Main.worldSurface + 26.0)
				{
					int num11 = (int)Main.worldSurface + 26 - undergroundDesertHiveLocation.Y;
					undergroundDesertHiveLocation.Y += num11;
					undergroundDesertHiveLocation.Height -= num11;
				}
				int num12 = 0;
				while (num12 < random3 && num3 > 0)
				{
					progress.Set((double)(num12 + num + random2 + random) / (double)num2);
					if (!caveHouseBiome.Place(WorldGen.RandomRectanglePoint(undergroundDesertHiveLocation), GenVars.structures))
					{
						num3--;
						num12--;
					}
					num12++;
				}
				Main.tileSolid[226] = false;
				Main.tileSolid[162] = false;
				Main.tileSolid[225] = false;
			});
			WorldGen.AddGenerationPass("Surface Chests", delegate(GenerationProgress progress, GameConfiguration passConfig)
			{
				progress.Message = Lang.gen[31].Value;
				for (int i = 0; i < (int)((double)Main.maxTilesX * 0.005); i++)
				{
					double value = (double)i / ((double)Main.maxTilesX * 0.005);
					progress.Set(value);
					bool flag = false;
					int num = 0;
					while (!flag)
					{
						int num2 = WorldGen.genRand.Next(200, Main.maxTilesX - 200);
						int num3 = WorldGen.genRand.Next((int)GenVars.worldSurfaceLow, (int)Main.worldSurface);
						if (WorldGen.remixWorldGen)
						{
							num3 = WorldGen.genRand.Next(Main.maxTilesY - 400, Main.maxTilesY - 150);
						}
						else
						{
							while (WorldGen.oceanDepths(num2, num3))
							{
								num2 = WorldGen.genRand.Next(300, Main.maxTilesX - 300);
								num3 = WorldGen.genRand.Next((int)GenVars.worldSurfaceLow, (int)Main.worldSurface);
							}
						}
						bool flag2 = false;
						if (!Main.tile[num2, num3].active())
						{
							if (Main.tile[num2, num3].wall == 2 || Main.tile[num2, num3].wall == 59 || Main.tile[num2, num3].wall == 244 || WorldGen.remixWorldGen)
							{
								flag2 = true;
							}
						}
						else
						{
							int num4 = 50;
							int num5 = num2;
							int num6 = num3;
							int num7 = 1;
							for (int j = num5 - num4; j <= num5 + num4; j += 2)
							{
								for (int k = num6 - num4; k <= num6 + num4; k += 2)
								{
									if ((double)k < Main.worldSurface && !Main.tile[j, k].active() && Main.tile[j, k].wall == 244 && WorldGen.genRand.Next(num7) == 0)
									{
										num7++;
										flag2 = true;
										num2 = j;
										num3 = k;
									}
								}
							}
						}
						if (flag2 && WorldGen.AddBuriedChest(num2, num3, 0, true, -1, false, 0))
						{
							flag = true;
						}
						else
						{
							num++;
							if (num >= 2000)
							{
								flag = true;
							}
						}
					}
				}
			});
			WorldGen.AddGenerationPass("Jungle Chests Placement", delegate(GenerationProgress progress, GameConfiguration passConfig)
			{
				progress.Message = Lang.gen[32].Value;
				for (int i = 0; i < GenVars.numJChests; i++)
				{
					double value = (double)i / (double)GenVars.numJChests;
					progress.Set(value);
					int nextJungleChestItem = WorldGen.GetNextJungleChestItem();
					if (!WorldGen.AddBuriedChest(GenVars.JChestX[i] + WorldGen.genRand.Next(2), GenVars.JChestY[i], nextJungleChestItem, false, 10, false, 0))
					{
						for (int j = GenVars.JChestX[i] - 1; j <= GenVars.JChestX[i] + 1; j++)
						{
							for (int k = GenVars.JChestY[i]; k <= GenVars.JChestY[i] + 2; k++)
							{
								WorldGen.KillTile(j, k, false, false, false);
							}
						}
						for (int l = GenVars.JChestX[i] - 1; l <= GenVars.JChestX[i] + 1; l++)
						{
							for (int m = GenVars.JChestY[i]; m <= GenVars.JChestY[i] + 3; m++)
							{
								if (m < Main.maxTilesY)
								{
									Main.tile[l, m].slope(0);
									Main.tile[l, m].halfBrick(false);
								}
							}
						}
						WorldGen.AddBuriedChest(GenVars.JChestX[i], GenVars.JChestY[i], nextJungleChestItem, false, 10, false, 0);
					}
				}
			});
			WorldGen.AddGenerationPass("Water Chests", delegate(GenerationProgress progress, GameConfiguration passConfig)
			{
				progress.Message = Lang.gen[33].Value;
				for (int i = 0; i < GenVars.numOceanCaveTreasure; i++)
				{
					int contain = (int)WorldGen.genRand.NextFromList(new short[]
					{
						863,
						186,
						277,
						187,
						4404
					});
					bool flag = false;
					double num = 2.0;
					while (!flag && num < 50.0)
					{
						num += 0.1;
						int num2 = WorldGen.genRand.Next(GenVars.oceanCaveTreasure[i].X - (int)num, GenVars.oceanCaveTreasure[i].X + (int)num + 1);
						int num3 = WorldGen.genRand.Next(GenVars.oceanCaveTreasure[i].Y - (int)num / 2, GenVars.oceanCaveTreasure[i].Y + (int)num / 2 + 1);
						if (num2 < Main.maxTilesX)
						{
							num2 = (int)((double)num2 - num / 2.0);
						}
						else
						{
							num2 = (int)((double)num2 + num / 2.0);
						}
						if (Main.tile[num2, num3].liquid > 250 && (Main.tile[num2, num3].liquidType() == 0 || WorldGen.notTheBees || WorldGen.remixWorldGen))
						{
							flag = WorldGen.AddBuriedChest(num2, num3, contain, false, 17, true, 0);
						}
					}
				}
				int num4 = 0;
				double num5 = (double)Main.maxTilesX / 4200.0;
				int num6 = 0;
				while ((double)num6 < 9.0 * num5)
				{
					double value = (double)num6 / (9.0 * num5);
					progress.Set(value);
					num4++;
					int maxValue = 10;
					if (WorldGen.tenthAnniversaryWorldGen)
					{
						maxValue = 7;
					}
					int contain2;
					if (WorldGen.genRand.Next(maxValue) == 0)
					{
						contain2 = 863;
					}
					else if (num4 == 1)
					{
						contain2 = 186;
					}
					else if (num4 == 2)
					{
						contain2 = 4404;
					}
					else if (num4 == 3)
					{
						contain2 = 277;
					}
					else
					{
						contain2 = 187;
						num4 = 0;
					}
					bool flag2 = false;
					int num7 = 0;
					while (!flag2)
					{
						int num8 = WorldGen.genRand.Next(50, Main.maxTilesX - 50);
						int num9 = WorldGen.genRand.Next(1, Main.UnderworldLayer);
						while (Main.tile[num8, num9].liquid < 250 || (Main.tile[num8, num9].liquidType() != 0 && !WorldGen.notTheBees && !WorldGen.remixWorldGen))
						{
							num8 = WorldGen.genRand.Next(50, Main.maxTilesX - 50);
							num9 = WorldGen.genRand.Next(50, Main.UnderworldLayer);
						}
						flag2 = WorldGen.AddBuriedChest(num8, num9, contain2, false, 17, num8 < WorldGen.beachDistance || num8 > Main.maxTilesX - WorldGen.beachDistance, 0);
						num7++;
						if (num7 > 10000)
						{
							break;
						}
					}
					flag2 = false;
					num7 = 0;
					while (!flag2)
					{
						int num10 = WorldGen.genRand.Next(50, Main.maxTilesX - 50);
						int num11 = WorldGen.genRand.Next((int)Main.worldSurface, Main.UnderworldLayer);
						while (Main.tile[num10, num11].liquid < 250 || (Main.tile[num10, num11].liquidType() != 0 && !WorldGen.notTheBees))
						{
							num10 = WorldGen.genRand.Next(50, Main.maxTilesX - 50);
							num11 = WorldGen.genRand.Next((int)Main.worldSurface, Main.UnderworldLayer);
						}
						flag2 = WorldGen.AddBuriedChest(num10, num11, contain2, false, 17, num10 < WorldGen.beachDistance || num10 > Main.maxTilesX - WorldGen.beachDistance, 0);
						num7++;
						if (num7 > 10000)
						{
							break;
						}
					}
					num6++;
				}
			});
			WorldGen.AddGenerationPass("Spider Caves", delegate(GenerationProgress progress, GameConfiguration passConfig)
			{
				progress.Message = Lang.gen[64].Value;
				WorldGen.maxTileCount = 3500;
				int num = Main.maxTilesX / 2;
				int num2 = (int)((double)Main.maxTilesX * 0.005);
				if (WorldGen.getGoodWorldGen)
				{
					num2 *= 3;
				}
				if (WorldGen.notTheBees)
				{
					Main.tileSolid[225] = true;
				}
				for (int i = 0; i < num2; i++)
				{
					double value = (double)i / ((double)Main.maxTilesX * 0.005);
					progress.Set(value);
					int num3 = 0;
					int x = WorldGen.genRand.Next(200, Main.maxTilesX - 200);
					int y = WorldGen.genRand.Next((int)(Main.worldSurface + Main.rockLayer) / 2, Main.maxTilesY - 230);
					if (WorldGen.remixWorldGen)
					{
						y = WorldGen.genRand.Next((int)Main.worldSurface, (int)Main.rockLayer);
					}
					int num4 = WorldGen.countTiles(x, y, false, true);
					while ((num4 >= 3500 || num4 < 500) && num3 < num)
					{
						num3++;
						x = WorldGen.genRand.Next(200, Main.maxTilesX - 200);
						y = WorldGen.genRand.Next((int)Main.rockLayer + 30, Main.maxTilesY - 230);
						if (WorldGen.remixWorldGen)
						{
							y = WorldGen.genRand.Next((int)Main.worldSurface, (int)Main.rockLayer);
						}
						num4 = WorldGen.countTiles(x, y, false, true);
						if (WorldGen.shroomCount > 1)
						{
							num4 = 0;
						}
					}
					if (num3 < num)
					{
						WorldGen.Spread.Spider(x, y);
					}
				}
				if (WorldGen.notTheBees)
				{
					Main.tileSolid[225] = false;
				}
				Main.tileSolid[162] = true;
			});
			WorldGen.AddGenerationPass("Gem Caves", delegate(GenerationProgress progress, GameConfiguration passConfig)
			{
				if (WorldGen.notTheBees)
				{
					return;
				}
				progress.Message = Lang.gen[64].Value;
				WorldGen.maxTileCount = 300;
				double num = (double)Main.maxTilesX * 0.003;
				if (WorldGen.tenthAnniversaryWorldGen)
				{
					num *= 1.5;
				}
				if (Main.starGame)
				{
					num *= Main.starGameMath(0.2);
				}
				int num2 = 0;
				while ((double)num2 < num)
				{
					double value = (double)num2 / num;
					progress.Set(value);
					int num3 = 0;
					int x = WorldGen.genRand.Next(200, Main.maxTilesX - 200);
					int y = WorldGen.genRand.Next((int)Main.rockLayer + 30, Main.maxTilesY - 230);
					if (WorldGen.remixWorldGen)
					{
						y = WorldGen.genRand.Next((int)Main.worldSurface + 30, (int)Main.rockLayer - 30);
					}
					int num4 = WorldGen.countTiles(x, y, false, false);
					while ((num4 >= 300 || num4 < 50 || WorldGen.lavaCount > 0 || WorldGen.iceCount > 0 || WorldGen.rockCount == 0) && num3 < 1000)
					{
						num3++;
						x = WorldGen.genRand.Next(200, Main.maxTilesX - 200);
						y = WorldGen.genRand.Next((int)Main.rockLayer + 30, Main.maxTilesY - 230);
						if (WorldGen.remixWorldGen)
						{
							y = WorldGen.genRand.Next((int)Main.worldSurface + 30, (int)Main.rockLayer - 30);
						}
						num4 = WorldGen.countTiles(x, y, false, false);
					}
					if (num3 < 1000)
					{
						WorldGen.gemCave(x, y);
					}
					num2++;
				}
			});
			WorldGen.AddGenerationPass("Moss", delegate(GenerationProgress progress, GameConfiguration passConfig)
			{
				if (WorldGen.notTheBees && !WorldGen.remixWorldGen)
				{
					return;
				}
				progress.Message = Lang.gen[61].Value;
				WorldGen.randMoss(false);
				int num = Main.maxTilesX / 2100;
				if (WorldGen.remixWorldGen)
				{
					num = (int)((double)num * 1.5);
				}
				else if (WorldGen.tenthAnniversaryWorldGen)
				{
					num *= 2;
				}
				int num2 = 0;
				int i = 0;
				while (i < num)
				{
					int num3 = WorldGen.genRand.Next(100, Main.maxTilesX - 100);
					if (WorldGen.remixWorldGen)
					{
						num3 = WorldGen.genRand.Next((int)((double)Main.maxTilesX * 0.3), (int)((double)Main.maxTilesX * 0.7));
					}
					else if (WorldGen.tenthAnniversaryWorldGen)
					{
						if (WorldGen.genRand.Next(2) == 0)
						{
							WorldGen.randMoss(true);
						}
					}
					else if (WorldGen.getGoodWorldGen)
					{
						while ((double)num3 > (double)Main.maxTilesX * 0.42)
						{
							if ((double)num3 >= (double)Main.maxTilesX * 0.48)
							{
								break;
							}
							num3 = WorldGen.genRand.Next(100, Main.maxTilesX - 100);
						}
					}
					else if (!WorldGen.drunkWorldGen)
					{
						while ((double)num3 > (double)Main.maxTilesX * 0.38 && (double)num3 < (double)Main.maxTilesX * 0.62)
						{
							num3 = WorldGen.genRand.Next(100, Main.maxTilesX - 100);
						}
					}
					int num4;
					if (WorldGen.remixWorldGen)
					{
						num4 = WorldGen.genRand.Next((int)Main.worldSurface + 50, (int)Main.rockLayer - 50);
					}
					else
					{
						num4 = WorldGen.genRand.Next((int)Main.rockLayer + 40, GenVars.lavaLine - 40);
					}
					bool flag = false;
					int num5 = 50;
					for (int j = num3 - num5; j <= num3 + num5; j++)
					{
						for (int k = num4 - num5; k <= num4 + num5; k++)
						{
							if (Main.tile[j, k].active())
							{
								int type = (int)Main.tile[j, k].type;
								if (WorldGen.remixWorldGen)
								{
									if (type == 60 || type == 161 || type == 147 || Main.tileDungeon[type] || type == 25 || type == 203)
									{
										flag = true;
										j = num3 + num5 + 1;
										break;
									}
								}
								else if (type == 70 || type == 60 || type == 367 || type == 368 || type == 161 || type == 147 || type == 396 || type == 397 || Main.tileDungeon[type])
								{
									flag = true;
									j = num3 + num5 + 1;
									break;
								}
							}
						}
					}
					if (flag)
					{
						num2++;
						if (num2 > Main.maxTilesX)
						{
							i++;
						}
					}
					else
					{
						num2 = 0;
						i++;
						int maxY = GenVars.lavaLine;
						if (WorldGen.remixWorldGen)
						{
							maxY = (int)Main.rockLayer + 50;
						}
						WorldGen.neonMossBiome(num3, num4, maxY);
					}
				}
				WorldGen.maxTileCount = 2500;
				for (int l = 0; l < (int)((double)Main.maxTilesX * 0.01); l++)
				{
					double value = (double)l / ((double)Main.maxTilesX * 0.01);
					progress.Set(value);
					int num6 = 0;
					int num7 = WorldGen.genRand.Next(200, Main.maxTilesX - 200);
					int num8 = WorldGen.genRand.Next((int)(Main.worldSurface + Main.rockLayer) / 2, GenVars.waterLine);
					if (WorldGen.remixWorldGen)
					{
						num8 = WorldGen.genRand.Next((int)Main.worldSurface, (int)Main.rockLayer);
					}
					if (Vector2D.Distance(new Vector2D((double)num7, (double)num8), GenVars.shimmerPosition) >= (double)WorldGen.shimmerSafetyDistance)
					{
						int num9 = WorldGen.countTiles(num7, num8, false, false);
						while ((num9 >= 2500 || num9 < 10 || WorldGen.lavaCount > 0 || WorldGen.iceCount > 0 || WorldGen.rockCount == 0 || WorldGen.shroomCount > 0) && num6 < 1000)
						{
							num6++;
							num7 = WorldGen.genRand.Next(200, Main.maxTilesX - 200);
							num8 = WorldGen.genRand.Next((int)Main.rockLayer + 30, Main.maxTilesY - 230);
							num9 = WorldGen.countTiles(num7, num8, false, false);
						}
						if (num6 < 1000)
						{
							WorldGen.setMoss(num7, num8);
							WorldGen.Spread.Moss(num7, num8);
						}
					}
				}
				for (int m = 0; m < Main.maxTilesX; m++)
				{
					int num10 = WorldGen.genRand.Next(50, Main.maxTilesX - 50);
					int num11;
					if (WorldGen.remixWorldGen)
					{
						num11 = WorldGen.genRand.Next((int)Main.worldSurface, Main.maxTilesY - 300);
					}
					else
					{
						num11 = WorldGen.genRand.Next((int)(Main.worldSurface + Main.rockLayer) / 2, GenVars.lavaLine);
					}
					if (Vector2D.Distance(new Vector2D((double)num10, (double)num11), GenVars.shimmerPosition) >= (double)WorldGen.shimmerSafetyDistance && Main.tile[num10, num11].type == 1)
					{
						WorldGen.setMoss(num10, num11);
						Main.tile[num10, num11].type = GenVars.mossTile;
					}
				}
				double num12 = (double)Main.maxTilesX * 0.05;
				while (num12 > 0.0)
				{
					int num13 = WorldGen.genRand.Next(50, Main.maxTilesX - 50);
					int num14;
					if (WorldGen.remixWorldGen)
					{
						num14 = WorldGen.genRand.Next((int)Main.worldSurface, Main.maxTilesY - 300);
					}
					else
					{
						num14 = WorldGen.genRand.Next((int)(Main.worldSurface + Main.rockLayer) / 2, GenVars.lavaLine);
					}
					if (Vector2D.Distance(new Vector2D((double)num13, (double)num14), GenVars.shimmerPosition) >= (double)WorldGen.shimmerSafetyDistance && Main.tile[num13, num14].type == 1 && (!Main.tile[num13 - 1, num14].active() || !Main.tile[num13 + 1, num14].active() || !Main.tile[num13, num14 - 1].active() || !Main.tile[num13, num14 + 1].active()))
					{
						WorldGen.setMoss(num13, num14);
						Main.tile[num13, num14].type = GenVars.mossTile;
						num12 -= 1.0;
					}
				}
				num12 = (double)Main.maxTilesX * 0.065;
				if (WorldGen.remixWorldGen)
				{
					num12 *= 2.0;
				}
				while (num12 > 0.0)
				{
					int num15 = WorldGen.genRand.Next(50, Main.maxTilesX - 50);
					int num16;
					if (WorldGen.remixWorldGen)
					{
						num16 = WorldGen.genRand.Next(GenVars.lavaLine, (int)Main.rockLayer + 50);
					}
					else
					{
						num16 = WorldGen.genRand.Next(GenVars.waterLine, Main.UnderworldLayer);
					}
					if (Main.tile[num15, num16].type == 1 && (!Main.tile[num15 - 1, num16].active() || !Main.tile[num15 + 1, num16].active() || !Main.tile[num15, num16 - 1].active() || !Main.tile[num15, num16 + 1].active()))
					{
						int num17 = 25;
						int num18 = 0;
						for (int n = num15 - num17; n < num15 + num17; n++)
						{
							for (int num19 = num16 - num17; num19 < num16 + num17; num19++)
							{
								if (Main.tile[n, num19].liquid > 0 && Main.tile[n, num19].lava())
								{
									num18++;
								}
							}
						}
						if (num18 > 20)
						{
							Main.tile[num15, num16].type = 381;
							num12 -= 1.0;
						}
						else
						{
							num12 -= 0.002;
						}
					}
					num12 -= 0.001;
				}
				for (int num20 = 0; num20 < Main.maxTilesX; num20++)
				{
					for (int num21 = 0; num21 < Main.maxTilesY; num21++)
					{
						if (Main.tile[num20, num21].active() && Main.tileMoss[(int)Main.tile[num20, num21].type])
						{
							for (int num22 = 0; num22 < 4; num22++)
							{
								int num23 = num20;
								int num24 = num21;
								if (num22 == 0)
								{
									num23--;
								}
								if (num22 == 1)
								{
									num23++;
								}
								if (num22 == 2)
								{
									num24--;
								}
								if (num22 == 3)
								{
									num24++;
								}
								try
								{
									WorldGen.grassSpread = 0;
									WorldGen.SpreadGrass(num23, num24, 1, (int)Main.tile[num20, num21].type, true, default(TileColorCache));
								}
								catch
								{
									WorldGen.grassSpread = 0;
									WorldGen.SpreadGrass(num23, num24, 1, (int)Main.tile[num20, num21].type, false, default(TileColorCache));
								}
							}
						}
					}
				}
			});
			WorldGen.AddGenerationPass("Temple", delegate(GenerationProgress progress, GameConfiguration passConfig)
			{
				Main.tileSolid[162] = false;
				Main.tileSolid[226] = true;
				WorldGen.templePart2();
				Main.tileSolid[232] = false;
			});
			WorldGen.AddGenerationPass("Cave Walls", delegate(GenerationProgress progress, GameConfiguration passConfig)
			{
				progress.Message = Lang.gen[63].Value;
				WorldGen.maxTileCount = 1500;
				for (int i = 0; i < (int)((double)Main.maxTilesX * 0.04); i++)
				{
					double num = (double)i / ((double)Main.maxTilesX * 0.04);
					progress.Set(num * 0.66);
					int num2 = 0;
					int x = WorldGen.genRand.Next(200, Main.maxTilesX - 200);
					int y = WorldGen.genRand.Next((int)(Main.worldSurface + Main.rockLayer) / 2, Main.maxTilesY - 220);
					if (WorldGen.remixWorldGen)
					{
						y = WorldGen.genRand.Next((int)Main.worldSurface + 25, (int)Main.rockLayer);
					}
					int num3 = WorldGen.countTiles(x, y, false, true);
					while ((num3 >= WorldGen.maxTileCount || num3 < 10) && num2 < 500)
					{
						num2++;
						x = WorldGen.genRand.Next(200, Main.maxTilesX - 200);
						y = WorldGen.genRand.Next((int)(Main.worldSurface + Main.rockLayer) / 2, Main.maxTilesY - 220);
						if (WorldGen.remixWorldGen)
						{
							y = WorldGen.genRand.Next((int)Main.worldSurface + 25, (int)Main.rockLayer);
						}
						num3 = WorldGen.countTiles(x, y, false, true);
					}
					if (num2 < 500)
					{
						int num4 = WorldGen.genRand.Next(2);
						if ((double)WorldGen.shroomCount > (double)WorldGen.rockCount * 0.75)
						{
							num4 = 80;
						}
						else if (WorldGen.iceCount > 0)
						{
							if (num4 == 0)
							{
								num4 = 40;
							}
							else if (num4 == 1)
							{
								num4 = 71;
							}
						}
						else if (WorldGen.lavaCount > 0)
						{
							num4 = 79;
						}
						else
						{
							num4 = WorldGen.genRand.Next(4);
							if (num4 == 0)
							{
								num4 = 59;
							}
							else if (num4 == 1)
							{
								num4 = 61;
							}
							else if (num4 == 2)
							{
								num4 = 170;
							}
							else if (num4 == 3)
							{
								num4 = 171;
							}
						}
						WorldGen.Spread.Wall(x, y, num4);
					}
				}
				if (WorldGen.remixWorldGen)
				{
					WorldGen.maxTileCount = 1500;
					for (int j = 0; j < (int)((double)Main.maxTilesX * 0.04); j++)
					{
						double num5 = (double)j / ((double)Main.maxTilesX * 0.04);
						progress.Set(num5 * 0.66);
						int num6 = 0;
						int x2 = WorldGen.genRand.Next(200, Main.maxTilesX - 200);
						int y2 = WorldGen.genRand.Next((int)Main.rockLayer, Main.maxTilesY - 350);
						int num7 = WorldGen.countTiles(x2, y2, false, true);
						while ((num7 >= WorldGen.maxTileCount || num7 < 10) && num6 < 500)
						{
							num6++;
							x2 = WorldGen.genRand.Next(200, Main.maxTilesX - 200);
							y2 = WorldGen.genRand.Next((int)Main.rockLayer, Main.maxTilesY - 350);
							num7 = WorldGen.countTiles(x2, y2, false, true);
						}
						if (num6 < 500 && WorldGen.iceCount == 0 && WorldGen.lavaCount == 0 && WorldGen.sandCount == 0)
						{
							int wallType;
							if (WorldGen.genRand.Next(2) == 0)
							{
								wallType = 2;
							}
							else
							{
								wallType = 63;
							}
							WorldGen.Spread.Wall(x2, y2, wallType);
						}
					}
				}
				WorldGen.maxTileCount = 1500;
				double num8 = (double)Main.maxTilesX * 0.02;
				int num9 = 0;
				while ((double)num9 < num8)
				{
					double num10 = (double)num9 / ((double)Main.maxTilesX * 0.02);
					progress.Set(num10 * 0.33 + 0.66);
					int num11 = 0;
					int num12 = WorldGen.genRand.Next(200, Main.maxTilesX - 200);
					int num13 = WorldGen.genRand.Next((int)Main.worldSurface, GenVars.lavaLine);
					int num14 = 0;
					if (Main.tile[num12, num13].wall == 64)
					{
						num14 = WorldGen.countTiles(num12, num13, true, false);
					}
					while ((num14 >= WorldGen.maxTileCount || num14 < 10) && num11 < 1000)
					{
						num11++;
						num12 = WorldGen.genRand.Next(200, Main.maxTilesX - 200);
						num13 = WorldGen.genRand.Next((int)Main.worldSurface, GenVars.lavaLine);
						if (!Main.wallHouse[(int)Main.tile[num12, num13].wall] && Main.tile[num12, num13].wall != 244)
						{
							if (Main.tile[num12, num13].wall == 64)
							{
								num14 = WorldGen.countTiles(num12, num13, true, false);
							}
							else
							{
								num14 = 0;
							}
						}
					}
					if (num11 < 1000)
					{
						WorldGen.Spread.Wall2(num12, num13, 15);
					}
					num9++;
				}
			});
			WorldGen.AddGenerationPass("Jungle Trees", delegate(GenerationProgress progress, GameConfiguration passConfig)
			{
				progress.Message = Lang.gen[83].Value;
				for (int i = 0; i < Main.maxTilesX; i++)
				{
					progress.Set((double)i / (double)Main.maxTilesX);
					for (int j = (int)Main.worldSurface - 1; j < Main.maxTilesY - 350; j++)
					{
						if (WorldGen.genRand.Next(10) == 0 || WorldGen.drunkWorldGen)
						{
							WorldGen.GrowUndergroundTree(i, j);
						}
					}
				}
			});
			WorldGen.AddGenerationPass("Floating Island Houses", delegate(GenerationProgress progress, GameConfiguration passConfig)
			{
				progress.Set(1.0);
				for (int i = 0; i < GenVars.numIslandHouses; i++)
				{
					if (!GenVars.skyLake[i])
					{
						WorldGen.IslandHouse(GenVars.floatingIslandHouseX[i], GenVars.floatingIslandHouseY[i], GenVars.floatingIslandStyle[i]);
					}
				}
			});
			WorldGen.AddGenerationPass("Quick Cleanup", delegate(GenerationProgress progress, GameConfiguration passConfig)
			{
				progress.Set(1.0);
				if (WorldGen.notTheBees)
				{
					WorldGen.NotTheBees();
				}
				Main.tileSolid[137] = false;
				Main.tileSolid[130] = false;
				for (int i = 20; i < Main.maxTilesX - 20; i++)
				{
					for (int j = 20; j < Main.maxTilesY - 20; j++)
					{
						if ((double)j < Main.worldSurface && WorldGen.oceanDepths(i, j) && Main.tile[i, j].type == 53 && Main.tile[i, j].active())
						{
							if (Main.tile[i, j].bottomSlope())
							{
								Main.tile[i, j].slope(0);
							}
							int num = j + 1;
							while (num < j + WorldGen.genRand.Next(4, 7) && (!Main.tile[i, num].active() || (Main.tile[i, num].type != 397 && Main.tile[i, num].type != 53)) && (!Main.tile[i, num + 1].active() || (Main.tile[i, num + 1].type != 397 && Main.tile[i, num + 1].type != 53 && Main.tile[i, num + 1].type != 495)) && (!Main.tile[i, num + 2].active() || (Main.tile[i, num + 2].type != 397 && Main.tile[i, num + 2].type != 53 && Main.tile[i, num + 2].type != 495)))
							{
								Main.tile[i, num].type = 0;
								Main.tile[i, num].active(true);
								Main.tile[i, num].halfBrick(false);
								Main.tile[i, num].slope(0);
								num++;
							}
						}
						if (Main.tile[i, j].wall == 187 || Main.tile[i, j].wall == 216)
						{
							if (Main.tile[i, j].type == 59 || Main.tile[i, j].type == 123 || Main.tile[i, j].type == 224)
							{
								Main.tile[i, j].type = 397;
							}
							if (Main.tile[i, j].type == 368 || Main.tile[i, j].type == 367)
							{
								Main.tile[i, j].type = 397;
							}
							if ((double)j <= Main.rockLayer)
							{
								Main.tile[i, j].liquid = 0;
							}
							else if (Main.tile[i, j].liquid > 0)
							{
								Main.tile[i, j].liquid = byte.MaxValue;
								Main.tile[i, j].lava(true);
							}
						}
						if ((double)j < Main.worldSurface && Main.tile[i, j].active() && Main.tile[i, j].type == 53 && Main.tile[i, j + 1].wall == 0 && !WorldGen.SolidTile(i, j + 1, false))
						{
							ushort num2 = 0;
							int num3 = 3;
							for (int k = i - num3; k <= i + num3; k++)
							{
								for (int l = j - num3; l <= j + num3; l++)
								{
									if (Main.tile[k, l].wall > 0)
									{
										num2 = Main.tile[k, l].wall;
										break;
									}
								}
							}
							if (num2 > 0)
							{
								Main.tile[i, j + 1].wall = num2;
								if (Main.tile[i, j].wall == 0)
								{
									Main.tile[i, j].wall = num2;
								}
							}
						}
						if (Main.tile[i, j].type != 19 && TileID.Sets.CanBeClearedDuringGeneration[(int)Main.tile[i, j].type])
						{
							if (Main.tile[i, j].topSlope() || Main.tile[i, j].halfBrick())
							{
								if (Main.tile[i, j].type != 225 || !Main.tile[i, j].halfBrick())
								{
									if (!WorldGen.SolidTile(i, j + 1, false))
									{
										Main.tile[i, j].active(false);
									}
									if (Main.tile[i + 1, j].type == 137 || Main.tile[i - 1, j].type == 137)
									{
										Main.tile[i, j].active(false);
									}
								}
							}
							else if (Main.tile[i, j].bottomSlope())
							{
								if (!WorldGen.SolidTile(i, j - 1, false))
								{
									Main.tile[i, j].active(false);
								}
								if (Main.tile[i + 1, j].type == 137 || Main.tile[i - 1, j].type == 137)
								{
									Main.tile[i, j].active(false);
								}
							}
						}
					}
				}
			});
			WorldGen.AddGenerationPass("Pots", delegate(GenerationProgress progress, GameConfiguration passConfig)
			{
				Main.tileSolid[137] = true;
				Main.tileSolid[130] = true;
				progress.Message = Lang.gen[35].Value;
				if (WorldGen.noTrapsWorldGen)
				{
					Main.tileSolid[138] = true;
					int num = (int)((double)(Main.maxTilesX * Main.maxTilesY) * 0.0004);
					if (WorldGen.remixWorldGen)
					{
						num /= 2;
					}
					for (int i = 0; i < num; i++)
					{
						int num2 = WorldGen.genRand.Next(50, Main.maxTilesX - 50);
						int num3 = WorldGen.genRand.Next((int)Main.worldSurface, Main.maxTilesY - 250);
						while (!Main.tile[num2, num3].active() && num3 < Main.maxTilesY - 250)
						{
							num3++;
						}
						num3--;
						if (!Main.tile[num2, num3].shimmer())
						{
							WorldGen.PlaceTile(num2, num3, 138, true, false, -1, 0);
							WorldGen.PlaceTile(num2 + 2, num3, 138, true, false, -1, 0);
							WorldGen.PlaceTile(num2 + 1, num3 - 2, 138, true, false, -1, 0);
						}
					}
					Main.tileSolid[138] = false;
				}
				double num4 = (double)(Main.maxTilesX * Main.maxTilesY) * 0.0008;
				if (Main.starGame)
				{
					num4 *= Main.starGameMath(0.2);
				}
				int num5 = 0;
				while ((double)num5 < num4)
				{
					double num6 = (double)num5 / num4;
					progress.Set(num6);
					bool flag = false;
					int num7 = 0;
					while (!flag)
					{
						int num8 = WorldGen.genRand.Next((int)GenVars.worldSurfaceHigh, Main.maxTilesY - 10);
						if (num6 > 0.93)
						{
							num8 = Main.maxTilesY - 150;
						}
						else if (num6 > 0.75)
						{
							num8 = (int)GenVars.worldSurfaceLow;
						}
						int num9 = WorldGen.genRand.Next(20, Main.maxTilesX - 20);
						bool flag2 = false;
						for (int j = num8; j < Main.maxTilesY - 20; j++)
						{
							if (!flag2)
							{
								if (Main.tile[num9, j].active() && Main.tileSolid[(int)Main.tile[num9, j].type] && !Main.tile[num9, j - 1].lava() && !Main.tile[num9, j - 1].shimmer())
								{
									flag2 = true;
								}
							}
							else if ((double)j >= Main.worldSurface || Main.tile[num9, j].wall != 0)
							{
								int style = WorldGen.genRand.Next(0, 4);
								int num10 = 0;
								int num11 = 0;
								if (j < Main.maxTilesY - 5)
								{
									num10 = (int)Main.tile[num9, j + 1].type;
									num11 = (int)Main.tile[num9, j].wall;
								}
								if (num10 == 147 || num10 == 161 || num10 == 162)
								{
									style = WorldGen.genRand.Next(4, 7);
								}
								if (num10 == 60)
								{
									style = WorldGen.genRand.Next(7, 10);
								}
								if (Main.wallDungeon[(int)Main.tile[num9, j].wall])
								{
									style = WorldGen.genRand.Next(10, 13);
								}
								if (num10 == 41 || num10 == 43 || num10 == 44 || num10 == 481 || num10 == 482 || num10 == 483)
								{
									style = WorldGen.genRand.Next(10, 13);
								}
								if (num10 == 22 || num10 == 23 || num10 == 25)
								{
									style = WorldGen.genRand.Next(16, 19);
								}
								if (num10 == 199 || num10 == 203 || num10 == 204 || num10 == 200)
								{
									style = WorldGen.genRand.Next(22, 25);
								}
								if (num10 == 367)
								{
									style = WorldGen.genRand.Next(31, 34);
								}
								if (num10 == 226)
								{
									style = WorldGen.genRand.Next(28, 31);
								}
								if (num11 == 187 || num11 == 216)
								{
									style = WorldGen.genRand.Next(34, 37);
								}
								if (j > Main.UnderworldLayer)
								{
									style = WorldGen.genRand.Next(13, 16);
								}
								if (!WorldGen.oceanDepths(num9, j) && !Main.tile[num9, j].shimmer() && WorldGen.PlacePot(num9, j, 28, style))
								{
									flag = true;
									break;
								}
								num7++;
								if (num7 >= 10000)
								{
									flag = true;
									break;
								}
							}
						}
					}
					num5++;
				}
			});
			WorldGen.AddGenerationPass("Hellforge", delegate(GenerationProgress progress, GameConfiguration passConfig)
			{
				progress.Message = Lang.gen[36].Value;
				for (int i = 0; i < Main.maxTilesX / 200; i++)
				{
					double value = (double)i / (double)(Main.maxTilesX / 200);
					progress.Set(value);
					bool flag = false;
					int num = 0;
					while (!flag)
					{
						int num2 = WorldGen.genRand.Next(1, Main.maxTilesX);
						int num3 = WorldGen.genRand.Next(Main.maxTilesY - 250, Main.maxTilesY - 30);
						try
						{
							if (Main.tile[num2, num3].wall != 13)
							{
								if (Main.tile[num2, num3].wall != 14)
								{
									continue;
								}
							}
							while (!Main.tile[num2, num3].active() && num3 < Main.maxTilesY - 20)
							{
								num3++;
							}
							num3--;
							WorldGen.PlaceTile(num2, num3, 77, false, false, -1, 0);
							if (Main.tile[num2, num3].type == 77)
							{
								flag = true;
							}
							else
							{
								num++;
								if (num >= 10000)
								{
									flag = true;
								}
							}
						}
						catch
						{
							num++;
							if (num >= 10000)
							{
								flag = true;
							}
						}
					}
				}
			});
			WorldGen.AddGenerationPass("Spreading Grass", delegate(GenerationProgress progress, GameConfiguration passConfig)
			{
				if (WorldGen.notTheBees && !WorldGen.remixWorldGen)
				{
					return;
				}
				progress.Message = Lang.gen[37].Value;
				for (int i = 50; i < Main.maxTilesX - 50; i++)
				{
					int num = 50;
					while ((double)num <= Main.worldSurface)
					{
						if (Main.tile[i, num].active())
						{
							int type = (int)Main.tile[i, num].type;
							if (Main.tile[i, num].active() && type == 60)
							{
								for (int j = i - 1; j <= i + 1; j++)
								{
									for (int k = num - 1; k <= num + 1; k++)
									{
										if (Main.tile[j, k].active() && Main.tile[j, k].type == 0)
										{
											if (!Main.tile[j, k - 1].active())
											{
												Main.tile[j, k].type = 60;
											}
											else
											{
												Main.tile[j, k].type = 59;
											}
										}
									}
								}
							}
							else if (type == 1 || type == 40 || TileID.Sets.Ore[type])
							{
								int num2 = 3;
								bool flag = false;
								ushort num3 = 0;
								for (int l = i - num2; l <= i + num2; l++)
								{
									for (int m = num - num2; m <= num + num2; m++)
									{
										if (Main.tile[l, m].active())
										{
											if (Main.tile[l, m].type == 53 || num3 == 53)
											{
												num3 = 53;
											}
											else if (Main.tile[l, m].type == 59 || Main.tile[l, m].type == 60 || Main.tile[l, m].type == 147 || Main.tile[l, m].type == 161 || Main.tile[l, m].type == 199 || Main.tile[l, m].type == 23)
											{
												num3 = Main.tile[l, m].type;
											}
										}
										else if (m < num && Main.tile[l, m].wall == 0)
										{
											flag = true;
										}
									}
								}
								if (flag)
								{
									if (num3 == 199 || num3 == 23)
									{
										if (Main.tile[i, num - 1].active())
										{
											num3 = 0;
										}
									}
									else if ((num3 == 60 || num3 == 59) && i >= GenVars.jungleMinX && i <= GenVars.jungleMaxX)
									{
										if (!Main.tile[i, num - 1].active())
										{
											num3 = 60;
										}
										else
										{
											num3 = 59;
										}
									}
									Main.tile[i, num].type = num3;
								}
							}
						}
						num++;
					}
				}
				for (int n = 10; n < Main.maxTilesX - 10; n++)
				{
					bool flag2 = true;
					int num4 = 0;
					while ((double)num4 < Main.worldSurface - 1.0)
					{
						if (Main.tile[n, num4].active())
						{
							if (flag2 && Main.tile[n, num4].type == 0)
							{
								try
								{
									WorldGen.grassSpread = 0;
									WorldGen.SpreadGrass(n, num4, 0, 2, true, default(TileColorCache));
								}
								catch
								{
									WorldGen.grassSpread = 0;
									WorldGen.SpreadGrass(n, num4, 0, 2, false, default(TileColorCache));
								}
							}
							if ((double)num4 > GenVars.worldSurfaceHigh)
							{
								break;
							}
							flag2 = false;
						}
						else if (Main.tile[n, num4].wall == 0)
						{
							flag2 = true;
						}
						num4++;
					}
				}
				if (WorldGen.remixWorldGen)
				{
					for (int num5 = 5; num5 < Main.maxTilesX - 5; num5++)
					{
						for (int num6 = (int)GenVars.rockLayerLow + WorldGen.genRand.Next(-1, 2); num6 < Main.maxTilesY - 200; num6++)
						{
							if (Main.tile[num5, num6].type == 0 && Main.tile[num5, num6].active() && (!Main.tile[num5 - 1, num6 - 1].active() || !Main.tile[num5, num6 - 1].active() || !Main.tile[num5 + 1, num6 - 1].active() || !Main.tile[num5 - 1, num6].active() || !Main.tile[num5 + 1, num6].active() || !Main.tile[num5 - 1, num6 + 1].active() || !Main.tile[num5, num6 + 1].active() || !Main.tile[num5 + 1, num6 + 1].active()))
							{
								Main.tile[num5, num6].type = 2;
							}
						}
					}
					for (int num7 = 5; num7 < Main.maxTilesX - 5; num7++)
					{
						for (int num8 = (int)GenVars.rockLayerLow + WorldGen.genRand.Next(-1, 2); num8 < Main.maxTilesY - 200; num8++)
						{
							if (Main.tile[num7, num8].type == 2 && !Main.tile[num7, num8 - 1].active() && WorldGen.genRand.Next(20) == 0)
							{
								WorldGen.PlaceTile(num7, num8 - 1, 27, true, false, -1, 0);
							}
						}
					}
					int conversionType = 1;
					if (WorldGen.crimson)
					{
						conversionType = 4;
					}
					int num9 = Main.maxTilesX / 7;
					for (int num10 = 10; num10 < Main.maxTilesX - 10; num10++)
					{
						for (int num11 = 10; num11 < Main.maxTilesY - 10; num11++)
						{
							if ((double)num11 < Main.worldSurface + (double)WorldGen.genRand.Next(3) || num10 < num9 + WorldGen.genRand.Next(3) || num10 >= Main.maxTilesX - num9 - WorldGen.genRand.Next(3))
							{
								if (WorldGen.drunkWorldGen)
								{
									if (GenVars.crimsonLeft)
									{
										if (num10 < Main.maxTilesX / 2 + WorldGen.genRand.Next(-2, 3))
										{
											WorldGen.Convert(num10, num11, 4, 1);
										}
										else
										{
											WorldGen.Convert(num10, num11, 1, 1);
										}
									}
									else if (num10 < Main.maxTilesX / 2 + WorldGen.genRand.Next(-2, 3))
									{
										WorldGen.Convert(num10, num11, 1, 1);
									}
									else
									{
										WorldGen.Convert(num10, num11, 4, 1);
									}
								}
								else
								{
									WorldGen.Convert(num10, num11, conversionType, 1);
								}
								Main.tile[num10, num11].color(0);
								Main.tile[num10, num11].wallColor(0);
							}
						}
					}
					if (WorldGen.remixWorldGen)
					{
						Main.tileSolid[225] = true;
						int num12 = (int)((double)Main.maxTilesX * 0.31);
						int num13 = (int)((double)Main.maxTilesX * 0.69);
						int maxTilesY = Main.maxTilesY;
						int num14 = Main.maxTilesY - 135;
						int maxTilesY2 = Main.maxTilesY;
						Liquid.QuickWater(-2, -1, -1);
						for (int num15 = num12; num15 < num13 + 15; num15++)
						{
							for (int num16 = Main.maxTilesY - 200; num16 < num14; num16++)
							{
								Main.tile[num15, num16].liquid = 0;
							}
						}
						Main.tileSolid[225] = false;
						Main.tileSolid[484] = false;
					}
				}
			});
			WorldGen.AddGenerationPass("Surface Ore and Stone", delegate(GenerationProgress progress, GameConfiguration passConfig)
			{
				progress.Set(1.0);
				int num = WorldGen.genRand.Next(Main.maxTilesX * 5 / 4200, Main.maxTilesX * 10 / 4200);
				for (int i = 0; i < num; i++)
				{
					int j = Main.maxTilesX / 420;
					while (j > 0)
					{
						j--;
						int num2 = WorldGen.genRand.Next(WorldGen.beachDistance, Main.maxTilesX - WorldGen.beachDistance);
						while ((double)num2 >= (double)Main.maxTilesX * 0.48 && (double)num2 <= (double)Main.maxTilesX * 0.52)
						{
							num2 = WorldGen.genRand.Next(WorldGen.beachDistance, Main.maxTilesX - WorldGen.beachDistance);
						}
						int y = WorldGen.genRand.Next((int)GenVars.worldSurfaceLow, (int)GenVars.worldSurface);
						bool flag = false;
						for (int k = 0; k < GenVars.numOrePatch; k++)
						{
							if (Math.Abs(num2 - GenVars.orePatchX[k]) < 200)
							{
								flag = true;
							}
						}
						if (!flag && WorldGen.OrePatch(num2, y))
						{
							if (GenVars.numOrePatch < GenVars.maxOrePatch - 1)
							{
								GenVars.orePatchX[GenVars.numOrePatch] = num2;
								GenVars.numOrePatch++;
								break;
							}
							break;
						}
					}
				}
				num = WorldGen.genRand.Next(1, Main.maxTilesX * 7 / 4200);
				for (int l = 0; l < num; l++)
				{
					int m = Main.maxTilesX / 420;
					while (m > 0)
					{
						m--;
						int num3 = WorldGen.genRand.Next(WorldGen.beachDistance, Main.maxTilesX - WorldGen.beachDistance);
						while ((double)num3 >= (double)Main.maxTilesX * 0.47 && (double)num3 <= (double)Main.maxTilesX * 0.53)
						{
							num3 = WorldGen.genRand.Next(WorldGen.beachDistance, Main.maxTilesX - WorldGen.beachDistance);
						}
						int y2 = WorldGen.genRand.Next((int)GenVars.worldSurfaceLow, (int)GenVars.worldSurface);
						bool flag2 = false;
						for (int n = 0; n < GenVars.numOrePatch; n++)
						{
							if (Math.Abs(num3 - GenVars.orePatchX[n]) < 100)
							{
								flag2 = true;
							}
						}
						if (!flag2 && WorldGen.StonePatch(num3, y2))
						{
							break;
						}
					}
				}
			});
			WorldGen.AddGenerationPass("Place Fallen Log", delegate(GenerationProgress progress, GameConfiguration passConfig)
			{
				progress.Message = Lang.gen[85].Value;
				int num = Main.maxTilesX / 2100;
				if (WorldGen.remixWorldGen)
				{
					num += WorldGen.genRand.Next(0, 2);
				}
				else
				{
					num += WorldGen.genRand.Next(-1, 2);
				}
				for (int i = 0; i < num; i++)
				{
					progress.Set((double)i / (double)num);
					int num2 = WorldGen.beachDistance + 20;
					int j = 50000;
					int num3 = 5000;
					while (j > 0)
					{
						j--;
						int num4 = WorldGen.genRand.Next(num2, Main.maxTilesX - num2);
						int num5 = WorldGen.genRand.Next(10, (int)Main.worldSurface);
						if (WorldGen.remixWorldGen)
						{
							num5 = WorldGen.genRand.Next((int)GenVars.rockLayerLow, Main.maxTilesY - 350);
						}
						bool flag = false;
						if (j < num3)
						{
							flag = true;
						}
						if (j > num3 / 2)
						{
							while ((double)num4 > (double)Main.maxTilesX * 0.4 && (double)num4 < (double)Main.maxTilesX * 0.6)
							{
								num4 = WorldGen.genRand.Next(num2, Main.maxTilesX - num2);
							}
						}
						if (!Main.tile[num4, num5].active() && Main.tile[num4, num5].wall == 0)
						{
							bool flag2 = true;
							if (WorldGen.remixWorldGen)
							{
								while (!Main.tile[num4, num5].active() && Main.tile[num4, num5].wall == 0)
								{
									if (num5 > Main.maxTilesY - 350)
									{
										break;
									}
									num5++;
								}
							}
							else
							{
								while (!Main.tile[num4, num5].active() && Main.tile[num4, num5].wall == 0 && (double)num5 <= Main.worldSurface)
								{
									num5++;
								}
							}
							if ((double)num5 > Main.worldSurface - 10.0 && !WorldGen.remixWorldGen)
							{
								flag2 = false;
							}
							else if (!flag)
							{
								int num6 = 50;
								for (int k = num4 - num6; k < num4 + num6; k++)
								{
									if (k > 10 && k < Main.maxTilesX - 10)
									{
										for (int l = num5 - num6; l < num5 + num6; l++)
										{
											if (l > 10 && l < Main.maxTilesY - 10)
											{
												int type = (int)Main.tile[k, l].type;
												if (type == 189)
												{
													flag2 = false;
												}
												else if (type == 53)
												{
													flag2 = false;
												}
												else if (Main.tileDungeon[type])
												{
													flag2 = false;
												}
												else if (TileID.Sets.Crimson[type])
												{
													flag2 = false;
												}
												else if (TileID.Sets.Corrupt[type])
												{
													flag2 = false;
												}
											}
										}
									}
								}
								if (flag2)
								{
									int num7 = 10;
									int num8 = 10;
									for (int m = num4 - num7; m < num4 + num7; m++)
									{
										for (int n = num5 - num8; n < num5 - 1; n++)
										{
											if (Main.tile[m, n].active() && Main.tileSolid[(int)Main.tile[m, n].type])
											{
												flag2 = false;
											}
											if (Main.tile[m, n].wall != 0)
											{
												flag2 = false;
											}
										}
									}
								}
							}
							if (flag2 && (Main.tile[num4, num5 - 1].liquid == 0 || j < num3 / 5) && (Main.tile[num4, num5].type == 2 || (WorldGen.notTheBees && Main.tile[num4, num5].type == 60)) && (Main.tile[num4 - 1, num5].type == 2 || (WorldGen.notTheBees && Main.tile[num4 - 1, num5].type == 60)) && (Main.tile[num4 + 1, num5].type == 2 || (WorldGen.notTheBees && Main.tile[num4 + 1, num5].type == 60)))
							{
								num5--;
								WorldGen.PlaceTile(num4, num5, 488, false, false, -1, 0);
								if (Main.tile[num4, num5].active() && Main.tile[num4, num5].type == 488)
								{
									if (WorldGen.genRand.Next(2) == 0)
									{
										GenVars.logX = num4;
										GenVars.logY = num5;
									}
									j = -1;
								}
							}
						}
					}
				}
			});
			WorldGen.AddGenerationPass("Traps", delegate(GenerationProgress progress, GameConfiguration passConfig)
			{
				if (WorldGen.notTheBees && !WorldGen.noTrapsWorldGen && !WorldGen.remixWorldGen)
				{
					return;
				}
				WorldGen.placingTraps = true;
				progress.Message = Lang.gen[34].Value;
				if (WorldGen.noTrapsWorldGen)
				{
					progress.Message = Lang.gen[91].Value;
				}
				double num = (double)Main.maxTilesX * 0.05;
				if (WorldGen.noTrapsWorldGen)
				{
					if (WorldGen.tenthAnniversaryWorldGen || WorldGen.notTheBees)
					{
						num *= 5.0;
					}
					else
					{
						num *= 100.0;
					}
				}
				else if (WorldGen.getGoodWorldGen)
				{
					num *= 1.5;
				}
				if (Main.starGame)
				{
					num *= Main.starGameMath(0.2);
				}
				int num2 = 0;
				while ((double)num2 < num)
				{
					progress.Set((double)num2 / num / 2.0);
					for (int i = 0; i < 1150; i++)
					{
						if (WorldGen.noTrapsWorldGen)
						{
							int num3 = WorldGen.genRand.Next(50, Main.maxTilesX - 50);
							int num4 = WorldGen.genRand.Next(50, Main.maxTilesY - 50);
							if (WorldGen.remixWorldGen)
							{
								num4 = WorldGen.genRand.Next(50, Main.maxTilesY - 210);
							}
							if (((double)num4 > Main.worldSurface || Main.tile[num3, num4].wall > 0) && WorldGen.placeTrap(num3, num4, -1))
							{
								break;
							}
						}
						else
						{
							int num5 = WorldGen.genRand.Next(200, Main.maxTilesX - 200);
							int num6 = WorldGen.genRand.Next((int)Main.worldSurface, Main.maxTilesY - 210);
							while (WorldGen.oceanDepths(num5, num6))
							{
								num5 = WorldGen.genRand.Next(200, Main.maxTilesX - 200);
								num6 = WorldGen.genRand.Next((int)Main.worldSurface, Main.maxTilesY - 210);
							}
							if (Main.tile[num5, num6].wall == 0 && WorldGen.placeTrap(num5, num6, -1))
							{
								break;
							}
						}
					}
					num2++;
				}
				if (WorldGen.noTrapsWorldGen)
				{
					num = (double)(Main.maxTilesX * 3);
					if (Main.remixWorld)
					{
						num = (double)(Main.maxTilesX / 3);
					}
					if (Main.starGame)
					{
						num *= Main.starGameMath(0.2);
					}
					int num7 = 0;
					while ((double)num7 < num)
					{
						if (Main.remixWorld)
						{
							WorldGen.placeTNTBarrel(WorldGen.genRand.Next(50, Main.maxTilesX - 50), WorldGen.genRand.Next((int)Main.worldSurface, (int)((double)(Main.maxTilesY - 350) + Main.rockLayer) / 2));
						}
						else
						{
							WorldGen.placeTNTBarrel(WorldGen.genRand.Next(50, Main.maxTilesX - 50), WorldGen.genRand.Next((int)Main.rockLayer, Main.maxTilesY - 200));
						}
						num7++;
					}
				}
				num = (double)Main.maxTilesX * 0.003;
				if (WorldGen.noTrapsWorldGen)
				{
					num *= 5.0;
				}
				else if (WorldGen.getGoodWorldGen)
				{
					num *= 1.5;
				}
				int num8 = 0;
				while ((double)num8 < num)
				{
					progress.Set((double)num8 / num / 2.0 + 0.5);
					for (int j = 0; j < 20000; j++)
					{
						int num9 = WorldGen.genRand.Next((int)((double)Main.maxTilesX * 0.15), (int)((double)Main.maxTilesX * 0.85));
						int num10 = WorldGen.genRand.Next((int)Main.worldSurface + 20, Main.maxTilesY - 210);
						if (Main.tile[num9, num10].wall == 187 && WorldGen.PlaceSandTrap(num9, num10))
						{
							break;
						}
					}
					num8++;
				}
				if (WorldGen.drunkWorldGen && !WorldGen.noTrapsWorldGen && !WorldGen.notTheBees)
				{
					for (int k = 0; k < 8; k++)
					{
						progress.Message = Lang.gen[34].Value;
						num = 100.0;
						int num11 = 0;
						while ((double)num11 < num)
						{
							progress.Set((double)num11 / num);
							Thread.Sleep(10);
							num11++;
						}
					}
				}
				if (WorldGen.noTrapsWorldGen)
				{
					Main.tileSolid[138] = true;
				}
				WorldGen.placingTraps = false;
			});
			WorldGen.AddGenerationPass("Piles", delegate(GenerationProgress progress, GameConfiguration passConfig)
			{
				progress.Message = Lang.gen[89].Value;
				Main.tileSolid[229] = false;
				Main.tileSolid[190] = false;
				Main.tileSolid[196] = false;
				Main.tileSolid[189] = false;
				Main.tileSolid[202] = false;
				Main.tileSolid[460] = false;
				Main.tileSolid[484] = false;
				if (WorldGen.noTrapsWorldGen)
				{
					Main.tileSolid[138] = false;
				}
				int num = 0;
				while ((double)num < (double)Main.maxTilesX * 0.06)
				{
					int num2 = Main.maxTilesX / 2;
					bool flag = false;
					while (!flag && num2 > 0)
					{
						num2--;
						int num3 = WorldGen.genRand.Next(25, Main.maxTilesX - 25);
						int num4 = WorldGen.genRand.Next((int)Main.worldSurface, Main.maxTilesY - 300);
						while (WorldGen.oceanDepths(num3, num4))
						{
							num3 = WorldGen.genRand.Next(25, Main.maxTilesX - 25);
							num4 = WorldGen.genRand.Next((int)Main.worldSurface, Main.maxTilesY - 300);
						}
						if (!Main.tile[num3, num4].active())
						{
							int num5 = 186;
							while (!Main.tile[num3, num4 + 1].active() && num4 < Main.maxTilesY - 5)
							{
								num4++;
							}
							int num6 = WorldGen.genRand.Next(22);
							if (num6 >= 16 && num6 <= 22)
							{
								num6 = WorldGen.genRand.Next(22);
							}
							if ((Main.tile[num3, num4 + 1].type == 0 || Main.tile[num3, num4 + 1].type == 1 || Main.tileMoss[(int)Main.tile[num3, num4 + 1].type]) && WorldGen.genRand.Next(5) == 0)
							{
								num6 = WorldGen.genRand.Next(23, 29);
								num5 = 187;
							}
							if (num4 > Main.maxTilesY - 300 || Main.wallDungeon[(int)Main.tile[num3, num4].wall] || Main.tile[num3, num4 + 1].type == 30 || Main.tile[num3, num4 + 1].type == 19 || Main.tile[num3, num4 + 1].type == 25 || Main.tile[num3, num4 + 1].type == 203)
							{
								num6 = WorldGen.genRand.Next(7);
								num5 = 186;
							}
							if (Main.tile[num3, num4 + 1].type == 147 || Main.tile[num3, num4 + 1].type == 161 || Main.tile[num3, num4 + 1].type == 162)
							{
								num6 = WorldGen.genRand.Next(26, 32);
								num5 = 186;
							}
							if (Main.tile[num3, num4 + 1].type == 60)
							{
								num5 = 187;
								num6 = WorldGen.genRand.Next(6);
							}
							if ((Main.tile[num3, num4 + 1].type == 57 || Main.tile[num3, num4 + 1].type == 58) && WorldGen.genRand.Next(3) < 2)
							{
								num5 = 187;
								num6 = WorldGen.genRand.Next(6, 9);
							}
							if (Main.tile[num3, num4 + 1].type == 226)
							{
								num5 = 187;
								num6 = WorldGen.genRand.Next(18, 23);
							}
							if (Main.tile[num3, num4 + 1].type == 70)
							{
								num6 = WorldGen.genRand.Next(32, 35);
								num5 = 186;
							}
							if (Main.tile[num3, num4 + 1].type == 396 || Main.tile[num3, num4 + 1].type == 397 || Main.tile[num3, num4 + 1].type == 404)
							{
								num6 = WorldGen.genRand.Next(29, 35);
								num5 = 187;
							}
							if (Main.tile[num3, num4 + 1].type == 368)
							{
								num6 = WorldGen.genRand.Next(35, 41);
								num5 = 187;
							}
							if (Main.tile[num3, num4 + 1].type == 367)
							{
								num6 = WorldGen.genRand.Next(41, 47);
								num5 = 187;
							}
							if (num5 == 186 && num6 >= 7 && num6 <= 15 && WorldGen.genRand.Next(75) == 0)
							{
								num5 = 187;
								num6 = 17;
							}
							if (Main.wallDungeon[(int)Main.tile[num3, num4].wall] && WorldGen.genRand.Next(3) != 0)
							{
								flag = true;
							}
							else
							{
								if (!Main.tile[num3, num4].shimmer())
								{
									WorldGen.PlaceTile(num3, num4, num5, true, false, -1, num6);
								}
								if (Main.tile[num3, num4].type == 186 || Main.tile[num3, num4].type == 187)
								{
									flag = true;
								}
								if (flag && num5 == 186 && num6 <= 7)
								{
									int num7 = WorldGen.genRand.Next(1, 5);
									for (int i = 0; i < num7; i++)
									{
										int num8 = num3 + WorldGen.genRand.Next(-10, 11);
										int num9 = num4 - WorldGen.genRand.Next(5);
										if (!Main.tile[num8, num9].active())
										{
											while (!Main.tile[num8, num9 + 1].active() && num9 < Main.maxTilesY - 5)
											{
												num9++;
											}
											int x = WorldGen.genRand.Next(12, 36);
											WorldGen.PlaceSmallPile(num8, num9, x, 0, 185);
										}
									}
								}
							}
						}
					}
					num++;
				}
				int num10 = 0;
				while ((double)num10 < (double)Main.maxTilesX * 0.01)
				{
					int num11 = Main.maxTilesX / 2;
					bool flag2 = false;
					while (!flag2 && num11 > 0)
					{
						num11--;
						int num12 = WorldGen.genRand.Next(25, Main.maxTilesX - 25);
						int num13 = WorldGen.genRand.Next(Main.maxTilesY - 300, Main.maxTilesY - 10);
						if (!Main.tile[num12, num13].active())
						{
							int num14 = 186;
							while (!Main.tile[num12, num13 + 1].active() && num13 < Main.maxTilesY - 5)
							{
								num13++;
							}
							int num15 = WorldGen.genRand.Next(22);
							if (num15 >= 16 && num15 <= 22)
							{
								num15 = WorldGen.genRand.Next(22);
							}
							if (num13 > Main.maxTilesY - 300 || Main.wallDungeon[(int)Main.tile[num12, num13].wall] || Main.tile[num12, num13 + 1].type == 30 || Main.tile[num12, num13 + 1].type == 19)
							{
								num15 = WorldGen.genRand.Next(7);
							}
							if ((Main.tile[num12, num13 + 1].type == 57 || Main.tile[num12, num13 + 1].type == 58) && WorldGen.genRand.Next(3) < 2)
							{
								num14 = 187;
								num15 = WorldGen.genRand.Next(6, 9);
							}
							if (Main.tile[num12, num13 + 1].type == 147 || Main.tile[num12, num13 + 1].type == 161 || Main.tile[num12, num13 + 1].type == 162)
							{
								num15 = WorldGen.genRand.Next(26, 32);
							}
							WorldGen.PlaceTile(num12, num13, num14, true, false, -1, num15);
							if (Main.tile[num12, num13].type == 186 || Main.tile[num12, num13].type == 187)
							{
								flag2 = true;
							}
							if (flag2 && num14 == 186 && num15 <= 7)
							{
								int num16 = WorldGen.genRand.Next(1, 5);
								for (int j = 0; j < num16; j++)
								{
									int num17 = num12 + WorldGen.genRand.Next(-10, 11);
									int num18 = num13 - WorldGen.genRand.Next(5);
									if (!Main.tile[num17, num18].active())
									{
										while (!Main.tile[num17, num18 + 1].active() && num18 < Main.maxTilesY - 5)
										{
											num18++;
										}
										int x2 = WorldGen.genRand.Next(12, 36);
										WorldGen.PlaceSmallPile(num17, num18, x2, 0, 185);
									}
								}
							}
						}
					}
					num10++;
				}
				int num19 = 0;
				while ((double)num19 < (double)Main.maxTilesX * 0.003)
				{
					int num20 = Main.maxTilesX / 2;
					bool flag3 = false;
					while (!flag3 && num20 > 0)
					{
						num20--;
						int num21 = 186;
						int num22 = WorldGen.genRand.Next(25, Main.maxTilesX - 25);
						int num23 = WorldGen.genRand.Next(10, (int)Main.worldSurface);
						while (WorldGen.oceanDepths(num22, num23))
						{
							num22 = WorldGen.genRand.Next(25, Main.maxTilesX - 25);
							num23 = WorldGen.genRand.Next(10, (int)Main.worldSurface);
						}
						if (!Main.tile[num22, num23].active())
						{
							while (!Main.tile[num22, num23 + 1].active() && num23 < Main.maxTilesY - 5)
							{
								num23++;
							}
							int num24 = WorldGen.genRand.Next(7, 13);
							if (num23 > Main.maxTilesY - 300 || Main.wallDungeon[(int)Main.tile[num22, num23].wall] || Main.tile[num22, num23 + 1].type == 30 || Main.tile[num22, num23 + 1].type == 19 || Main.tile[num22, num23 + 1].type == 25 || Main.tile[num22, num23 + 1].type == 203 || Main.tile[num22, num23 + 1].type == 234 || Main.tile[num22, num23 + 1].type == 112)
							{
								num24 = -1;
							}
							if (Main.tile[num22, num23 + 1].type == 147 || Main.tile[num22, num23 + 1].type == 161 || Main.tile[num22, num23 + 1].type == 162)
							{
								num24 = WorldGen.genRand.Next(26, 32);
							}
							if (Main.tile[num22, num23 + 1].type == 53)
							{
								num21 = 187;
								num24 = WorldGen.genRand.Next(52, 55);
							}
							if (Main.tile[num22, num23 + 1].type == 2 || Main.tile[num22 - 1, num23 + 1].type == 2 || Main.tile[num22 + 1, num23 + 1].type == 2)
							{
								num21 = 187;
								num24 = WorldGen.genRand.Next(14, 17);
							}
							if (Main.tile[num22, num23 + 1].type == 151 || Main.tile[num22, num23 + 1].type == 274)
							{
								num21 = 186;
								num24 = WorldGen.genRand.Next(7);
							}
							if (num24 >= 0)
							{
								WorldGen.PlaceTile(num22, num23, num21, true, false, -1, num24);
							}
							if ((int)Main.tile[num22, num23].type == num21)
							{
								flag3 = true;
							}
						}
					}
					num19++;
				}
				int num25 = 0;
				while ((double)num25 < (double)Main.maxTilesX * 0.0035)
				{
					int num26 = Main.maxTilesX / 2;
					bool flag4 = false;
					while (!flag4 && num26 > 0)
					{
						num26--;
						int num27 = WorldGen.genRand.Next(25, Main.maxTilesX - 25);
						int num28 = WorldGen.genRand.Next(10, (int)Main.worldSurface);
						if (!Main.tile[num27, num28].active() && Main.tile[num27, num28].wall > 0)
						{
							int num29 = 186;
							while (!Main.tile[num27, num28 + 1].active() && num28 < Main.maxTilesY - 5)
							{
								num28++;
							}
							int num30 = WorldGen.genRand.Next(7, 13);
							if (num28 > Main.maxTilesY - 300 || Main.wallDungeon[(int)Main.tile[num27, num28].wall] || Main.tile[num27, num28 + 1].type == 30 || Main.tile[num27, num28 + 1].type == 19)
							{
								num30 = -1;
							}
							if (Main.tile[num27, num28 + 1].type == 25)
							{
								num30 = WorldGen.genRand.Next(7);
							}
							if (Main.tile[num27, num28 + 1].type == 147 || Main.tile[num27, num28 + 1].type == 161 || Main.tile[num27, num28 + 1].type == 162)
							{
								num30 = WorldGen.genRand.Next(26, 32);
							}
							if (Main.tile[num27, num28 + 1].type == 2 || Main.tile[num27 - 1, num28 + 1].type == 2 || Main.tile[num27 + 1, num28 + 1].type == 2)
							{
								num29 = 187;
								num30 = WorldGen.genRand.Next(14, 17);
							}
							if (Main.tile[num27, num28 + 1].type == 151 || Main.tile[num27, num28 + 1].type == 274)
							{
								num29 = 186;
								num30 = WorldGen.genRand.Next(7);
							}
							if (num30 >= 0)
							{
								WorldGen.PlaceTile(num27, num28, num29, true, false, -1, num30);
							}
							if ((int)Main.tile[num27, num28].type == num29)
							{
								flag4 = true;
							}
							if (flag4 && num30 <= 7)
							{
								int num31 = WorldGen.genRand.Next(1, 5);
								for (int k = 0; k < num31; k++)
								{
									int num32 = num27 + WorldGen.genRand.Next(-10, 11);
									int num33 = num28 - WorldGen.genRand.Next(5);
									if (!Main.tile[num32, num33].active())
									{
										while (!Main.tile[num32, num33 + 1].active() && num33 < Main.maxTilesY - 5)
										{
											num33++;
										}
										int x3 = WorldGen.genRand.Next(12, 36);
										WorldGen.PlaceSmallPile(num32, num33, x3, 0, 185);
									}
								}
							}
						}
					}
					num25++;
				}
				int num34 = 0;
				while ((double)num34 < (double)Main.maxTilesX * 0.6)
				{
					int num35 = Main.maxTilesX / 2;
					bool flag5 = false;
					while (!flag5 && num35 > 0)
					{
						num35--;
						int num36 = WorldGen.genRand.Next(25, Main.maxTilesX - 25);
						int num37 = WorldGen.genRand.Next((int)Main.worldSurface, Main.maxTilesY - 20);
						if (Main.tile[num36, num37].wall == 87 && WorldGen.genRand.Next(2) == 0)
						{
							num36 = WorldGen.genRand.Next(25, Main.maxTilesX - 25);
							num37 = WorldGen.genRand.Next((int)Main.worldSurface, Main.maxTilesY - 20);
						}
						while (WorldGen.oceanDepths(num36, num37))
						{
							num36 = WorldGen.genRand.Next(25, Main.maxTilesX - 25);
							num37 = WorldGen.genRand.Next((int)Main.worldSurface, Main.maxTilesY - 20);
						}
						if (!Main.tile[num36, num37].active())
						{
							while (!Main.tile[num36, num37 + 1].active() && num37 < Main.maxTilesY - 5)
							{
								num37++;
							}
							int num38 = WorldGen.genRand.Next(2);
							int num39 = WorldGen.genRand.Next(36);
							if (num39 >= 28 && num39 <= 35)
							{
								num39 = WorldGen.genRand.Next(36);
							}
							if (num38 == 1)
							{
								num39 = WorldGen.genRand.Next(25);
								if (num39 >= 16 && num39 <= 24)
								{
									num39 = WorldGen.genRand.Next(25);
								}
							}
							if (num37 > Main.maxTilesY - 300)
							{
								if (num38 == 0)
								{
									num39 = WorldGen.genRand.Next(12, 28);
								}
								if (num38 == 1)
								{
									num39 = WorldGen.genRand.Next(6, 16);
								}
							}
							if (Main.wallDungeon[(int)Main.tile[num36, num37].wall] || Main.tile[num36, num37 + 1].type == 30 || Main.tile[num36, num37 + 1].type == 19 || Main.tile[num36, num37 + 1].type == 25 || Main.tile[num36, num37 + 1].type == 203 || Main.tile[num36, num37].wall == 87)
							{
								if (num38 == 0 && num39 < 12)
								{
									num39 += 12;
								}
								if (num38 == 1 && num39 < 6)
								{
									num39 += 6;
								}
								if (num38 == 1 && num39 >= 17)
								{
									num39 -= 10;
								}
							}
							if (Main.tile[num36, num37 + 1].type == 147 || Main.tile[num36, num37 + 1].type == 161 || Main.tile[num36, num37 + 1].type == 162)
							{
								if (num38 == 0 && num39 < 12)
								{
									num39 += 36;
								}
								if (num38 == 1 && num39 >= 20)
								{
									num39 += 6;
								}
								if (num38 == 1 && num39 < 6)
								{
									num39 += 25;
								}
							}
							if (Main.tile[num36, num37 + 1].type == 151 || Main.tile[num36, num37 + 1].type == 274)
							{
								if (num38 == 0)
								{
									num39 = WorldGen.genRand.Next(12, 28);
								}
								if (num38 == 1)
								{
									num39 = WorldGen.genRand.Next(12, 19);
								}
							}
							if (Main.tile[num36, num37 + 1].type == 368)
							{
								if (num38 == 0)
								{
									num39 = WorldGen.genRand.Next(60, 66);
								}
								if (num38 == 1)
								{
									num39 = WorldGen.genRand.Next(47, 53);
								}
							}
							if (Main.tile[num36, num37 + 1].type == 367)
							{
								if (num38 == 0)
								{
									num39 = WorldGen.genRand.Next(66, 72);
								}
								if (num38 == 1)
								{
									num39 = WorldGen.genRand.Next(53, 59);
								}
							}
							if (Main.wallDungeon[(int)Main.tile[num36, num37].wall] && WorldGen.genRand.Next(3) != 0)
							{
								flag5 = true;
							}
							else if (!Main.tile[num36, num37].shimmer())
							{
								flag5 = WorldGen.PlaceSmallPile(num36, num37, num39, num38, 185);
							}
							if (flag5 && num38 == 1 && num39 >= 6 && num39 <= 15)
							{
								int num40 = WorldGen.genRand.Next(1, 5);
								for (int l = 0; l < num40; l++)
								{
									int num41 = num36 + WorldGen.genRand.Next(-10, 11);
									int num42 = num37 - WorldGen.genRand.Next(5);
									if (!Main.tile[num41, num42].active())
									{
										while (!Main.tile[num41, num42 + 1].active() && num42 < Main.maxTilesY - 5)
										{
											num42++;
										}
										int x4 = WorldGen.genRand.Next(12, 36);
										WorldGen.PlaceSmallPile(num41, num42, x4, 0, 185);
									}
								}
							}
						}
					}
					num34++;
				}
				int num43 = 0;
				while ((double)num43 < (double)Main.maxTilesX * 0.02)
				{
					int num44 = Main.maxTilesX / 2;
					bool flag6 = false;
					while (!flag6 && num44 > 0)
					{
						num44--;
						int num45 = WorldGen.genRand.Next(25, Main.maxTilesX - 25);
						int num46 = WorldGen.genRand.Next(15, (int)Main.worldSurface);
						while (WorldGen.oceanDepths(num45, num46))
						{
							num45 = WorldGen.genRand.Next(25, Main.maxTilesX - 25);
							num46 = WorldGen.genRand.Next(15, (int)Main.worldSurface);
						}
						if (!Main.tile[num45, num46].active())
						{
							while (!Main.tile[num45, num46 + 1].active() && num46 < Main.maxTilesY - 5)
							{
								num46++;
							}
							int num47 = WorldGen.genRand.Next(2);
							int num48 = WorldGen.genRand.Next(11);
							if (num47 == 1)
							{
								num48 = WorldGen.genRand.Next(5);
							}
							if (Main.tile[num45, num46 + 1].type == 147 || Main.tile[num45, num46 + 1].type == 161 || Main.tile[num45, num46 + 1].type == 162)
							{
								if (num47 == 0 && num48 < 12)
								{
									num48 += 36;
								}
								if (num47 == 1 && num48 >= 20)
								{
									num48 += 6;
								}
								if (num47 == 1 && num48 < 6)
								{
									num48 += 25;
								}
							}
							if (Main.tile[num45, num46 + 1].type == 2 && num47 == 1)
							{
								num48 = WorldGen.genRand.Next(38, 41);
							}
							if (Main.tile[num45, num46 + 1].type == 151 || Main.tile[num45, num46 + 1].type == 274)
							{
								if (num47 == 0)
								{
									num48 = WorldGen.genRand.Next(12, 28);
								}
								if (num47 == 1)
								{
									num48 = WorldGen.genRand.Next(12, 19);
								}
							}
							if (!Main.wallDungeon[(int)Main.tile[num45, num46].wall] && Main.tile[num45, num46 + 1].type != 30 && Main.tile[num45, num46 + 1].type != 19 && Main.tile[num45, num46 + 1].type != 41 && Main.tile[num45, num46 + 1].type != 43 && Main.tile[num45, num46 + 1].type != 44 && Main.tile[num45, num46 + 1].type != 481 && Main.tile[num45, num46 + 1].type != 482 && Main.tile[num45, num46 + 1].type != 483 && Main.tile[num45, num46 + 1].type != 45 && Main.tile[num45, num46 + 1].type != 46 && Main.tile[num45, num46 + 1].type != 47 && Main.tile[num45, num46 + 1].type != 175 && Main.tile[num45, num46 + 1].type != 176 && Main.tile[num45, num46 + 1].type != 177 && Main.tile[num45, num46 + 1].type != 53 && Main.tile[num45, num46 + 1].type != 25 && Main.tile[num45, num46 + 1].type != 203)
							{
								flag6 = WorldGen.PlaceSmallPile(num45, num46, num48, num47, 185);
							}
						}
					}
					num43++;
				}
				int num49 = 0;
				while ((double)num49 < (double)Main.maxTilesX * 0.15)
				{
					int num50 = Main.maxTilesX / 2;
					bool flag7 = false;
					while (!flag7 && num50 > 0)
					{
						num50--;
						int num51 = WorldGen.genRand.Next(25, Main.maxTilesX - 25);
						int num52 = WorldGen.genRand.Next(15, (int)Main.worldSurface);
						if (!Main.tile[num51, num52].active())
						{
							if (Main.tile[num51, num52].wall != 2)
							{
								if (Main.tile[num51, num52].wall != 40)
								{
									continue;
								}
							}
							while (!Main.tile[num51, num52 + 1].active() && num52 < Main.maxTilesY - 5)
							{
								num52++;
							}
							int num53 = WorldGen.genRand.Next(2);
							int num54 = WorldGen.genRand.Next(11);
							if (num53 == 1)
							{
								num54 = WorldGen.genRand.Next(5);
							}
							if (Main.tile[num51, num52 + 1].type == 147 || Main.tile[num51, num52 + 1].type == 161 || Main.tile[num51, num52 + 1].type == 162)
							{
								if (num53 == 0 && num54 < 12)
								{
									num54 += 36;
								}
								if (num53 == 1 && num54 >= 20)
								{
									num54 += 6;
								}
								if (num53 == 1 && num54 < 6)
								{
									num54 += 25;
								}
							}
							if (Main.tile[num51, num52 + 1].type == 2 && num53 == 1)
							{
								num54 = WorldGen.genRand.Next(38, 41);
							}
							if (Main.tile[num51, num52 + 1].type == 151 || Main.tile[num51, num52 + 1].type == 274)
							{
								if (num53 == 0)
								{
									num54 = WorldGen.genRand.Next(12, 28);
								}
								if (num53 == 1)
								{
									num54 = WorldGen.genRand.Next(12, 19);
								}
							}
							if ((Main.tile[num51, num52].liquid != 255 || Main.tile[num51, num52 + 1].type != 53 || Main.tile[num51, num52].wall != 0) && !Main.wallDungeon[(int)Main.tile[num51, num52].wall] && Main.tile[num51, num52 + 1].type != 30 && Main.tile[num51, num52 + 1].type != 19 && Main.tile[num51, num52 + 1].type != 41 && Main.tile[num51, num52 + 1].type != 43 && Main.tile[num51, num52 + 1].type != 44 && Main.tile[num51, num52 + 1].type != 481 && Main.tile[num51, num52 + 1].type != 482 && Main.tile[num51, num52 + 1].type != 483 && Main.tile[num51, num52 + 1].type != 45 && Main.tile[num51, num52 + 1].type != 46 && Main.tile[num51, num52 + 1].type != 47 && Main.tile[num51, num52 + 1].type != 175 && Main.tile[num51, num52 + 1].type != 176 && Main.tile[num51, num52 + 1].type != 177 && Main.tile[num51, num52 + 1].type != 25 && Main.tile[num51, num52 + 1].type != 203)
							{
								flag7 = WorldGen.PlaceSmallPile(num51, num52, num54, num53, 185);
							}
						}
					}
					num49++;
				}
				Main.tileSolid[190] = true;
				Main.tileSolid[192] = true;
				Main.tileSolid[196] = true;
				Main.tileSolid[189] = true;
				Main.tileSolid[202] = true;
				Main.tileSolid[225] = true;
				Main.tileSolid[460] = true;
				Main.tileSolid[138] = true;
			});
			WorldGen.AddGenerationPass("Spawn Point", delegate(GenerationProgress progress, GameConfiguration passConfig)
			{
				progress.Set(1.0);
				int num = 5;
				bool flag = true;
				int num2 = Main.maxTilesX / 2;
				if (Main.tenthAnniversaryWorld && !WorldGen.remixWorldGen)
				{
					int num3 = GenVars.beachBordersWidth + 15;
					if (WorldGen.genRand.Next(2) == 0)
					{
						num2 = num3;
					}
					else
					{
						num2 = Main.maxTilesX - num3;
					}
				}
				while (flag)
				{
					int num4 = num2 + WorldGen.genRand.Next(-num, num + 1);
					for (int i = 0; i < Main.maxTilesY; i++)
					{
						if (Main.tile[num4, i].active())
						{
							Main.spawnTileX = num4;
							Main.spawnTileY = i;
							break;
						}
					}
					flag = false;
					num++;
					if ((double)Main.spawnTileY > Main.worldSurface)
					{
						flag = true;
					}
					if (Main.tile[Main.spawnTileX, Main.spawnTileY - 1].liquid > 0)
					{
						flag = true;
					}
				}
				int num5 = 10;
				while ((double)Main.spawnTileY > Main.worldSurface)
				{
					int num6 = WorldGen.genRand.Next(num2 - num5, num2 + num5);
					for (int j = 0; j < Main.maxTilesY; j++)
					{
						if (Main.tile[num6, j].active())
						{
							Main.spawnTileX = num6;
							Main.spawnTileY = j;
							break;
						}
					}
					num5++;
				}
				if (WorldGen.remixWorldGen)
				{
					int num7 = Main.maxTilesY - 10;
					while (WorldGen.SolidTile(Main.spawnTileX, num7, false))
					{
						num7--;
					}
					Main.spawnTileY = num7 + 1;
				}
			});
			WorldGen.AddGenerationPass("Grass Wall", delegate(GenerationProgress progress, GameConfiguration passConfig)
			{
				WorldGen.maxTileCount = 3500;
				progress.Set(1.0);
				for (int i = 50; i < Main.maxTilesX - 50; i++)
				{
					int num = 0;
					while ((double)num < Main.worldSurface - 10.0)
					{
						if (WorldGen.genRand.Next(4) == 0)
						{
							bool flag = false;
							int num2 = -1;
							int num3 = -1;
							if (Main.tile[i, num].active() && Main.tile[i, num].type == 2 && (Main.tile[i, num].wall == 2 || Main.tile[i, num].wall == 63))
							{
								for (int j = i - 1; j <= i + 1; j++)
								{
									for (int k = num - 1; k <= num + 1; k++)
									{
										if (Main.tile[j, k].wall == 0 && !WorldGen.SolidTile(j, k, false))
										{
											flag = true;
										}
									}
								}
								if (flag)
								{
									for (int l = i - 1; l <= i + 1; l++)
									{
										for (int m = num - 1; m <= num + 1; m++)
										{
											if ((Main.tile[l, m].wall == 2 || Main.tile[l, m].wall == 15) && !WorldGen.SolidTile(l, m, false))
											{
												num2 = l;
												num3 = m;
											}
										}
									}
								}
							}
							if (flag && num2 > -1 && num3 > -1 && WorldGen.countDirtTiles(num2, num3) < WorldGen.maxTileCount)
							{
								try
								{
									ushort wallType = 63;
									if (WorldGen.dontStarveWorldGen && WorldGen.genRand.Next(3) != 0)
									{
										wallType = 62;
									}
									WorldGen.Spread.Wall2(num2, num3, (int)wallType);
								}
								catch
								{
								}
							}
						}
						num++;
					}
				}
				for (int n = 5; n < Main.maxTilesX - 5; n++)
				{
					int num4 = 10;
					while ((double)num4 < Main.worldSurface - 1.0)
					{
						if (Main.tile[n, num4].wall == 63 && WorldGen.genRand.Next(10) == 0)
						{
							Main.tile[n, num4].wall = 65;
						}
						if (Main.tile[n, num4].active() && Main.tile[n, num4].type == 0)
						{
							bool flag2 = false;
							for (int num5 = n - 1; num5 <= n + 1; num5++)
							{
								for (int num6 = num4 - 1; num6 <= num4 + 1; num6++)
								{
									if (Main.tile[num5, num6].wall == 63 || Main.tile[num5, num6].wall == 65)
									{
										flag2 = true;
										break;
									}
								}
							}
							if (flag2)
							{
								WorldGen.SpreadGrass(n, num4, 0, 2, true, default(TileColorCache));
							}
						}
						num4++;
					}
				}
			});
			WorldGen.AddGenerationPass("Guide", delegate(GenerationProgress progress, GameConfiguration passConfig)
			{
				progress.Set(1.0);
				if (Main.tenthAnniversaryWorld)
				{
					BirthdayParty.GenuineParty = true;
					BirthdayParty.PartyDaysOnCooldown = 5;
					if (WorldGen.getGoodWorldGen)
					{
						Main.afterPartyOfDoom = true;
					}
					int num;
					if (WorldGen.remixWorldGen)
					{
						num = NPC.NewNPC(new EntitySource_WorldGen(), Main.spawnTileX * 16, Main.spawnTileY * 16, 441, 0, 0f, 0f, 0f, 0f, 255);
						NPC.savedTaxCollector = true;
					}
					else
					{
						num = NPC.NewNPC(new EntitySource_WorldGen(), Main.spawnTileX * 16, Main.spawnTileY * 16, 22, 0, 0f, 0f, 0f, 0f, 255);
					}
					Main.npc[num].homeTileX = Main.spawnTileX;
					Main.npc[num].homeTileY = Main.spawnTileY;
					Main.npc[num].direction = 1;
					Main.npc[num].homeless = true;
					Main.npc[num].GivenName = Language.GetTextValue("GuideNames.Andrew");
					BirthdayParty.CelebratingNPCs.Add(num);
					Point adjustedFloorPosition = WorldGen.GetAdjustedFloorPosition(Main.spawnTileX + 2, Main.spawnTileY);
					num = NPC.NewNPC(new EntitySource_WorldGen(), adjustedFloorPosition.X * 16, adjustedFloorPosition.Y * 16, 178, 0, 0f, 0f, 0f, 0f, 255);
					Main.npc[num].homeTileX = adjustedFloorPosition.X;
					Main.npc[num].homeTileY = adjustedFloorPosition.Y;
					Main.npc[num].direction = -1;
					Main.npc[num].homeless = true;
					Main.npc[num].GivenName = Language.GetTextValue("SteampunkerNames.Whitney");
					BirthdayParty.CelebratingNPCs.Add(num);
					adjustedFloorPosition = WorldGen.GetAdjustedFloorPosition(Main.spawnTileX - 2, Main.spawnTileY);
					num = NPC.NewNPC(new EntitySource_WorldGen(), adjustedFloorPosition.X * 16, adjustedFloorPosition.Y * 16, 663, 0, 0f, 0f, 0f, 0f, 255);
					Main.npc[num].homeTileX = adjustedFloorPosition.X;
					Main.npc[num].homeTileY = adjustedFloorPosition.Y;
					Main.npc[num].direction = 1;
					Main.npc[num].homeless = true;
					Main.npc[num].GivenName = Language.GetTextValue("PrincessNames.Yorai");
					BirthdayParty.CelebratingNPCs.Add(num);
					NPC.unlockedPrincessSpawn = true;
					adjustedFloorPosition = WorldGen.GetAdjustedFloorPosition(Main.spawnTileX + 4, Main.spawnTileY);
					num = NPC.NewNPC(new EntitySource_WorldGen(), adjustedFloorPosition.X * 16, adjustedFloorPosition.Y * 16, 208, 0, 0f, 0f, 0f, 0f, 255);
					Main.npc[num].homeTileX = adjustedFloorPosition.X;
					Main.npc[num].homeTileY = adjustedFloorPosition.Y;
					Main.npc[num].direction = -1;
					Main.npc[num].homeless = true;
					Main.npc[num].GivenName = Language.GetTextValue("PartyGirlNames.Amanda");
					BirthdayParty.CelebratingNPCs.Add(num);
					NPC.unlockedPartyGirlSpawn = true;
					adjustedFloorPosition = WorldGen.GetAdjustedFloorPosition(Main.spawnTileX - 4, Main.spawnTileY);
					if (Main.remixWorld)
					{
						num = NPC.NewNPC(new EntitySource_WorldGen(), adjustedFloorPosition.X * 16, adjustedFloorPosition.Y * 16, 681, 0, 0f, 0f, 0f, 0f, 255);
						Main.npc[num].GivenName = Language.GetTextValue("SlimeNames_Rainbow.Slimestar");
						NPC.unlockedSlimeRainbowSpawn = true;
					}
					else
					{
						num = NPC.NewNPC(new EntitySource_WorldGen(), adjustedFloorPosition.X * 16, adjustedFloorPosition.Y * 16, 656, 0, 0f, 0f, 0f, 0f, 255);
						NPC.boughtBunny = true;
						Main.npc[num].townNpcVariationIndex = 1;
					}
					Main.npc[num].homeTileX = adjustedFloorPosition.X;
					Main.npc[num].homeTileY = adjustedFloorPosition.Y;
					Main.npc[num].direction = 1;
					Main.npc[num].homeless = true;
					return;
				}
				if (WorldGen.remixWorldGen)
				{
					int num2 = NPC.NewNPC(new EntitySource_WorldGen(), Main.spawnTileX * 16, Main.spawnTileY * 16, 441, 0, 0f, 0f, 0f, 0f, 255);
					Main.npc[num2].homeTileX = Main.spawnTileX;
					Main.npc[num2].homeTileY = Main.spawnTileY;
					Main.npc[num2].direction = 1;
					Main.npc[num2].homeless = true;
					NPC.savedTaxCollector = true;
					return;
				}
				if (WorldGen.notTheBees)
				{
					int num3 = NPC.NewNPC(new EntitySource_WorldGen(), Main.spawnTileX * 16, Main.spawnTileY * 16, 17, 0, 0f, 0f, 0f, 0f, 255);
					Main.npc[num3].homeTileX = Main.spawnTileX;
					Main.npc[num3].homeTileY = Main.spawnTileY;
					Main.npc[num3].direction = 1;
					Main.npc[num3].homeless = true;
					NPC.unlockedMerchantSpawn = true;
					return;
				}
				if (WorldGen.drunkWorldGen)
				{
					int num4 = NPC.NewNPC(new EntitySource_WorldGen(), Main.spawnTileX * 16, Main.spawnTileY * 16, 208, 0, 0f, 0f, 0f, 0f, 255);
					Main.npc[num4].homeTileX = Main.spawnTileX;
					Main.npc[num4].homeTileY = Main.spawnTileY;
					Main.npc[num4].direction = 1;
					Main.npc[num4].homeless = true;
					NPC.unlockedPartyGirlSpawn = true;
					return;
				}
				if (WorldGen.getGoodWorldGen)
				{
					int num5 = NPC.NewNPC(new EntitySource_WorldGen(), Main.spawnTileX * 16, Main.spawnTileY * 16, 38, 0, 0f, 0f, 0f, 0f, 255);
					Main.npc[num5].homeTileX = Main.spawnTileX;
					Main.npc[num5].homeTileY = Main.spawnTileY;
					Main.npc[num5].direction = 1;
					Main.npc[num5].homeless = true;
					NPC.unlockedDemolitionistSpawn = true;
					return;
				}
				int num6 = NPC.NewNPC(new EntitySource_WorldGen(), Main.spawnTileX * 16, Main.spawnTileY * 16, 22, 0, 0f, 0f, 0f, 0f, 255);
				Main.npc[num6].homeTileX = Main.spawnTileX;
				Main.npc[num6].homeTileY = Main.spawnTileY;
				Main.npc[num6].direction = 1;
				Main.npc[num6].homeless = true;
			});
			WorldGen.AddGenerationPass("Sunflowers", delegate(GenerationProgress progress, GameConfiguration passConfig)
			{
				progress.Message = Lang.gen[39].Value;
				double num = (double)Main.maxTilesX * 0.002;
				int num2 = 0;
				while ((double)num2 < num)
				{
					progress.Set((double)num2 / num);
					int num3 = Main.maxTilesX / 2;
					int num4 = WorldGen.genRand.Next(Main.maxTilesX);
					int num5 = num4 - WorldGen.genRand.Next(10) - 7;
					int num6 = num4 + WorldGen.genRand.Next(10) + 7;
					if (num5 < 0)
					{
						num5 = 0;
					}
					if (num6 > Main.maxTilesX - 1)
					{
						num6 = Main.maxTilesX - 1;
					}
					int num7 = 1;
					int num8 = (int)Main.worldSurface - 1;
					for (int i = num5; i < num6; i++)
					{
						for (int j = num7; j < num8; j++)
						{
							if (Main.tile[i, j].type == 2 && Main.tile[i, j].active() && !Main.tile[i, j - 1].active())
							{
								WorldGen.PlaceTile(i, j - 1, 27, true, false, -1, 0);
							}
							if (Main.tile[i, j].active())
							{
								break;
							}
						}
					}
					num2++;
				}
			});
			WorldGen.AddGenerationPass("Planting Trees", delegate(GenerationProgress progress, GameConfiguration passConfig)
			{
				progress.Message = Lang.gen[40].Value;
				if (!WorldGen.drunkWorldGen && !Main.tenthAnniversaryWorld)
				{
					int num = 0;
					while ((double)num < (double)Main.maxTilesX * 0.003)
					{
						progress.Set((double)num / ((double)Main.maxTilesX * 0.003));
						int num2 = WorldGen.genRand.Next(50, Main.maxTilesX - 50);
						int num3 = WorldGen.genRand.Next(25, 50);
						for (int i = num2 - num3; i < num2 + num3; i++)
						{
							int num4 = 20;
							while ((double)num4 < Main.worldSurface)
							{
								WorldGen.GrowEpicTree(i, num4);
								num4++;
							}
						}
						num++;
					}
				}
				WorldGen.AddTrees(false);
			});
			WorldGen.AddGenerationPass("Herbs", delegate(GenerationProgress progress, GameConfiguration passConfig)
			{
				double num = (double)Main.maxTilesX * 1.7;
				if (WorldGen.remixWorldGen)
				{
					num *= 5.0;
				}
				progress.Message = Lang.gen[41].Value;
				int num2 = 0;
				while ((double)num2 < num)
				{
					progress.Set((double)num2 / num);
					WorldGen.PlantAlch();
					num2++;
				}
			});
			WorldGen.AddGenerationPass("Dye Plants", delegate(GenerationProgress progress, GameConfiguration passConfig)
			{
				progress.Set(1.0);
				for (int i = 0; i < Main.maxTilesX; i++)
				{
					WorldGen.plantDye(WorldGen.genRand.Next(100, Main.maxTilesX - 100), WorldGen.genRand.Next(100, Main.UnderworldLayer), false);
				}
				WorldGen.MatureTheHerbPlants();
				WorldGen.GrowGlowTulips();
			});
			WorldGen.AddGenerationPass("Webs And Honey", delegate(GenerationProgress progress, GameConfiguration passConfig)
			{
				progress.Set(1.0);
				for (int i = 100; i < Main.maxTilesX - 100; i++)
				{
					int num = (int)Main.worldSurface;
					if (WorldGen.dontStarveWorldGen)
					{
						num = 50;
					}
					for (int j = num; j < Main.maxTilesY - 100; j++)
					{
						if (Main.tile[i, j].wall == 86)
						{
							if (Main.tile[i, j].liquid > 0)
							{
								Main.tile[i, j].honey(true);
							}
							if (WorldGen.genRand.Next(3) == 0)
							{
								WorldGen.PlaceTight(i, j, false);
							}
						}
						if (Main.tile[i, j].wall == 62)
						{
							Main.tile[i, j].liquid = 0;
							Main.tile[i, j].lava(false);
						}
						if (Main.tile[i, j].wall == 62 && !Main.tile[i, j].active() && WorldGen.genRand.Next(10) != 0)
						{
							int num2 = WorldGen.genRand.Next(2, 5);
							int num3 = i - num2;
							int num4 = i + num2;
							int num5 = j - num2;
							int num6 = j + num2;
							bool flag = false;
							for (int k = num3; k <= num4; k++)
							{
								for (int l = num5; l <= num6; l++)
								{
									if (WorldGen.SolidTile(k, l, false))
									{
										flag = true;
										break;
									}
								}
							}
							if (flag)
							{
								WorldGen.PlaceTile(i, j, 51, true, false, -1, 0);
								WorldGen.TileFrame(i, j, false, false);
							}
						}
					}
				}
			});
			WorldGen.AddGenerationPass("Weeds", delegate(GenerationProgress progress, GameConfiguration passConfig)
			{
				progress.Message = Lang.gen[42].Value;
				if (Main.halloween)
				{
					for (int i = 40; i < Main.maxTilesX - 40; i++)
					{
						int num = 50;
						while ((double)num < Main.worldSurface)
						{
							if (Main.tile[i, num].active() && Main.tile[i, num].type == 2 && WorldGen.genRand.Next(15) == 0)
							{
								WorldGen.PlacePumpkin(i, num - 1);
								int num2 = WorldGen.genRand.Next(5);
								for (int j = 0; j < num2; j++)
								{
									WorldGen.GrowPumpkin(i, num - 1, 254);
								}
							}
							num++;
						}
					}
				}
				for (int k = 0; k < Main.maxTilesX; k++)
				{
					progress.Set((double)k / (double)Main.maxTilesX);
					for (int l = 1; l < Main.maxTilesY; l++)
					{
						if (Main.tile[k, l].type == 2 && Main.tile[k, l].nactive())
						{
							if (!Main.tile[k, l - 1].active())
							{
								WorldGen.PlaceTile(k, l - 1, 3, true, false, -1, 0);
								Main.tile[k, l - 1].CopyPaintAndCoating(Main.tile[k, l]);
							}
						}
						else if (Main.tile[k, l].type == 23 && Main.tile[k, l].nactive())
						{
							if (!Main.tile[k, l - 1].active())
							{
								WorldGen.PlaceTile(k, l - 1, 24, true, false, -1, 0);
							}
						}
						else if (Main.tile[k, l].type == 199 && Main.tile[k, l].nactive())
						{
							if (!Main.tile[k, l - 1].active())
							{
								WorldGen.PlaceTile(k, l - 1, 201, true, false, -1, 0);
							}
						}
						else if (Main.tile[k, l].type == 633 && Main.tile[k, l].nactive() && !Main.tile[k, l - 1].active())
						{
							WorldGen.PlaceTile(k, l - 1, 637, true, false, -1, 0);
						}
					}
				}
			});
			WorldGen.AddGenerationPass("Glowing Mushrooms and Jungle Plants", delegate(GenerationProgress progress, GameConfiguration passConfig)
			{
				progress.Set(1.0);
				for (int i = 0; i < Main.maxTilesX; i++)
				{
					for (int j = 0; j < Main.maxTilesY; j++)
					{
						if (Main.tile[i, j].active())
						{
							if (j >= (int)Main.worldSurface && Main.tile[i, j].type == 70 && !Main.tile[i, j - 1].active())
							{
								WorldGen.GrowTree(i, j);
								if (!Main.tile[i, j - 1].active())
								{
									WorldGen.GrowTree(i, j);
									if (!Main.tile[i, j - 1].active())
									{
										WorldGen.GrowTree(i, j);
										if (!Main.tile[i, j - 1].active())
										{
											WorldGen.PlaceTile(i, j - 1, 71, true, false, -1, 0);
										}
									}
								}
							}
							if (Main.tile[i, j].type == 60 && !Main.tile[i, j - 1].active())
							{
								WorldGen.PlaceTile(i, j - 1, 61, true, false, -1, 0);
							}
						}
					}
				}
			});
			WorldGen.AddGenerationPass("Jungle Plants", delegate(GenerationProgress progress, GameConfiguration passConfig)
			{
				progress.Set(1.0);
				for (int i = 0; i < Main.maxTilesX * 100; i++)
				{
					int num = WorldGen.genRand.Next(40, Main.maxTilesX / 2 - 40);
					if (GenVars.dungeonSide < 0)
					{
						num += Main.maxTilesX / 2;
					}
					int num2 = WorldGen.genRand.Next(Main.maxTilesY - 300);
					while (!Main.tile[num, num2].active() && num2 < Main.maxTilesY - 300)
					{
						num2++;
					}
					if (Main.tile[num, num2].active() && Main.tile[num, num2].type == 60)
					{
						num2--;
						WorldGen.PlaceJunglePlant(num, num2, 233, WorldGen.genRand.Next(8), 0);
						if (Main.tile[num, num2].type != 233)
						{
							WorldGen.PlaceJunglePlant(num, num2, 233, WorldGen.genRand.Next(12), 1);
						}
					}
				}
			});
			WorldGen.AddGenerationPass("Vines", delegate(GenerationProgress progress, GameConfiguration passConfig)
			{
				progress.Message = Lang.gen[43].Value;
				for (int i = 5; i < Main.maxTilesX - 5; i++)
				{
					progress.Set((double)i / (double)Main.maxTilesX);
					int num = 0;
					ushort type = 52;
					int num2 = (int)Main.worldSurface;
					if (WorldGen.remixWorldGen)
					{
						num2 = Main.maxTilesY - 200;
					}
					for (int j = 0; j < num2; j++)
					{
						if (num > 0 && !Main.tile[i, j].active())
						{
							Main.tile[i, j].active(true);
							Main.tile[i, j].type = type;
							Main.tile[i, j].CopyPaintAndCoating(Main.tile[i, j - 1]);
							num--;
						}
						else
						{
							num = 0;
						}
						if (Main.tile[i, j].active() && !Main.tile[i, j].bottomSlope() && (Main.tile[i, j].type == 2 || (Main.tile[i, j].type == 192 && WorldGen.genRand.Next(4) == 0)) && WorldGen.GrowMoreVines(i, j))
						{
							type = 52;
							if (Main.tile[i, j].wall == 68 || Main.tile[i, j].wall == 65 || Main.tile[i, j].wall == 66 || Main.tile[i, j].wall == 63)
							{
								type = 382;
							}
							else if (Main.tile[i, j + 1].wall == 68 || Main.tile[i, j + 1].wall == 65 || Main.tile[i, j + 1].wall == 66 || Main.tile[i, j + 1].wall == 63)
							{
								type = 382;
							}
							if (WorldGen.remixWorldGen && WorldGen.genRand.Next(5) == 0)
							{
								type = 382;
							}
							if (WorldGen.genRand.Next(5) < 3)
							{
								num = WorldGen.genRand.Next(1, 10);
							}
						}
					}
					num = 0;
					for (int k = 5; k < Main.maxTilesY - 5; k++)
					{
						if (num > 0 && !Main.tile[i, k].active())
						{
							Main.tile[i, k].active(true);
							Main.tile[i, k].type = 62;
							num--;
						}
						else
						{
							num = 0;
						}
						if (Main.tile[i, k].active() && Main.tile[i, k].type == 60 && !Main.tile[i, k].bottomSlope() && WorldGen.GrowMoreVines(i, k))
						{
							if (WorldGen.notTheBees && k < Main.maxTilesY - 10 && Main.tile[i, k - 1].active() && !Main.tile[i, k - 1].bottomSlope() && Main.tile[i + 1, k - 1].active() && !Main.tile[i + 1, k - 1].bottomSlope() && (Main.tile[i, k - 1].type == 60 || Main.tile[i, k - 1].type == 444 || Main.tile[i, k - 1].type == 230))
							{
								bool flag = true;
								for (int l = i; l < i + 2; l++)
								{
									for (int m = k + 1; m < k + 3; m++)
									{
										if (Main.tile[l, m].active() && (!Main.tileCut[(int)Main.tile[l, m].type] || Main.tile[l, m].type == 444))
										{
											flag = false;
											break;
										}
										if (Main.tile[l, m].liquid > 0 || Main.wallHouse[(int)Main.tile[l, m].wall])
										{
											flag = false;
											break;
										}
									}
									if (!flag)
									{
										break;
									}
								}
								if (flag && WorldGen.CountNearBlocksTypes(i, k, WorldGen.genRand.Next(3, 10), 1, new int[]
								{
									444
								}) > 0)
								{
									flag = false;
								}
								if (flag)
								{
									for (int n = i; n < i + 2; n++)
									{
										for (int num3 = k + 1; num3 < k + 3; num3++)
										{
											WorldGen.KillTile(n, num3, false, false, false);
										}
									}
									for (int num4 = i; num4 < i + 2; num4++)
									{
										for (int num5 = k + 1; num5 < k + 3; num5++)
										{
											Main.tile[num4, num5].active(true);
											Main.tile[num4, num5].type = 444;
											Main.tile[num4, num5].frameX = (short)((num4 - i) * 18);
											Main.tile[num4, num5].frameY = (short)((num5 - k - 1) * 18);
										}
									}
									goto IL_7C0;
								}
							}
							else if (i < Main.maxTilesX - 1 && k < Main.maxTilesY - 2 && Main.tile[i + 1, k].active() && Main.tile[i + 1, k].type == 60 && !Main.tile[i + 1, k].bottomSlope() && WorldGen.genRand.Next(40) == 0)
							{
								bool flag2 = true;
								for (int num6 = i; num6 < i + 2; num6++)
								{
									for (int num7 = k + 1; num7 < k + 3; num7++)
									{
										if (Main.tile[num6, num7].active() && (!Main.tileCut[(int)Main.tile[num6, num7].type] || Main.tile[num6, num7].type == 444))
										{
											flag2 = false;
											break;
										}
										if (Main.tile[num6, num7].liquid > 0 || Main.wallHouse[(int)Main.tile[num6, num7].wall])
										{
											flag2 = false;
											break;
										}
									}
									if (!flag2)
									{
										break;
									}
								}
								if (flag2 && WorldGen.CountNearBlocksTypes(i, k, 20, 1, new int[]
								{
									444
								}) > 0)
								{
									flag2 = false;
								}
								if (flag2)
								{
									for (int num8 = i; num8 < i + 2; num8++)
									{
										for (int num9 = k + 1; num9 < k + 3; num9++)
										{
											WorldGen.KillTile(num8, num9, false, false, false);
										}
									}
									for (int num10 = i; num10 < i + 2; num10++)
									{
										for (int num11 = k + 1; num11 < k + 3; num11++)
										{
											Main.tile[num10, num11].active(true);
											Main.tile[num10, num11].type = 444;
											Main.tile[num10, num11].frameX = (short)((num10 - i) * 18);
											Main.tile[num10, num11].frameY = (short)((num11 - k - 1) * 18);
										}
									}
									goto IL_7C0;
								}
							}
							if (WorldGen.genRand.Next(5) < 3)
							{
								num = WorldGen.genRand.Next(1, 10);
							}
						}
						IL_7C0:;
					}
					num = 0;
					for (int num12 = 0; num12 < Main.maxTilesY; num12++)
					{
						if (num > 0 && !Main.tile[i, num12].active())
						{
							Main.tile[i, num12].active(true);
							Main.tile[i, num12].type = 528;
							num--;
						}
						else
						{
							num = 0;
						}
						if (Main.tile[i, num12].active() && Main.tile[i, num12].type == 70 && WorldGen.genRand.Next(5) == 0 && !Main.tile[i, num12].bottomSlope() && WorldGen.GrowMoreVines(i, num12) && WorldGen.genRand.Next(5) < 3)
						{
							num = WorldGen.genRand.Next(1, 10);
						}
					}
					num = 0;
					for (int num13 = 0; num13 < Main.maxTilesY; num13++)
					{
						if (num > 0 && !Main.tile[i, num13].active())
						{
							Main.tile[i, num13].active(true);
							Main.tile[i, num13].type = 636;
							num--;
						}
						else
						{
							num = 0;
						}
						if (Main.tile[i, num13].active() && !Main.tile[i, num13].bottomSlope() && Main.tile[i, num13].type == 23 && WorldGen.GrowMoreVines(i, num13) && WorldGen.genRand.Next(5) < 3)
						{
							num = WorldGen.genRand.Next(1, 10);
						}
					}
					num = 0;
					for (int num14 = 0; num14 < Main.maxTilesY; num14++)
					{
						if (num > 0 && !Main.tile[i, num14].active())
						{
							Main.tile[i, num14].active(true);
							Main.tile[i, num14].type = 205;
							num--;
						}
						else
						{
							num = 0;
						}
						if (Main.tile[i, num14].active() && !Main.tile[i, num14].bottomSlope() && Main.tile[i, num14].type == 199 && WorldGen.GrowMoreVines(i, num14) && WorldGen.genRand.Next(5) < 3)
						{
							num = WorldGen.genRand.Next(1, 10);
						}
					}
					num = 0;
					for (int num15 = 0; num15 < Main.maxTilesY; num15++)
					{
						if (num > 0 && !Main.tile[i, num15].active())
						{
							Main.tile[i, num15].active(true);
							Main.tile[i, num15].type = 638;
							num--;
						}
						else
						{
							num = 0;
						}
						if (Main.tile[i, num15].active() && !Main.tile[i, num15].bottomSlope() && Main.tile[i, num15].type == 633 && WorldGen.GrowMoreVines(i, num15) && WorldGen.genRand.Next(5) < 3)
						{
							num = WorldGen.genRand.Next(1, 10);
						}
					}
				}
			});
			WorldGen.AddGenerationPass("Flowers", delegate(GenerationProgress progress, GameConfiguration passConfig)
			{
				progress.Message = Lang.gen[44].Value;
				int num = (int)((double)Main.maxTilesX * 0.004);
				if (WorldGen.remixWorldGen)
				{
					num *= 6;
				}
				for (int i = 0; i < num; i++)
				{
					progress.Set((double)i / (double)num);
					int num2 = WorldGen.genRand.Next(100, Main.maxTilesX - 100);
					int num3 = WorldGen.genRand.Next(15, 30);
					int num4 = WorldGen.genRand.Next(15, 30);
					if (WorldGen.remixWorldGen)
					{
						num3 = WorldGen.genRand.Next(15, 45);
						num4 = WorldGen.genRand.Next(15, 45);
						int num5 = WorldGen.genRand.Next((int)Main.rockLayer, Main.maxTilesY - 350);
						if (GenVars.logX >= 0)
						{
							num2 = GenVars.logX;
							num5 = GenVars.logY;
							GenVars.logX = -1;
						}
						int num6 = WorldGen.genRand.NextFromList(new int[]
						{
							21,
							24,
							27,
							30,
							33,
							36,
							39,
							42
						});
						for (int j = num2 - num3; j < num2 + num3; j++)
						{
							for (int k = num5 - num4; k < num5 + num4; k++)
							{
								if (Main.tile[j, k].type != 488 && !Main.tileSolid[(int)Main.tile[j, k].type])
								{
									if (Main.tile[j, k].type == 3)
									{
										Main.tile[j, k].frameX = (short)((num6 + WorldGen.genRand.Next(3)) * 18);
										if (WorldGen.genRand.Next(3) != 0)
										{
											Main.tile[j, k].type = 73;
										}
									}
									else if (Main.tile[j, k + 1].wall == 0 && (Main.tile[j, k + 1].type == 2 || ((Main.tile[j, k + 1].type == 40 || Main.tile[j, k + 1].type == 1 || TileID.Sets.Ore[(int)Main.tile[j, k + 1].type]) && !Main.tile[j, k].active())) && (!Main.tile[j, k].active() || Main.tile[j, k].type == 185 || Main.tile[j, k].type == 186 || Main.tile[j, k].type == 187 || (Main.tile[j, k].type == 5 && (double)j < (double)Main.maxTilesX * 0.48) || (double)j > (double)Main.maxTilesX * 0.52))
									{
										if (Main.tile[j, k + 1].type == 40 || Main.tile[j, k + 1].type == 1 || TileID.Sets.Ore[(int)Main.tile[j, k + 1].type])
										{
											Main.tile[j, k + 1].type = 2;
											if (Main.tile[j, k + 2].type == 40 || Main.tile[j, k + 2].type == 1 || TileID.Sets.Ore[(int)Main.tile[j, k + 2].type])
											{
												Main.tile[j, k + 2].type = 2;
											}
										}
										WorldGen.KillTile(j, k, false, false, false);
										if (WorldGen.genRand.Next(2) == 0)
										{
											Main.tile[j, k + 1].slope(0);
											Main.tile[j, k + 1].halfBrick(false);
										}
										WorldGen.PlaceTile(j, k, 3, false, false, -1, 0);
										if (Main.tile[j, k].active() && Main.tile[j, k].type == 3)
										{
											Main.tile[j, k].frameX = (short)((num6 + WorldGen.genRand.Next(3)) * 18);
											if (WorldGen.genRand.Next(3) != 0)
											{
												Main.tile[j, k].type = 73;
											}
										}
										if (Main.tile[j, k + 2].type == 40 || Main.tile[j, k + 2].type == 1 || TileID.Sets.Ore[(int)Main.tile[j, k + 2].type])
										{
											Main.tile[j, k + 2].type = 0;
										}
									}
								}
							}
						}
					}
					else
					{
						int num7 = num4;
						while ((double)num7 < Main.worldSurface - (double)num4 - 1.0)
						{
							if (Main.tile[num2, num7].active())
							{
								if (GenVars.logX >= 0)
								{
									num2 = GenVars.logX;
									num7 = GenVars.logY;
									GenVars.logX = -1;
								}
								int num8 = WorldGen.genRand.NextFromList(new int[]
								{
									21,
									24,
									27,
									30,
									33,
									36,
									39,
									42
								});
								for (int l = num2 - num3; l < num2 + num3; l++)
								{
									for (int m = num7 - num4; m < num7 + num4; m++)
									{
										if (Main.tile[l, m].type != 488 && !Main.tileSolid[(int)Main.tile[l, m].type])
										{
											if (Main.tile[l, m].type == 3)
											{
												Main.tile[l, m].frameX = (short)((num8 + WorldGen.genRand.Next(3)) * 18);
												if (WorldGen.genRand.Next(3) != 0)
												{
													Main.tile[l, m].type = 73;
												}
											}
											else if (Main.tile[l, m + 1].wall == 0 && (Main.tile[l, m + 1].type == 2 || ((Main.tile[l, m + 1].type == 40 || Main.tile[l, m + 1].type == 1 || TileID.Sets.Ore[(int)Main.tile[l, m + 1].type]) && !Main.tile[l, m].active())) && (!Main.tile[l, m].active() || Main.tile[l, m].type == 185 || Main.tile[l, m].type == 186 || Main.tile[l, m].type == 187 || (Main.tile[l, m].type == 5 && (double)l < (double)Main.maxTilesX * 0.48) || (double)l > (double)Main.maxTilesX * 0.52))
											{
												if (Main.tile[l, m + 1].type == 40 || Main.tile[l, m + 1].type == 1 || TileID.Sets.Ore[(int)Main.tile[l, m + 1].type])
												{
													Main.tile[l, m + 1].type = 2;
													if (Main.tile[l, m + 2].type == 40 || Main.tile[l, m + 2].type == 1 || TileID.Sets.Ore[(int)Main.tile[l, m + 2].type])
													{
														Main.tile[l, m + 2].type = 2;
													}
												}
												WorldGen.KillTile(l, m, false, false, false);
												if (WorldGen.genRand.Next(2) == 0)
												{
													Main.tile[l, m + 1].slope(0);
													Main.tile[l, m + 1].halfBrick(false);
												}
												WorldGen.PlaceTile(l, m, 3, false, false, -1, 0);
												if (Main.tile[l, m].active() && Main.tile[l, m].type == 3)
												{
													Main.tile[l, m].frameX = (short)((num8 + WorldGen.genRand.Next(3)) * 18);
													if (WorldGen.genRand.Next(3) != 0)
													{
														Main.tile[l, m].type = 73;
													}
												}
												if (Main.tile[l, m + 2].type == 40 || Main.tile[l, m + 2].type == 1 || TileID.Sets.Ore[(int)Main.tile[l, m + 2].type])
												{
													Main.tile[l, m + 2].type = 0;
												}
											}
										}
									}
								}
								break;
							}
							num7++;
						}
					}
				}
			});
			WorldGen.AddGenerationPass("Mushrooms", delegate(GenerationProgress progress, GameConfiguration passConfig)
			{
				progress.Message = Lang.gen[45].Value;
				int num = (int)((double)Main.maxTilesX * 0.002);
				if (WorldGen.remixWorldGen)
				{
					num *= 9;
				}
				for (int i = 0; i < num; i++)
				{
					progress.Set((double)i / (double)num);
					int num2 = WorldGen.genRand.Next(20, Main.maxTilesX - 20);
					int num3 = WorldGen.genRand.Next(4, 10);
					int num4 = WorldGen.genRand.Next(15, 30);
					if (WorldGen.remixWorldGen)
					{
						num3 = WorldGen.genRand.Next(8, 17);
						num4 = WorldGen.genRand.Next(8, 17);
						int num5 = WorldGen.genRand.Next((int)Main.rockLayer, Main.maxTilesY - 350);
						if (Main.tile[num2, num5].active())
						{
							for (int j = num2 - num3; j < num2 + num3; j++)
							{
								int num6 = num5 - num4;
								while (num6 < num5 + num4 && j >= 10 && num6 >= 0 && j <= Main.maxTilesX - 10 && num6 <= Main.maxTilesY - 10)
								{
									if (Main.tile[j, num6].type == 3 || Main.tile[j, num6].type == 24)
									{
										Main.tile[j, num6].frameX = 144;
									}
									else if (Main.tile[j, num6].type == 201)
									{
										Main.tile[j, num6].frameX = 270;
									}
									num6++;
								}
							}
						}
					}
					else
					{
						int num7 = 1;
						while ((double)num7 < Main.worldSurface - 1.0)
						{
							if (Main.tile[num2, num7].active())
							{
								for (int k = num2 - num3; k < num2 + num3; k++)
								{
									int num8 = num7 - num4;
									while (num8 < num7 + num4 && k >= 10 && num8 >= 0 && k <= Main.maxTilesX - 10 && num8 <= Main.maxTilesY - 10)
									{
										if (Main.tile[k, num8].type == 3 || Main.tile[k, num8].type == 24)
										{
											Main.tile[k, num8].frameX = 144;
										}
										else if (Main.tile[k, num8].type == 201)
										{
											Main.tile[k, num8].frameX = 270;
										}
										num8++;
									}
								}
								break;
							}
							num7++;
						}
					}
				}
			});
			WorldGen.AddGenerationPass("Gems In Ice Biome", delegate(GenerationProgress progress, GameConfiguration passConfig)
			{
				progress.Set(1.0);
				int num = 0;
				while ((double)num < (double)Main.maxTilesX * 0.25)
				{
					int num2;
					if (WorldGen.remixWorldGen)
					{
						num2 = WorldGen.genRand.Next((int)Main.worldSurface, Main.maxTilesY - 300);
					}
					else
					{
						num2 = WorldGen.genRand.Next((int)(Main.worldSurface + Main.rockLayer) / 2, GenVars.lavaLine);
					}
					int num3 = WorldGen.genRand.Next(GenVars.snowMinX[num2], GenVars.snowMaxX[num2]);
					if (Main.tile[num3, num2].active() && (Main.tile[num3, num2].type == 147 || Main.tile[num3, num2].type == 161 || Main.tile[num3, num2].type == 162 || Main.tile[num3, num2].type == 224))
					{
						int num4 = WorldGen.genRand.Next(1, 4);
						int num5 = WorldGen.genRand.Next(1, 4);
						int num6 = WorldGen.genRand.Next(1, 4);
						int num7 = WorldGen.genRand.Next(1, 4);
						int num8 = WorldGen.genRand.Next(12);
						int style;
						if (num8 < 3)
						{
							style = 0;
						}
						else if (num8 < 6)
						{
							style = 1;
						}
						else if (num8 < 8)
						{
							style = 2;
						}
						else if (num8 < 10)
						{
							style = 3;
						}
						else if (num8 < 11)
						{
							style = 4;
						}
						else
						{
							style = 5;
						}
						for (int i = num3 - num4; i < num3 + num5; i++)
						{
							for (int j = num2 - num6; j < num2 + num7; j++)
							{
								if (!Main.tile[i, j].active())
								{
									WorldGen.PlaceTile(i, j, 178, true, false, -1, style);
								}
							}
						}
					}
					num++;
				}
			});
			WorldGen.AddGenerationPass("Random Gems", delegate(GenerationProgress progress, GameConfiguration passConfig)
			{
				progress.Set(1.0);
				for (int i = 0; i < Main.maxTilesX; i++)
				{
					int num = WorldGen.genRand.Next(20, Main.maxTilesX - 20);
					int num2 = WorldGen.genRand.Next((int)Main.rockLayer, Main.maxTilesY - 300);
					if (!Main.tile[num, num2].active() && !Main.tile[num, num2].lava() && !Main.wallDungeon[(int)Main.tile[num, num2].wall] && Main.tile[num, num2].wall != 27)
					{
						int num3 = WorldGen.genRand.Next(12);
						int style;
						if (num3 < 3)
						{
							style = 0;
						}
						else if (num3 < 6)
						{
							style = 1;
						}
						else if (num3 < 8)
						{
							style = 2;
						}
						else if (num3 < 10)
						{
							style = 3;
						}
						else if (num3 < 11)
						{
							style = 4;
						}
						else
						{
							style = 5;
						}
						WorldGen.PlaceTile(num, num2, 178, true, false, -1, style);
					}
				}
				for (int j = 0; j < Main.maxTilesX; j++)
				{
					int num4 = WorldGen.genRand.Next(20, Main.maxTilesX - 20);
					int num5 = WorldGen.genRand.Next((int)Main.worldSurface, Main.maxTilesY - 300);
					if (!Main.tile[num4, num5].active() && !Main.tile[num4, num5].lava() && (Main.tile[num4, num5].wall == 216 || Main.tile[num4, num5].wall == 187))
					{
						int num6 = WorldGen.genRand.Next(1, 4);
						int num7 = WorldGen.genRand.Next(1, 4);
						int num8 = WorldGen.genRand.Next(1, 4);
						int num9 = WorldGen.genRand.Next(1, 4);
						for (int k = num4 - num6; k < num4 + num7; k++)
						{
							for (int l = num5 - num8; l < num5 + num9; l++)
							{
								if (!Main.tile[k, l].active())
								{
									WorldGen.PlaceTile(k, l, 178, true, false, -1, 6);
								}
							}
						}
					}
				}
			});
			WorldGen.AddGenerationPass("Moss Grass", delegate(GenerationProgress progress, GameConfiguration passConfig)
			{
				progress.Set(1.0);
				for (int i = 5; i < Main.maxTilesX - 5; i++)
				{
					for (int j = 5; j < Main.maxTilesY - 5; j++)
					{
						if (Main.tile[i, j].active() && Main.tileMoss[(int)Main.tile[i, j].type])
						{
							for (int k = 0; k < 4; k++)
							{
								int num = i;
								int num2 = j;
								if (k == 0)
								{
									num--;
								}
								if (k == 1)
								{
									num++;
								}
								if (k == 2)
								{
									num2--;
								}
								if (k == 3)
								{
									num2++;
								}
								if (!Main.tile[num, num2].active())
								{
									WorldGen.PlaceTile(num, num2, 184, true, false, -1, 0);
								}
							}
						}
					}
				}
			});
			WorldGen.AddGenerationPass("Muds Walls In Jungle", delegate(GenerationProgress progress, GameConfiguration passConfig)
			{
				progress.Set(1.0);
				int num = 0;
				int num2 = 0;
				bool flag = false;
				for (int i = 5; i < Main.maxTilesX - 5; i++)
				{
					int num3 = 0;
					while ((double)num3 < Main.worldSurface + 20.0)
					{
						if (Main.tile[i, num3].active() && Main.tile[i, num3].type == 60)
						{
							num = i;
							flag = true;
							break;
						}
						num3++;
					}
					if (flag)
					{
						break;
					}
				}
				flag = false;
				for (int j = Main.maxTilesX - 5; j > 5; j--)
				{
					int num4 = 0;
					while ((double)num4 < Main.worldSurface + 20.0)
					{
						if (Main.tile[j, num4].active() && Main.tile[j, num4].type == 60)
						{
							num2 = j;
							flag = true;
							break;
						}
						num4++;
					}
					if (flag)
					{
						break;
					}
				}
				GenVars.jungleMinX = num;
				GenVars.jungleMaxX = num2;
				for (int k = num; k <= num2; k++)
				{
					int num5 = 0;
					while ((double)num5 < Main.worldSurface + 20.0)
					{
						if (((k >= num + 2 && k <= num2 - 2) || WorldGen.genRand.Next(2) != 0) && ((k >= num + 3 && k <= num2 - 3) || WorldGen.genRand.Next(3) != 0) && (Main.tile[k, num5].wall == 2 || Main.tile[k, num5].wall == 59))
						{
							Main.tile[k, num5].wall = 15;
						}
						num5++;
					}
				}
			});
			WorldGen.AddGenerationPass("Larva", delegate(GenerationProgress progress, GameConfiguration passConfig)
			{
				Main.tileSolid[229] = true;
				progress.Set(1.0);
				for (int i = 0; i < GenVars.numLarva; i++)
				{
					int num = GenVars.larvaX[i];
					int num2 = GenVars.larvaY[i];
					for (int j = num - 1; j <= num + 1; j++)
					{
						for (int k = num2 - 2; k <= num2 + 1; k++)
						{
							if (k != num2 + 1)
							{
								Main.tile[j, k].active(false);
							}
							else
							{
								Main.tile[j, k].active(true);
								Main.tile[j, k].type = 225;
								Main.tile[j, k].slope(0);
								Main.tile[j, k].halfBrick(false);
							}
						}
					}
					WorldGen.PlaceTile(num, num2, 231, true, false, -1, 0);
				}
				Main.tileSolid[232] = true;
				Main.tileSolid[162] = true;
			});
			WorldGen.AddGenerationPass("Settle Liquids Again", delegate(GenerationProgress progress, GameConfiguration passConfig)
			{
				if (WorldGen.getGoodWorldGen)
				{
					Main.tileSolid[56] = true;
				}
				progress.Message = Lang.gen[27].Value;
				if (WorldGen.notTheBees)
				{
					WorldGen.NotTheBees();
				}
				Liquid.worldGenTilesIgnoreWater(true);
				Liquid.QuickWater(3, -1, -1);
				WorldGen.WaterCheck();
				int i = 0;
				Liquid.quickSettle = true;
				int num = 10;
				while (i < num)
				{
					int num2 = Liquid.numLiquid + LiquidBuffer.numLiquidBuffer;
					i++;
					double num3 = 0.0;
					int num4 = num2 * 5;
					while (Liquid.numLiquid > 0)
					{
						num4--;
						if (num4 < 0)
						{
							break;
						}
						double num5 = (double)(num2 - (Liquid.numLiquid + LiquidBuffer.numLiquidBuffer)) / (double)num2;
						if (Liquid.numLiquid + LiquidBuffer.numLiquidBuffer > num2)
						{
							num2 = Liquid.numLiquid + LiquidBuffer.numLiquidBuffer;
						}
						if (num5 > num3)
						{
							num3 = num5;
						}
						else
						{
							num5 = num3;
						}
						if (i == 1)
						{
							progress.Set(num5 / 3.0 + 0.33);
						}
						Liquid.UpdateLiquid();
					}
					WorldGen.WaterCheck();
					progress.Set((double)i / (double)num / 3.0 + 0.66);
				}
				Liquid.quickSettle = false;
				Liquid.worldGenTilesIgnoreWater(false);
				Main.tileSolid[484] = false;
			});
			WorldGen.AddGenerationPass("Cactus, Palm Trees, & Coral", delegate(GenerationProgress progress, GameConfiguration passConfig)
			{
				progress.Message = Lang.gen[38].Value;
				int num = 8;
				if (WorldGen.remixWorldGen)
				{
					num = 2;
				}
				int num2 = 400;
				int num3 = WorldGen.genRand.Next(3, 13);
				int num4 = WorldGen.genRand.Next(3, 13);
				int num5 = WorldGen.genRand.Next(2, 6);
				int num6 = WorldGen.genRand.Next(2, 6);
				int num7 = 380;
				for (int i = 0; i < GenVars.numOasis; i++)
				{
					int num8 = (int)((double)GenVars.oasisWidth[i] * 1.5);
					for (int j = GenVars.oasisPosition[i].X - num8; j <= GenVars.oasisPosition[i].X + num8; j++)
					{
						for (int k = GenVars.oasisPosition[i].Y - GenVars.oasisHeight; k <= GenVars.oasisPosition[i].Y + GenVars.oasisHeight; k++)
						{
							double num9 = 1.0;
							int num10 = 8;
							for (int l = j - num10; l <= j + num10; l++)
							{
								for (int m = k - num10; m <= k + num10; m++)
								{
									if (WorldGen.InWorld(l, m, 0) && Main.tile[l, m] != null && Main.tile[l, m].active() && Main.tile[l, m].type == 323)
									{
										num9 = 0.13;
									}
								}
							}
							if (WorldGen.genRand.NextDouble() < num9)
							{
								WorldGen.GrowPalmTree(j, k);
							}
							if (WorldGen.PlantSeaOat(j, k))
							{
								if (WorldGen.genRand.Next(2) == 0)
								{
									WorldGen.GrowSeaOat(j, k);
								}
								if (WorldGen.genRand.Next(2) == 0)
								{
									WorldGen.GrowSeaOat(j, k);
								}
							}
							WorldGen.PlaceOasisPlant(j, k, 530);
						}
					}
				}
				for (int n = 0; n < 3; n++)
				{
					progress.Set((double)n / 3.0);
					int num11;
					int num12;
					bool flag;
					int maxValue;
					switch (n)
					{
					default:
						num11 = 5;
						num12 = num7;
						flag = false;
						maxValue = num3;
						break;
					case 1:
						num11 = num2;
						num12 = Main.maxTilesX - num2;
						flag = true;
						maxValue = num;
						break;
					case 2:
						num11 = Main.maxTilesX - num7;
						num12 = Main.maxTilesX - 5;
						flag = false;
						maxValue = num4;
						break;
					}
					double num13 = Main.worldSurface - 1.0;
					if (WorldGen.remixWorldGen)
					{
						num13 = (double)(Main.maxTilesY - 50);
					}
					for (int num14 = num11; num14 < num12; num14++)
					{
						if (WorldGen.genRand.Next(maxValue) == 0)
						{
							int num15 = 0;
							while ((double)num15 < num13)
							{
								Tile tile = Main.tile[num14, num15];
								if (tile.active() && (tile.type == 53 || tile.type == 112 || tile.type == 234))
								{
									Tile tile2 = Main.tile[num14, num15 - 1];
									if (!tile2.active() && tile2.wall == 0)
									{
										if (flag)
										{
											if (WorldGen.remixWorldGen)
											{
												if ((double)num15 > Main.worldSurface)
												{
													if (WorldGen.SolidTile(num14, num15, false) && Main.tile[num14, num15 + 1].type == 53 && Main.tile[num14, num15 + 2].type == 53)
													{
														int maxValue2 = 3;
														WorldGen.GrowPalmTree(num14, num15);
														if (!Main.tile[num14, num15 - 1].active() && WorldGen.genRand.Next(maxValue2) == 0)
														{
															WorldGen.PlantCactus(num14, num15);
														}
													}
												}
												else
												{
													int num16 = 0;
													for (int num17 = num14 - WorldGen.cactusWaterWidth; num17 < num14 + WorldGen.cactusWaterWidth; num17++)
													{
														for (int num18 = num15 - WorldGen.cactusWaterHeight; num18 < num15 + WorldGen.cactusWaterHeight; num18++)
														{
															num16 += (int)Main.tile[num17, num18].liquid;
														}
													}
													if (num16 / 255 > WorldGen.cactusWaterLimit)
													{
														int maxValue3 = 4;
														if (WorldGen.genRand.Next(maxValue3) == 0)
														{
															WorldGen.GrowPalmTree(num14, num15);
														}
													}
													else
													{
														WorldGen.PlantCactus(num14, num15);
													}
												}
											}
											else
											{
												int num19 = 0;
												for (int num20 = num14 - WorldGen.cactusWaterWidth; num20 < num14 + WorldGen.cactusWaterWidth; num20++)
												{
													for (int num21 = num15 - WorldGen.cactusWaterHeight; num21 < num15 + WorldGen.cactusWaterHeight; num21++)
													{
														num19 += (int)Main.tile[num20, num21].liquid;
													}
												}
												if (num19 / 255 > WorldGen.cactusWaterLimit)
												{
													int maxValue4 = 4;
													if (WorldGen.genRand.Next(maxValue4) == 0)
													{
														WorldGen.GrowPalmTree(num14, num15);
													}
												}
												else
												{
													WorldGen.PlantCactus(num14, num15);
												}
											}
										}
										else if (Main.tile[num14, num15 - 2].liquid == 255 && Main.tile[num14, num15 - 3].liquid == 255 && Main.tile[num14, num15 - 4].liquid == 255)
										{
											if (WorldGen.genRand.Next(2) == 0)
											{
												WorldGen.PlaceTile(num14, num15 - 1, 81, true, false, -1, 0);
												break;
											}
											WorldGen.PlaceTile(num14, num15 - 1, 324, true, false, -1, WorldGen.RollRandomSeaShellStyle());
											break;
										}
										else if (Main.tile[num14, num15 - 2].liquid == 0 && (double)num15 < Main.worldSurface)
										{
											WorldGen.PlaceTile(num14, num15 - 1, 324, true, false, -1, WorldGen.RollRandomSeaShellStyle());
											break;
										}
									}
								}
								num15++;
							}
						}
						else
						{
							int num22 = 0;
							while ((double)num22 < num13)
							{
								if (WorldGen.PlantSeaOat(num14, num22))
								{
									if (WorldGen.genRand.Next(2) == 0)
									{
										WorldGen.GrowSeaOat(num14, num22);
									}
									if (WorldGen.genRand.Next(2) == 0)
									{
										WorldGen.GrowSeaOat(num14, num22);
									}
								}
								WorldGen.PlaceOasisPlant(num14, num22, 530);
								num22++;
							}
						}
					}
				}
			});
			WorldGen.AddGenerationPass("Tile Cleanup", delegate(GenerationProgress progress, GameConfiguration passConfig)
			{
				progress.Message = Lang.gen[84].Value;
				for (int i = 40; i < Main.maxTilesX - 40; i++)
				{
					progress.Set((double)(i - 40) / (double)(Main.maxTilesX - 80));
					for (int j = 40; j < Main.maxTilesY - 40; j++)
					{
						if (Main.tile[i, j].active() && Main.tile[i, j].topSlope() && ((Main.tile[i, j].leftSlope() && Main.tile[i + 1, j].halfBrick()) || (Main.tile[i, j].rightSlope() && Main.tile[i - 1, j].halfBrick())))
						{
							Main.tile[i, j].slope(0);
							Main.tile[i, j].halfBrick(true);
						}
						if (Main.tile[i, j].active() && Main.tile[i, j].liquid > 0 && TileID.Sets.SlowlyDiesInWater[(int)Main.tile[i, j].type])
						{
							WorldGen.KillTile(i, j, false, false, false);
						}
						if (!Main.tile[i, j].active() && Main.tile[i, j].liquid == 0 && WorldGen.genRand.Next(3) != 0 && WorldGen.SolidTile(i, j - 1, false))
						{
							int num = WorldGen.genRand.Next(15, 21);
							for (int k = j - 2; k >= j - num; k--)
							{
								if (Main.tile[i, k].liquid >= 128 && !Main.tile[i, k].shimmer())
								{
									int num2 = 373;
									if (Main.tile[i, k].lava())
									{
										num2 = 374;
									}
									else if (Main.tile[i, k].honey())
									{
										num2 = 375;
									}
									int maxValue = j - k;
									if (WorldGen.genRand.Next(maxValue) <= 1)
									{
										if (Main.tile[i, j].wall == 86)
										{
											num2 = 375;
										}
										Main.tile[i, j].type = (ushort)num2;
										Main.tile[i, j].frameX = 0;
										Main.tile[i, j].frameY = 0;
										Main.tile[i, j].active(true);
										break;
									}
								}
							}
							if (!Main.tile[i, j].active())
							{
								num = WorldGen.genRand.Next(3, 11);
								for (int l = j + 1; l <= j + num; l++)
								{
									if (Main.tile[i, l].liquid >= 200 && !Main.tile[i, l].shimmer())
									{
										int num3 = 373;
										if (Main.tile[i, l].lava())
										{
											num3 = 374;
										}
										else if (Main.tile[i, l].honey())
										{
											num3 = 375;
										}
										int num4 = l - j;
										if (WorldGen.genRand.Next(num4 * 3) <= 1)
										{
											Main.tile[i, j].type = (ushort)num3;
											Main.tile[i, j].frameX = 0;
											Main.tile[i, j].frameY = 0;
											Main.tile[i, j].active(true);
											break;
										}
									}
								}
							}
							if (!Main.tile[i, j].active() && WorldGen.genRand.Next(4) == 0)
							{
								Tile tile = Main.tile[i, j - 1];
								if (TileID.Sets.Conversion.Sandstone[(int)tile.type] || TileID.Sets.Conversion.HardenedSand[(int)tile.type])
								{
									Main.tile[i, j].type = 461;
									Main.tile[i, j].frameX = 0;
									Main.tile[i, j].frameY = 0;
									Main.tile[i, j].active(true);
								}
							}
						}
						if (Main.tile[i, j].type == 137)
						{
							int num5 = (int)(Main.tile[i, j].frameY / 18);
							if (num5 <= 2 || num5 == 5)
							{
								int num6 = -1;
								if (Main.tile[i, j].frameX >= 18)
								{
									num6 = 1;
								}
								if (Main.tile[i + num6, j].halfBrick() || Main.tile[i + num6, j].slope() != 0)
								{
									Main.tile[i + num6, j].active(false);
								}
							}
						}
						else if (Main.tile[i, j].type == 162 && Main.tile[i, j + 1].liquid == 0 && WorldGen.CanKillTile(i, j))
						{
							Main.tile[i, j].active(false);
						}
						if (Main.tile[i, j].wall == 13 || Main.tile[i, j].wall == 14)
						{
							Main.tile[i, j].liquid = 0;
						}
						if (Main.tile[i, j].type == 31)
						{
							int num7 = (int)(Main.tile[i, j].frameX / 18);
							int num8 = 0;
							int num9 = i;
							num8 += num7 / 2;
							if (WorldGen.drunkWorldGen)
							{
								if (Main.tile[i, j].wall == 83)
								{
									num8 = 1;
								}
								else
								{
									num8 = 0;
								}
							}
							else
							{
								num8 = (WorldGen.crimson ? 1 : 0);
							}
							num7 %= 2;
							num9 -= num7;
							int num10 = (int)(Main.tile[i, j].frameY / 18);
							int num11 = 0;
							int num12 = j;
							num11 += num10 / 2;
							num10 %= 2;
							num12 -= num10;
							for (int m = 0; m < 2; m++)
							{
								for (int n = 0; n < 2; n++)
								{
									int num13 = num9 + m;
									int num14 = num12 + n;
									Main.tile[num13, num14].active(true);
									Main.tile[num13, num14].slope(0);
									Main.tile[num13, num14].halfBrick(false);
									Main.tile[num13, num14].type = 31;
									Main.tile[num13, num14].frameX = (short)(m * 18 + 36 * num8);
									Main.tile[num13, num14].frameY = (short)(n * 18 + 36 * num11);
								}
							}
						}
						if (Main.tile[i, j].type == 12)
						{
							int num15 = (int)(Main.tile[i, j].frameX / 18);
							int num16 = 0;
							int num17 = i;
							num16 += num15 / 2;
							num15 %= 2;
							num17 -= num15;
							int num18 = (int)(Main.tile[i, j].frameY / 18);
							int num19 = 0;
							int num20 = j;
							num19 += num18 / 2;
							num18 %= 2;
							num20 -= num18;
							for (int num21 = 0; num21 < 2; num21++)
							{
								for (int num22 = 0; num22 < 2; num22++)
								{
									int num23 = num17 + num21;
									int num24 = num20 + num22;
									Main.tile[num23, num24].active(true);
									Main.tile[num23, num24].slope(0);
									Main.tile[num23, num24].halfBrick(false);
									Main.tile[num23, num24].type = 12;
									Main.tile[num23, num24].frameX = (short)(num21 * 18 + 36 * num16);
									Main.tile[num23, num24].frameY = (short)(num22 * 18 + 36 * num19);
								}
								if (!Main.tile[num21, j + 2].active())
								{
									Main.tile[num21, j + 2].active(true);
									if (!Main.tileSolid[(int)Main.tile[num21, j + 2].type] || Main.tileSolidTop[(int)Main.tile[num21, j + 2].type])
									{
										Main.tile[num21, j + 2].type = 0;
									}
								}
								Main.tile[num21, j + 2].slope(0);
								Main.tile[num21, j + 2].halfBrick(false);
							}
						}
						if (Main.tile[i, j].type == 639)
						{
							int num25 = (int)(Main.tile[i, j].frameX / 18);
							int num26 = 0;
							int num27 = i;
							num26 += num25 / 2;
							num25 %= 2;
							num27 -= num25;
							int num28 = (int)(Main.tile[i, j].frameY / 18);
							int num29 = 0;
							int num30 = j;
							num29 += num28 / 2;
							num28 %= 2;
							num30 -= num28;
							for (int num31 = 0; num31 < 2; num31++)
							{
								for (int num32 = 0; num32 < 2; num32++)
								{
									int num33 = num27 + num31;
									int num34 = num30 + num32;
									Main.tile[num33, num34].active(true);
									Main.tile[num33, num34].slope(0);
									Main.tile[num33, num34].halfBrick(false);
									Main.tile[num33, num34].type = 639;
									Main.tile[num33, num34].frameX = (short)(num31 * 18 + 36 * num26);
									Main.tile[num33, num34].frameY = (short)(num32 * 18 + 36 * num29);
								}
								if (!Main.tile[num31, j + 2].active())
								{
									Main.tile[num31, j + 2].active(true);
									if (!Main.tileSolid[(int)Main.tile[num31, j + 2].type] || Main.tileSolidTop[(int)Main.tile[num31, j + 2].type])
									{
										Main.tile[num31, j + 2].type = 0;
									}
								}
								Main.tile[num31, j + 2].slope(0);
								Main.tile[num31, j + 2].halfBrick(false);
							}
						}
						if (TileID.Sets.BasicChest[(int)Main.tile[i, j].type])
						{
							int num35 = (int)(Main.tile[i, j].frameX / 18);
							int num36 = 0;
							ushort type = 21;
							int num37 = i;
							int num38 = j - (int)(Main.tile[i, j].frameY / 18);
							if (Main.tile[i, j].type == 467)
							{
								type = 467;
							}
							while (num35 >= 2)
							{
								num36++;
								num35 -= 2;
							}
							num37 -= num35;
							int num39 = Chest.FindChest(num37, num38);
							if (num39 != -1)
							{
								int type2 = Main.chest[num39].item[0].type;
								if (type2 != 1156)
								{
									if (type2 != 1260)
									{
										switch (type2)
										{
										case 1569:
											num36 = 25;
											break;
										case 1571:
											num36 = 24;
											break;
										case 1572:
											num36 = 27;
											break;
										}
									}
									else
									{
										num36 = 26;
									}
								}
								else
								{
									num36 = 23;
								}
							}
							for (int num40 = 0; num40 < 2; num40++)
							{
								for (int num41 = 0; num41 < 2; num41++)
								{
									int num42 = num37 + num40;
									int num43 = num38 + num41;
									Main.tile[num42, num43].active(true);
									Main.tile[num42, num43].slope(0);
									Main.tile[num42, num43].halfBrick(false);
									Main.tile[num42, num43].type = type;
									Main.tile[num42, num43].frameX = (short)(num40 * 18 + 36 * num36);
									Main.tile[num42, num43].frameY = (short)(num41 * 18);
								}
								if (!Main.tile[num40, j + 2].active())
								{
									Main.tile[num40, j + 2].active(true);
									if (!Main.tileSolid[(int)Main.tile[num40, j + 2].type] || Main.tileSolidTop[(int)Main.tile[num40, j + 2].type])
									{
										Main.tile[num40, j + 2].type = 0;
									}
								}
								Main.tile[num40, j + 2].slope(0);
								Main.tile[num40, j + 2].halfBrick(false);
							}
						}
						if (Main.tile[i, j].type == 28)
						{
							int num44 = (int)(Main.tile[i, j].frameX / 18);
							int num45 = 0;
							int num46 = i;
							while (num44 >= 2)
							{
								num45++;
								num44 -= 2;
							}
							num46 -= num44;
							int num47 = (int)(Main.tile[i, j].frameY / 18);
							int num48 = 0;
							int num49 = j;
							while (num47 >= 2)
							{
								num48++;
								num47 -= 2;
							}
							num49 -= num47;
							for (int num50 = 0; num50 < 2; num50++)
							{
								for (int num51 = 0; num51 < 2; num51++)
								{
									int num52 = num46 + num50;
									int num53 = num49 + num51;
									Main.tile[num52, num53].active(true);
									Main.tile[num52, num53].slope(0);
									Main.tile[num52, num53].halfBrick(false);
									Main.tile[num52, num53].type = 28;
									Main.tile[num52, num53].frameX = (short)(num50 * 18 + 36 * num45);
									Main.tile[num52, num53].frameY = (short)(num51 * 18 + 36 * num48);
								}
								if (!Main.tile[num50, j + 2].active())
								{
									Main.tile[num50, j + 2].active(true);
									if (!Main.tileSolid[(int)Main.tile[num50, j + 2].type] || Main.tileSolidTop[(int)Main.tile[num50, j + 2].type])
									{
										Main.tile[num50, j + 2].type = 0;
									}
								}
								Main.tile[num50, j + 2].slope(0);
								Main.tile[num50, j + 2].halfBrick(false);
							}
						}
						if (Main.tile[i, j].type == 26)
						{
							int num54 = (int)(Main.tile[i, j].frameX / 18);
							int num55 = 0;
							int num56 = i;
							int num57 = j - (int)(Main.tile[i, j].frameY / 18);
							while (num54 >= 3)
							{
								num55++;
								num54 -= 3;
							}
							num56 -= num54;
							if (WorldGen.drunkWorldGen)
							{
								if (Main.tile[i, j].wall == 83)
								{
									num55 = 1;
								}
								else
								{
									num55 = 0;
								}
							}
							else if (WorldGen.crimson)
							{
								num55 = 1;
							}
							else
							{
								num55 = 0;
							}
							for (int num58 = 0; num58 < 3; num58++)
							{
								for (int num59 = 0; num59 < 2; num59++)
								{
									int num60 = num56 + num58;
									int num61 = num57 + num59;
									Main.tile[num60, num61].active(true);
									Main.tile[num60, num61].slope(0);
									Main.tile[num60, num61].halfBrick(false);
									Main.tile[num60, num61].type = 26;
									Main.tile[num60, num61].frameX = (short)(num58 * 18 + 54 * num55);
									Main.tile[num60, num61].frameY = (short)(num59 * 18);
								}
								if (!Main.tile[num56 + num58, num57 + 2].active() || !Main.tileSolid[(int)Main.tile[num56 + num58, num57 + 2].type] || Main.tileSolidTop[(int)Main.tile[num56 + num58, num57 + 2].type])
								{
									Main.tile[num56 + num58, num57 + 2].active(true);
									if (!TileID.Sets.Platforms[(int)Main.tile[num56 + num58, num57 + 2].type])
									{
										if (Main.tile[num56 + num58, num57 + 2].type == 484)
										{
											Main.tile[num56 + num58, num57 + 2].type = 397;
										}
										else if (TileID.Sets.Boulders[(int)Main.tile[num56 + num58, num57 + 2].type] || !Main.tileSolid[(int)Main.tile[num56 + num58, num57 + 2].type] || Main.tileSolidTop[(int)Main.tile[num56 + num58, num57 + 2].type])
										{
											Main.tile[num56 + num58, num57 + 2].type = 0;
										}
									}
								}
								Main.tile[num56 + num58, num57 + 2].slope(0);
								Main.tile[num56 + num58, num57 + 2].halfBrick(false);
								if (Main.tile[num56 + num58, num57 + 3].type == 28 && Main.tile[num56 + num58, num57 + 3].frameY % 36 >= 18)
								{
									Main.tile[num56 + num58, num57 + 3].type = 0;
									Main.tile[num56 + num58, num57 + 3].active(false);
								}
							}
							for (int num62 = 0; num62 < 3; num62++)
							{
								if ((Main.tile[num56 - 1, num57 + num62].type == 28 || Main.tile[num56 - 1, num57 + num62].type == 12 || Main.tile[num56 - 1, num57 + num62].type == 639) && Main.tile[num56 - 1, num57 + num62].frameX % 36 < 18)
								{
									Main.tile[num56 - 1, num57 + num62].type = 0;
									Main.tile[num56 - 1, num57 + num62].active(false);
								}
								if ((Main.tile[num56 + 3, num57 + num62].type == 28 || Main.tile[num56 + 3, num57 + num62].type == 12 || Main.tile[num56 - 1, num57 + num62].type == 639) && Main.tile[num56 + 3, num57 + num62].frameX % 36 >= 18)
								{
									Main.tile[num56 + 3, num57 + num62].type = 0;
									Main.tile[num56 + 3, num57 + num62].active(false);
								}
							}
						}
						if (Main.tile[i, j].type == 237 && Main.tile[i, j + 1].type == 232)
						{
							Main.tile[i, j + 1].type = 226;
						}
						if (Main.tile[i, j].wall == 87)
						{
							Main.tile[i, j].liquid = 0;
						}
					}
				}
			});
			WorldGen.AddGenerationPass("Lihzahrd Altars", delegate(GenerationProgress progress, GameConfiguration passConfig)
			{
				progress.Set(1.0);
				for (int i = 0; i < 3; i++)
				{
					for (int j = 0; j < 2; j++)
					{
						int num = GenVars.lAltarX + i;
						int num2 = GenVars.lAltarY + j;
						Main.tile[num, num2].active(true);
						Main.tile[num, num2].type = 237;
						Main.tile[num, num2].frameX = (short)(i * 18);
						Main.tile[num, num2].frameY = (short)(j * 18);
					}
					Main.tile[GenVars.lAltarX + i, GenVars.lAltarY + 2].active(true);
					Main.tile[GenVars.lAltarX + i, GenVars.lAltarY + 2].slope(0);
					Main.tile[GenVars.lAltarX + i, GenVars.lAltarY + 2].halfBrick(false);
					Main.tile[GenVars.lAltarX + i, GenVars.lAltarY + 2].type = 226;
				}
				for (int k = 0; k < 3; k++)
				{
					for (int l = 0; l < 2; l++)
					{
						int i2 = GenVars.lAltarX + k;
						int j2 = GenVars.lAltarY + l;
						WorldGen.SquareTileFrame(i2, j2, true);
					}
				}
			});
			WorldGen.AddGenerationPass("Micro Biomes", delegate(GenerationProgress progress, GameConfiguration passConfig)
			{
				progress.Message = Lang.gen[76].Value;
				double num = (double)(Main.maxTilesX * Main.maxTilesY) / 5040000.0;
				double num2 = 10.0;
				if (WorldGen.getGoodWorldGen || WorldGen.noTrapsWorldGen)
				{
					num2 *= 3.0;
				}
				DeadMansChestBiome deadMansChestBiome = GenVars.configuration.CreateBiome<DeadMansChestBiome>();
				List<int> possibleChestsToTrapify = deadMansChestBiome.GetPossibleChestsToTrapify(GenVars.structures);
				int random = passConfig.Get<WorldGenRange>("DeadManChests").GetRandom(WorldGen.genRand);
				int num3 = 0;
				int num4 = 3000;
				while (num3 < random && possibleChestsToTrapify.Count > 0)
				{
					num4--;
					if (num4 <= 0)
					{
						break;
					}
					int num5 = possibleChestsToTrapify[WorldGen.genRand.Next(possibleChestsToTrapify.Count)];
					Point origin = new Point(Main.chest[num5].x, Main.chest[num5].y);
					deadMansChestBiome.Place(origin, GenVars.structures);
					num3++;
					possibleChestsToTrapify.Remove(num5);
				}
				progress.Set(1.0 / num2);
				if (!WorldGen.notTheBees || WorldGen.remixWorldGen)
				{
					ThinIceBiome thinIceBiome = GenVars.configuration.CreateBiome<ThinIceBiome>();
					int random2 = passConfig.Get<WorldGenRange>("ThinIcePatchCount").GetRandom(WorldGen.genRand);
					int num6 = 0;
					int num7 = 1000;
					int i = 0;
					while (i < random2)
					{
						if (thinIceBiome.Place(WorldGen.RandomWorldPoint((int)Main.worldSurface + 20, 50, 200, 50), GenVars.structures))
						{
							i++;
							num6 = 0;
						}
						else
						{
							num6++;
							if (num6 > num7)
							{
								i++;
								num6 = 0;
							}
						}
					}
				}
				progress.Set(0.1);
				progress.Set(2.0 / num2);
				EnchantedSwordBiome enchantedSwordBiome = GenVars.configuration.CreateBiome<EnchantedSwordBiome>();
				int num8 = passConfig.Get<WorldGenRange>("SwordShrineAttempts").GetRandom(WorldGen.genRand);
				double num9 = passConfig.Get<double>("SwordShrinePlacementChance");
				if (WorldGen.tenthAnniversaryWorldGen)
				{
					num8 *= 2;
					num9 /= 2.0;
				}
				for (int j = 0; j < num8; j++)
				{
					if ((j == 0 && WorldGen.tenthAnniversaryWorldGen) || WorldGen.genRand.NextDouble() <= num9)
					{
						int num10 = 0;
						while (num10++ <= Main.maxTilesX)
						{
							Point origin2;
							origin2.Y = (int)GenVars.worldSurface + WorldGen.genRand.Next(50, 100);
							if (WorldGen.genRand.Next(2) == 0)
							{
								origin2.X = WorldGen.genRand.Next(50, (int)((double)Main.maxTilesX * 0.3));
							}
							else
							{
								origin2.X = WorldGen.genRand.Next((int)((double)Main.maxTilesX * 0.7), Main.maxTilesX - 50);
							}
							if (enchantedSwordBiome.Place(origin2, GenVars.structures))
							{
								break;
							}
						}
					}
				}
				progress.Set(0.2);
				progress.Set(3.0 / num2);
				if (!WorldGen.notTheBees || WorldGen.remixWorldGen)
				{
					CampsiteBiome campsiteBiome = GenVars.configuration.CreateBiome<CampsiteBiome>();
					int random3 = passConfig.Get<WorldGenRange>("CampsiteCount").GetRandom(WorldGen.genRand);
					num4 = 1000;
					int k = 0;
					while (k < random3)
					{
						num4--;
						if (num4 <= 0)
						{
							break;
						}
						if (campsiteBiome.Place(WorldGen.RandomWorldPoint((int)Main.worldSurface, WorldGen.beachDistance, 200, WorldGen.beachDistance), GenVars.structures))
						{
							k++;
						}
					}
				}
				progress.Set(4.0 / num2);
				if (!WorldGen.notTheBees || WorldGen.remixWorldGen)
				{
					MiningExplosivesBiome miningExplosivesBiome = GenVars.configuration.CreateBiome<MiningExplosivesBiome>();
					int num11 = passConfig.Get<WorldGenRange>("ExplosiveTrapCount").GetRandom(WorldGen.genRand);
					if ((WorldGen.getGoodWorldGen || WorldGen.noTrapsWorldGen) && !WorldGen.notTheBees)
					{
						num11 = (int)((double)num11 * 1.5);
					}
					num4 = 3000;
					int l = 0;
					while (l < num11)
					{
						num4--;
						if (num4 <= 0)
						{
							break;
						}
						if (WorldGen.remixWorldGen)
						{
							if (miningExplosivesBiome.Place(WorldGen.RandomWorldPoint((int)Main.worldSurface, WorldGen.beachDistance, (int)GenVars.rockLayer, WorldGen.beachDistance), GenVars.structures))
							{
								l++;
							}
						}
						else if (miningExplosivesBiome.Place(WorldGen.RandomWorldPoint((int)GenVars.rockLayer, WorldGen.beachDistance, 200, WorldGen.beachDistance), GenVars.structures))
						{
							l++;
						}
					}
				}
				progress.Set(0.3);
				progress.Set(5.0 / num2);
				MahoganyTreeBiome mahoganyTreeBiome = GenVars.configuration.CreateBiome<MahoganyTreeBiome>();
				int random4 = passConfig.Get<WorldGenRange>("LivingTreeCount").GetRandom(WorldGen.genRand);
				int num12 = 0;
				int num13 = 0;
				while (num12 < random4 && num13 < 20000)
				{
					if (mahoganyTreeBiome.Place(WorldGen.RandomWorldPoint((int)Main.worldSurface + 50, 50, 500, 50), GenVars.structures))
					{
						num12++;
					}
					num13++;
				}
				progress.Set(0.4);
				progress.Set(6.0 / num2);
				progress.Set(7.0 / num2);
				TrackGenerator trackGenerator = new TrackGenerator();
				int random5 = passConfig.Get<WorldGenRange>("LongTrackCount").GetRandom(WorldGen.genRand);
				WorldGenRange worldGenRange = passConfig.Get<WorldGenRange>("LongTrackLength");
				int maxTilesX = Main.maxTilesX;
				int num14 = 0;
				int m = 0;
				while (m < random5)
				{
					if (trackGenerator.Place(WorldGen.RandomWorldPoint((int)Main.worldSurface, 10, 200, 10), worldGenRange.ScaledMinimum, worldGenRange.ScaledMaximum))
					{
						m++;
						num14 = 0;
					}
					else
					{
						num14++;
						if (num14 > maxTilesX)
						{
							m++;
							num14 = 0;
						}
					}
				}
				progress.Set(8.0 / num2);
				random5 = passConfig.Get<WorldGenRange>("StandardTrackCount").GetRandom(WorldGen.genRand);
				worldGenRange = passConfig.Get<WorldGenRange>("StandardTrackLength");
				num14 = 0;
				int n = 0;
				while (n < random5)
				{
					if (trackGenerator.Place(WorldGen.RandomWorldPoint((int)Main.worldSurface, 10, 200, 10), worldGenRange.ScaledMinimum, worldGenRange.ScaledMaximum))
					{
						n++;
						num14 = 0;
					}
					else
					{
						num14++;
						if (num14 > maxTilesX)
						{
							n++;
							num14 = 0;
						}
					}
				}
				progress.Set(9.0 / num2);
				if (!WorldGen.notTheBees)
				{
					double num15 = (double)Main.maxTilesX * 0.02;
					if (WorldGen.noTrapsWorldGen)
					{
						num2 *= 5.0;
					}
					else if (WorldGen.getGoodWorldGen)
					{
						num2 *= 2.0;
					}
					int num16 = 0;
					while ((double)num16 < num15)
					{
						for (int num17 = 0; num17 < 10150; num17++)
						{
							int x = WorldGen.genRand.Next(200, Main.maxTilesX - 200);
							int y = WorldGen.genRand.Next(GenVars.lavaLine - 100, Main.maxTilesY - 210);
							if (WorldGen.placeLavaTrap(x, y))
							{
								break;
							}
						}
						num16++;
					}
				}
				progress.Set(1.0);
			});
			WorldGen.AddGenerationPass("Water Plants", delegate(GenerationProgress progress, GameConfiguration passConfig)
			{
				progress.Message = Lang.gen[88].Value;
				int num = (int)Main.worldSurface;
				if (WorldGen.remixWorldGen)
				{
					num = Main.maxTilesY - 200;
				}
				for (int i = 20; i < Main.maxTilesX - 20; i++)
				{
					progress.Set((double)i / (double)Main.maxTilesX);
					for (int j = 1; j < num; j++)
					{
						if (WorldGen.genRand.Next(5) == 0 && Main.tile[i, j].liquid > 0)
						{
							if (!Main.tile[i, j].active())
							{
								if (WorldGen.genRand.Next(2) == 0)
								{
									WorldGen.PlaceLilyPad(i, j);
								}
								else
								{
									Point point = WorldGen.PlaceCatTail(i, j);
									if (WorldGen.InWorld(point.X, point.Y, 0))
									{
										int num2 = WorldGen.genRand.Next(14);
										for (int k = 0; k < num2; k++)
										{
											WorldGen.GrowCatTail(point.X, point.Y);
										}
										WorldGen.SquareTileFrame(point.X, point.Y, true);
									}
								}
							}
							if ((!Main.tile[i, j].active() || Main.tile[i, j].type == 61 || Main.tile[i, j].type == 74) && WorldGen.PlaceBamboo(i, j))
							{
								int num3 = WorldGen.genRand.Next(10, 20);
								int num4 = 0;
								while (num4 < num3 && WorldGen.PlaceBamboo(i, j - num4))
								{
									num4++;
								}
							}
						}
					}
					int num5 = Main.UnderworldLayer;
					while ((double)num5 > Main.worldSurface)
					{
						if (Main.tile[i, num5].type == 53 && WorldGen.genRand.Next(3) != 0)
						{
							WorldGen.GrowCheckSeaweed(i, num5);
						}
						else if (Main.tile[i, num5].type == 549)
						{
							WorldGen.GrowCheckSeaweed(i, num5);
						}
						num5--;
					}
				}
			});
			WorldGen.AddGenerationPass("Stalac", delegate(GenerationProgress progress, GameConfiguration passConfig)
			{
				progress.Set(1.0);
				for (int i = 20; i < Main.maxTilesX - 20; i++)
				{
					for (int j = (int)Main.worldSurface; j < Main.maxTilesY - 20; j++)
					{
						if ((Main.tenthAnniversaryWorld || WorldGen.drunkWorldGen || WorldGen.genRand.Next(5) == 0) && Main.tile[i, j - 1].liquid == 0)
						{
							int num = WorldGen.genRand.Next(7);
							int treeTileType = 0;
							switch (num)
							{
							case 0:
								treeTileType = 583;
								break;
							case 1:
								treeTileType = 584;
								break;
							case 2:
								treeTileType = 585;
								break;
							case 3:
								treeTileType = 586;
								break;
							case 4:
								treeTileType = 587;
								break;
							case 5:
								treeTileType = 588;
								break;
							case 6:
								treeTileType = 589;
								break;
							}
							WorldGen.TryGrowingTreeByType(treeTileType, i, j);
						}
						if (!WorldGen.oceanDepths(i, j) && !Main.tile[i, j].active() && WorldGen.genRand.Next(5) == 0)
						{
							if ((Main.tile[i, j - 1].type == 1 || Main.tile[i, j - 1].type == 147 || Main.tile[i, j - 1].type == 161 || Main.tile[i, j - 1].type == 25 || Main.tile[i, j - 1].type == 203 || Main.tileStone[(int)Main.tile[i, j - 1].type] || Main.tileMoss[(int)Main.tile[i, j - 1].type]) && !Main.tile[i, j].active() && !Main.tile[i, j + 1].active())
							{
								Main.tile[i, j - 1].slope(0);
							}
							if ((Main.tile[i, j + 1].type == 1 || Main.tile[i, j + 1].type == 147 || Main.tile[i, j + 1].type == 161 || Main.tile[i, j + 1].type == 25 || Main.tile[i, j + 1].type == 203 || Main.tileStone[(int)Main.tile[i, j + 1].type] || Main.tileMoss[(int)Main.tile[i, j + 1].type]) && !Main.tile[i, j].active() && !Main.tile[i, j - 1].active())
							{
								Main.tile[i, j + 1].slope(0);
							}
							WorldGen.PlaceTight(i, j, false);
						}
					}
					for (int k = 5; k < (int)Main.worldSurface; k++)
					{
						if ((Main.tile[i, k - 1].type == 147 || Main.tile[i, k - 1].type == 161) && WorldGen.genRand.Next(5) == 0)
						{
							if (!Main.tile[i, k].active() && !Main.tile[i, k + 1].active())
							{
								Main.tile[i, k - 1].slope(0);
							}
							WorldGen.PlaceTight(i, k, false);
						}
						if ((Main.tile[i, k - 1].type == 25 || Main.tile[i, k - 1].type == 203) && WorldGen.genRand.Next(5) == 0)
						{
							if (!Main.tile[i, k].active() && !Main.tile[i, k + 1].active())
							{
								Main.tile[i, k - 1].slope(0);
							}
							WorldGen.PlaceTight(i, k, false);
						}
						if ((Main.tile[i, k + 1].type == 25 || Main.tile[i, k + 1].type == 203) && WorldGen.genRand.Next(5) == 0)
						{
							if (!Main.tile[i, k].active() && !Main.tile[i, k - 1].active())
							{
								Main.tile[i, k + 1].slope(0);
							}
							WorldGen.PlaceTight(i, k, false);
						}
					}
				}
			});
			WorldGen.AddGenerationPass("Remove Broken Traps", delegate(GenerationProgress progress, GameConfiguration passConfig)
			{
				if (!WorldGen.noTrapsWorldGen || WorldGen.tenthAnniversaryWorldGen || WorldGen.notTheBees)
				{
					progress.Message = Lang.gen[82].Value;
					List<Point> list = new List<Point>();
					int num = 50;
					for (int i = num; i < Main.maxTilesX - num; i++)
					{
						double value = (double)(i - num) / (double)(Main.maxTilesX - num * 2);
						progress.Set(value);
						for (int j = 50; j < Main.maxTilesY - 50; j++)
						{
							if (Main.tile[i, j].wire() && !list.Contains(new Point(i, j)))
							{
								WorldGen.ClearBrokenTraps(new Point(i, j), list);
							}
						}
					}
				}
			});
			WorldGen.AddGenerationPass("Final Cleanup", delegate(GenerationProgress progress, GameConfiguration passConfig)
			{
				Main.tileSolid[484] = false;
				WorldGen.FillWallHolesInArea(new Rectangle(0, 0, Main.maxTilesX, (int)Main.worldSurface));
				progress.Message = Lang.gen[86].Value;
				for (int i = 0; i < Main.maxTilesX; i++)
				{
					progress.Set((double)i / (double)Main.maxTilesX);
					for (int j = 0; j < Main.maxTilesY; j++)
					{
						if (Main.tile[i, j].active() && !WorldGen.SolidTile(i, j + 1, false) && (Main.tile[i, j].type == 53 || Main.tile[i, j].type == 112 || Main.tile[i, j].type == 234 || Main.tile[i, j].type == 224 || Main.tile[i, j].type == 123))
						{
							if ((double)j < Main.worldSurface + 10.0 && !Main.tile[i, j + 1].active() && Main.tile[i, j + 1].wall != 191 && !WorldGen.oceanDepths(i, j))
							{
								int num = 10;
								int num2 = j + 1;
								int k = num2;
								while (k < num2 + 10)
								{
									if (Main.tile[i, k].active() && Main.tile[i, k].type == 314)
									{
										num = 0;
										IL_24E:
										while (!Main.tile[i, num2].active() && num > 0 && num2 < Main.maxTilesY - 50)
										{
											Main.tile[i, num2 - 1].slope(0);
											Main.tile[i, num2 - 1].halfBrick(false);
											Main.tile[i, num2].active(true);
											Main.tile[i, num2].type = Main.tile[i, j].type;
											Main.tile[i, num2].slope(0);
											Main.tile[i, num2].halfBrick(false);
											num2++;
											num--;
										}
										if (num == 0 && !Main.tile[i, num2].active())
										{
											ushort type = Main.tile[i, j].type;
											if (type <= 112)
											{
												if (type == 53)
												{
													Main.tile[i, num2].type = 397;
													Main.tile[i, num2].active(true);
													goto IL_5B2;
												}
												if (type != 112)
												{
													goto IL_5B2;
												}
												Main.tile[i, num2].type = 398;
												Main.tile[i, num2].active(true);
												goto IL_5B2;
											}
											else
											{
												if (type == 123)
												{
													Main.tile[i, num2].type = 1;
													Main.tile[i, num2].active(true);
													goto IL_5B2;
												}
												if (type == 224)
												{
													Main.tile[i, num2].type = 147;
													Main.tile[i, num2].active(true);
													goto IL_5B2;
												}
												if (type != 234)
												{
													goto IL_5B2;
												}
												Main.tile[i, num2].type = 399;
												Main.tile[i, num2].active(true);
												goto IL_5B2;
											}
										}
										else
										{
											if (Main.tile[i, num2].active() && Main.tileSolid[(int)Main.tile[i, num2].type] && !Main.tileSolidTop[(int)Main.tile[i, num2].type])
											{
												Main.tile[i, num2].slope(0);
												Main.tile[i, num2].halfBrick(false);
												goto IL_5B2;
											}
											goto IL_5B2;
										}
									}
									else
									{
										k++;
									}
								}
								goto IL_24E;
							}
							if (Main.tileSolid[(int)Main.tile[i, j + 1].type] && !Main.tileSolidTop[(int)Main.tile[i, j + 1].type] && (Main.tile[i, j + 1].topSlope() || Main.tile[i, j + 1].halfBrick()))
							{
								Main.tile[i, j + 1].slope(0);
								Main.tile[i, j + 1].halfBrick(false);
							}
							else
							{
								ushort type = Main.tile[i, j].type;
								if (type <= 112)
								{
									if (type != 53)
									{
										if (type == 112)
										{
											Main.tile[i, j].type = 398;
										}
									}
									else
									{
										Main.tile[i, j].type = 397;
									}
								}
								else if (type != 123)
								{
									if (type != 224)
									{
										if (type == 234)
										{
											Main.tile[i, j].type = 399;
										}
									}
									else
									{
										Main.tile[i, j].type = 147;
									}
								}
								else
								{
									Main.tile[i, j].type = 1;
								}
							}
							IL_5B2:
							if (Main.tile[i, j - 1].type == 323)
							{
								WorldGen.TileFrame(i, j - 1, false, false);
							}
						}
						if ((Main.tile[i, j].wall == 187 || Main.tile[i, j].wall == 216) && Main.tile[i, j].liquid > 0 && !WorldGen.remixWorldGen)
						{
							Main.tile[i, j].liquid = byte.MaxValue;
							Main.tile[i, j].lava(true);
						}
						if (Main.tile[i, j].type == 485 || Main.tile[i, j].type == 187 || Main.tile[i, j].type == 165)
						{
							WorldGen.TileFrame(i, j, false, false);
						}
						if (Main.tile[i, j].type == 28)
						{
							WorldGen.TileFrame(i, j, false, false);
						}
						if (Main.tile[i, j].type == 10 || Main.tile[i, j].type == 11)
						{
							WorldGen.TileFrame(i, j, false, false);
						}
						if (Main.tile[i, j].type == 26)
						{
							WorldGen.TileFrame(i, j, false, false);
						}
						if (TileID.Sets.IsATreeTrunk[(int)Main.tile[i, j].type] || Main.tile[i, j].type == 323)
						{
							WorldGen.TileFrame(i, j, false, false);
						}
						if (Main.tile[i, j].type == 137)
						{
							Main.tile[i, j].slope(0);
							Main.tile[i, j].halfBrick(false);
						}
						if (Main.tile[i, j].active() && TileID.Sets.Boulders[(int)Main.tile[i, j].type])
						{
							int num3 = (int)(Main.tile[i, j].frameX / 18);
							int num4 = i;
							num4 -= num3;
							int num5 = (int)(Main.tile[i, j].frameY / 18);
							int num6 = j;
							num6 -= num5;
							bool flag = false;
							for (int l = 0; l < 2; l++)
							{
								Tile tile = Main.tile[num4 + l, num6 - 1];
								if (tile != null && tile.active() && tile.type == 26)
								{
									flag = true;
									break;
								}
								for (int m = 0; m < 2; m++)
								{
									int num7 = num4 + l;
									int num8 = num6 + m;
									Main.tile[num7, num8].active(true);
									Main.tile[num7, num8].slope(0);
									Main.tile[num7, num8].halfBrick(false);
									Main.tile[num7, num8].type = Main.tile[i, j].type;
									Main.tile[num7, num8].frameX = (short)(l * 18);
									Main.tile[num7, num8].frameY = (short)(m * 18);
								}
							}
							if (flag)
							{
								ushort type2 = 0;
								if (Main.tile[i, j].type == 484)
								{
									type2 = 397;
								}
								for (int n = 0; n < 2; n++)
								{
									for (int num9 = 0; num9 < 2; num9++)
									{
										int num10 = num4 + n;
										int num11 = num6 + num9;
										Main.tile[num10, num11].active(true);
										Main.tile[num10, num11].slope(0);
										Main.tile[num10, num11].halfBrick(false);
										Main.tile[num10, num11].type = type2;
										Main.tile[num10, num11].frameX = 0;
										Main.tile[num10, num11].frameY = 0;
									}
								}
							}
						}
						if (Main.tile[i, j].type == 323 && Main.tile[i, j].liquid > 0)
						{
							WorldGen.KillTile(i, j, false, false, false);
						}
						if (Main.wallDungeon[(int)Main.tile[i, j].wall])
						{
							Main.tile[i, j].lava(false);
							if (Main.tile[i, j].active() && Main.tile[i, j].type == 56)
							{
								WorldGen.KillTile(i, j, false, false, false);
								Main.tile[i, j].lava(false);
								Main.tile[i, j].liquid = byte.MaxValue;
							}
						}
						if (Main.tile[i, j].active() && Main.tile[i, j].type == 314)
						{
							int num12 = 15;
							int num13 = 1;
							int num14 = j;
							while (j - num14 < num12)
							{
								Main.tile[i, num14].liquid = 0;
								num14--;
							}
							num14 = j;
							while (num14 - j < num13)
							{
								Main.tile[i, num14].liquid = 0;
								num14++;
							}
						}
						if (Main.tile[i, j].active() && Main.tile[i, j].type == 332 && !Main.tile[i, j + 1].active())
						{
							Main.tile[i, j + 1].ClearEverything();
							Main.tile[i, j + 1].active(true);
							Main.tile[i, j + 1].type = 332;
						}
						if (i > WorldGen.beachDistance && i < Main.maxTilesX - WorldGen.beachDistance && (double)j < Main.worldSurface && Main.tile[i, j].liquid > 0 && Main.tile[i, j].liquid < 255 && Main.tile[i - 1, j].liquid < 255 && Main.tile[i + 1, j].liquid < 255 && Main.tile[i, j + 1].liquid < 255 && !TileID.Sets.Clouds[(int)Main.tile[i - 1, j].type] && !TileID.Sets.Clouds[(int)Main.tile[i + 1, j].type] && !TileID.Sets.Clouds[(int)Main.tile[i, j + 1].type])
						{
							Main.tile[i, j].liquid = 0;
						}
					}
				}
				int num15 = 0;
				int num16;
				switch (WorldGen.GetWorldSize())
				{
				default:
					num16 = 3;
					break;
				case 1:
					num16 = 6;
					break;
				case 2:
					num16 = 9;
					break;
				}
				if (WorldGen.tenthAnniversaryWorldGen)
				{
					num16 *= 5;
				}
				int num17 = 50;
				int minValue = num17;
				int minValue2 = num17;
				int maxValue = Main.maxTilesX - num17;
				int maxValue2 = Main.maxTilesY - 200;
				int num18 = 3000;
				while (num15 < num16)
				{
					num18--;
					if (num18 <= 0)
					{
						break;
					}
					int num19 = WorldGen.genRand.Next(minValue, maxValue);
					int num20 = WorldGen.genRand.Next(minValue2, maxValue2);
					Tile tile2 = Main.tile[num19, num20];
					if (tile2.active() && tile2.type >= 0 && tile2.type < TileID.Count)
					{
						bool flag2 = TileID.Sets.Dirt[(int)tile2.type];
						if (WorldGen.notTheBees)
						{
							flag2 = (flag2 || TileID.Sets.Mud[(int)tile2.type]);
						}
						if (flag2)
						{
							num15++;
							tile2.ClearTile();
							tile2.active(true);
							tile2.type = 668;
						}
					}
				}
				if (WorldGen.noTrapsWorldGen)
				{
					WorldGen.FinishNoTraps();
				}
				if (Main.tenthAnniversaryWorld)
				{
					WorldGen.FinishTenthAnniversaryWorld();
				}
				if (WorldGen.drunkWorldGen)
				{
					WorldGen.FinishDrunkGen();
				}
				if (WorldGen.notTheBees)
				{
					WorldGen.NotTheBees();
					WorldGen.FinishNotTheBees();
				}
				if (WorldGen.getGoodWorldGen)
				{
					WorldGen.FinishGetGoodWorld();
				}
				if (WorldGen.remixWorldGen)
				{
					WorldGen.FinishRemixWorld();
				}
				WorldGen.ShimmerCleanUp();
				WorldGen.notTheBees = false;
				WorldGen.getGoodWorldGen = false;
				WorldGen.noTileActions = false;
				Main.tileSolid[659] = true;
				Main.tileSolid[(int)GenVars.crackedType] = true;
				Main.tileSolid[484] = true;
				WorldGen.gen = false;
				Main.AnglerQuestSwap();
				WorldGen.skipFramingDuringGen = false;
				progress.Message = Lang.gen[87].Value;
			});
			WorldGen._generator.GenerateWorld(customProgressObject);
			WorldGen.ConsumePostGenActions(GenVars.structures);
			Main.WorldFileMetadata = FileMetadata.FromCurrentSettings(FileType.World);
			Main.NotifyOfEvent(GameNotificationType.WorldGen);
			WorldGen.drunkWorldGenText = false;
		}

		// Token: 0x06000E6B RID: 3691 RVA: 0x00405D60 File Offset: 0x00403F60
		private static Point GetAdjustedFloorPosition(int x, int y)
		{
			int num = x - 1;
			int num2 = y - 2;
			bool flag = false;
			bool flag2 = false;
			while (!flag)
			{
				if (num2 <= Main.spawnTileY - 10)
				{
					break;
				}
				WorldGen.Scan3By3(num, num2, out flag, out flag2);
				if (!flag)
				{
					num2--;
				}
			}
			while (!flag2 && num2 < Main.spawnTileY + 10)
			{
				WorldGen.Scan3By3(num, num2, out flag, out flag2);
				if (!flag2)
				{
					num2++;
				}
			}
			return new Point(num + 1, num2 + 2);
		}

		// Token: 0x06000E6C RID: 3692 RVA: 0x00405DC8 File Offset: 0x00403FC8
		private static void Scan3By3(int topLeftX, int topLeftY, out bool isEmpty, out bool hasFloor)
		{
			isEmpty = true;
			hasFloor = false;
			for (int i = 0; i < 3; i++)
			{
				for (int j = 0; j < 3; j++)
				{
					int i2 = topLeftX + i;
					int j2 = topLeftY + j;
					if (WorldGen.SolidTile(i2, j2, false))
					{
						isEmpty = false;
						goto IL_33;
					}
				}
			}
			IL_33:
			for (int k = 0; k < 3; k++)
			{
				int i3 = topLeftX + k;
				int j3 = topLeftY + 3;
				if (WorldGen.SolidTile(i3, j3, false))
				{
					hasFloor = true;
					return;
				}
			}
		}

		// Token: 0x06000E6D RID: 3693 RVA: 0x00405E2C File Offset: 0x0040402C
		private static void FinishTenthAnniversaryWorld()
		{
			if (!WorldGen.remixWorldGen)
			{
				if (!WorldGen.getGoodWorldGen && !WorldGen.drunkWorldGen)
				{
					WorldGen.ConvertSkyIslands(2, true);
				}
				WorldGen.PaintTheDungeon(24, 24);
				WorldGen.PaintTheLivingTrees(12, 12);
				WorldGen.PaintTheTemple(10, 5);
				WorldGen.PaintTheClouds(12, 12);
				WorldGen.PaintTheSand(7, 7);
				WorldGen.PaintThePyramids(12, 12);
			}
			WorldGen.PaintTheTrees();
			WorldGen.PaintTheMushrooms();
			if (!WorldGen.getGoodWorldGen)
			{
				for (int i = 50; i < Main.maxTilesX - 50; i++)
				{
					for (int j = 50; j < Main.maxTilesY - 50; j++)
					{
						Tile tile = Main.tile[i, j];
						if (WorldGen.genRand.Next(4) == 0 && tile.active() && tile.type == 138 && tile.frameX == 0 && tile.frameY == 0)
						{
							Main.tile[i, j].type = 665;
							Main.tile[i, j + 1].type = 665;
							Main.tile[i + 1, j].type = 665;
							Main.tile[i + 1, j + 1].type = 665;
						}
					}
				}
			}
			if (!WorldGen.getGoodWorldGen)
			{
				WorldGen.ImproveAllChestContents();
			}
		}

		// Token: 0x06000E6E RID: 3694 RVA: 0x00405F80 File Offset: 0x00404180
		private static void PaintTheMushrooms()
		{
			int num = Main.maxTilesY - 20;
			byte b = (byte)WorldGen.genRand.Next(1, 13);
			if (WorldGen.remixWorldGen)
			{
				b = 2;
				num = Main.maxTilesY - 500;
				int num2 = WorldGen.genRand.Next(5, 31);
				if (WorldGen.genRand.Next(2) == 0)
				{
					num2 = WorldGen.genRand.Next(5, 16);
				}
				for (int i = 20; i < Main.maxTilesX - 20; i++)
				{
					if (i % num2 == 0)
					{
						b += 1;
						if (b > 12)
						{
							b = 1;
						}
					}
					for (int j = Main.maxTilesY - 450; j < Main.maxTilesY - 20; j++)
					{
						Tile tile = Main.tile[i, j];
						if (tile.active() && (tile.type == 70 || tile.type == 578 || tile.type == 190 || tile.type == 71 || tile.type == 528 || (tile.type == 519 && tile.frameY == 90)))
						{
							tile.color(b);
						}
						if (tile.wall == 80 || tile.wall == 74)
						{
							tile.wallColor(b);
						}
					}
				}
			}
			b = (byte)WorldGen.genRand.Next(1, 13);
			int num3 = 0;
			for (int k = 20; k < Main.maxTilesX - 20; k++)
			{
				for (int l = 20; l < num; l++)
				{
					Tile tile2 = Main.tile[k, l];
					if (tile2.active() && (tile2.type == 70 || tile2.type == 578 || tile2.type == 190 || tile2.type == 71 || tile2.type == 528 || (tile2.type == 519 && tile2.frameY == 90)))
					{
						tile2.color(b);
						num3 = 10;
					}
					if (tile2.wall == 80 || tile2.wall == 74)
					{
						tile2.wallColor(b);
						num3 = 10;
					}
				}
				num3--;
				if (num3 == 0)
				{
					b += (byte)WorldGen.genRand.Next(1, 3);
					if (b > 12)
					{
						b = 1;
					}
				}
			}
		}

		// Token: 0x06000E6F RID: 3695 RVA: 0x004061D8 File Offset: 0x004043D8
		private static void PaintTheTrees()
		{
			int num = 20;
			if (WorldGen.remixWorldGen)
			{
				num = (int)Main.worldSurface;
			}
			byte b = (byte)WorldGen.genRand.Next(1, 13);
			bool flag = false;
			for (int i = 20; i < Main.maxTilesX - 20; i++)
			{
				bool flag2 = false;
				for (int j = num; j < Main.maxTilesY - 20; j++)
				{
					Tile tile = Main.tile[i, j];
					if (tile.active() && (tile.type == 5 || tile.type == 323 || tile.type == 596 || tile.type == 616))
					{
						tile.color(b);
						flag2 = true;
						flag = true;
					}
				}
				if (flag && !flag2)
				{
					flag = false;
					b += 1;
					if (b > 12)
					{
						b = 1;
					}
				}
			}
		}

		// Token: 0x06000E70 RID: 3696 RVA: 0x004062AC File Offset: 0x004044AC
		private static void PaintTheSand(byte tilePaintColor, byte wallPaintColor)
		{
			for (int i = 20; i < Main.maxTilesX - 20; i++)
			{
				for (int j = 20; j < Main.maxTilesY - 20; j++)
				{
					Tile tile = Main.tile[i, j];
					if (tile.active() && (tile.type == 53 || tile.type == 396 || tile.type == 397))
					{
						tile.color(tilePaintColor);
						if ((double)j > Main.worldSurface)
						{
							if (Main.tile[i, j - 1].type == 165 || Main.tile[i, j - 1].type == 185 || Main.tile[i, j - 1].type == 186 || Main.tile[i, j - 1].type == 187)
							{
								Main.tile[i, j - 1].color(tilePaintColor);
							}
							if (Main.tile[i, j - 2].type == 165 || Main.tile[i, j - 2].type == 185 || Main.tile[i, j - 2].type == 186 || Main.tile[i, j - 2].type == 187)
							{
								Main.tile[i, j - 2].color(tilePaintColor);
							}
							if (Main.tile[i, j + 1].type == 165)
							{
								Main.tile[i, j + 1].color(tilePaintColor);
							}
							if (Main.tile[i, j + 2].type == 165)
							{
								Main.tile[i, j + 2].color(tilePaintColor);
							}
						}
					}
					if (tile.wall == 187 || tile.wall == 216)
					{
						tile.wallColor(tilePaintColor);
					}
				}
			}
		}

		// Token: 0x06000E71 RID: 3697 RVA: 0x004064B4 File Offset: 0x004046B4
		private static void PaintThePurityGrass(byte tilePaintColor, byte wallPaintColor)
		{
			for (int i = 0; i < Main.maxTilesX; i++)
			{
				for (int j = 0; j < Main.maxTilesY; j++)
				{
					Tile tile = Main.tile[i, j];
					if (tile.active())
					{
						if (tile.type == 2)
						{
							tile.color(tilePaintColor);
						}
						else if (tile.type == 185 || tile.type == 186 || tile.type == 187)
						{
							Tile tile2 = tile;
							int num = j;
							while (num < Main.maxTilesY - 20 && (tile2.type == 185 || tile2.type == 186 || tile2.type == 187 || tile2.type == 3 || tile2.type == 73))
							{
								tile2 = Main.tile[i, ++num];
							}
							if (tile2.type == 2)
							{
								tile.color(tilePaintColor);
							}
						}
					}
					if (tile.wall == 66 || tile.wall == 63)
					{
						tile.wallColor(wallPaintColor);
					}
				}
			}
		}

		// Token: 0x06000E72 RID: 3698 RVA: 0x004065CC File Offset: 0x004047CC
		private static void PaintThePyramids(byte tilePaintColor, byte wallPaintColor)
		{
			for (int i = 0; i < Main.maxTilesX; i++)
			{
				for (int j = 0; j < Main.maxTilesY; j++)
				{
					Tile tile = Main.tile[i, j];
					if (tile.active() && tile.type == 151)
					{
						tile.color(tilePaintColor);
					}
					if (tile.wall == 34)
					{
						tile.wallColor(wallPaintColor);
					}
				}
			}
		}

		// Token: 0x06000E73 RID: 3699 RVA: 0x00406634 File Offset: 0x00404834
		private static void PaintTheTemple(byte tilePaintColor, byte wallPaintColor)
		{
			for (int i = 0; i < Main.maxTilesX; i++)
			{
				for (int j = 0; j < Main.maxTilesY; j++)
				{
					Tile tile = Main.tile[i, j];
					if (tile.active())
					{
						bool flag = false;
						if (tile.type == 226)
						{
							flag = true;
						}
						if (tile.type == 137)
						{
							int num = (int)(tile.frameY / 18);
							if (num >= 1 && num <= 4)
							{
								flag = true;
							}
						}
						if (flag)
						{
							tile.color(tilePaintColor);
						}
					}
					if (tile.wall == 87)
					{
						tile.wallColor(wallPaintColor);
					}
				}
			}
		}

		// Token: 0x06000E74 RID: 3700 RVA: 0x004066CC File Offset: 0x004048CC
		private static void PaintTheClouds(byte tilePaintColor, byte wallPaintColor)
		{
			for (int i = 0; i < Main.maxTilesX; i++)
			{
				for (int j = 0; j < Main.maxTilesY; j++)
				{
					Tile tile = Main.tile[i, j];
					if (tile.active() && (tile.type == 189 || tile.type == 196 || tile.type == 460))
					{
						tile.color(tilePaintColor);
					}
					if (tile.wall == 73)
					{
						tile.wallColor(wallPaintColor);
					}
				}
			}
		}

		// Token: 0x06000E75 RID: 3701 RVA: 0x00406750 File Offset: 0x00404950
		private static void PaintTheDungeon(byte tilePaintColor, byte wallPaintColor)
		{
			for (int i = 0; i < Main.maxTilesX; i++)
			{
				for (int j = 0; j < Main.maxTilesY; j++)
				{
					Tile tile = Main.tile[i, j];
					if (tile.active())
					{
						if (Main.tileDungeon[(int)tile.type] || TileID.Sets.CrackedBricks[(int)tile.type])
						{
							tile.color(tilePaintColor);
						}
						if (tile.type == 19)
						{
							int num = (int)(tile.frameY / 18);
							if (num >= 6 && num <= 12)
							{
								tile.color(tilePaintColor);
							}
						}
					}
					if (Main.wallDungeon[(int)tile.wall])
					{
						tile.wallColor(wallPaintColor);
					}
				}
			}
		}

		// Token: 0x06000E76 RID: 3702 RVA: 0x004067F4 File Offset: 0x004049F4
		private static void PaintTheLivingTrees(byte livingTreePaintColor, byte livingTreeWallPaintColor)
		{
			for (int i = 0; i < Main.maxTilesX; i++)
			{
				for (int j = 0; j < Main.maxTilesY; j++)
				{
					Tile tile = Main.tile[i, j];
					if (tile.active())
					{
						if (tile.wall == 244)
						{
							tile.color(livingTreePaintColor);
						}
						else if (tile.type == 192 || tile.type == 191)
						{
							tile.color(livingTreePaintColor);
						}
						else if (tile.type == 52 || tile.type == 382)
						{
							int num = i;
							int num2 = j;
							WorldGen.GetVineTop(i, j, out num, out num2);
							if (Main.tile[num, num2].type == 192)
							{
								tile.color(livingTreePaintColor);
							}
						}
						else if (tile.type == 187)
						{
							Tile tile2 = tile;
							int num3 = 0;
							while (tile2.type == 187)
							{
								num3++;
								tile2 = Main.tile[i, j + num3];
							}
							if (tile2.type == 192)
							{
								tile.color(livingTreePaintColor);
							}
						}
					}
					if (tile.wall == 244)
					{
						tile.wallColor(livingTreeWallPaintColor);
					}
				}
			}
		}

		// Token: 0x06000E77 RID: 3703 RVA: 0x00406930 File Offset: 0x00404B30
		private static void ConvertSkyIslands(int convertType, bool growTrees)
		{
			int num = 0;
			int num2 = 20;
			while ((double)num2 < Main.worldSurface)
			{
				for (int i = 20; i < Main.maxTilesX - 20; i++)
				{
					Tile tile = Main.tile[i, num2];
					if (tile.active() && TileID.Sets.Clouds[(int)tile.type])
					{
						num = num2;
						break;
					}
				}
				num2++;
			}
			for (int j = 20; j <= Main.maxTilesX - 20; j++)
			{
				for (int k = 20; k < num; k++)
				{
					Tile tile2 = Main.tile[j, k];
					Tile tile3 = Main.tile[j, k - 1];
					if (tile2.active() && tile2.type == 2)
					{
						if (tile3.type == 596 || tile3.type == 616)
						{
							WorldGen.KillTile(j, k - 1, false, false, false);
						}
						WorldGen.Convert(j, k, convertType, 1);
						ushort type = tile3.type;
						if (type - 82 <= 1 || type - 185 <= 2 || type == 227)
						{
							WorldGen.KillTile(j, k - 1, false, false, false);
						}
						if (growTrees && WorldGen._genRand.Next(3) == 0)
						{
							WorldGen.GrowTree(j, k);
						}
					}
				}
			}
		}

		// Token: 0x06000E78 RID: 3704 RVA: 0x00406A80 File Offset: 0x00404C80
		private static void ImproveAllChestContents()
		{
			for (int i = 0; i < 8000; i++)
			{
				Chest chest = Main.chest[i];
				if (chest != null)
				{
					for (int j = 0; j < 40; j++)
					{
						Item item = chest.item[j];
						if (item != null && !item.IsAir)
						{
							WorldGen.GiveItemGoodPrefixes(item);
						}
					}
				}
			}
		}

		// Token: 0x06000E79 RID: 3705 RVA: 0x00406AD0 File Offset: 0x00404CD0
		private static void GiveItemGoodPrefixes(Item item)
		{
			if (item.accessory)
			{
				WorldGen.PrefixItemFromOptions(item, WorldGen.TenthAnniversaryWorldInfo.GoodPrefixIdsForAccessory);
			}
			if (item.melee)
			{
				WorldGen.PrefixItemFromOptions(item, WorldGen.TenthAnniversaryWorldInfo.GoodPrefixIdsForMeleeWeapon);
			}
			if (item.ranged)
			{
				WorldGen.PrefixItemFromOptions(item, WorldGen.TenthAnniversaryWorldInfo.GoodPrefixIdsForRangedWeapon);
			}
			if (item.magic)
			{
				WorldGen.PrefixItemFromOptions(item, WorldGen.TenthAnniversaryWorldInfo.GoodPrefixIdsForMagicWeapon);
			}
			if (item.summon)
			{
				WorldGen.PrefixItemFromOptions(item, WorldGen.TenthAnniversaryWorldInfo.GoodPrefixIdsForSummonerWeapon);
			}
		}

		// Token: 0x06000E7A RID: 3706 RVA: 0x00406B3C File Offset: 0x00404D3C
		private static void PrefixItemFromOptions(Item item, int[] options)
		{
			byte prefix = item.prefix;
			if (!item.Prefix(-3))
			{
				return;
			}
			List<int> list = new List<int>(options);
			while (list.Count > 0)
			{
				int index = WorldGen._genRand.Next(list.Count);
				int num = list[index];
				item.Prefix(num);
				if ((int)item.prefix == num)
				{
					return;
				}
				list.RemoveAt(index);
			}
			item.Prefix((int)prefix);
		}

		// Token: 0x06000E7B RID: 3707 RVA: 0x00406BA8 File Offset: 0x00404DA8
		private static void NotTheBees()
		{
			int num = Main.maxTilesX / 7;
			if (!WorldGen.notTheBees)
			{
				return;
			}
			for (int i = 0; i < Main.maxTilesX; i++)
			{
				for (int j = 0; j < Main.maxTilesY - 180; j++)
				{
					if (!WorldGen.remixWorldGen || (i >= num + WorldGen.genRand.Next(3) && i < Main.maxTilesX - num - WorldGen.genRand.Next(3) && ((double)j <= (Main.worldSurface * 2.0 + Main.rockLayer) / 3.0 + (double)WorldGen.genRand.Next(3) || j >= Main.maxTilesY - 350 - WorldGen.genRand.Next(3))))
					{
						if (Main.tile[i, j].type == 52)
						{
							Main.tile[i, j].type = 62;
						}
						if ((WorldGen.SolidOrSlopedTile(i, j) || TileID.Sets.CrackedBricks[(int)Main.tile[i, j].type]) && !TileID.Sets.Ore[(int)Main.tile[i, j].type] && Main.tile[i, j].type != 123 && Main.tile[i, j].type != 40)
						{
							if (Main.tile[i, j].type == 191 || Main.tile[i, j].type == 383)
							{
								if (!WorldGen.remixWorldGen)
								{
									Main.tile[i, j].type = 383;
								}
							}
							else if (Main.tile[i, j].type == 192 || Main.tile[i, j].type == 384)
							{
								if (!WorldGen.remixWorldGen)
								{
									Main.tile[i, j].type = 384;
								}
							}
							else if (Main.tile[i, j].type != 151 && Main.tile[i, j].type != 662 && Main.tile[i, j].type != 661 && Main.tile[i, j].type != 189 && Main.tile[i, j].type != 196 && Main.tile[i, j].type != 120 && Main.tile[i, j].type != 158 && Main.tile[i, j].type != 175 && Main.tile[i, j].type != 45 && Main.tile[i, j].type != 119)
							{
								if (Main.tile[i, j].type >= 63 && Main.tile[i, j].type <= 68)
								{
									Main.tile[i, j].type = 230;
								}
								else if (Main.tile[i, j].type != 57 && Main.tile[i, j].type != 76 && Main.tile[i, j].type != 75 && Main.tile[i, j].type != 229 && Main.tile[i, j].type != 230 && Main.tile[i, j].type != 407 && Main.tile[i, j].type != 404)
								{
									if (Main.tile[i, j].type == 224)
									{
										Main.tile[i, j].type = 229;
									}
									else if (Main.tile[i, j].type == 53)
									{
										if (i < WorldGen.beachDistance + WorldGen.genRand.Next(3) || i > Main.maxTilesX - WorldGen.beachDistance - WorldGen.genRand.Next(3))
										{
											Main.tile[i, j].type = 229;
										}
									}
									else if ((i <= WorldGen.beachDistance - WorldGen.genRand.Next(3) || i >= Main.maxTilesX - WorldGen.beachDistance + WorldGen.genRand.Next(3) || (Main.tile[i, j].type != 397 && Main.tile[i, j].type != 396)) && Main.tile[i, j].type != 10 && Main.tile[i, j].type != 203 && Main.tile[i, j].type != 25 && Main.tile[i, j].type != 137 && Main.tile[i, j].type != 138 && Main.tile[i, j].type != 141)
									{
										if (Main.tileDungeon[(int)Main.tile[i, j].type] || TileID.Sets.CrackedBricks[(int)Main.tile[i, j].type])
										{
											Main.tile[i, j].color(14);
										}
										else if (Main.tile[i, j].type == 226)
										{
											Main.tile[i, j].color(15);
										}
										else if (Main.tile[i, j].type != 202 && Main.tile[i, j].type != 70 && Main.tile[i, j].type != 48 && Main.tile[i, j].type != 232)
										{
											if (TileID.Sets.Conversion.Grass[(int)Main.tile[i, j].type] || Main.tile[i, j].type == 60 || Main.tile[i, j].type == 70)
											{
												if (j > GenVars.lavaLine + WorldGen.genRand.Next(-2, 3) + 2)
												{
													Main.tile[i, j].type = 70;
												}
												else
												{
													Main.tile[i, j].type = 60;
												}
											}
											else if (Main.tile[i, j].type == 0 || Main.tile[i, j].type == 59)
											{
												Main.tile[i, j].type = 59;
											}
											else if (Main.tile[i, j].type != 633)
											{
												if (j > GenVars.lavaLine + WorldGen.genRand.Next(-2, 3) + 2)
												{
													Main.tile[i, j].type = 230;
												}
												else if (!WorldGen.remixWorldGen || (double)j > Main.worldSurface + (double)WorldGen.genRand.Next(-1, 2))
												{
													Main.tile[i, j].type = 225;
												}
											}
										}
									}
								}
							}
						}
						if (Main.tile[i, j].wall != 15 && Main.tile[i, j].wall != 64 && Main.tile[i, j].wall != 204 && Main.tile[i, j].wall != 205 && Main.tile[i, j].wall != 206 && Main.tile[i, j].wall != 207 && Main.tile[i, j].wall != 23 && Main.tile[i, j].wall != 24 && Main.tile[i, j].wall != 42 && Main.tile[i, j].wall != 10 && Main.tile[i, j].wall != 21 && Main.tile[i, j].wall != 82 && Main.tile[i, j].wall != 187 && Main.tile[i, j].wall != 216 && Main.tile[i, j].wall != 34 && Main.tile[i, j].wall != 244)
						{
							if (Main.tile[i, j].wall == 87)
							{
								Main.tile[i, j].wallColor(15);
							}
							else if (Main.wallDungeon[(int)Main.tile[i, j].wall])
							{
								Main.tile[i, j].wallColor(14);
							}
							else if (Main.tile[i, j].wall == 2)
							{
								Main.tile[i, j].wall = 2;
							}
							else if (Main.tile[i, j].wall == 196)
							{
								Main.tile[i, j].wall = 196;
							}
							else if (Main.tile[i, j].wall == 197)
							{
								Main.tile[i, j].wall = 197;
							}
							else if (Main.tile[i, j].wall == 198)
							{
								Main.tile[i, j].wall = 198;
							}
							else if (Main.tile[i, j].wall == 199)
							{
								Main.tile[i, j].wall = 199;
							}
							else if (Main.tile[i, j].wall == 63)
							{
								Main.tile[i, j].wall = 64;
							}
							else if (Main.tile[i, j].wall != 3 && Main.tile[i, j].wall != 83 && Main.tile[i, j].wall != 73 && Main.tile[i, j].wall != 62 && Main.tile[i, j].wall != 13 && Main.tile[i, j].wall != 14 && Main.tile[i, j].wall > 0 && (!WorldGen.remixWorldGen || (double)j > Main.worldSurface + (double)WorldGen.genRand.Next(-1, 2)))
							{
								Main.tile[i, j].wall = 86;
							}
						}
						if (Main.tile[i, j].liquid > 0 && j <= GenVars.lavaLine + 2)
						{
							if ((double)j > Main.rockLayer && (i < WorldGen.beachDistance + 200 || i > Main.maxTilesX - WorldGen.beachDistance - 200))
							{
								Main.tile[i, j].honey(false);
							}
							else if (Main.wallDungeon[(int)Main.tile[i, j].wall])
							{
								Main.tile[i, j].honey(false);
							}
							else
							{
								Main.tile[i, j].honey(true);
							}
						}
					}
				}
			}
		}

		// Token: 0x06000E7C RID: 3708 RVA: 0x004077F4 File Offset: 0x004059F4
		private static void FinishNotTheBees()
		{
			if (!WorldGen.notTheBees)
			{
				return;
			}
			int num = 0;
			int num2 = 20;
			while ((double)num2 < Main.worldSurface)
			{
				for (int i = 20; i < Main.maxTilesX - 20; i++)
				{
					if (Main.tile[i, num2].active() && TileID.Sets.Clouds[(int)Main.tile[i, num2].type])
					{
						num = num2;
						break;
					}
				}
				num2++;
			}
			for (int j = 25; j < Main.maxTilesX - 25; j++)
			{
				for (int k = 25; k < Main.maxTilesY - 25; k++)
				{
					if (Main.tile[j, k].type == 571)
					{
						WorldGen.TileFrame(j, k, false, false);
					}
					int num3 = 20;
					if (WorldGen.remixWorldGen)
					{
						num3 = 10;
					}
					if (Main.tile[j, k].type == 25 || (WorldGen.remixWorldGen && Main.tile[j, k].type == 23 && (double)k < Main.worldSurface))
					{
						for (int l = j - num3; l <= j + num3; l++)
						{
							for (int m = k - num3; m <= k + num3; m++)
							{
								if (Main.tile[l, m].type == 60)
								{
									if (Main.tile[l, m + 1].type == 444)
									{
										WorldGen.KillTile(l, m + 1, false, false, false);
									}
									Main.tile[l, m].type = 661;
									if (Main.tile[l, m - 1].type == 61 || Main.tile[l, m - 1].type == 74)
									{
										Main.tile[l, m - 1].active(false);
										WorldGen.PlaceTile(l, m - 1, 24, false, false, -1, 0);
									}
								}
								else if (Main.tile[l, m - 1].type == 233 || Main.tile[l, m - 1].type == 82)
								{
									WorldGen.KillTile(l, m - 1, false, false, false);
								}
							}
						}
					}
					else if (Main.tile[j, k].type == 203 || (WorldGen.remixWorldGen && Main.tile[j, k].type == 199 && (double)k < Main.worldSurface))
					{
						for (int n = j - num3; n <= j + num3; n++)
						{
							for (int num4 = k - num3; num4 <= k + num3; num4++)
							{
								if (Main.tile[n, num4].type == 60)
								{
									if (Main.tile[n, num4 + 1].type == 444)
									{
										WorldGen.KillTile(n, num4 + 1, false, false, false);
									}
									Main.tile[n, num4].type = 662;
									if (Main.tile[n, num4 - 1].type == 61 || Main.tile[n, num4 - 1].type == 74)
									{
										Main.tile[n, num4 - 1].active(false);
										WorldGen.PlaceTile(n, num4 - 1, 201, false, false, -1, 0);
									}
									else if (Main.tile[n, num4 - 1].type == 233 || Main.tile[n, num4 - 1].type == 82)
									{
										WorldGen.KillTile(n, num4 - 1, false, false, false);
									}
								}
							}
						}
					}
					if (Main.tile[j, k].type == 382 || Main.tile[j, k].type == 52)
					{
						Main.tile[j, k].type = 62;
					}
					if (k > GenVars.lavaLine + WorldGen.genRand.Next(-2, 3) + 2)
					{
						if (!WorldGen.remixWorldGen)
						{
							WorldGen.SpreadGrass(j, k, 59, 70, true, default(TileColorCache));
						}
					}
					else
					{
						WorldGen.SpreadGrass(j, k, 59, 60, true, default(TileColorCache));
					}
					if ((double)k > Main.rockLayer + 20.0 + (double)WorldGen.genRand.Next(-2, 3) && k <= GenVars.lavaLine + 2 - 20 - WorldGen.genRand.Next(-2, 3) && (j < WorldGen.beachDistance + 200 - 20 - WorldGen.genRand.Next(-2, 3) || j > Main.maxTilesX - WorldGen.beachDistance - 200 + 20 + WorldGen.genRand.Next(-2, 3)))
					{
						if (Main.tile[j, k].liquid > 0)
						{
							Main.tile[j, k].honey(false);
							Main.tile[j, k].lava(false);
						}
						if (Main.tile[j, k].type == 59)
						{
							bool flag = false;
							for (int num5 = j - 1; num5 <= j + 1; num5++)
							{
								for (int num6 = k - 1; num6 <= k + 1; num6++)
								{
									if (Main.tile[num5, num6].type == 60)
									{
										flag = true;
									}
								}
							}
							if (!flag)
							{
								if ((double)k < (Main.rockLayer + (double)GenVars.lavaLine) / 2.0)
								{
									Main.tile[j, k].type = 161;
								}
								else
								{
									Main.tile[j, k].type = 147;
								}
							}
						}
					}
					if (!WorldGen.remixWorldGen)
					{
						if ((Main.tile[j, k].type == 7 || Main.tile[j, k].type == 166 || Main.tile[j, k].type == 6 || Main.tile[j, k].type == 167) && (double)k > ((double)GenVars.lavaLine + Main.rockLayer * 2.0) / 3.0 + (double)WorldGen.genRand.Next(-2, 3) + 2.0)
						{
							Main.tile[j, k].type = 0;
						}
					}
					else if (!WorldGen.remixWorldGen && (Main.tile[j, k].type == 123 || Main.tile[j, k].type == 40) && (double)k > ((double)GenVars.lavaLine + Main.rockLayer) / 2.0 + (double)WorldGen.genRand.Next(-2, 3) + 2.0)
					{
						Main.tile[j, k].type = 1;
					}
					if (k > num && (Main.tile[j, k].liquid == 0 || (!Main.tile[j, k].lava() && !Main.tile[j, k].shimmer())))
					{
						if (WorldGen.getGoodWorldGen)
						{
							if (WorldGen.genRand.Next(150) == 0)
							{
								WorldGen.PlaceTile(j, k, 231, true, false, -1, 0);
							}
						}
						else if (WorldGen.genRand.Next(25) == 0)
						{
							WorldGen.PlaceTile(j, k, 231, true, false, -1, 0);
						}
					}
				}
			}
			for (int num7 = 20; num7 < num; num7++)
			{
				for (int num8 = 20; num8 <= Main.maxTilesX - 20; num8++)
				{
					Main.tile[num8, num7].honey(false);
					if (Main.tile[num8, num7].type == 375)
					{
						Main.tile[num8, num7].type = 373;
					}
					if (!WorldGen.remixWorldGen)
					{
						if (Main.tile[num8, num7].type == 60)
						{
							Main.tile[num8, num7].type = 2;
							if (WorldGen.genRand.Next(2) == 0)
							{
								WorldGen.GrowTreeWithSettings(num8, num7, WorldGen.GrowTreeSettings.Profiles.VanityTree_Willow);
							}
							else
							{
								WorldGen.GrowTreeWithSettings(num8, num7, WorldGen.GrowTreeSettings.Profiles.VanityTree_Sakura);
							}
							if (!Main.tile[num8, num7 - 1].active())
							{
								WorldGen.PlaceTile(num8, num7 - 1, 3, false, false, -1, 0);
							}
						}
						if (Main.tile[num8, num7].type == 59)
						{
							Main.tile[num8, num7].type = 0;
						}
					}
					else
					{
						WorldGen.GrowTree(num8, num7);
					}
				}
			}
		}

		// Token: 0x06000E7D RID: 3709 RVA: 0x004080E0 File Offset: 0x004062E0
		private static void FinishGetGoodWorld()
		{
			int num = 0;
			int num2 = 20;
			while ((double)num2 < Main.worldSurface)
			{
				for (int i = 20; i < Main.maxTilesX - 20; i++)
				{
					if (Main.tile[i, num2].active() && TileID.Sets.Clouds[(int)Main.tile[i, num2].type])
					{
						num = num2;
						break;
					}
				}
				num2++;
			}
			byte b = (byte)WorldGen.genRand.Next(13, 25);
			for (int j = 0; j < Main.maxTilesX; j++)
			{
				bool flag = false;
				for (int k = 0; k < Main.maxTilesY; k++)
				{
					if (Main.tile[j, k].active() && Main.tileDungeon[(int)Main.tile[j, k].type])
					{
						if (Main.tile[j, k].type == 44)
						{
							b = (byte)WorldGen.genRand.Next(13, 15);
							if (WorldGen.genRand.Next(2) == 0)
							{
								b = (byte)WorldGen.genRand.Next(23, 25);
							}
						}
						if (Main.tile[j, k].type == 43)
						{
							b = (byte)WorldGen.genRand.Next(15, 19);
						}
						if (Main.tile[j, k].type == 41)
						{
							b = (byte)WorldGen.genRand.Next(19, 23);
						}
					}
				}
				if (flag)
				{
					break;
				}
			}
			for (int l = 0; l < Main.maxTilesX; l++)
			{
				for (int m = 5; m < Main.maxTilesY - 5; m++)
				{
					if (Main.tile[l, m].active() && (Main.tileDungeon[(int)Main.tile[l, m].type] || TileID.Sets.CrackedBricks[(int)Main.tile[l, m].type]))
					{
						Main.tile[l, m].color(b);
					}
					if (Main.wallDungeon[(int)Main.tile[l, m].wall])
					{
						Main.tile[l, m].wallColor(b);
					}
					if (Main.tile[l, m].active())
					{
						bool flag2 = false;
						if (Main.tile[l, m].type == 226)
						{
							flag2 = true;
						}
						if (Main.tile[l, m].type == 137)
						{
							int num3 = (int)(Main.tile[l, m].frameY / 18);
							if (num3 >= 1 && num3 <= 4)
							{
								flag2 = true;
							}
						}
						if (flag2)
						{
							Main.tile[l, m].color(17);
						}
					}
					if (Main.tile[l, m].wall == 87)
					{
						Main.tile[l, m].wallColor(25);
					}
					if (Main.tile[l, m].active())
					{
						if (!WorldGen.remixWorldGen && Main.tile[l, m].type == 57 && WorldGen.genRand.Next(15) == 0)
						{
							if (Main.tile[l, m - 1].type == 57)
							{
								Main.tile[l, m].active(false);
							}
							Main.tile[l, m].liquid = byte.MaxValue;
							Main.tile[l, m].lava(true);
						}
						if (m < num && Main.tile[l, m].type == 2)
						{
							if (WorldGen.crimson)
							{
								Main.tile[l, m].type = 199;
							}
							else
							{
								Main.tile[l, m].type = 23;
							}
							if (Main.tile[l, m - 1].type == 3)
							{
								Main.tile[l, m - 1].active(false);
							}
							if (Main.tile[l, m - 1].type == 73)
							{
								Main.tile[l, m - 1].active(false);
							}
							if (Main.tile[l, m - 1].type == 27)
							{
								WorldGen.KillTile(l, m - 1, false, false, false);
							}
							if (Main.tile[l, m - 1].type == 596)
							{
								WorldGen.KillTile(l, m - 1, false, false, false);
							}
							if (Main.tile[l, m - 1].type == 616)
							{
								WorldGen.KillTile(l, m - 1, false, false, false);
							}
							if (Main.tile[l, m - 1].type == 82)
							{
								WorldGen.KillTile(l, m - 1, false, false, false);
							}
							if (Main.tile[l, m - 1].type == 83)
							{
								WorldGen.KillTile(l, m - 1, false, false, false);
							}
							if (Main.tile[l, m - 1].type == 186)
							{
								WorldGen.KillTile(l, m - 1, false, false, false);
							}
							if (Main.tile[l, m - 1].type == 187)
							{
								WorldGen.KillTile(l, m - 1, false, false, false);
							}
							if (Main.tile[l, m - 1].type == 185)
							{
								WorldGen.KillTile(l, m - 1, false, false, false);
							}
							if (Main.tile[l, m - 1].type == 227)
							{
								WorldGen.KillTile(l, m - 1, false, false, false);
							}
						}
					}
				}
			}
			int num4 = 0;
			while (num4 < 8000 && Main.chest[num4] != null)
			{
				if (WorldGen.genRand.Next(10) == 0 && Main.chest[num4].item[1].stack != 0)
				{
					for (int n = 1; n < 40; n++)
					{
						if (Main.chest[num4].item[n].stack == 0)
						{
							Main.chest[num4].item[n].SetDefaults(678);
							break;
						}
					}
				}
				num4++;
			}
		}

		// Token: 0x06000E7E RID: 3710 RVA: 0x00408720 File Offset: 0x00406920
		private static void FinishNoTraps()
		{
			Main.tileSolid[138] = false;
			for (int i = 50; i < Main.maxTilesX - 50; i++)
			{
				for (int j = 50; j < Main.maxTilesY - 50; j++)
				{
					Tile tile = Main.tile[i, j];
					if (WorldGen.genRand.Next(5) == 0 && tile.active() && tile.type == 12 && tile.frameX == 0 && tile.frameY == 0)
					{
						Main.tile[i, j].type = 665;
						Main.tile[i, j + 1].type = 665;
						Main.tile[i + 1, j].type = 665;
						Main.tile[i + 1, j + 1].type = 665;
					}
					if (i % 2 == 0 && j % 2 == 0 && Main.tile[i, j].active() && (Main.tile[i, j].type == 105 || (Main.tile[i, j].type == 467 && (Main.tile[i, j].frameX == 144 || Main.tile[i, j].frameX == 162))))
					{
						bool flag = false;
						for (int k = i - 1; k <= i + 1; k++)
						{
							for (int l = j - 1; l <= j + 1; l++)
							{
								if (Main.tile[k, l].wire())
								{
									flag = true;
								}
							}
						}
						if (!flag)
						{
							bool flag2 = false;
							int num = 25;
							int num2 = -1;
							int num3 = -1;
							for (int m = 0; m < num * num; m++)
							{
								num2 = WorldGen.genRand.Next(i - num, i + num + 1);
								num3 = WorldGen.genRand.Next(j - num, j + num + 1);
								if (Main.tile[num2, num3].wire())
								{
									flag2 = true;
									break;
								}
							}
							if (flag2)
							{
								int num4 = i;
								int num5 = j;
								Main.tile[num4, num5].wire(true);
								while (num4 != num2)
								{
									if (num4 < num2)
									{
										num4++;
									}
									if (num4 > num2)
									{
										num4--;
									}
									Main.tile[num4, num5].wire(true);
								}
								while (num5 != num3)
								{
									if (num5 < num3)
									{
										num5++;
									}
									if (num5 > num3)
									{
										num5--;
									}
									Main.tile[num4, num5].wire(true);
								}
							}
							else if (Main.tile[i, j].type == 105)
							{
								num = 15;
								bool flag3 = false;
								for (int n = 0; n < num * num; n++)
								{
									num2 = i + WorldGen.genRand.Next(-num, num + 1);
									num3 = j + WorldGen.genRand.Next(-num, num + 1);
									WorldGen.PlaceTile(num2, num3, 135, true, true, -1, WorldGen.genRand.Next(2, 4));
									if (Main.tile[num2, num3].type == 135)
									{
										flag3 = true;
										break;
									}
								}
								if (flag3)
								{
									int num6 = i;
									int num7 = j;
									Main.tile[num6, num7].wire(true);
									while (num6 != num2)
									{
										if (num6 < num2)
										{
											num6++;
										}
										if (num6 > num2)
										{
											num6--;
										}
										Main.tile[num6, num7].wire(true);
									}
									while (num7 != num3)
									{
										if (num7 < num3)
										{
											num7++;
										}
										if (num7 > num3)
										{
											num7--;
										}
										Main.tile[num6, num7].wire(true);
									}
								}
							}
						}
						if (Main.tile[i, j].type == 467)
						{
							int num8 = 8;
							for (int num9 = 0; num9 < num8 * num8; num9++)
							{
								int num10 = i + WorldGen.genRand.Next(-num8, num8 + 1);
								int num11 = j + WorldGen.genRand.Next(-num8, num8 + 1);
								if (Main.tile[num10, num11].type == 0 || Main.tile[num10, num11].type == 1 || TileID.Sets.Ore[(int)Main.tile[num10, num11].type] || Main.tile[num10, num11].type == 59 || Main.tile[num10, num11].type == 151)
								{
									bool flag4 = true;
									for (int num12 = num10 - 1; num12 <= num10 + 1; num12++)
									{
										for (int num13 = num11 - 1; num13 <= num11 + 1; num13++)
										{
											if (!WorldGen.SolidTile(num12, num13, false))
											{
												flag4 = false;
											}
										}
									}
									if (flag4)
									{
										Tile tile2 = Main.tile[num10, num11];
										tile2.type = 141;
										tile2.frameX = (tile2.frameY = 0);
										tile2.slope(0);
										tile2.halfBrick(false);
										WorldGen.TileFrame(num10, num11, true, false);
										if (Main.tile[num10, num11].type == 141)
										{
											int num14 = i;
											int num15 = j;
											Main.tile[num14, num15].wire(true);
											while (num14 != num10)
											{
												if (num14 < num10)
												{
													num14++;
												}
												if (num14 > num10)
												{
													num14--;
												}
												Main.tile[num14, num15].wire(true);
											}
											while (num15 != num11)
											{
												if (num15 < num11)
												{
													num15++;
												}
												if (num15 > num11)
												{
													num15--;
												}
												Main.tile[num14, num15].wire(true);
											}
											break;
										}
									}
								}
							}
						}
						else
						{
							j++;
						}
					}
				}
			}
			Main.tileSolid[138] = true;
			int num16 = 0;
			while (num16 < 8000 && Main.chest[num16] != null)
			{
				if (WorldGen.genRand.Next(20) == 0 && Main.chest[num16].item[1].stack != 0)
				{
					for (int num17 = 1; num17 < 40; num17++)
					{
						if (Main.chest[num16].item[num17].stack == 0)
						{
							Main.chest[num16].item[num17].SetDefaults(5346);
							break;
						}
					}
				}
				num16++;
			}
		}

		// Token: 0x06000E7F RID: 3711 RVA: 0x00408D94 File Offset: 0x00406F94
		private static void FinishDrunkGen()
		{
			byte color = (byte)WorldGen.genRand.Next(13, 25);
			byte b = 16;
			for (int i = 0; i < Main.maxTilesX; i++)
			{
				bool flag = false;
				for (int j = 0; j < Main.maxTilesY; j++)
				{
					if (Main.tile[i, j].active() && Main.tileDungeon[(int)Main.tile[i, j].type])
					{
						if (Main.tile[i, j].type == 44)
						{
							color = (byte)WorldGen.genRand.Next(13, 15);
							if (WorldGen.genRand.Next(2) == 0)
							{
								color = (byte)WorldGen.genRand.Next(23, 25);
							}
						}
						if (Main.tile[i, j].type == 43)
						{
							color = (byte)WorldGen.genRand.Next(15, 19);
						}
						if (Main.tile[i, j].type == 41)
						{
							color = (byte)WorldGen.genRand.Next(19, 23);
						}
					}
				}
				if (flag)
				{
					break;
				}
			}
			for (int k = 10; k < Main.maxTilesX - 10; k++)
			{
				for (int l = 10; l < Main.maxTilesY - 10; l++)
				{
					if (Main.tile[k, l].active() && (Main.tileDungeon[(int)Main.tile[k, l].type] || TileID.Sets.CrackedBricks[(int)Main.tile[k, l].type]))
					{
						Main.tile[k, l].color(color);
					}
					if (Main.wallDungeon[(int)Main.tile[k, l].wall])
					{
						Main.tile[k, l].wallColor(25);
					}
					if (Main.tile[k, l].active())
					{
						if (Main.tile[k, l].type == 60)
						{
							int num = 1;
							for (int m = k - num; m <= k + num; m++)
							{
								for (int n = l - num; n <= l + num; n++)
								{
									if (Main.tile[m, n].type == 147 || Main.tile[m, n].type == 161)
									{
										Main.tile[m, n].type = 59;
									}
								}
							}
						}
						bool flag2 = false;
						if (Main.tile[k, l].type == 226)
						{
							flag2 = true;
						}
						if (Main.tile[k, l].type == 137)
						{
							int num2 = (int)(Main.tile[k, l].frameY / 18);
							if (num2 >= 1 && num2 <= 4)
							{
								flag2 = true;
							}
						}
						if (flag2)
						{
							Main.tile[k, l].color(b);
						}
					}
					if (Main.tile[k, l].wall == 87)
					{
						Main.tile[k, l].wallColor(b);
					}
				}
			}
			int num3 = 0;
			while (num3 < 8000 && Main.chest[num3] != null)
			{
				if (WorldGen.genRand.Next(15) == 0 && Main.chest[num3].item[1].stack != 0)
				{
					for (int num4 = 1; num4 < 40; num4++)
					{
						if (Main.chest[num3].item[num4].stack == 0)
						{
							Main.chest[num3].item[num4].SetDefaults(5001);
							break;
						}
					}
				}
				if (WorldGen.genRand.Next(30) == 0 && Main.chest[num3].item[1].stack != 0)
				{
					for (int num5 = 1; num5 < 40; num5++)
					{
						if (Main.chest[num3].item[num5].stack == 0)
						{
							Main.chest[num3].item[num5].SetDefaults(678);
							break;
						}
					}
				}
				num3++;
			}
		}

		// Token: 0x06000E80 RID: 3712 RVA: 0x004091BC File Offset: 0x004073BC
		private static void FinishRemixWorld()
		{
			for (int i = 25; i < Main.maxTilesX - 25; i++)
			{
				for (int j = 25; j < Main.maxTilesY - 25; j++)
				{
					int conversionType = 1;
					if (WorldGen.crimson)
					{
						conversionType = 4;
					}
					if (WorldGen.notTheBees && (double)j < Main.worldSurface)
					{
						if (Main.tile[i, j].honey())
						{
							if (Main.tileLavaDeath[(int)Main.tile[i, j].type])
							{
								WorldGen.KillTile(i, j, false, false, false);
							}
							Main.tile[i, j].lava(true);
						}
						if (Main.tile[i, j].type == 375)
						{
							Main.tile[i, j].type = 374;
						}
						if (Main.tile[i, j].type == 230 || Main.tile[i, j].type == 229 || Main.tile[i, j].type == 659 || Main.tile[i, j].type == 56)
						{
							WorldGen.KillTile(i, j, false, false, false);
						}
						if (Main.tile[i, j].type == 82 || Main.tile[i, j].type == 83 || Main.tile[i, j].type == 84)
						{
							WorldGen.TileFrame(i, j, false, false);
						}
					}
					if ((double)j < Main.worldSurface + (double)WorldGen.genRand.Next(3))
					{
						if (WorldGen.drunkWorldGen)
						{
							if (GenVars.crimsonLeft)
							{
								if (i < Main.maxTilesX / 2 + WorldGen.genRand.Next(-2, 3))
								{
									WorldGen.Convert(i, j, 4, 1);
								}
								else
								{
									WorldGen.Convert(i, j, 1, 1);
								}
							}
							else if (i < Main.maxTilesX / 2 + WorldGen.genRand.Next(-2, 3))
							{
								WorldGen.Convert(i, j, 1, 1);
							}
							else
							{
								WorldGen.Convert(i, j, 4, 1);
							}
						}
						else
						{
							WorldGen.Convert(i, j, conversionType, 1);
						}
					}
					if ((double)j < Main.worldSurface - (double)WorldGen.genRand.Next(19, 22) && (Main.tile[i, j].wall == 178 || Main.tile[i, j].wall == 180))
					{
						Main.tile[i, j].wall = 0;
					}
					if (Main.tile[i, j].active() && Main.tile[i, j].type == 56)
					{
						WorldGen.KillTile(i, j, false, false, false);
					}
					if (Main.tile[i, j].type == 189 || Main.tile[i, j].type == 196 || Main.tile[i, j].type == 202)
					{
						if (WorldGen.drunkWorldGen)
						{
							if (GenVars.crimsonLeft)
							{
								if (i < Main.maxTilesX / 2 + WorldGen.genRand.Next(-2, 3))
								{
									Main.tile[i, j].type = 195;
								}
								else
								{
									Main.tile[i, j].type = 474;
								}
							}
							else if (i < Main.maxTilesX / 2 + WorldGen.genRand.Next(-2, 3))
							{
								Main.tile[i, j].type = 474;
							}
							else
							{
								Main.tile[i, j].type = 195;
							}
						}
						else if (WorldGen.crimson)
						{
							Main.tile[i, j].type = 195;
						}
						else
						{
							Main.tile[i, j].type = 474;
						}
					}
					if (Main.tile[i, j].wall == 73 || Main.tile[i, j].wall == 82)
					{
						if (WorldGen.drunkWorldGen)
						{
							if (GenVars.crimsonLeft)
							{
								if (i < Main.maxTilesX / 2 + WorldGen.genRand.Next(-2, 3))
								{
									Main.tile[i, j].wall = 77;
								}
								else
								{
									Main.tile[i, j].wall = 233;
								}
							}
							else if (i < Main.maxTilesX / 2 + WorldGen.genRand.Next(-2, 3))
							{
								Main.tile[i, j].wall = 233;
							}
							else
							{
								Main.tile[i, j].wall = 77;
							}
						}
						else if (WorldGen.crimson)
						{
							Main.tile[i, j].wall = 77;
						}
						else
						{
							Main.tile[i, j].wall = 233;
						}
					}
					if ((double)j > Main.rockLayer && j < Main.maxTilesY - 350 && Main.tile[i, j].type == 0 && Main.tile[i, j].active() && (!Main.tile[i - 1, j - 1].active() || !WorldGen.SolidTile(i, j - 1, false) || !Main.tile[i + 1, j - 1].active() || !Main.tile[i - 1, j].active() || !Main.tile[i + 1, j].active() || !Main.tile[i - 1, j + 1].active() || !Main.tile[i, j + 1].active() || !Main.tile[i + 1, j + 1].active()))
					{
						Main.tile[i, j].type = 2;
					}
				}
			}
			Liquid.QuickWater(-2, -1, -1);
			int num = (int)((double)Main.maxTilesX * 0.38);
			int num2 = (int)((double)Main.maxTilesX * 0.62);
			int maxTilesY = Main.maxTilesY;
			int num3 = Main.maxTilesY - 135;
			int maxTilesY2 = Main.maxTilesY;
			for (int k = num; k < num2 + 15; k++)
			{
				for (int l = Main.maxTilesY - 200; l < num3 + 10; l++)
				{
					Main.tile[k, l].liquid = 0;
					if (Main.tile[k, l].type == 58)
					{
						Main.tile[k, l].type = 57;
					}
				}
			}
			WorldGen.AddTrees(true);
			for (int m = 0; m < Main.maxTilesX; m++)
			{
				byte color = 22;
				byte color2 = 22;
				if (WorldGen.drunkWorldGen)
				{
					if ((GenVars.crimsonLeft && m < Main.maxTilesX / 2) || (!GenVars.crimsonLeft && m > Main.maxTilesX / 2))
					{
						color2 = 13;
						color = 13;
					}
				}
				else if (WorldGen.crimson)
				{
					color2 = 13;
					color = 13;
				}
				for (int n = 0; n < Main.maxTilesY; n++)
				{
					if (Main.tile[m, n].active() && (Main.tileDungeon[(int)Main.tile[m, n].type] || TileID.Sets.CrackedBricks[(int)Main.tile[m, n].type]))
					{
						Main.tile[m, n].color(color);
					}
					if (Main.wallDungeon[(int)Main.tile[m, n].wall])
					{
						Main.tile[m, n].wallColor(25);
						if (Main.tile[m, n].type == 19 && Main.tile[m, n].frameY != 180)
						{
							Main.tile[m, n].color(color);
						}
					}
					if (Main.tile[m, n].active())
					{
						bool flag = false;
						if (Main.tenthAnniversaryWorld)
						{
							if (Main.tile[m, n].type == 191)
							{
								flag = true;
							}
							if (Main.tile[m, n].active() && Main.tile[m, n].type == 151)
							{
								Main.tile[m, n].color(color);
							}
						}
						if (Main.tile[m, n].type == 226)
						{
							flag = true;
						}
						if (Main.tile[m, n].type == 137)
						{
							int num4 = (int)(Main.tile[m, n].frameY / 18);
							if (num4 >= 1 && num4 <= 4)
							{
								flag = true;
							}
						}
						if (flag)
						{
							Main.tile[m, n].color(color2);
						}
					}
					if (Main.tile[m, n].wall == 244)
					{
						Main.tile[m, n].wallColor(25);
					}
					if (Main.tile[m, n].wall == 34)
					{
						Main.tile[m, n].wallColor(25);
					}
					if (Main.tile[m, n].wall == 87)
					{
						Main.tile[m, n].wallColor(25);
						Main.tile[m, n].color(color2);
					}
				}
			}
			double num5 = (double)Main.maxTilesX / 4200.0;
			num5 *= (double)WorldGen.genRand.Next(2, 5);
			int num6 = 0;
			while ((double)num6 < num5)
			{
				int num7 = WorldGen.genRand.Next((int)((double)Main.maxTilesX * 0.39), (int)((double)Main.maxTilesX * 0.61));
				int num8 = WorldGen.genRand.Next(10, 31);
				for (int num9 = num7 - num8; num9 <= num7 + num8; num9++)
				{
					for (int num10 = Main.maxTilesY - 250; num10 < Main.maxTilesY - 25; num10++)
					{
						if (Main.tile[num9, num10].type == 637)
						{
							Main.tile[num9, num10].frameX = (short)(18 * Main.rand.Next(6, 11));
						}
					}
				}
				num6++;
			}
			if (WorldGen.notTheBees)
			{
				for (int num11 = 3; num11 < Main.maxTilesX - 3; num11++)
				{
					bool flag2 = true;
					int num12 = 0;
					while ((double)num12 < Main.worldSurface)
					{
						if (flag2)
						{
							if (Main.tile[num11, num12].wall == 86)
							{
								Main.tile[num11, num12].wall = 0;
							}
							if (Main.tile[num11, num12].active())
							{
								flag2 = false;
							}
						}
						else if (Main.tile[num11, num12].wall == 0 && Main.tile[num11, num12 + 1].wall == 0 && Main.tile[num11, num12 + 2].wall == 0 && Main.tile[num11, num12 + 3].wall == 0 && Main.tile[num11, num12 + 4].wall == 0 && Main.tile[num11 - 1, num12].wall == 0 && Main.tile[num11 + 1, num12].wall == 0 && Main.tile[num11 - 2, num12].wall == 0 && Main.tile[num11 + 2, num12].wall == 0 && !Main.tile[num11, num12].active() && !Main.tile[num11, num12 + 1].active() && !Main.tile[num11, num12 + 2].active() && !Main.tile[num11, num12 + 3].active())
						{
							flag2 = true;
						}
						num12++;
					}
				}
			}
			Liquid.QuickWater(-2, -1, -1);
			for (int num13 = 0; num13 < Main.maxTilesX; num13++)
			{
				for (int num14 = 0; num14 < Main.maxTilesY; num14++)
				{
					if (Main.tile[num13, num14].type == 518)
					{
						WorldGen.CheckLilyPad(num13, num14);
					}
				}
			}
		}

		// Token: 0x06000E81 RID: 3713 RVA: 0x00409E3E File Offset: 0x0040803E
		public static bool IsItATrap(Tile tile)
		{
			return tile.actuator() || (tile.active() && TileID.Sets.IsAMechanism[(int)tile.type]);
		}

		// Token: 0x06000E82 RID: 3714 RVA: 0x00409E64 File Offset: 0x00408064
		public static bool IsItATrigger(Tile tile)
		{
			if (tile.active())
			{
				if (TileID.Sets.IsATrigger[(int)tile.type])
				{
					return true;
				}
				if (tile.type == 467 && tile.frameX / 36 == 4)
				{
					return true;
				}
				if (tile.type == 314 && Minecart.IsPressurePlate(tile))
				{
					return true;
				}
			}
			return false;
		}

		// Token: 0x06000E83 RID: 3715 RVA: 0x00409EBC File Offset: 0x004080BC
		public static void ClearAllBrokenTraps()
		{
			List<Point> list = new List<Point>();
			for (int i = 50; i < Main.maxTilesX - 50; i++)
			{
				for (int j = 50; j < Main.maxTilesY - 50; j++)
				{
					if (Main.tile[i, j].wire() && !list.Contains(new Point(i, j)))
					{
						WorldGen.ClearBrokenTraps(new Point(i, j), list);
					}
				}
			}
		}

		// Token: 0x06000E84 RID: 3716 RVA: 0x00409F28 File Offset: 0x00408128
		public static void ClearBrokenTraps(Point startTileCoords, List<Point> pointsWeAlreadyWentOver)
		{
			List<Point> list = new List<Point>();
			List<Point> list2 = new List<Point>();
			List<Point> list3 = new List<Point>();
			bool flag = false;
			bool flag2 = false;
			list2.Add(startTileCoords);
			while (list2.Count > 0)
			{
				Utils.Swap<List<Point>>(ref list, ref list2);
				while (list.Count > 0)
				{
					Point point = list[0];
					list.RemoveAt(0);
					if (WorldGen.InWorld(point.X, point.Y, 5))
					{
						Tile tile = Main.tile[point.X, point.Y];
						if (tile.wire())
						{
							pointsWeAlreadyWentOver.Add(point);
							list3.Add(point);
							if (WorldGen.IsItATrap(tile))
							{
								flag = true;
							}
							if (WorldGen.IsItATrigger(tile))
							{
								flag2 = true;
							}
							if (flag2 && flag)
							{
								break;
							}
							Point item = new Point(point.X - 1, point.Y);
							if (!list3.Contains(item))
							{
								list2.Add(item);
							}
							item = new Point(point.X + 1, point.Y);
							if (!list3.Contains(item))
							{
								list2.Add(item);
							}
							item = new Point(point.X, point.Y - 1);
							if (!list3.Contains(item))
							{
								list2.Add(item);
							}
							item = new Point(point.X, point.Y + 1);
							if (!list3.Contains(item))
							{
								list2.Add(item);
							}
						}
					}
				}
				if (flag2 && flag)
				{
					break;
				}
			}
			if (!flag2 || !flag)
			{
				foreach (Point point2 in list3)
				{
					Tile tile2 = Main.tile[point2.X, point2.Y];
					tile2.wire(false);
					if (WorldGen.IsItATrap(tile2))
					{
						if (tile2.actuator())
						{
							Main.tile[point2.X, point2.Y].actuator(false);
						}
						else if (tile2.type != 105)
						{
							WorldGen.KillTile(point2.X, point2.Y, false, false, false);
						}
					}
					else if (WorldGen.IsItATrigger(tile2))
					{
						if (tile2.type == 314)
						{
							tile2.frameX = 1;
						}
						else
						{
							WorldGen.KillTile(point2.X, point2.Y, false, false, false);
						}
					}
				}
			}
		}

		// Token: 0x06000E85 RID: 3717 RVA: 0x0040A1A4 File Offset: 0x004083A4
		private static double TuneOceanDepth(int count, double depth, bool floridaStyle = false)
		{
			if (!floridaStyle)
			{
				if (count < 3)
				{
					depth += (double)WorldGen.genRand.Next(10, 20) * 0.2;
				}
				else if (count < 6)
				{
					depth += (double)WorldGen.genRand.Next(10, 20) * 0.15;
				}
				else if (count < 9)
				{
					depth += (double)WorldGen.genRand.Next(10, 20) * 0.1;
				}
				else if (count < 15)
				{
					depth += (double)WorldGen.genRand.Next(10, 20) * 0.07;
				}
				else if (count < 50)
				{
					depth += (double)WorldGen.genRand.Next(10, 20) * 0.05;
				}
				else if (count < 75)
				{
					depth += (double)WorldGen.genRand.Next(10, 20) * 0.04;
				}
				else if (count < 100)
				{
					depth += (double)WorldGen.genRand.Next(10, 20) * 0.03;
				}
				else if (count < 125)
				{
					depth += (double)WorldGen.genRand.Next(10, 20) * 0.02;
				}
				else if (count < 150)
				{
					depth += (double)WorldGen.genRand.Next(10, 20) * 0.01;
				}
				else if (count < 175)
				{
					depth += (double)WorldGen.genRand.Next(10, 20) * 0.005;
				}
				else if (count < 200)
				{
					depth += (double)WorldGen.genRand.Next(10, 20) * 0.001;
				}
				else if (count < 230)
				{
					depth += (double)WorldGen.genRand.Next(10, 20) * 0.01;
				}
				else if (count < 235)
				{
					depth += (double)WorldGen.genRand.Next(10, 20) * 0.05;
				}
				else if (count < 240)
				{
					depth += (double)WorldGen.genRand.Next(10, 20) * 0.1;
				}
				else if (count < 245)
				{
					depth += (double)WorldGen.genRand.Next(10, 20) * 0.05;
				}
				else if (count < 255)
				{
					depth += (double)WorldGen.genRand.Next(10, 20) * 0.01;
				}
			}
			else if (count < 3)
			{
				depth += (double)WorldGen.genRand.Next(10, 20) * 0.001;
			}
			else if (count < 6)
			{
				depth += (double)WorldGen.genRand.Next(10, 20) * 0.002;
			}
			else if (count < 9)
			{
				depth += (double)WorldGen.genRand.Next(10, 20) * 0.004;
			}
			else if (count < 15)
			{
				depth += (double)WorldGen.genRand.Next(10, 20) * 0.007;
			}
			else if (count < 50)
			{
				depth += (double)WorldGen.genRand.Next(10, 20) * 0.01;
			}
			else if (count < 75)
			{
				depth += (double)WorldGen.genRand.Next(10, 20) * 0.014;
			}
			else if (count < 100)
			{
				depth += (double)WorldGen.genRand.Next(10, 20) * 0.019;
			}
			else if (count < 125)
			{
				depth += (double)WorldGen.genRand.Next(10, 20) * 0.027;
			}
			else if (count < 150)
			{
				depth += (double)WorldGen.genRand.Next(10, 20) * 0.038;
			}
			else if (count < 175)
			{
				depth += (double)WorldGen.genRand.Next(10, 20) * 0.052;
			}
			else if (count < 200)
			{
				depth += (double)WorldGen.genRand.Next(10, 20) * 0.08;
			}
			else if (count < 230)
			{
				depth += (double)WorldGen.genRand.Next(10, 20) * 0.12;
			}
			else if (count < 235)
			{
				depth += (double)WorldGen.genRand.Next(10, 20) * 0.16;
			}
			else if (count < 240)
			{
				depth += (double)WorldGen.genRand.Next(10, 20) * 0.27;
			}
			else if (count < 245)
			{
				depth += (double)WorldGen.genRand.Next(10, 20) * 0.43;
			}
			else if (count < 255)
			{
				depth += (double)WorldGen.genRand.Next(10, 20) * 0.6;
			}
			return depth;
		}

		// Token: 0x06000E86 RID: 3718 RVA: 0x0040A6B9 File Offset: 0x004088B9
		public static void QueuePostGenAction(Action<StructureMap> action)
		{
			WorldGen._postGenActions.Enqueue(action);
		}

		// Token: 0x06000E87 RID: 3719 RVA: 0x0040A6C6 File Offset: 0x004088C6
		public static void ConsumePostGenActions(StructureMap structures)
		{
			while (WorldGen._postGenActions.Count > 0)
			{
				WorldGen._postGenActions.Dequeue()(structures);
			}
		}

		// Token: 0x06000E88 RID: 3720 RVA: 0x0040A6E8 File Offset: 0x004088E8
		public static Point RandomRectanglePoint(Rectangle rectangle)
		{
			return new Point(WorldGen.genRand.Next(rectangle.X, rectangle.X + rectangle.Width), WorldGen.genRand.Next(rectangle.Y, rectangle.Y + rectangle.Height));
		}

		// Token: 0x06000E89 RID: 3721 RVA: 0x0040A734 File Offset: 0x00408934
		public static Point RandomRectanglePoint(int x, int y, int width, int height)
		{
			return new Point(WorldGen.genRand.Next(x, x + width), WorldGen.genRand.Next(y, y + height));
		}

		// Token: 0x06000E8A RID: 3722 RVA: 0x0040A757 File Offset: 0x00408957
		public static Point RandomWorldPoint(int padding)
		{
			return WorldGen.RandomWorldPoint(padding, padding, padding, padding);
		}

		// Token: 0x06000E8B RID: 3723 RVA: 0x0040A762 File Offset: 0x00408962
		public static Point RandomWorldPoint(int top = 0, int right = 0, int bottom = 0, int left = 0)
		{
			return new Point(WorldGen.genRand.Next(left, Main.maxTilesX - right), WorldGen.genRand.Next(top, Main.maxTilesY - bottom));
		}

		// Token: 0x06000E8C RID: 3724 RVA: 0x0040A790 File Offset: 0x00408990
		public static bool GrowPalmTree(int i, int y)
		{
			int num = y;
			if (!WorldGen.InWorld(i, y, 0))
			{
				return false;
			}
			while (Main.tile[i, num].type == 20)
			{
				num++;
				if (Main.tile[i, num] == null)
				{
					return false;
				}
			}
			Tile tile = Main.tile[i, num];
			Tile tile2 = Main.tile[i, num - 1];
			byte color = 0;
			if (Main.tenthAnniversaryWorld && !WorldGen.gen)
			{
				color = (byte)WorldGen.genRand.Next(1, 13);
			}
			tile.slope();
			tile.halfBrick();
			if (!tile.active() || tile.halfBrick() || tile.slope() != 0)
			{
				return false;
			}
			if (tile2.wall != 0 || tile2.liquid != 0)
			{
				return false;
			}
			if (tile.type != 53 && tile.type != 234 && tile.type != 116 && tile.type != 112)
			{
				return false;
			}
			if (!WorldGen.EmptyTileCheck(i, i, num - 2, num - 1, 20))
			{
				return false;
			}
			if (!WorldGen.EmptyTileCheck(i - 1, i + 1, num - 30, num - 3, 20))
			{
				return false;
			}
			int num2 = WorldGen.genRand.Next(10, 21);
			int num3 = WorldGen.genRand.Next(-8, 9);
			num3 *= 2;
			short num4 = 0;
			for (int j = 0; j < num2; j++)
			{
				tile = Main.tile[i, num - 1 - j];
				if (j == 0)
				{
					tile.active(true);
					tile.type = 323;
					tile.frameX = 66;
					tile.frameY = 0;
					tile.color(color);
				}
				else if (j == num2 - 1)
				{
					tile.active(true);
					tile.type = 323;
					tile.frameX = (short)(22 * WorldGen.genRand.Next(4, 7));
					tile.frameY = num4;
					tile.color(color);
				}
				else
				{
					if ((int)num4 != num3)
					{
						double num5 = (double)j / (double)num2;
						bool flag = num5 >= 0.25 && ((num5 < 0.5 && WorldGen.genRand.Next(13) == 0) || (num5 < 0.7 && WorldGen.genRand.Next(9) == 0) || num5 >= 0.95 || WorldGen.genRand.Next(5) != 0 || true);
						if (flag)
						{
							short num6 = (short)Math.Sign(num3);
							num4 += num6 * 2;
						}
					}
					tile.active(true);
					tile.type = 323;
					tile.frameX = (short)(22 * WorldGen.genRand.Next(0, 3));
					tile.frameY = num4;
					tile.color(color);
				}
			}
			WorldGen.RangeFrame(i - 2, num - num2 - 1, i + 2, num + 1);
			NetMessage.SendTileSquare(-1, i, num - num2, 1, num2, TileChangeType.None);
			return true;
		}

		// Token: 0x06000E8D RID: 3725 RVA: 0x0040AA67 File Offset: 0x00408C67
		public static bool IsPalmOasisTree(int x)
		{
			return x >= WorldGen.beachDistance && x <= Main.maxTilesX - WorldGen.beachDistance;
		}

		// Token: 0x06000E8E RID: 3726 RVA: 0x0040AA84 File Offset: 0x00408C84
		public static bool GrowEpicTree(int i, int y)
		{
			int num = y;
			while (Main.tile[i, num].type == 20)
			{
				num++;
			}
			if (Main.tile[i, num].active() && !Main.tile[i, num].halfBrick() && Main.tile[i, num].slope() == 0 && Main.tile[i, num].type == 2 && Main.tile[i, num - 1].wall == 0 && Main.tile[i, num - 1].liquid == 0 && ((Main.tile[i - 1, num].active() && (Main.tile[i - 1, num].type == 2 || Main.tile[i - 1, num].type == 23 || Main.tile[i - 1, num].type == 60 || Main.tile[i - 1, num].type == 109)) || (Main.tile[i + 1, num].active() && (Main.tile[i + 1, num].type == 2 || Main.tile[i + 1, num].type == 23 || Main.tile[i + 1, num].type == 60 || Main.tile[i + 1, num].type == 109))))
			{
				int num2 = 2;
				if (WorldGen.EmptyTileCheck(i - num2, i + num2, num - 55, num - 1, 20))
				{
					bool flag = false;
					bool flag2 = false;
					int num3 = WorldGen.genRand.Next(20, 30);
					if (WorldGen.drunkWorldGen)
					{
						num3 = WorldGen.genRand.Next(3, 7);
					}
					int num4;
					for (int j = num - num3; j < num; j++)
					{
						Main.tile[i, j].frameNumber((byte)WorldGen.genRand.Next(3));
						Main.tile[i, j].active(true);
						Main.tile[i, j].type = 5;
						num4 = WorldGen.genRand.Next(3);
						int num5 = WorldGen.genRand.Next(10);
						if (j == num - 1 || j == num - num3)
						{
							num5 = 0;
						}
						while (((num5 == 5 || num5 == 7) && flag) || ((num5 == 6 || num5 == 7) && flag2))
						{
							num5 = WorldGen.genRand.Next(10);
						}
						flag = false;
						flag2 = false;
						if (num5 == 5 || num5 == 7)
						{
							flag = true;
						}
						if (num5 == 6 || num5 == 7)
						{
							flag2 = true;
						}
						if (num5 == 1)
						{
							if (num4 == 0)
							{
								Main.tile[i, j].frameX = 0;
								Main.tile[i, j].frameY = 66;
							}
							if (num4 == 1)
							{
								Main.tile[i, j].frameX = 0;
								Main.tile[i, j].frameY = 88;
							}
							if (num4 == 2)
							{
								Main.tile[i, j].frameX = 0;
								Main.tile[i, j].frameY = 110;
							}
						}
						else if (num5 == 2)
						{
							if (num4 == 0)
							{
								Main.tile[i, j].frameX = 22;
								Main.tile[i, j].frameY = 0;
							}
							if (num4 == 1)
							{
								Main.tile[i, j].frameX = 22;
								Main.tile[i, j].frameY = 22;
							}
							if (num4 == 2)
							{
								Main.tile[i, j].frameX = 22;
								Main.tile[i, j].frameY = 44;
							}
						}
						else if (num5 == 3)
						{
							if (num4 == 0)
							{
								Main.tile[i, j].frameX = 44;
								Main.tile[i, j].frameY = 66;
							}
							if (num4 == 1)
							{
								Main.tile[i, j].frameX = 44;
								Main.tile[i, j].frameY = 88;
							}
							if (num4 == 2)
							{
								Main.tile[i, j].frameX = 44;
								Main.tile[i, j].frameY = 110;
							}
						}
						else if (num5 == 4)
						{
							if (num4 == 0)
							{
								Main.tile[i, j].frameX = 22;
								Main.tile[i, j].frameY = 66;
							}
							if (num4 == 1)
							{
								Main.tile[i, j].frameX = 22;
								Main.tile[i, j].frameY = 88;
							}
							if (num4 == 2)
							{
								Main.tile[i, j].frameX = 22;
								Main.tile[i, j].frameY = 110;
							}
						}
						else if (num5 == 5)
						{
							if (num4 == 0)
							{
								Main.tile[i, j].frameX = 88;
								Main.tile[i, j].frameY = 0;
							}
							if (num4 == 1)
							{
								Main.tile[i, j].frameX = 88;
								Main.tile[i, j].frameY = 22;
							}
							if (num4 == 2)
							{
								Main.tile[i, j].frameX = 88;
								Main.tile[i, j].frameY = 44;
							}
						}
						else if (num5 == 6)
						{
							if (num4 == 0)
							{
								Main.tile[i, j].frameX = 66;
								Main.tile[i, j].frameY = 66;
							}
							if (num4 == 1)
							{
								Main.tile[i, j].frameX = 66;
								Main.tile[i, j].frameY = 88;
							}
							if (num4 == 2)
							{
								Main.tile[i, j].frameX = 66;
								Main.tile[i, j].frameY = 110;
							}
						}
						else if (num5 == 7)
						{
							if (num4 == 0)
							{
								Main.tile[i, j].frameX = 110;
								Main.tile[i, j].frameY = 66;
							}
							if (num4 == 1)
							{
								Main.tile[i, j].frameX = 110;
								Main.tile[i, j].frameY = 88;
							}
							if (num4 == 2)
							{
								Main.tile[i, j].frameX = 110;
								Main.tile[i, j].frameY = 110;
							}
						}
						else
						{
							if (num4 == 0)
							{
								Main.tile[i, j].frameX = 0;
								Main.tile[i, j].frameY = 0;
							}
							if (num4 == 1)
							{
								Main.tile[i, j].frameX = 0;
								Main.tile[i, j].frameY = 22;
							}
							if (num4 == 2)
							{
								Main.tile[i, j].frameX = 0;
								Main.tile[i, j].frameY = 44;
							}
						}
						if (num5 == 5 || num5 == 7)
						{
							Main.tile[i - 1, j].active(true);
							Main.tile[i - 1, j].type = 5;
							num4 = WorldGen.genRand.Next(3);
							if (WorldGen.genRand.Next(3) < 2)
							{
								if (num4 == 0)
								{
									Main.tile[i - 1, j].frameX = 44;
									Main.tile[i - 1, j].frameY = 198;
								}
								if (num4 == 1)
								{
									Main.tile[i - 1, j].frameX = 44;
									Main.tile[i - 1, j].frameY = 220;
								}
								if (num4 == 2)
								{
									Main.tile[i - 1, j].frameX = 44;
									Main.tile[i - 1, j].frameY = 242;
								}
							}
							else
							{
								if (num4 == 0)
								{
									Main.tile[i - 1, j].frameX = 66;
									Main.tile[i - 1, j].frameY = 0;
								}
								if (num4 == 1)
								{
									Main.tile[i - 1, j].frameX = 66;
									Main.tile[i - 1, j].frameY = 22;
								}
								if (num4 == 2)
								{
									Main.tile[i - 1, j].frameX = 66;
									Main.tile[i - 1, j].frameY = 44;
								}
							}
						}
						if (num5 == 6 || num5 == 7)
						{
							Main.tile[i + 1, j].active(true);
							Main.tile[i + 1, j].type = 5;
							num4 = WorldGen.genRand.Next(3);
							if (WorldGen.genRand.Next(3) < 2)
							{
								if (num4 == 0)
								{
									Main.tile[i + 1, j].frameX = 66;
									Main.tile[i + 1, j].frameY = 198;
								}
								if (num4 == 1)
								{
									Main.tile[i + 1, j].frameX = 66;
									Main.tile[i + 1, j].frameY = 220;
								}
								if (num4 == 2)
								{
									Main.tile[i + 1, j].frameX = 66;
									Main.tile[i + 1, j].frameY = 242;
								}
							}
							else
							{
								if (num4 == 0)
								{
									Main.tile[i + 1, j].frameX = 88;
									Main.tile[i + 1, j].frameY = 66;
								}
								if (num4 == 1)
								{
									Main.tile[i + 1, j].frameX = 88;
									Main.tile[i + 1, j].frameY = 88;
								}
								if (num4 == 2)
								{
									Main.tile[i + 1, j].frameX = 88;
									Main.tile[i + 1, j].frameY = 110;
								}
							}
						}
					}
					int num6 = WorldGen.genRand.Next(3);
					bool flag3 = false;
					bool flag4 = false;
					if (Main.tile[i - 1, num].active() && !Main.tile[i - 1, num].halfBrick() && Main.tile[i - 1, num].slope() == 0 && (Main.tile[i - 1, num].type == 2 || Main.tile[i - 1, num].type == 23 || Main.tile[i - 1, num].type == 60 || Main.tile[i - 1, num].type == 109))
					{
						flag3 = true;
					}
					if (Main.tile[i + 1, num].active() && !Main.tile[i + 1, num].halfBrick() && Main.tile[i + 1, num].slope() == 0 && (Main.tile[i + 1, num].type == 2 || Main.tile[i + 1, num].type == 23 || Main.tile[i + 1, num].type == 60 || Main.tile[i + 1, num].type == 109))
					{
						flag4 = true;
					}
					if (!flag3)
					{
						if (num6 == 0)
						{
							num6 = 2;
						}
						if (num6 == 1)
						{
							num6 = 3;
						}
					}
					if (!flag4)
					{
						if (num6 == 0)
						{
							num6 = 1;
						}
						if (num6 == 2)
						{
							num6 = 3;
						}
					}
					if (flag3 && !flag4)
					{
						num6 = 2;
					}
					if (flag4 && !flag3)
					{
						num6 = 1;
					}
					if (num6 == 0 || num6 == 1)
					{
						Main.tile[i + 1, num - 1].active(true);
						Main.tile[i + 1, num - 1].type = 5;
						num4 = WorldGen.genRand.Next(3);
						if (num4 == 0)
						{
							Main.tile[i + 1, num - 1].frameX = 22;
							Main.tile[i + 1, num - 1].frameY = 132;
						}
						if (num4 == 1)
						{
							Main.tile[i + 1, num - 1].frameX = 22;
							Main.tile[i + 1, num - 1].frameY = 154;
						}
						if (num4 == 2)
						{
							Main.tile[i + 1, num - 1].frameX = 22;
							Main.tile[i + 1, num - 1].frameY = 176;
						}
					}
					if (num6 == 0 || num6 == 2)
					{
						Main.tile[i - 1, num - 1].active(true);
						Main.tile[i - 1, num - 1].type = 5;
						num4 = WorldGen.genRand.Next(3);
						if (num4 == 0)
						{
							Main.tile[i - 1, num - 1].frameX = 44;
							Main.tile[i - 1, num - 1].frameY = 132;
						}
						if (num4 == 1)
						{
							Main.tile[i - 1, num - 1].frameX = 44;
							Main.tile[i - 1, num - 1].frameY = 154;
						}
						if (num4 == 2)
						{
							Main.tile[i - 1, num - 1].frameX = 44;
							Main.tile[i - 1, num - 1].frameY = 176;
						}
					}
					num4 = WorldGen.genRand.Next(3);
					if (num6 == 0)
					{
						if (num4 == 0)
						{
							Main.tile[i, num - 1].frameX = 88;
							Main.tile[i, num - 1].frameY = 132;
						}
						if (num4 == 1)
						{
							Main.tile[i, num - 1].frameX = 88;
							Main.tile[i, num - 1].frameY = 154;
						}
						if (num4 == 2)
						{
							Main.tile[i, num - 1].frameX = 88;
							Main.tile[i, num - 1].frameY = 176;
						}
					}
					else if (num6 == 1)
					{
						if (num4 == 0)
						{
							Main.tile[i, num - 1].frameX = 0;
							Main.tile[i, num - 1].frameY = 132;
						}
						if (num4 == 1)
						{
							Main.tile[i, num - 1].frameX = 0;
							Main.tile[i, num - 1].frameY = 154;
						}
						if (num4 == 2)
						{
							Main.tile[i, num - 1].frameX = 0;
							Main.tile[i, num - 1].frameY = 176;
						}
					}
					else if (num6 == 2)
					{
						if (num4 == 0)
						{
							Main.tile[i, num - 1].frameX = 66;
							Main.tile[i, num - 1].frameY = 132;
						}
						if (num4 == 1)
						{
							Main.tile[i, num - 1].frameX = 66;
							Main.tile[i, num - 1].frameY = 154;
						}
						if (num4 == 2)
						{
							Main.tile[i, num - 1].frameX = 66;
							Main.tile[i, num - 1].frameY = 176;
						}
					}
					if (WorldGen.genRand.Next(13) != 0)
					{
						num4 = WorldGen.genRand.Next(3);
						if (num4 == 0)
						{
							Main.tile[i, num - num3].frameX = 22;
							Main.tile[i, num - num3].frameY = 198;
						}
						if (num4 == 1)
						{
							Main.tile[i, num - num3].frameX = 22;
							Main.tile[i, num - num3].frameY = 220;
						}
						if (num4 == 2)
						{
							Main.tile[i, num - num3].frameX = 22;
							Main.tile[i, num - num3].frameY = 242;
						}
					}
					else
					{
						num4 = WorldGen.genRand.Next(3);
						if (num4 == 0)
						{
							Main.tile[i, num - num3].frameX = 0;
							Main.tile[i, num - num3].frameY = 198;
						}
						if (num4 == 1)
						{
							Main.tile[i, num - num3].frameX = 0;
							Main.tile[i, num - num3].frameY = 220;
						}
						if (num4 == 2)
						{
							Main.tile[i, num - num3].frameX = 0;
							Main.tile[i, num - num3].frameY = 242;
						}
					}
					WorldGen.RangeFrame(i - 2, num - num3 - 1, i + 2, num + 1);
					if (Main.netMode == 2)
					{
						NetMessage.SendTileSquare(-1, i, (int)((double)num - (double)num3 * 0.5), num3 + 1, TileChangeType.None);
					}
					return true;
				}
			}
			return false;
		}

		// Token: 0x06000E8F RID: 3727 RVA: 0x0040BB88 File Offset: 0x00409D88
		public static bool Pyramid(int i, int j)
		{
			ushort num = 151;
			if (Main.tile[i, j].type == 151 || Main.tile[i, j].wall == 151)
			{
				return false;
			}
			int num2 = j - WorldGen.genRand.Next(0, 7);
			int num3 = WorldGen.genRand.Next(9, 13);
			int num4 = 1;
			int num5 = j + WorldGen.genRand.Next(75, 125);
			for (int k = num2; k < num5; k++)
			{
				for (int l = i - num4; l < i + num4 - 1; l++)
				{
					Main.tile[l, k].type = num;
					Main.tile[l, k].active(true);
					Main.tile[l, k].halfBrick(false);
					Main.tile[l, k].slope(0);
				}
				num4++;
			}
			for (int m = i - num4 - 5; m <= i + num4 + 5; m++)
			{
				for (int n = j - 1; n <= num5 + 1; n++)
				{
					bool flag = true;
					for (int num6 = m - 1; num6 <= m + 1; num6++)
					{
						for (int num7 = n - 1; num7 <= n + 1; num7++)
						{
							if (Main.tile[num6, num7].type != num)
							{
								flag = false;
							}
						}
					}
					if (flag)
					{
						Main.tile[m, n].wall = 34;
						WorldGen.SquareWallFrame(m, n, true);
					}
				}
			}
			int num8 = 1;
			if (WorldGen.genRand.Next(2) == 0)
			{
				num8 = -1;
			}
			int num9 = i - num3 * num8;
			int num10 = j + num3;
			int num11 = WorldGen.genRand.Next(5, 8);
			bool flag2 = true;
			int num12 = WorldGen.genRand.Next(20, 30);
			while (flag2)
			{
				flag2 = false;
				bool flag3 = false;
				for (int num13 = num10; num13 <= num10 + num11; num13++)
				{
					int num14 = num9;
					if (Main.tile[num14, num13 - 1].type == 53)
					{
						flag3 = true;
					}
					if (Main.tile[num14, num13].type == num)
					{
						Main.tile[num14, num13 + 1].wall = 34;
						Main.tile[num14 + num8, num13].wall = 34;
						Main.tile[num14, num13].active(false);
						flag2 = true;
					}
					if (flag3)
					{
						Main.tile[num14, num13].type = 53;
						Main.tile[num14, num13].active(true);
						Main.tile[num14, num13].halfBrick(false);
						Main.tile[num14, num13].slope(0);
					}
				}
				num9 -= num8;
			}
			num9 = i - num3 * num8;
			bool flag4 = true;
			bool flag5 = false;
			flag2 = true;
			while (flag2)
			{
				for (int num15 = num10; num15 <= num10 + num11; num15++)
				{
					int num16 = num9;
					Main.tile[num16, num15].active(false);
				}
				num9 += num8;
				num10++;
				num12--;
				if (num10 >= num5 - num11 * 2)
				{
					num12 = 10;
				}
				if (num12 <= 0)
				{
					bool flag6 = false;
					if (!flag4 && !flag5)
					{
						flag5 = true;
						flag6 = true;
						int num17 = WorldGen.genRand.Next(7, 13);
						int num18 = WorldGen.genRand.Next(23, 28);
						int num19 = num18;
						int num20 = num9;
						while (num18 > 0)
						{
							for (int num21 = num10 - num17 + num11; num21 <= num10 + num11; num21++)
							{
								if (num18 == num19 || num18 == 1)
								{
									if (num21 >= num10 - num17 + num11 + 2)
									{
										Main.tile[num9, num21].active(false);
									}
								}
								else if (num18 == num19 - 1 || num18 == 2 || num18 == num19 - 2 || num18 == 3)
								{
									if (num21 >= num10 - num17 + num11 + 1)
									{
										Main.tile[num9, num21].active(false);
									}
								}
								else
								{
									Main.tile[num9, num21].active(false);
								}
							}
							num18--;
							num9 += num8;
						}
						int num22 = num9 - num8;
						int num23 = num22;
						int num24 = num20;
						if (num22 > num20)
						{
							num23 = num20;
							num24 = num22;
						}
						int num25 = WorldGen.genRand.Next(3);
						if (num25 == 0)
						{
							num25 = WorldGen.genRand.Next(3);
						}
						if (Main.tenthAnniversaryWorld && num25 == 0)
						{
							num25 = 1;
						}
						if (num25 == 0)
						{
							num25 = 848;
						}
						else if (num25 == 1)
						{
							num25 = 857;
						}
						else if (num25 == 2)
						{
							num25 = 934;
						}
						WorldGen.AddBuriedChest((num23 + num24) / 2, num10, num25, false, 1, false, 0);
						int num26 = WorldGen.genRand.Next(1, 10);
						for (int num27 = 0; num27 < num26; num27++)
						{
							int i2 = WorldGen.genRand.Next(num23, num24);
							int j2 = num10 + num11;
							WorldGen.PlaceSmallPile(i2, j2, WorldGen.genRand.Next(16, 19), 1, 185);
						}
						WorldGen.PlaceTile(num23 + 2, num10 - num17 + num11 + 1, 91, true, false, -1, WorldGen.genRand.Next(4, 7));
						WorldGen.PlaceTile(num23 + 3, num10 - num17 + num11, 91, true, false, -1, WorldGen.genRand.Next(4, 7));
						WorldGen.PlaceTile(num24 - 2, num10 - num17 + num11 + 1, 91, true, false, -1, WorldGen.genRand.Next(4, 7));
						WorldGen.PlaceTile(num24 - 3, num10 - num17 + num11, 91, true, false, -1, WorldGen.genRand.Next(4, 7));
						for (int num28 = num23; num28 <= num24; num28++)
						{
							WorldGen.PlacePot(num28, num10 + num11, 28, WorldGen.genRand.Next(25, 28));
						}
					}
					if (flag4)
					{
						flag4 = false;
						num8 *= -1;
						num12 = WorldGen.genRand.Next(15, 20);
					}
					else if (flag6)
					{
						num12 = WorldGen.genRand.Next(10, 15);
					}
					else
					{
						num8 *= -1;
						num12 = WorldGen.genRand.Next(20, 40);
					}
				}
				if (num10 >= num5 - num11)
				{
					flag2 = false;
				}
			}
			int num29 = WorldGen.genRand.Next(100, 200);
			int num30 = WorldGen.genRand.Next(500, 800);
			flag2 = true;
			int num31 = num11;
			num12 = WorldGen.genRand.Next(10, 50);
			if (num8 == 1)
			{
				num9 -= num31;
			}
			int num32 = WorldGen.genRand.Next(5, 10);
			while (flag2)
			{
				num29--;
				num30--;
				num12--;
				for (int num33 = num9 - num32 - WorldGen.genRand.Next(0, 2); num33 <= num9 + num31 + num32 + WorldGen.genRand.Next(0, 2); num33++)
				{
					int num34 = num10;
					if (num33 >= num9 && num33 <= num9 + num31)
					{
						Main.tile[num33, num34].active(false);
					}
					else
					{
						Main.tile[num33, num34].type = num;
						Main.tile[num33, num34].active(true);
						Main.tile[num33, num34].halfBrick(false);
						Main.tile[num33, num34].slope(0);
					}
					if (num33 >= num9 - 1 && num33 <= num9 + 1 + num31)
					{
						Main.tile[num33, num34].wall = 34;
					}
				}
				num10++;
				num9 += num8;
				if (num29 <= 0)
				{
					flag2 = false;
					for (int num35 = num9 + 1; num35 <= num9 + num31 - 1; num35++)
					{
						if (Main.tile[num35, num10].active())
						{
							flag2 = true;
						}
					}
				}
				if (num12 < 0)
				{
					num12 = WorldGen.genRand.Next(10, 50);
					num8 *= -1;
				}
				if (num30 <= 0)
				{
					flag2 = false;
				}
			}
			return true;
		}

		// Token: 0x06000E90 RID: 3728 RVA: 0x0040C370 File Offset: 0x0040A570
		public static bool GrowLivingTree(int i, int j, bool patch = false)
		{
			int num = 0;
			int[] array = new int[1000];
			int[] array2 = new int[1000];
			int[] array3 = new int[1000];
			int[] array4 = new int[1000];
			int num2 = 0;
			int[] array5 = new int[2000];
			int[] array6 = new int[2000];
			bool[] array7 = new bool[2000];
			if (!WorldGen.SolidTile(i, j + 1, false))
			{
				return false;
			}
			if (Main.tile[i, j].active())
			{
				return false;
			}
			if (Main.tile[i, j + 1].type != 0 && Main.tile[i, j + 1].type != 2 && Main.tile[i, j + 1].type != 1 && Main.tile[i, j + 1].type != 40 && !TileID.Sets.Ore[(int)Main.tile[i, j + 1].type] && (!WorldGen.remixWorldGen || !WorldGen.notTheBees || (Main.tile[i, j + 1].type != 60 && Main.tile[i, j + 1].type != 59)))
			{
				return false;
			}
			if (j < 150)
			{
				return false;
			}
			int num3 = i - WorldGen.genRand.Next(2, 3);
			int num4 = i + WorldGen.genRand.Next(2, 3);
			if (WorldGen.genRand.Next(5) == 0)
			{
				if (WorldGen.genRand.Next(2) == 0)
				{
					num3--;
				}
				else
				{
					num4++;
				}
			}
			int num5 = num4 - num3;
			bool flag = num5 >= 4;
			int num6 = i - 50;
			int num7 = i + 50;
			if (patch)
			{
				num6 = i - 20;
				num7 = i + 20;
				num3 = i - WorldGen.genRand.Next(1, 3);
				num4 = i + WorldGen.genRand.Next(1, 3);
				flag = (num5 >= 4);
			}
			for (int k = num6; k <= num7; k++)
			{
				for (int l = 5; l < j - 5; l++)
				{
					if (Main.tile[k, l].active())
					{
						if (!patch)
						{
							return false;
						}
						int type = (int)Main.tile[k, l].type;
						if (type != 2 && type != 0 && type != 1 && type != 191 && type != 192)
						{
							return false;
						}
					}
				}
			}
			int num8 = num3;
			int num9 = num4;
			int num10 = num3;
			int num11 = num4;
			bool flag2 = true;
			int num12 = WorldGen.genRand.Next(-8, -4);
			int num13 = WorldGen.genRand.Next(2);
			int num14 = j;
			int num15 = WorldGen.genRand.Next(5, 15);
			Main.tileSolid[48] = false;
			while (flag2)
			{
				num12++;
				if (num12 > num15)
				{
					num15 = WorldGen.genRand.Next(5, 15);
					num12 = 0;
					array2[num] = num14 + WorldGen.genRand.Next(5);
					if (WorldGen.genRand.Next(5) == 0)
					{
						if (num13 == 0)
						{
							num13 = 1;
						}
						else
						{
							num13 = 0;
						}
					}
					if (num13 == 0)
					{
						array3[num] = -1;
						array[num] = num3;
						array4[num] = num4 - num3;
						if (WorldGen.genRand.Next(2) == 0)
						{
							num3++;
						}
						num8++;
						num13 = 1;
					}
					else
					{
						array3[num] = 1;
						array[num] = num4;
						array4[num] = num4 - num3;
						if (WorldGen.genRand.Next(2) == 0)
						{
							num4--;
						}
						num9--;
						num13 = 0;
					}
					if (num8 == num9)
					{
						flag2 = false;
					}
					num++;
				}
				for (int m = num3; m <= num4; m++)
				{
					Main.tile[m, num14].type = 191;
					Main.tile[m, num14].active(true);
					Main.tile[m, num14].halfBrick(false);
				}
				num14--;
			}
			for (int n = 0; n < num - 1; n++)
			{
				int num16 = array[n] + array3[n];
				int num17 = array2[n];
				int num18 = (int)((double)array4[n] * (1.0 + (double)WorldGen.genRand.Next(20, 30) * 0.1));
				Main.tile[num16, num17 + 1].type = 191;
				Main.tile[num16, num17 + 1].active(true);
				Main.tile[num16, num17 + 1].halfBrick(false);
				int num19 = WorldGen.genRand.Next(3, 5);
				while (num18 > 0)
				{
					num18--;
					Main.tile[num16, num17].type = 191;
					Main.tile[num16, num17].active(true);
					Main.tile[num16, num17].halfBrick(false);
					if (WorldGen.genRand.Next(10) == 0)
					{
						if (WorldGen.genRand.Next(2) == 0)
						{
							num17--;
						}
						else
						{
							num17++;
						}
					}
					else
					{
						num16 += array3[n];
					}
					if (num19 > 0)
					{
						num19--;
					}
					else if (WorldGen.genRand.Next(2) == 0)
					{
						num19 = WorldGen.genRand.Next(2, 5);
						if (WorldGen.genRand.Next(2) == 0)
						{
							Main.tile[num16, num17].type = 191;
							Main.tile[num16, num17].active(true);
							Main.tile[num16, num17].halfBrick(false);
							Main.tile[num16, num17 - 1].type = 191;
							Main.tile[num16, num17 - 1].active(true);
							Main.tile[num16, num17 - 1].halfBrick(false);
							array5[num2] = num16;
							array6[num2] = num17;
							num2++;
						}
						else
						{
							Main.tile[num16, num17].type = 191;
							Main.tile[num16, num17].active(true);
							Main.tile[num16, num17].halfBrick(false);
							Main.tile[num16, num17 + 1].type = 191;
							Main.tile[num16, num17 + 1].active(true);
							Main.tile[num16, num17 + 1].halfBrick(false);
							array5[num2] = num16;
							array6[num2] = num17;
							num2++;
						}
					}
					if (num18 == 0)
					{
						array5[num2] = num16;
						array6[num2] = num17;
						num2++;
					}
				}
			}
			int num20 = (num3 + num4) / 2;
			int num21 = num14;
			int num22 = WorldGen.genRand.Next(num5 * 3, num5 * 5);
			int num23 = 0;
			int num24 = 0;
			while (num22 > 0)
			{
				Main.tile[num20, num21].type = 191;
				Main.tile[num20, num21].active(true);
				Main.tile[num20, num21].halfBrick(false);
				if (num23 > 0)
				{
					num23--;
				}
				if (num24 > 0)
				{
					num24--;
				}
				for (int num25 = -1; num25 < 2; num25++)
				{
					if (num25 != 0 && ((num25 < 0 && num23 == 0) || (num25 > 0 && num24 == 0)) && WorldGen.genRand.Next(2) == 0)
					{
						int num26 = num20;
						int num27 = num21;
						int num28 = WorldGen.genRand.Next(num5, num5 * 3);
						if (num25 < 0)
						{
							num23 = WorldGen.genRand.Next(3, 5);
						}
						if (num25 > 0)
						{
							num24 = WorldGen.genRand.Next(3, 5);
						}
						int num29 = 0;
						while (num28 > 0)
						{
							num28--;
							num26 += num25;
							Main.tile[num26, num27].type = 191;
							Main.tile[num26, num27].active(true);
							Main.tile[num26, num27].halfBrick(false);
							if (num28 == 0)
							{
								array5[num2] = num26;
								array6[num2] = num27;
								array7[num2] = true;
								num2++;
							}
							if (WorldGen.genRand.Next(5) == 0)
							{
								if (WorldGen.genRand.Next(2) == 0)
								{
									num27--;
								}
								else
								{
									num27++;
								}
								Main.tile[num26, num27].type = 191;
								Main.tile[num26, num27].active(true);
								Main.tile[num26, num27].halfBrick(false);
							}
							if (num29 > 0)
							{
								num29--;
							}
							else if (WorldGen.genRand.Next(3) == 0)
							{
								num29 = WorldGen.genRand.Next(2, 4);
								int num30 = num26;
								int num31 = num27;
								if (WorldGen.genRand.Next(2) == 0)
								{
									num31--;
								}
								else
								{
									num31++;
								}
								Main.tile[num30, num31].type = 191;
								Main.tile[num30, num31].active(true);
								Main.tile[num30, num31].halfBrick(false);
								array5[num2] = num30;
								array6[num2] = num31;
								array7[num2] = true;
								num2++;
								array5[num2] = num30 + WorldGen.genRand.Next(-5, 6);
								array6[num2] = num31 + WorldGen.genRand.Next(-5, 6);
								array7[num2] = true;
								num2++;
							}
						}
					}
				}
				array5[num2] = num20;
				array6[num2] = num21;
				num2++;
				if (WorldGen.genRand.Next(4) == 0)
				{
					if (WorldGen.genRand.Next(2) == 0)
					{
						num20--;
					}
					else
					{
						num20++;
					}
					Main.tile[num20, num21].type = 191;
					Main.tile[num20, num21].active(true);
					Main.tile[num20, num21].halfBrick(false);
				}
				num21--;
				num22--;
			}
			for (int num32 = num10; num32 <= num11; num32++)
			{
				int num33 = WorldGen.genRand.Next(1, 6);
				int num34 = j + 1;
				while (num33 > 0)
				{
					if (WorldGen.SolidTile(num32, num34, false))
					{
						num33--;
					}
					Main.tile[num32, num34].type = 191;
					Main.tile[num32, num34].active(true);
					Main.tile[num32, num34].halfBrick(false);
					num34++;
				}
				int num35 = num34;
				int num36 = WorldGen.genRand.Next(2, num5 + 1);
				for (int num37 = 0; num37 < num36; num37++)
				{
					num34 = num35;
					int num38 = (num10 + num11) / 2;
					int num39 = 1;
					int num40;
					if (num32 < num38)
					{
						num40 = -1;
					}
					else
					{
						num40 = 1;
					}
					if (num32 == num38 || (num5 > 6 && (num32 == num38 - 1 || num32 == num38 + 1)))
					{
						num40 = 0;
					}
					int num41 = num40;
					int num42 = num32;
					num33 = WorldGen.genRand.Next((int)((double)num5 * 3.5), num5 * 6);
					while (num33 > 0)
					{
						num33--;
						num42 += num40;
						if (Main.tile[num42, num34].wall != 244)
						{
							Main.tile[num42, num34].type = 191;
							Main.tile[num42, num34].active(true);
							Main.tile[num42, num34].halfBrick(false);
						}
						num34 += num39;
						if (Main.tile[num42, num34].wall != 244)
						{
							Main.tile[num42, num34].type = 191;
							Main.tile[num42, num34].active(true);
							Main.tile[num42, num34].halfBrick(false);
						}
						if (!Main.tile[num42, num34 + 1].active())
						{
							num40 = 0;
							num39 = 1;
						}
						if (WorldGen.genRand.Next(3) == 0)
						{
							if (num41 < 0)
							{
								if (num40 == 0)
								{
									num40 = -1;
								}
								else
								{
									num40 = 0;
								}
							}
							else if (num41 > 0)
							{
								if (num40 == 0)
								{
									num40 = 1;
								}
								else
								{
									num40 = 0;
								}
							}
							else
							{
								num40 = WorldGen.genRand.Next(-1, 2);
							}
						}
						if (WorldGen.genRand.Next(3) == 0)
						{
							if (num39 == 0)
							{
								num39 = 1;
							}
							else
							{
								num39 = 0;
							}
						}
					}
				}
			}
			if (WorldGen.remixWorldGen)
			{
				num2 = 0;
			}
			for (int num43 = 0; num43 < num2; num43++)
			{
				int num44 = WorldGen.genRand.Next(5, 8);
				num44 = (int)((double)num44 * (1.0 + (double)num5 * 0.05));
				if (array7[num43])
				{
					num44 = WorldGen.genRand.Next(6, 12) + num5;
				}
				int num45 = array5[num43] - num44 * 2;
				int num46 = array5[num43] + num44 * 2;
				int num47 = array6[num43] - num44 * 2;
				int num48 = array6[num43] + num44 * 2;
				double num49 = 2.0 - (double)WorldGen.genRand.Next(5) * 0.1;
				for (int num50 = num45; num50 <= num46; num50++)
				{
					for (int num51 = num47; num51 <= num48; num51++)
					{
						if (Main.tile[num50, num51].type != 191)
						{
							if (array7[num43])
							{
								if ((new Vector2D((double)array5[num43], (double)array6[num43]) - new Vector2D((double)num50, (double)num51)).Length() < (double)num44 * 0.9)
								{
									Main.tile[num50, num51].type = 192;
									Main.tile[num50, num51].active(true);
									Main.tile[num50, num51].halfBrick(false);
								}
							}
							else if ((double)Math.Abs(array5[num43] - num50) + (double)Math.Abs(array6[num43] - num51) * num49 < (double)num44)
							{
								Main.tile[num50, num51].type = 192;
								Main.tile[num50, num51].active(true);
								Main.tile[num50, num51].halfBrick(false);
							}
						}
					}
					if (WorldGen.genRand.Next(30) == 0)
					{
						int num52 = num47;
						if (!Main.tile[num50, num52].active())
						{
							while (!Main.tile[num50, num52 + 1].active() && num52 < num48)
							{
								num52++;
							}
							if (Main.tile[num50, num52 + 1].type == 192)
							{
								WorldGen.PlaceTile(num50, num52, 187, true, false, -1, WorldGen.genRand.Next(50, 52));
							}
						}
					}
					if (!array7[num43] && WorldGen.genRand.Next(15) == 0)
					{
						int num53 = num48;
						int num54 = num53 + 100;
						if (!Main.tile[num50, num53].active())
						{
							while (!Main.tile[num50, num53 + 1].active() && num53 < num54)
							{
								num53++;
							}
							if (Main.tile[num50, num53 + 1].type != 192)
							{
								if (WorldGen.genRand.Next(2) == 0)
								{
									WorldGen.PlaceTile(num50, num53, 187, true, false, -1, WorldGen.genRand.Next(47, 50));
								}
								else
								{
									int num55 = WorldGen.genRand.Next(2);
									int x = 72;
									if (num55 == 1)
									{
										x = WorldGen.genRand.Next(59, 62);
									}
									WorldGen.PlaceSmallPile(num50, num53, x, num55, 185);
								}
							}
						}
					}
				}
			}
			if (flag)
			{
				bool flag3 = false;
				int num56 = j;
				while (num56 < j + 20 && (double)num56 < Main.worldSurface - 2.0)
				{
					for (int num57 = num10; num57 <= num11; num57++)
					{
						if (Main.tile[num57, num56].wall == 0 && !WorldGen.SolidTile(num57, num56, false))
						{
							flag3 = true;
						}
					}
					num56++;
				}
				if (!flag3)
				{
					WorldGen.GrowLivingTree_MakePassage(j, num5, ref num10, ref num11, patch);
				}
			}
			Main.tileSolid[48] = true;
			return true;
		}

		// Token: 0x06000E91 RID: 3729 RVA: 0x0040D390 File Offset: 0x0040B590
		public static bool GrowDungeonTree(int i, int j, bool patch = false)
		{
			int num = 0;
			int[] array = new int[1000];
			int[] array2 = new int[1000];
			int[] array3 = new int[1000];
			int[] array4 = new int[1000];
			int num2 = 0;
			int[] array5 = new int[2000];
			int[] array6 = new int[2000];
			bool[] array7 = new bool[2000];
			int num3 = i - WorldGen.genRand.Next(2, 3);
			int num4 = i + WorldGen.genRand.Next(2, 3);
			if (WorldGen.genRand.Next(5) == 0)
			{
				if (WorldGen.genRand.Next(2) == 0)
				{
					num3--;
				}
				else
				{
					num4++;
				}
			}
			int num5 = num4 - num3;
			int num6 = num3;
			int num7 = num4;
			int num8 = num3;
			int num9 = num4;
			bool flag = true;
			int num10 = WorldGen.genRand.Next(-8, -4);
			int num11 = WorldGen.genRand.Next(2);
			int num12 = j;
			int num13 = WorldGen.genRand.Next(5, 15);
			Main.tileSolid[48] = false;
			while (flag)
			{
				num10++;
				if (num10 > num13)
				{
					num13 = WorldGen.genRand.Next(5, 15);
					num10 = 0;
					array2[num] = num12 + WorldGen.genRand.Next(5);
					if (WorldGen.genRand.Next(5) == 0)
					{
						if (num11 == 0)
						{
							num11 = 1;
						}
						else
						{
							num11 = 0;
						}
					}
					if (num11 == 0)
					{
						array3[num] = -1;
						array[num] = num3;
						array4[num] = num4 - num3;
						if (WorldGen.genRand.Next(2) == 0)
						{
							num3++;
						}
						num6++;
						num11 = 1;
					}
					else
					{
						array3[num] = 1;
						array[num] = num4;
						array4[num] = num4 - num3;
						if (WorldGen.genRand.Next(2) == 0)
						{
							num4--;
						}
						num7--;
						num11 = 0;
					}
					if (num6 == num7)
					{
						flag = false;
					}
					num++;
				}
				for (int k = num3; k <= num4; k++)
				{
					Main.tile[k, num12].type = 191;
					Main.tile[k, num12].active(true);
					Main.tile[k, num12].halfBrick(false);
					Main.tile[k, num12].slope(0);
					Main.tile[k, num12].color(28);
				}
				num12--;
			}
			for (int l = 0; l < num - 1; l++)
			{
				int num14 = array[l] + array3[l];
				int num15 = array2[l];
				int m = (int)((double)array4[l] * (1.0 + (double)WorldGen.genRand.Next(20, 30) * 0.1));
				Main.tile[num14, num15 + 1].type = 191;
				Main.tile[num14, num15 + 1].active(true);
				Main.tile[num14, num15 + 1].halfBrick(false);
				Main.tile[num14, num15 + 1].color(28);
				int num16 = WorldGen.genRand.Next(3, 5);
				while (m > 0)
				{
					m--;
					Main.tile[num14, num15].type = 191;
					Main.tile[num14, num15].active(true);
					Main.tile[num14, num15].halfBrick(false);
					Main.tile[num14, num15].color(28);
					Main.tile[num14, num15].slope(0);
					if (WorldGen.genRand.Next(10) == 0)
					{
						if (WorldGen.genRand.Next(2) == 0)
						{
							num15--;
						}
						else
						{
							num15++;
						}
					}
					else
					{
						num14 += array3[l];
					}
					if (num16 > 0)
					{
						num16--;
					}
					else if (WorldGen.genRand.Next(2) == 0)
					{
						num16 = WorldGen.genRand.Next(2, 5);
						if (WorldGen.genRand.Next(2) == 0)
						{
							Main.tile[num14, num15].type = 191;
							Main.tile[num14, num15].active(true);
							Main.tile[num14, num15].halfBrick(false);
							Main.tile[num14, num15].color(28);
							Main.tile[num14, num15].slope(0);
							Main.tile[num14, num15 - 1].type = 191;
							Main.tile[num14, num15 - 1].active(true);
							Main.tile[num14, num15 - 1].halfBrick(false);
							Main.tile[num14, num15 - 1].color(28);
							array5[num2] = num14;
							array6[num2] = num15;
							num2++;
						}
						else
						{
							Main.tile[num14, num15].type = 191;
							Main.tile[num14, num15].active(true);
							Main.tile[num14, num15].halfBrick(false);
							Main.tile[num14, num15].color(28);
							Main.tile[num14, num15].slope(0);
							Main.tile[num14, num15 + 1].type = 191;
							Main.tile[num14, num15 + 1].active(true);
							Main.tile[num14, num15 + 1].halfBrick(false);
							Main.tile[num14, num15 + 1].color(28);
							array5[num2] = num14;
							array6[num2] = num15;
							num2++;
						}
					}
					if (m == 0)
					{
						array5[num2] = num14;
						array6[num2] = num15;
						num2++;
					}
				}
			}
			int num17 = (num3 + num4) / 2;
			int num18 = num12;
			int n = WorldGen.genRand.Next(num5 * 3, num5 * 5);
			int num19 = 0;
			int num20 = 0;
			while (n > 0)
			{
				Main.tile[num17, num18].type = 191;
				Main.tile[num17, num18].active(true);
				Main.tile[num17, num18].halfBrick(false);
				Main.tile[num17, num18].color(28);
				if (num19 > 0)
				{
					num19--;
				}
				if (num20 > 0)
				{
					num20--;
				}
				for (int num21 = -1; num21 < 2; num21++)
				{
					if (num21 != 0 && ((num21 < 0 && num19 == 0) || (num21 > 0 && num20 == 0)) && WorldGen.genRand.Next(2) == 0)
					{
						int num22 = num17;
						int num23 = num18;
						int num24 = WorldGen.genRand.Next(num5, num5 * 3);
						if (num21 < 0)
						{
							num19 = WorldGen.genRand.Next(3, 5);
						}
						if (num21 > 0)
						{
							num20 = WorldGen.genRand.Next(3, 5);
						}
						int num25 = 0;
						while (num24 > 0)
						{
							num24--;
							num22 += num21;
							Main.tile[num22, num23].type = 191;
							Main.tile[num22, num23].active(true);
							Main.tile[num22, num23].halfBrick(false);
							Main.tile[num22, num23].color(28);
							if (num24 == 0)
							{
								array5[num2] = num22;
								array6[num2] = num23;
								array7[num2] = true;
								num2++;
							}
							if (WorldGen.genRand.Next(5) == 0)
							{
								if (WorldGen.genRand.Next(2) == 0)
								{
									num23--;
								}
								else
								{
									num23++;
								}
								Main.tile[num22, num23].type = 191;
								Main.tile[num22, num23].active(true);
								Main.tile[num22, num23].halfBrick(false);
								Main.tile[num22, num23].color(28);
							}
							if (num25 > 0)
							{
								num25--;
							}
							else if (WorldGen.genRand.Next(3) == 0)
							{
								num25 = WorldGen.genRand.Next(2, 4);
								int num26 = num22;
								int num27 = num23;
								if (WorldGen.genRand.Next(2) == 0)
								{
									num27--;
								}
								else
								{
									num27++;
								}
								Main.tile[num26, num27].type = 191;
								Main.tile[num26, num27].active(true);
								Main.tile[num26, num27].halfBrick(false);
								Main.tile[num26, num27].color(28);
								array5[num2] = num26;
								array6[num2] = num27;
								array7[num2] = true;
								num2++;
								array5[num2] = num26 + WorldGen.genRand.Next(-5, 6);
								array6[num2] = num27 + WorldGen.genRand.Next(-5, 6);
								array7[num2] = true;
								num2++;
							}
						}
					}
				}
				array5[num2] = num17;
				array6[num2] = num18;
				num2++;
				if (WorldGen.genRand.Next(4) == 0)
				{
					if (WorldGen.genRand.Next(2) == 0)
					{
						num17--;
					}
					else
					{
						num17++;
					}
					Main.tile[num17, num18].type = 191;
					Main.tile[num17, num18].active(true);
					Main.tile[num17, num18].halfBrick(false);
					Main.tile[num17, num18].color(28);
				}
				num18--;
				n--;
			}
			for (int num28 = num8; num28 <= num9; num28++)
			{
				int num29 = WorldGen.genRand.Next(1, 6);
				int num30 = j + 1;
				while (num29 > 0)
				{
					if (WorldGen.SolidTile(num28, num30, false))
					{
						num29--;
					}
					Main.tile[num28, num30].type = 191;
					Main.tile[num28, num30].active(true);
					Main.tile[num28, num30].halfBrick(false);
					Main.tile[num28, num30].slope(0);
					num30++;
				}
				int num31 = num30;
				int num32 = WorldGen.genRand.Next(2, num5 + 1);
				for (int num33 = 0; num33 < num32; num33++)
				{
					num30 = num31;
					int num34 = (num8 + num9) / 2;
					int num35 = 1;
					int num36;
					if (num28 < num34)
					{
						num36 = -1;
					}
					else
					{
						num36 = 1;
					}
					if (num28 == num34 || (num5 > 6 && (num28 == num34 - 1 || num28 == num34 + 1)))
					{
						num36 = 0;
					}
					int num37 = num36;
					int num38 = num28;
					num29 = WorldGen.genRand.Next((int)((double)num5 * 3.5), num5 * 6);
					while (num29 > 0)
					{
						num29--;
						num38 += num36;
						if (Main.tile[num38, num30].wall != 244)
						{
							Main.tile[num38, num30].type = 191;
							Main.tile[num38, num30].active(true);
							Main.tile[num38, num30].halfBrick(false);
							Main.tile[num38, num30].slope(0);
						}
						num30 += num35;
						if (Main.tile[num38, num30].wall != 244)
						{
							Main.tile[num38, num30].type = 191;
							Main.tile[num38, num30].active(true);
							Main.tile[num38, num30].halfBrick(false);
							Main.tile[num38, num30].slope(0);
						}
						if (!Main.tile[num38, num30 + 1].active())
						{
							num36 = 0;
							num35 = 1;
						}
						if (WorldGen.genRand.Next(3) == 0)
						{
							if (num37 < 0)
							{
								if (num36 == 0)
								{
									num36 = -1;
								}
								else
								{
									num36 = 0;
								}
							}
							else if (num37 > 0)
							{
								if (num36 == 0)
								{
									num36 = 1;
								}
								else
								{
									num36 = 0;
								}
							}
							else
							{
								num36 = WorldGen.genRand.Next(-1, 2);
							}
						}
						if (WorldGen.genRand.Next(3) == 0)
						{
							if (num35 == 0)
							{
								num35 = 1;
							}
							else
							{
								num35 = 0;
							}
						}
					}
				}
			}
			if (!WorldGen.remixWorldGen)
			{
				for (int num39 = 0; num39 < num2; num39++)
				{
					int num40 = WorldGen.genRand.Next(5, 8);
					num40 = (int)((double)num40 * (1.0 + (double)num5 * 0.05));
					if (array7[num39])
					{
						num40 = WorldGen.genRand.Next(6, 12) + num5;
					}
					int num41 = array5[num39] - num40 * 2;
					int num42 = array5[num39] + num40 * 2;
					int num43 = array6[num39] - num40 * 2;
					int num44 = array6[num39] + num40 * 2;
					double num45 = 2.0 - (double)WorldGen.genRand.Next(5) * 0.1;
					for (int num46 = num41; num46 <= num42; num46++)
					{
						for (int num47 = num43; num47 <= num44; num47++)
						{
							if (Main.tile[num46, num47].type != 191)
							{
								if (array7[num39])
								{
									if ((new Vector2D((double)array5[num39], (double)array6[num39]) - new Vector2D((double)num46, (double)num47)).Length() < (double)num40 * 0.9)
									{
										Main.tile[num46, num47].type = 192;
										Main.tile[num46, num47].active(true);
										Main.tile[num46, num47].halfBrick(false);
										Main.tile[num46, num47].color(28);
									}
								}
								else if ((double)Math.Abs(array5[num39] - num46) + (double)Math.Abs(array6[num39] - num47) * num45 < (double)num40)
								{
									Main.tile[num46, num47].type = 192;
									Main.tile[num46, num47].active(true);
									Main.tile[num46, num47].halfBrick(false);
									Main.tile[num46, num47].color(28);
								}
							}
						}
					}
				}
			}
			WorldGen.GrowDungeonTree_MakePassage(j, num5, ref num8, ref num9, patch);
			Main.tileSolid[48] = true;
			return true;
		}

		// Token: 0x06000E92 RID: 3730 RVA: 0x0040E1EC File Offset: 0x0040C3EC
		private static bool GrowLivingTree_HorizontalTunnel(int i, int j)
		{
			int num = i;
			int num2 = i;
			int num3 = 80;
			int num4 = 1;
			if (WorldGen.genRand.Next(2) == 0)
			{
				num4 *= -1;
			}
			for (int k = 0; k < 2; k++)
			{
				bool flag = false;
				if (num == i && num4 > 0)
				{
					int l = i + 5;
					while (l < i + num3)
					{
						if (!WorldGen.InWorld(l, j, 10))
						{
							return false;
						}
						if ((double)j < Main.worldSurface)
						{
							int num5 = j - 7;
							while (num5 <= j + 7 && Main.tile[l, num5].wall != 0)
							{
								num5++;
							}
						}
						if (Main.tile[l, j].type == 48)
						{
							break;
						}
						if (Main.tile[l, j].type == 191)
						{
							for (int m = j - 2; m <= j; m++)
							{
								if (Main.tile[l + 2, m].wall != 244)
								{
									flag = true;
								}
							}
							if (!flag)
							{
								k = 2;
								num2 = l + 2;
								break;
							}
							break;
						}
						else
						{
							if (!Main.tile[l, j].active())
							{
								bool flag2 = true;
								for (int n = j - 2; n <= j; n++)
								{
									if ((double)j < Main.worldSurface + 3.0 && (Main.tile[l + 1, n].wall == 0 || Main.tile[l + 2, n].wall == 0 || Main.tile[l + 3, n].wall == 0))
									{
										return false;
									}
									if (Main.tile[l, n].active() || Main.tile[l + 1, n].active() || Main.tile[l + 2, n].active())
									{
										flag2 = false;
									}
								}
								if (flag2)
								{
									k = 2;
									num2 = l;
									break;
								}
							}
							l++;
						}
					}
				}
				flag = false;
				if (num2 == i && num4 < 0)
				{
					int num6 = i - 5;
					while (num6 > i - num3)
					{
						if (!WorldGen.InWorld(num6, j, 10))
						{
							return false;
						}
						if ((double)j < Main.worldSurface)
						{
							int num7 = j - 7;
							while (num7 <= j + 7 && Main.tile[num6, num7].wall != 0)
							{
								num7++;
							}
						}
						if (Main.tile[num6, j].type == 48)
						{
							break;
						}
						if (Main.tile[num6, j].type == 191)
						{
							for (int num8 = j - 2; num8 <= j; num8++)
							{
								if (Main.tile[num6 - 3, num8].wall != 244)
								{
									flag = true;
								}
							}
							if (!flag)
							{
								k = 2;
								num = num6 - 2;
								break;
							}
							break;
						}
						else
						{
							if (!Main.tile[num6, j].active())
							{
								bool flag3 = true;
								for (int num9 = j - 2; num9 <= j; num9++)
								{
									if ((double)j < Main.worldSurface + 3.0 && (Main.tile[num6 - 1, num9].wall == 0 || Main.tile[num6 - 2, num9].wall == 0 || Main.tile[num6 - 3, num9].wall == 0))
									{
										return false;
									}
									if (Main.tile[num6, num9].active() || Main.tile[num6 - 1, num9].active() || Main.tile[num6 - 2, num9].active())
									{
										flag3 = false;
									}
								}
								if (flag3)
								{
									k = 2;
									num = num6;
									break;
								}
							}
							num6--;
						}
					}
				}
				num4 *= -1;
			}
			if (num == num2)
			{
				return false;
			}
			bool flag4 = false;
			bool flag5 = false;
			for (int num10 = j - 5; num10 <= j + 1; num10++)
			{
				for (int num11 = num; num11 <= num2; num11++)
				{
					int num12 = 2;
					if (Math.Abs(num11 - num2) > 3 && Math.Abs(num11 - num) > 3)
					{
						num12 = 4;
					}
					if (Main.tile[num11, num10].wall != 244 && Main.tile[num11, num10].type != 19 && Main.tile[num11, num10].type != 15 && Main.tile[num11, num10].type != 304 && Main.tile[num11, num10].type != 21 && Main.tile[num11, num10].type != 10)
					{
						if (!Main.wallDungeon[(int)Main.tile[num11, num10].wall] && (!Main.tile[num11, num10].active() || (!Main.wallDungeon[(int)Main.tile[num11, num10 - 1].wall] && !Main.wallDungeon[(int)Main.tile[num11, num10 + 1].wall])))
						{
							Main.tile[num11, num10].active(true);
							Main.tile[num11, num10].type = 191;
							Main.tile[num11, num10].halfBrick(false);
						}
						if (Main.tile[num11, num10 - 1].type == 40)
						{
							Main.tile[num11, num10 - 1].type = 0;
						}
						if (Main.tile[num11, num10 + 1].type == 40)
						{
							Main.tile[num11, num10 + 1].type = 0;
						}
					}
					if (num10 >= j - num12 && num10 <= j && Main.tile[num11, num10].type != 19 && Main.tile[num11, num10].type != 15 && Main.tile[num11, num10].type != 304 && Main.tile[num11, num10].type != 21 && Main.tile[num11, num10].type != 10 && Main.tile[num11, num10 - 1].type != 15 && Main.tile[num11, num10 - 1].type != 304 && Main.tile[num11, num10 - 1].type != 21 && Main.tile[num11, num10 - 1].type != 10 && Main.tile[num11, num10 + 1].type != 10)
					{
						if (!Main.wallDungeon[(int)Main.tile[num11, num10].wall])
						{
							Main.tile[num11, num10].wall = 244;
						}
						Main.tile[num11, num10].liquid = 0;
						Main.tile[num11, num10].active(false);
					}
					if (num10 == j)
					{
						int style = 7;
						if (Main.wallDungeon[(int)Main.tile[num11, num10].wall] || Main.wallDungeon[(int)Main.tile[num11, num10 - 1].wall] || Main.wallDungeon[(int)Main.tile[num11, num10 - 2].wall])
						{
							style = 13;
						}
						if (num11 <= num + 4 && !flag4)
						{
							if (Main.tile[num11 - 1, num10].type == 10 || Main.tile[num11 + 1, num10].type == 10)
							{
								flag4 = true;
							}
							else if (WorldGen.genRand.Next(3) == 0)
							{
								WorldGen.PlaceTile(num11, num10, 10, true, false, -1, style);
								if (Main.tile[num11, num10].type == 10)
								{
									flag4 = true;
								}
							}
						}
						if (num11 >= num2 - 4 && !flag5)
						{
							if (Main.tile[num11 - 1, num10].type == 10 || Main.tile[num11 + 1, num10].type == 10)
							{
								flag5 = true;
							}
							else if (WorldGen.genRand.Next(3) == 0)
							{
								WorldGen.PlaceTile(num11, num10, 10, true, false, -1, style);
								if (Main.tile[num11, num10].type == 10)
								{
									flag5 = true;
								}
							}
						}
					}
				}
			}
			return true;
		}

		// Token: 0x06000E93 RID: 3731 RVA: 0x0040EAA4 File Offset: 0x0040CCA4
		private static void GrowDungeonTree_MakePassage(int j, int W, ref int minl, ref int minr, bool noSecretRoom = false)
		{
			int num = minl;
			int num2 = minr;
			int num3 = (minl + minr) / 2;
			int num4 = 5;
			int num5 = j - 6;
			int num6 = 0;
			bool flag = true;
			WorldGen.genRand.Next(5, 16);
			for (;;)
			{
				num5++;
				if (num5 > GenVars.dungeonY - 5)
				{
					break;
				}
				int num7 = (minl + minr) / 2;
				int num8 = 1;
				if (num5 > j && W <= 4)
				{
					num8++;
				}
				for (int i = minl - num8; i <= minr + num8; i++)
				{
					if (i > num7 - 2 && i <= num7 + 1)
					{
						if (num5 > j - 4)
						{
							if (Main.tile[i, num5].type != 19 && Main.tile[i, num5].type != 15 && Main.tile[i, num5].type != 304 && Main.tile[i, num5].type != 21 && Main.tile[i, num5].type != 10 && Main.tile[i, num5 - 1].type != 15 && Main.tile[i, num5 - 1].type != 304 && Main.tile[i, num5 - 1].type != 21 && Main.tile[i, num5 - 1].type != 10 && Main.tile[i, num5 + 1].type != 10)
							{
								Main.tile[i, num5].active(false);
							}
							if (!Main.wallDungeon[(int)Main.tile[i, num5].wall])
							{
								Main.tile[i, num5].wall = 244;
							}
							if (!Main.wallDungeon[(int)Main.tile[i - 1, num5].wall] && (Main.tile[i - 1, num5].wall > 0 || (double)num5 >= Main.worldSurface))
							{
								Main.tile[i - 1, num5].wall = 244;
							}
							if (!Main.wallDungeon[(int)Main.tile[i + 1, num5].wall] && (Main.tile[i + 1, num5].wall > 0 || (double)num5 >= Main.worldSurface))
							{
								Main.tile[i + 1, num5].wall = 244;
							}
							if (num5 == j && i > num7 - 2 && i <= num7 + 1)
							{
								Main.tile[i, num5 + 1].active(false);
								WorldGen.PlaceTile(i, num5 + 1, 19, true, false, -1, 23);
							}
						}
					}
					else
					{
						if (Main.tile[i, num5].type != 15 && Main.tile[i, num5].type != 304 && Main.tile[i, num5].type != 21 && Main.tile[i, num5].type != 10 && Main.tile[i - 1, num5].type != 10 && Main.tile[i + 1, num5].type != 10)
						{
							if (!Main.wallDungeon[(int)Main.tile[i, num5].wall])
							{
								Main.tile[i, num5].type = 191;
								Main.tile[i, num5].active(true);
								Main.tile[i, num5].halfBrick(false);
							}
							if (Main.tile[i - 1, num5].type == 40)
							{
								Main.tile[i - 1, num5].type = 0;
							}
							if (Main.tile[i + 1, num5].type == 40)
							{
								Main.tile[i + 1, num5].type = 0;
							}
						}
						if (num5 <= j && num5 > j - 4 && i > minl - num8 && i <= minr + num8 - 1)
						{
							Main.tile[i, num5].wall = 244;
						}
					}
					if (!WorldGen.gen)
					{
						WorldGen.SquareTileFrame(i, num5, true);
						WorldGen.SquareWallFrame(i, num5, true);
					}
				}
				num6++;
				if (num6 >= 6)
				{
					num6 = 0;
					int num9 = WorldGen.genRand.Next(3);
					if (num9 == 0)
					{
						num9 = -1;
					}
					if (flag)
					{
						num9 = 2;
					}
					if (num9 == -1 && Main.tile[minl - num4, num5].wall == 244)
					{
						num9 = 1;
					}
					else if (num9 == 1 && Main.tile[minr + num4, num5].wall == 244)
					{
						num9 = -1;
					}
					if (num9 == 2)
					{
						flag = false;
						int num10 = 23;
						if (Main.wallDungeon[(int)Main.tile[minl, num5 + 1].wall] || Main.wallDungeon[(int)Main.tile[minl + 1, num5 + 1].wall] || Main.wallDungeon[(int)Main.tile[minl + 2, num5 + 1].wall])
						{
							num10 = 12;
						}
						if (WorldGen.SolidTile(minl - 1, num5 + 1, false) || WorldGen.SolidTile(minr + 1, num5 + 1, false) || num10 != 12)
						{
							for (int k = minl; k <= minr; k++)
							{
								if (k > num7 - 2 && k <= num7 + 1)
								{
									Main.tile[k, num5 + 1].active(false);
									Main.tile[k, num5 + 1].halfBrick(false);
									Main.tile[k, num5 + 1].slope(0);
									WorldGen.PlaceTile(k, num5 + 1, 19, true, false, -1, num10);
								}
							}
						}
					}
					else
					{
						minl += num9;
						minr += num9;
					}
				}
			}
			minl = num;
			minr = num2;
			int num11 = (minl + minr) / 2;
			for (int l = minl; l <= minr; l++)
			{
				for (int m = j - 3; m <= j; m++)
				{
					Main.tile[l, m].active(false);
					if (!Main.wallDungeon[(int)Main.tile[l, m].wall])
					{
						Main.tile[l, m].wall = 244;
					}
				}
			}
		}

		// Token: 0x06000E94 RID: 3732 RVA: 0x0040F11C File Offset: 0x0040D31C
		private static void GrowLivingTree_MakePassage(int j, int W, ref int minl, ref int minr, bool noSecretRoom = false)
		{
			bool flag = noSecretRoom;
			int num = minl;
			int num2 = minr;
			bool flag2 = false;
			int num3 = (minl + minr) / 2;
			int num4 = 5;
			int num5 = j - 6;
			int num6 = 50;
			int i = WorldGen.genRand.Next(400, 700);
			int num7 = 0;
			bool flag3 = true;
			int num8 = WorldGen.genRand.Next(5, 16);
			while (i > 0)
			{
				num5++;
				i--;
				num6--;
				int num9 = (minl + minr) / 2;
				if (!Main.tile[minl, num5].active() && Main.tile[minl, num5].wall == 244 && !Main.tile[minr, num5].active() && Main.tile[minr, num5].wall == 244)
				{
					break;
				}
				int num10 = 1;
				if (num5 > j && W <= 4)
				{
					num10++;
				}
				for (int k = minl - num10; k <= minr + num10; k++)
				{
					if (Main.wallDungeon[(int)Main.tile[k, num5].wall])
					{
						flag = true;
						flag2 = true;
					}
					if (k > num9 - 2 && k <= num9 + 1)
					{
						if (num5 > j - 4)
						{
							if (Main.tile[k, num5].type != 19 && Main.tile[k, num5].type != 15 && Main.tile[k, num5].type != 304 && Main.tile[k, num5].type != 21 && Main.tile[k, num5].type != 10 && Main.tile[k, num5 - 1].type != 15 && Main.tile[k, num5 - 1].type != 304 && Main.tile[k, num5 - 1].type != 21 && Main.tile[k, num5 - 1].type != 10 && Main.tile[k, num5 + 1].type != 10)
							{
								Main.tile[k, num5].active(false);
							}
							if (!Main.wallDungeon[(int)Main.tile[k, num5].wall])
							{
								Main.tile[k, num5].wall = 244;
							}
							if (!Main.wallDungeon[(int)Main.tile[k - 1, num5].wall] && (Main.tile[k - 1, num5].wall > 0 || (double)num5 >= Main.worldSurface))
							{
								Main.tile[k - 1, num5].wall = 244;
							}
							if (!Main.wallDungeon[(int)Main.tile[k + 1, num5].wall] && (Main.tile[k + 1, num5].wall > 0 || (double)num5 >= Main.worldSurface))
							{
								Main.tile[k + 1, num5].wall = 244;
							}
							if (num5 == j && k > num9 - 2 && k <= num9 + 1)
							{
								Main.tile[k, num5 + 1].active(false);
								WorldGen.PlaceTile(k, num5 + 1, 19, true, false, -1, 23);
							}
						}
					}
					else
					{
						if (Main.tile[k, num5].type != 15 && Main.tile[k, num5].type != 304 && Main.tile[k, num5].type != 21 && Main.tile[k, num5].type != 10 && Main.tile[k - 1, num5].type != 10 && Main.tile[k + 1, num5].type != 10)
						{
							if (!Main.wallDungeon[(int)Main.tile[k, num5].wall])
							{
								Main.tile[k, num5].type = 191;
								Main.tile[k, num5].active(true);
								Main.tile[k, num5].halfBrick(false);
							}
							if (Main.tile[k - 1, num5].type == 40)
							{
								Main.tile[k - 1, num5].type = 0;
							}
							if (Main.tile[k + 1, num5].type == 40)
							{
								Main.tile[k + 1, num5].type = 0;
							}
						}
						if (num5 <= j && num5 > j - 4 && k > minl - num10 && k <= minr + num10 - 1)
						{
							Main.tile[k, num5].wall = 244;
						}
					}
					if (!WorldGen.gen)
					{
						WorldGen.SquareTileFrame(k, num5, true);
						WorldGen.SquareWallFrame(k, num5, true);
					}
				}
				num7++;
				if (num7 >= 6)
				{
					num7 = 0;
					int num11 = WorldGen.genRand.Next(3);
					if (num11 == 0)
					{
						num11 = -1;
					}
					if (flag3)
					{
						num11 = 2;
					}
					if (num11 == -1 && Main.tile[minl - num4, num5].wall == 244)
					{
						num11 = 1;
					}
					else if (num11 == 1 && Main.tile[minr + num4, num5].wall == 244)
					{
						num11 = -1;
					}
					if (num11 == 2)
					{
						flag3 = false;
						int style = 23;
						if (Main.wallDungeon[(int)Main.tile[minl, num5 + 1].wall] || Main.wallDungeon[(int)Main.tile[minl + 1, num5 + 1].wall] || Main.wallDungeon[(int)Main.tile[minl + 2, num5 + 1].wall])
						{
							style = 12;
						}
						for (int l = minl; l <= minr; l++)
						{
							if (l > num9 - 2 && l <= num9 + 1)
							{
								Main.tile[l, num5 + 1].active(false);
								WorldGen.PlaceTile(l, num5 + 1, 19, true, false, -1, style);
							}
						}
					}
					else
					{
						minl += num11;
						minr += num11;
					}
					if (noSecretRoom)
					{
						num8--;
						if (num8 <= 0)
						{
							if (WorldGen.GrowLivingTree_HorizontalTunnel(num9, num5))
							{
								num8 = WorldGen.genRand.Next(5, 21);
							}
							else
							{
								num8 = WorldGen.genRand.Next(2, 11);
							}
						}
					}
					if (num6 <= 0 && !flag)
					{
						flag = true;
						WorldGen.GrowLivingTreePassageRoom(minl, minr, num5);
					}
				}
				if (flag2)
				{
					bool flag4 = true;
					for (int m = minl; m <= minr; m++)
					{
						for (int n = num5 + 1; n <= num5 + 2; n++)
						{
							if (WorldGen.SolidTile(m, n, false))
							{
								flag4 = false;
							}
						}
					}
					if (flag4)
					{
						i = 0;
					}
				}
				else if (num6 <= 0)
				{
					bool flag5 = true;
					for (int num12 = minl; num12 <= minr; num12++)
					{
						for (int num13 = num5 + 1; num13 <= num5 + 4; num13++)
						{
							if (WorldGen.SolidTile(num12, num13, false))
							{
								flag5 = false;
							}
						}
					}
					if (flag5)
					{
						i = 0;
					}
				}
			}
			minl = num;
			minr = num2;
			int num14 = (minl + minr) / 2;
			for (int num15 = minl; num15 <= minr; num15++)
			{
				for (int num16 = j - 3; num16 <= j; num16++)
				{
					Main.tile[num15, num16].active(false);
					bool flag6 = true;
					for (int num17 = num15 - 1; num17 <= num15 + 1; num17++)
					{
						for (int num18 = num16 - 1; num18 <= num16 + 1; num18++)
						{
							if (!Main.tile[num17, num18].active() && Main.tile[num17, num18].wall == 0)
							{
								flag6 = false;
							}
						}
					}
					if (flag6 && !Main.wallDungeon[(int)Main.tile[num15, num16].wall])
					{
						Main.tile[num15, num16].wall = 244;
					}
				}
			}
		}

		// Token: 0x06000E95 RID: 3733 RVA: 0x0040F96C File Offset: 0x0040DB6C
		private static void GrowLivingTreePassageRoom(int minl, int minr, int Y)
		{
			int num = WorldGen.genRand.Next(2);
			if (num == 0)
			{
				num = -1;
			}
			int num2 = Y - 2;
			int num3 = (minl + minr) / 2;
			if (num < 0)
			{
				num3--;
			}
			if (num > 0)
			{
				num3++;
			}
			int num4 = WorldGen.genRand.Next(15, 30);
			int num5 = num3 + num4;
			if (num < 0)
			{
				num5 = num3;
				num3 -= num4;
			}
			for (int i = num3; i < num5; i++)
			{
				for (int j = Y - 20; j < Y + 10; j++)
				{
					if (Main.tile[i, j].wall == 0 && !Main.tile[i, j].active() && (double)j < Main.worldSurface)
					{
						return;
					}
				}
			}
			GenVars.dMinX = num3;
			GenVars.dMaxX = num5;
			if (num < 0)
			{
				GenVars.dMinX -= 40;
			}
			else
			{
				GenVars.dMaxX += 40;
			}
			for (int k = num3; k <= num5; k++)
			{
				for (int l = num2 - 2; l <= Y + 2; l++)
				{
					if (Main.tile[k - 1, l].type == 40)
					{
						Main.tile[k - 1, l].type = 0;
					}
					if (Main.tile[k + 1, l].type == 40)
					{
						Main.tile[k + 1, l].type = 0;
					}
					if (Main.tile[k, l - 1].type == 40)
					{
						Main.tile[k, l - 1].type = 0;
					}
					if (Main.tile[k, l + 1].type == 40)
					{
						Main.tile[k, l + 1].type = 0;
					}
					if (Main.tile[k, l].wall != 244 && Main.tile[k, l].type != 19)
					{
						Main.tile[k, l].active(true);
						Main.tile[k, l].type = 191;
						Main.tile[k, l].halfBrick(false);
					}
					if (l >= num2 && l <= Y)
					{
						Main.tile[k, l].liquid = 0;
						Main.tile[k, l].wall = 244;
						Main.tile[k, l].active(false);
					}
				}
			}
			int i2 = (minl + minr) / 2 + 3 * num;
			WorldGen.PlaceTile(i2, Y, 10, true, false, -1, 7);
			int num6 = WorldGen.genRand.Next(5, 9);
			int num7 = WorldGen.genRand.Next(4, 6);
			if (num < 0)
			{
				num5 = num3 + num6;
				num3 -= num6;
			}
			else
			{
				num3 = num5 - num6;
				num5 += num6;
			}
			num2 = Y - num7;
			for (int m = num3 - 2; m <= num5 + 2; m++)
			{
				for (int n = num2 - 2; n <= Y + 2; n++)
				{
					if (Main.tile[m - 1, n].type == 40)
					{
						Main.tile[m - 1, n].type = 40;
					}
					if (Main.tile[m + 1, n].type == 40)
					{
						Main.tile[m + 1, n].type = 40;
					}
					if (Main.tile[m, n - 1].type == 40)
					{
						Main.tile[m, n - 1].type = 40;
					}
					if (Main.tile[m, n + 1].type == 40)
					{
						Main.tile[m, n + 1].type = 40;
					}
					if (Main.tile[m, n].wall != 244 && Main.tile[m, n].type != 19)
					{
						Main.tile[m, n].active(true);
						Main.tile[m, n].type = 191;
						Main.tile[m, n].halfBrick(false);
					}
					if (n >= num2 && n <= Y && m >= num3 && m <= num5)
					{
						Main.tile[m, n].liquid = 0;
						Main.tile[m, n].wall = 244;
						Main.tile[m, n].active(false);
					}
				}
			}
			i2 = num3 - 2;
			if (num < 0)
			{
				i2 = num5 + 2;
			}
			WorldGen.PlaceTile(i2, Y, 10, true, false, -1, 7);
			int num8 = num5;
			if (num < 0)
			{
				num8 = num3;
			}
			int num9 = 2;
			if (WorldGen.genRand.Next(num9) == 0)
			{
				num9 += 2;
				WorldGen.PlaceTile(num8, Y, 15, true, false, -1, 5);
				if (num < 0)
				{
					Tile tile = Main.tile[num8, Y - 1];
					tile.frameX += 18;
					Tile tile2 = Main.tile[num8, Y];
					tile2.frameX += 18;
				}
			}
			num8 = num5 - 2;
			if (num < 0)
			{
				num8 = num3 + 2;
			}
			WorldGen.PlaceTile(num8, Y, 304, true, false, -1, 0);
			num8 = num5 - 4;
			if (num < 0)
			{
				num8 = num3 + 4;
			}
			if (WorldGen.genRand.Next(num9) == 0)
			{
				WorldGen.PlaceTile(num8, Y, 15, true, false, -1, 5);
				if (num > 0)
				{
					Tile tile3 = Main.tile[num8, Y - 1];
					tile3.frameX += 18;
					Tile tile4 = Main.tile[num8, Y];
					tile4.frameX += 18;
				}
			}
			num8 = num5 - 7;
			if (num < 0)
			{
				num8 = num3 + 8;
			}
			int contain = 832;
			if (WorldGen.genRand.Next(3) == 0)
			{
				contain = 4281;
			}
			if (!WorldGen.remixWorldGen)
			{
				WorldGen.AddBuriedChest(num8, Y, contain, false, 12, false, 0);
				return;
			}
			int num10 = WorldGen.genRand.Next(1, 3);
			for (int num11 = 0; num11 < num10; num11++)
			{
				bool flag = false;
				while (!flag)
				{
					int num12 = WorldGen.genRand.Next(Main.maxTilesX / 8, Main.maxTilesX - Main.maxTilesX / 8);
					int num13 = WorldGen.genRand.Next((int)Main.rockLayer, Main.maxTilesY - 350);
					if (!WorldGen.IsTileNearby(num12, num13, 53, 20) && !WorldGen.IsTileNearby(num12, num13, 147, 20) && !WorldGen.IsTileNearby(num12, num13, 59, 20))
					{
						flag = WorldGen.AddBuriedChest(num12, num13, contain, false, 12, false, 0);
					}
				}
			}
			if (WorldGen.crimson)
			{
				WorldGen.AddBuriedChest(num8, Y, 0, false, 14, false, 0);
				return;
			}
			WorldGen.AddBuriedChest(num8, Y, 0, false, 7, false, 0);
		}

		// Token: 0x06000E96 RID: 3734 RVA: 0x00410048 File Offset: 0x0040E248
		public static void TreeGrowFXCheck(int x, int y)
		{
			int num = 1;
			int num2 = -1;
			Tile topTile = null;
			for (int i = -1; i > -100; i--)
			{
				Tile tile = Main.tile[x, y + i];
				if (!tile.active() || !TileID.Sets.GetsCheckedForLeaves[(int)tile.type])
				{
					break;
				}
				topTile = tile;
				num++;
			}
			for (int j = 1; j < 5; j++)
			{
				Tile tile2 = Main.tile[x, y + j];
				if (!tile2.active() || !TileID.Sets.GetsCheckedForLeaves[(int)tile2.type])
				{
					int num3;
					WorldGen.GetTreeLeaf(x, topTile, tile2, ref num, out num3, out num2);
					break;
				}
				num++;
			}
			if (num > 0 && num2 > 0)
			{
				if (Main.netMode == 2)
				{
					NetMessage.SendData(112, -1, -1, null, 1, (float)x, (float)y, (float)num, num2, 0, 0);
				}
				if (Main.netMode == 0)
				{
					WorldGen.TreeGrowFX(x, y, num, num2, false);
				}
			}
		}

		// Token: 0x06000E97 RID: 3735 RVA: 0x0041011C File Offset: 0x0040E31C
		public static void GetTreeLeaf(int x, Tile topTile, Tile t, ref int treeHeight, out int treeFrame, out int passStyle)
		{
			treeFrame = 0;
			passStyle = -1;
			if (topTile.frameX == 22 || topTile.frameX == 44 || topTile.frameX == 66)
			{
				if (topTile.frameY == 220)
				{
					treeFrame = 1;
				}
				else if (topTile.frameY == 242)
				{
					treeFrame = 2;
				}
			}
			if (topTile.frameX == 44 || topTile.frameX == 66)
			{
				if (topTile.frameY == 220)
				{
					treeFrame = 1;
				}
				else if (topTile.frameY == 242)
				{
					treeFrame = 2;
				}
			}
			ushort type = topTile.type;
			if (type <= 596)
			{
				if (type - 583 > 6)
				{
					if (type == 596)
					{
						passStyle = 1248;
					}
				}
				else
				{
					passStyle = (int)(1249 + (topTile.type - 583));
				}
			}
			else if (type != 616)
			{
				if (type == 634)
				{
					passStyle = 1278;
				}
			}
			else
			{
				passStyle = 1257;
			}
			if (passStyle > -1)
			{
				return;
			}
			type = t.type;
			if (type <= 112)
			{
				if (type <= 53)
				{
					if (type == 2)
					{
						goto IL_17D;
					}
					if (type != 23)
					{
						if (type != 53)
						{
							return;
						}
						passStyle = 911;
						return;
					}
				}
				else if (type <= 70)
				{
					if (type == 60)
					{
						passStyle = 914;
						return;
					}
					if (type != 70)
					{
						return;
					}
					passStyle = 912;
					return;
				}
				else
				{
					if (type == 109)
					{
						goto IL_1CE;
					}
					if (type != 112)
					{
						return;
					}
				}
				passStyle = 915;
				return;
			}
			if (type <= 199)
			{
				if (type == 116)
				{
					passStyle = 919;
					return;
				}
				if (type == 147)
				{
					passStyle = 913;
					return;
				}
				if (type != 199)
				{
					return;
				}
			}
			else if (type <= 477)
			{
				if (type != 234)
				{
					if (type != 477)
					{
						return;
					}
					goto IL_17D;
				}
			}
			else
			{
				if (type == 492)
				{
					goto IL_1CE;
				}
				if (type != 633)
				{
					return;
				}
				passStyle = 1278;
				return;
			}
			passStyle = 916;
			return;
			IL_17D:
			passStyle = 910;
			return;
			IL_1CE:
			int num = 917;
			int hollowTreeFoliageStyle = WorldGen.GetHollowTreeFoliageStyle();
			if (hollowTreeFoliageStyle != 20)
			{
				if (x % 3 == 1)
				{
					treeFrame += 3;
				}
				if (x % 3 == 2)
				{
					treeFrame += 6;
				}
				switch (treeFrame)
				{
				case 0:
					passStyle = 2;
					break;
				case 1:
					passStyle = 1;
					break;
				case 2:
					passStyle = 7;
					break;
				case 3:
					passStyle = 4;
					break;
				case 4:
					passStyle = 5;
					break;
				case 5:
					passStyle = 6;
					break;
				case 6:
					passStyle = 3;
					break;
				case 7:
					passStyle = 8;
					break;
				case 8:
					passStyle = 0;
					break;
				}
			}
			else
			{
				int num2 = 196;
				if (x % 6 == 1)
				{
					treeFrame += 3;
				}
				else if (x % 6 == 2)
				{
					treeFrame += 6;
				}
				else if (x % 6 == 3)
				{
					treeFrame += 9;
				}
				else if (x % 6 == 4)
				{
					treeFrame += 12;
				}
				else if (x % 6 == 5)
				{
					treeFrame += 15;
				}
				switch (treeFrame)
				{
				case 0:
					passStyle = num2;
					break;
				case 1:
					passStyle = num2;
					break;
				case 2:
					passStyle = num2;
					break;
				case 3:
					passStyle = num2 + 1;
					break;
				case 4:
					passStyle = num2 + 2;
					break;
				case 5:
					passStyle = num2 + 1;
					break;
				case 6:
					passStyle = num2 + 3;
					break;
				case 7:
					passStyle = num2 + 4;
					break;
				case 8:
					passStyle = num2 + 5;
					break;
				case 9:
					passStyle = num2 + 6;
					break;
				case 10:
					passStyle = num2 + 6;
					break;
				case 11:
					passStyle = num2 + 6;
					break;
				case 12:
					passStyle = num2 + 7;
					break;
				case 13:
					passStyle = num2 + 7;
					break;
				case 14:
					passStyle = num2 + 7;
					break;
				case 15:
					passStyle = num2 + 8;
					break;
				case 16:
					passStyle = num2 + 8;
					break;
				case 17:
					passStyle = num2 + 8;
					break;
				}
			}
			passStyle += num;
			treeHeight += 5;
		}

		// Token: 0x06000E98 RID: 3736 RVA: 0x004104F8 File Offset: 0x0040E6F8
		public static void TreeGrowFX(int x, int y, int height, int treeGore, bool hitTree = false)
		{
			Vector2 value = new Vector2((float)x, (float)y) * 16f + new Vector2(8f, 8f);
			if (treeGore == 1278)
			{
				WorldGen.TreeGrowFX_AshShake(x, y, height, hitTree);
				return;
			}
			for (int i = 0; i > -height; i--)
			{
				float num = 10f;
				Vector2 value2 = new Vector2(5f, 7f);
				Gore.NewGore(value + new Vector2(-16f, (float)(i * 16)) - value2, Utils.RandomVector2(Main.rand, -num, num), treeGore, 0.7f + Main.rand.NextFloat() * 0.6f);
				Gore.NewGore(value + new Vector2(0f, (float)(i * 16)) - value2, Utils.RandomVector2(Main.rand, -num, num), treeGore, 0.7f + Main.rand.NextFloat() * 0.6f);
				Gore.NewGore(value + new Vector2(16f, (float)(i * 16)) - value2, Utils.RandomVector2(Main.rand, -num, num), treeGore, 0.7f + Main.rand.NextFloat() * 0.6f);
				if (i == -height + 1)
				{
					int num2 = 20;
					if (hitTree)
					{
						num2 = 5;
					}
					for (int j = 0; j < num2; j++)
					{
						Gore.NewGore(value + new Vector2(0f, (float)(i * 16 - 40)) + Utils.RandomVector2(Main.rand, -40f, 40f) - value2, Utils.RandomVector2(Main.rand, -10f, 10f), treeGore, 0.7f + Main.rand.NextFloat() * 0.6f);
					}
				}
			}
		}

		// Token: 0x06000E99 RID: 3737 RVA: 0x004106D0 File Offset: 0x0040E8D0
		private static void TreeGrowFX_AshShake(int x, int y, int height, bool hitTree = false)
		{
			Vector2 value = new Vector2((float)x, (float)y) * 16f + new Vector2(8f, 8f);
			for (int i = 0; i > -height; i--)
			{
				if (i >= -height / 2 && Main.rand.Next(3) != 0)
				{
					int num = hitTree ? 10 : 5;
					for (int j = 0; j < num; j++)
					{
						Dust.NewDustDirect(value + new Vector2(-16f, (float)(i * 16)) + Utils.RandomVector2(Main.rand, -30f, 30f), 4, 4, 31, 0f, -3f, 100, default(Color), 1f).velocity = Main.rand.NextVector2Circular(2f, 2f) + new Vector2(0f, -0.6f);
					}
				}
				if ((float)i >= (float)(-(float)height) * 0.7f && Main.rand.Next(3) != 0)
				{
					int num2 = hitTree ? 16 : 10;
					for (int k = 0; k < num2; k++)
					{
						Dust dust = Dust.NewDustDirect(value + new Vector2(-16f, (float)(i * 16)) + Utils.RandomVector2(Main.rand, -30f, 30f), 4, 4, 6, 0f, -4f, 0, default(Color), 1f + 0.7f * Main.rand.NextFloat());
						dust.velocity = Main.rand.NextVector2Circular(2f, 2f) + new Vector2(0f, -0.6f);
						if (Main.rand.Next(2) == 0)
						{
							dust.velocity *= 2f;
							dust.noGravity = true;
						}
						dust.velocity += new Vector2(0f, hitTree ? -1f : -2f);
					}
				}
				if (!hitTree)
				{
					Gore.NewGoreDirect(value + new Vector2(-16f, (float)(i * 16 - 40)) + Utils.RandomVector2(Main.rand, -40f, 40f) * new Vector2(0.5f, 1f), Vector2.Zero, 61 + Main.rand.Next(3), 1f).velocity *= 0.5f;
				}
			}
		}

		// Token: 0x06000E9A RID: 3738 RVA: 0x00410974 File Offset: 0x0040EB74
		public static bool IsTileALeafyTreeTop(int i, int j)
		{
			Tile tileSafely = Framing.GetTileSafely(i, j);
			if (tileSafely.active() && TileID.Sets.GetsCheckedForLeaves[(int)tileSafely.type])
			{
				if (tileSafely.type == 323 && tileSafely.frameX >= 88)
				{
					return true;
				}
				if (tileSafely.frameX == 22 && tileSafely.frameY >= 198 && tileSafely.frameY <= 242)
				{
					return true;
				}
			}
			return false;
		}

		// Token: 0x06000E9B RID: 3739 RVA: 0x004109E0 File Offset: 0x0040EBE0
		public static bool IsTileTypeFitForTree(ushort type)
		{
			if (type <= 109)
			{
				if (type <= 23)
				{
					if (type != 2 && type != 23)
					{
						return false;
					}
				}
				else if (type != 60 && type != 70 && type != 109)
				{
					return false;
				}
			}
			else if (type <= 477)
			{
				if (type != 147 && type != 199 && type != 477)
				{
					return false;
				}
			}
			else if (type != 492 && type != 633 && type - 661 > 1)
			{
				return false;
			}
			return true;
		}

		// Token: 0x06000E9C RID: 3740 RVA: 0x00410A54 File Offset: 0x0040EC54
		public static bool GrowTree(int i, int y)
		{
			int num = y;
			while (Main.tile[i, num].type == 20)
			{
				num++;
			}
			if ((Main.tile[i - 1, num - 1].liquid != 0 || Main.tile[i, num - 1].liquid != 0 || Main.tile[i + 1, num - 1].liquid != 0) && !WorldGen.notTheBees)
			{
				return false;
			}
			if (Main.tile[i, num].nactive() && !Main.tile[i, num].halfBrick() && Main.tile[i, num].slope() == 0 && WorldGen.IsTileTypeFitForTree(Main.tile[i, num].type) && ((Main.remixWorld && (double)num > Main.worldSurface) || Main.tile[i, num - 1].wall == 0 || WorldGen.DefaultTreeWallTest((int)Main.tile[i, num - 1].wall)) && ((Main.tile[i - 1, num].active() && WorldGen.IsTileTypeFitForTree(Main.tile[i - 1, num].type)) || (Main.tile[i + 1, num].active() && WorldGen.IsTileTypeFitForTree(Main.tile[i + 1, num].type))))
			{
				TileColorCache cache = Main.tile[i, num].BlockColorAndCoating();
				if (Main.tenthAnniversaryWorld && !WorldGen.gen)
				{
					cache.Color = (byte)WorldGen.genRand.Next(1, 13);
				}
				int num2 = 2;
				int num3 = WorldGen.genRand.Next(5, 17);
				int num4 = num3 + 4;
				if (Main.tile[i, num].type == 60)
				{
					num4 += 5;
				}
				bool flag = false;
				if (Main.tile[i, num].type == 70 && WorldGen.EmptyTileCheck(i - num2, i + num2, num - num4, num - 3, 20) && WorldGen.EmptyTileCheck(i - 1, i + 1, num - 2, num - 1, 20))
				{
					flag = true;
				}
				if (WorldGen.EmptyTileCheck(i - num2, i + num2, num - num4, num - 1, 20))
				{
					flag = true;
				}
				if (flag)
				{
					bool flag2 = Main.remixWorld && (double)num < Main.worldSurface;
					bool flag3 = false;
					bool flag4 = false;
					int num5;
					for (int j = num - num3; j < num; j++)
					{
						Main.tile[i, j].frameNumber((byte)WorldGen.genRand.Next(3));
						Main.tile[i, j].active(true);
						Main.tile[i, j].type = 5;
						Main.tile[i, j].UseBlockColors(cache);
						num5 = WorldGen.genRand.Next(3);
						int num6 = WorldGen.genRand.Next(10);
						if (j == num - 1 || j == num - num3)
						{
							num6 = 0;
						}
						while (((num6 == 5 || num6 == 7) && flag3) || ((num6 == 6 || num6 == 7) && flag4))
						{
							num6 = WorldGen.genRand.Next(10);
						}
						flag3 = false;
						flag4 = false;
						if (num6 == 5 || num6 == 7)
						{
							flag3 = true;
						}
						if (num6 == 6 || num6 == 7)
						{
							flag4 = true;
						}
						if (num6 == 1)
						{
							if (num5 == 0)
							{
								Main.tile[i, j].frameX = 0;
								Main.tile[i, j].frameY = 66;
							}
							if (num5 == 1)
							{
								Main.tile[i, j].frameX = 0;
								Main.tile[i, j].frameY = 88;
							}
							if (num5 == 2)
							{
								Main.tile[i, j].frameX = 0;
								Main.tile[i, j].frameY = 110;
							}
						}
						else if (num6 == 2)
						{
							if (num5 == 0)
							{
								Main.tile[i, j].frameX = 22;
								Main.tile[i, j].frameY = 0;
							}
							if (num5 == 1)
							{
								Main.tile[i, j].frameX = 22;
								Main.tile[i, j].frameY = 22;
							}
							if (num5 == 2)
							{
								Main.tile[i, j].frameX = 22;
								Main.tile[i, j].frameY = 44;
							}
						}
						else if (num6 == 3)
						{
							if (num5 == 0)
							{
								Main.tile[i, j].frameX = 44;
								Main.tile[i, j].frameY = 66;
							}
							if (num5 == 1)
							{
								Main.tile[i, j].frameX = 44;
								Main.tile[i, j].frameY = 88;
							}
							if (num5 == 2)
							{
								Main.tile[i, j].frameX = 44;
								Main.tile[i, j].frameY = 110;
							}
						}
						else if (num6 == 4)
						{
							if (num5 == 0)
							{
								Main.tile[i, j].frameX = 22;
								Main.tile[i, j].frameY = 66;
							}
							if (num5 == 1)
							{
								Main.tile[i, j].frameX = 22;
								Main.tile[i, j].frameY = 88;
							}
							if (num5 == 2)
							{
								Main.tile[i, j].frameX = 22;
								Main.tile[i, j].frameY = 110;
							}
						}
						else if (num6 == 5)
						{
							if (num5 == 0)
							{
								Main.tile[i, j].frameX = 88;
								Main.tile[i, j].frameY = 0;
							}
							if (num5 == 1)
							{
								Main.tile[i, j].frameX = 88;
								Main.tile[i, j].frameY = 22;
							}
							if (num5 == 2)
							{
								Main.tile[i, j].frameX = 88;
								Main.tile[i, j].frameY = 44;
							}
						}
						else if (num6 == 6)
						{
							if (num5 == 0)
							{
								Main.tile[i, j].frameX = 66;
								Main.tile[i, j].frameY = 66;
							}
							if (num5 == 1)
							{
								Main.tile[i, j].frameX = 66;
								Main.tile[i, j].frameY = 88;
							}
							if (num5 == 2)
							{
								Main.tile[i, j].frameX = 66;
								Main.tile[i, j].frameY = 110;
							}
						}
						else if (num6 == 7)
						{
							if (num5 == 0)
							{
								Main.tile[i, j].frameX = 110;
								Main.tile[i, j].frameY = 66;
							}
							if (num5 == 1)
							{
								Main.tile[i, j].frameX = 110;
								Main.tile[i, j].frameY = 88;
							}
							if (num5 == 2)
							{
								Main.tile[i, j].frameX = 110;
								Main.tile[i, j].frameY = 110;
							}
						}
						else
						{
							if (num5 == 0)
							{
								Main.tile[i, j].frameX = 0;
								Main.tile[i, j].frameY = 0;
							}
							if (num5 == 1)
							{
								Main.tile[i, j].frameX = 0;
								Main.tile[i, j].frameY = 22;
							}
							if (num5 == 2)
							{
								Main.tile[i, j].frameX = 0;
								Main.tile[i, j].frameY = 44;
							}
						}
						if (num6 == 5 || num6 == 7)
						{
							Main.tile[i - 1, j].active(true);
							Main.tile[i - 1, j].type = 5;
							Main.tile[i - 1, j].UseBlockColors(cache);
							num5 = WorldGen.genRand.Next(3);
							if (WorldGen.genRand.Next(3) < 2 && !flag2)
							{
								if (num5 == 0)
								{
									Main.tile[i - 1, j].frameX = 44;
									Main.tile[i - 1, j].frameY = 198;
								}
								if (num5 == 1)
								{
									Main.tile[i - 1, j].frameX = 44;
									Main.tile[i - 1, j].frameY = 220;
								}
								if (num5 == 2)
								{
									Main.tile[i - 1, j].frameX = 44;
									Main.tile[i - 1, j].frameY = 242;
								}
							}
							else
							{
								if (num5 == 0)
								{
									Main.tile[i - 1, j].frameX = 66;
									Main.tile[i - 1, j].frameY = 0;
								}
								if (num5 == 1)
								{
									Main.tile[i - 1, j].frameX = 66;
									Main.tile[i - 1, j].frameY = 22;
								}
								if (num5 == 2)
								{
									Main.tile[i - 1, j].frameX = 66;
									Main.tile[i - 1, j].frameY = 44;
								}
							}
						}
						if (num6 == 6 || num6 == 7)
						{
							Main.tile[i + 1, j].active(true);
							Main.tile[i + 1, j].type = 5;
							Main.tile[i + 1, j].UseBlockColors(cache);
							num5 = WorldGen.genRand.Next(3);
							if (WorldGen.genRand.Next(3) < 2 && !flag2)
							{
								if (num5 == 0)
								{
									Main.tile[i + 1, j].frameX = 66;
									Main.tile[i + 1, j].frameY = 198;
								}
								if (num5 == 1)
								{
									Main.tile[i + 1, j].frameX = 66;
									Main.tile[i + 1, j].frameY = 220;
								}
								if (num5 == 2)
								{
									Main.tile[i + 1, j].frameX = 66;
									Main.tile[i + 1, j].frameY = 242;
								}
							}
							else
							{
								if (num5 == 0)
								{
									Main.tile[i + 1, j].frameX = 88;
									Main.tile[i + 1, j].frameY = 66;
								}
								if (num5 == 1)
								{
									Main.tile[i + 1, j].frameX = 88;
									Main.tile[i + 1, j].frameY = 88;
								}
								if (num5 == 2)
								{
									Main.tile[i + 1, j].frameX = 88;
									Main.tile[i + 1, j].frameY = 110;
								}
							}
						}
					}
					int num7 = WorldGen.genRand.Next(3);
					bool flag5 = false;
					bool flag6 = false;
					if (Main.tile[i - 1, num].nactive() && !Main.tile[i - 1, num].halfBrick() && Main.tile[i - 1, num].slope() == 0 && WorldGen.IsTileTypeFitForTree(Main.tile[i - 1, num].type))
					{
						flag5 = true;
					}
					if (Main.tile[i + 1, num].nactive() && !Main.tile[i + 1, num].halfBrick() && Main.tile[i + 1, num].slope() == 0 && WorldGen.IsTileTypeFitForTree(Main.tile[i + 1, num].type))
					{
						flag6 = true;
					}
					if (!flag5)
					{
						if (num7 == 0)
						{
							num7 = 2;
						}
						if (num7 == 1)
						{
							num7 = 3;
						}
					}
					if (!flag6)
					{
						if (num7 == 0)
						{
							num7 = 1;
						}
						if (num7 == 2)
						{
							num7 = 3;
						}
					}
					if (flag5 && !flag6)
					{
						num7 = 2;
					}
					if (flag6 && !flag5)
					{
						num7 = 1;
					}
					if (num7 == 0 || num7 == 1)
					{
						Main.tile[i + 1, num - 1].active(true);
						Main.tile[i + 1, num - 1].type = 5;
						Main.tile[i + 1, num - 1].UseBlockColors(cache);
						num5 = WorldGen.genRand.Next(3);
						if (num5 == 0)
						{
							Main.tile[i + 1, num - 1].frameX = 22;
							Main.tile[i + 1, num - 1].frameY = 132;
						}
						if (num5 == 1)
						{
							Main.tile[i + 1, num - 1].frameX = 22;
							Main.tile[i + 1, num - 1].frameY = 154;
						}
						if (num5 == 2)
						{
							Main.tile[i + 1, num - 1].frameX = 22;
							Main.tile[i + 1, num - 1].frameY = 176;
						}
					}
					if (num7 == 0 || num7 == 2)
					{
						Main.tile[i - 1, num - 1].active(true);
						Main.tile[i - 1, num - 1].type = 5;
						Main.tile[i - 1, num - 1].UseBlockColors(cache);
						num5 = WorldGen.genRand.Next(3);
						if (num5 == 0)
						{
							Main.tile[i - 1, num - 1].frameX = 44;
							Main.tile[i - 1, num - 1].frameY = 132;
						}
						if (num5 == 1)
						{
							Main.tile[i - 1, num - 1].frameX = 44;
							Main.tile[i - 1, num - 1].frameY = 154;
						}
						if (num5 == 2)
						{
							Main.tile[i - 1, num - 1].frameX = 44;
							Main.tile[i - 1, num - 1].frameY = 176;
						}
					}
					num5 = WorldGen.genRand.Next(3);
					if (num7 == 0)
					{
						if (num5 == 0)
						{
							Main.tile[i, num - 1].frameX = 88;
							Main.tile[i, num - 1].frameY = 132;
						}
						if (num5 == 1)
						{
							Main.tile[i, num - 1].frameX = 88;
							Main.tile[i, num - 1].frameY = 154;
						}
						if (num5 == 2)
						{
							Main.tile[i, num - 1].frameX = 88;
							Main.tile[i, num - 1].frameY = 176;
						}
					}
					else if (num7 == 1)
					{
						if (num5 == 0)
						{
							Main.tile[i, num - 1].frameX = 0;
							Main.tile[i, num - 1].frameY = 132;
						}
						if (num5 == 1)
						{
							Main.tile[i, num - 1].frameX = 0;
							Main.tile[i, num - 1].frameY = 154;
						}
						if (num5 == 2)
						{
							Main.tile[i, num - 1].frameX = 0;
							Main.tile[i, num - 1].frameY = 176;
						}
					}
					else if (num7 == 2)
					{
						if (num5 == 0)
						{
							Main.tile[i, num - 1].frameX = 66;
							Main.tile[i, num - 1].frameY = 132;
						}
						if (num5 == 1)
						{
							Main.tile[i, num - 1].frameX = 66;
							Main.tile[i, num - 1].frameY = 154;
						}
						if (num5 == 2)
						{
							Main.tile[i, num - 1].frameX = 66;
							Main.tile[i, num - 1].frameY = 176;
						}
					}
					if (WorldGen.genRand.Next(13) != 0 && !flag2)
					{
						num5 = WorldGen.genRand.Next(3);
						if (num5 == 0)
						{
							Main.tile[i, num - num3].frameX = 22;
							Main.tile[i, num - num3].frameY = 198;
						}
						if (num5 == 1)
						{
							Main.tile[i, num - num3].frameX = 22;
							Main.tile[i, num - num3].frameY = 220;
						}
						if (num5 == 2)
						{
							Main.tile[i, num - num3].frameX = 22;
							Main.tile[i, num - num3].frameY = 242;
						}
					}
					else
					{
						num5 = WorldGen.genRand.Next(3);
						if (num5 == 0)
						{
							Main.tile[i, num - num3].frameX = 0;
							Main.tile[i, num - num3].frameY = 198;
						}
						if (num5 == 1)
						{
							Main.tile[i, num - num3].frameX = 0;
							Main.tile[i, num - num3].frameY = 220;
						}
						if (num5 == 2)
						{
							Main.tile[i, num - num3].frameX = 0;
							Main.tile[i, num - num3].frameY = 242;
						}
					}
					WorldGen.RangeFrame(i - 2, num - num3 - 1, i + 2, num + 1);
					if (Main.netMode == 2)
					{
						NetMessage.SendTileSquare(-1, i - 1, num - num3, 3, num3, TileChangeType.None);
					}
					return true;
				}
			}
			return false;
		}

		// Token: 0x06000E9D RID: 3741 RVA: 0x00411C03 File Offset: 0x0040FE03
		public static bool DefaultTreeWallTest(int wallType)
		{
			return wallType >= 0 && wallType < (int)WallID.Count && WallID.Sets.AllowsPlantsToGrow[wallType];
		}

		// Token: 0x06000E9E RID: 3742 RVA: 0x00411C20 File Offset: 0x0040FE20
		public static bool GemTreeWallTest(int wallType)
		{
			if (WorldGen.DefaultTreeWallTest(wallType))
			{
				return true;
			}
			if (wallType <= 61)
			{
				if (wallType != 2 && wallType - 54 > 5 && wallType != 61)
				{
					return false;
				}
			}
			else if (wallType != 185 && wallType - 196 > 3 && wallType - 208 > 7)
			{
				return false;
			}
			return true;
		}

		// Token: 0x06000E9F RID: 3743 RVA: 0x00411C6D File Offset: 0x0040FE6D
		public static bool GemTreeGroundTest(int tileType)
		{
			return tileType >= 0 && (TileID.Sets.Conversion.Stone[tileType] || TileID.Sets.Conversion.Moss[tileType]);
		}

		// Token: 0x06000EA0 RID: 3744 RVA: 0x00411C8A File Offset: 0x0040FE8A
		public static bool VanityTreeGroundTest(int tileType)
		{
			return tileType >= 0 && TileID.Sets.Conversion.Grass[tileType];
		}

		// Token: 0x06000EA1 RID: 3745 RVA: 0x00411C9E File Offset: 0x0040FE9E
		public static bool AshTreeGroundTest(int tileType)
		{
			return tileType >= 0 && tileType == 633;
		}

		// Token: 0x06000EA2 RID: 3746 RVA: 0x00411CB4 File Offset: 0x0040FEB4
		public static bool TryGrowingTreeByType(int treeTileType, int checkedX, int checkedY)
		{
			bool result = false;
			if (treeTileType <= 596)
			{
				if (treeTileType != 5)
				{
					switch (treeTileType)
					{
					case 583:
						result = WorldGen.GrowTreeWithSettings(checkedX, checkedY, WorldGen.GrowTreeSettings.Profiles.GemTree_Topaz);
						break;
					case 584:
						result = WorldGen.GrowTreeWithSettings(checkedX, checkedY, WorldGen.GrowTreeSettings.Profiles.GemTree_Amethyst);
						break;
					case 585:
						result = WorldGen.GrowTreeWithSettings(checkedX, checkedY, WorldGen.GrowTreeSettings.Profiles.GemTree_Sappphire);
						break;
					case 586:
						result = WorldGen.GrowTreeWithSettings(checkedX, checkedY, WorldGen.GrowTreeSettings.Profiles.GemTree_Emerald);
						break;
					case 587:
						result = WorldGen.GrowTreeWithSettings(checkedX, checkedY, WorldGen.GrowTreeSettings.Profiles.GemTree_Ruby);
						break;
					case 588:
						result = WorldGen.GrowTreeWithSettings(checkedX, checkedY, WorldGen.GrowTreeSettings.Profiles.GemTree_Diamond);
						break;
					case 589:
						result = WorldGen.GrowTreeWithSettings(checkedX, checkedY, WorldGen.GrowTreeSettings.Profiles.GemTree_Amber);
						break;
					case 596:
						result = WorldGen.GrowTreeWithSettings(checkedX, checkedY, WorldGen.GrowTreeSettings.Profiles.VanityTree_Sakura);
						break;
					}
				}
				else
				{
					result = WorldGen.GrowTree(checkedX, checkedY);
				}
			}
			else if (treeTileType != 616)
			{
				if (treeTileType == 634)
				{
					result = WorldGen.GrowTreeWithSettings(checkedX, checkedY, WorldGen.GrowTreeSettings.Profiles.Tree_Ash);
				}
			}
			else
			{
				result = WorldGen.GrowTreeWithSettings(checkedX, checkedY, WorldGen.GrowTreeSettings.Profiles.VanityTree_Willow);
			}
			return result;
		}

		// Token: 0x06000EA3 RID: 3747 RVA: 0x00411DD8 File Offset: 0x0040FFD8
		public static bool GrowTreeWithSettings(int checkedX, int checkedY, WorldGen.GrowTreeSettings settings)
		{
			int num = checkedY;
			while (Main.tile[checkedX, num].type == settings.SaplingTileType)
			{
				num++;
			}
			if (Main.tile[checkedX - 1, num - 1].liquid != 0 || Main.tile[checkedX, num - 1].liquid != 0 || Main.tile[checkedX + 1, num - 1].liquid != 0)
			{
				return false;
			}
			Tile tile = Main.tile[checkedX, num];
			if (!tile.nactive() || tile.halfBrick() || tile.slope() != 0)
			{
				return false;
			}
			bool flag = settings.WallTest((int)Main.tile[checkedX, num - 1].wall);
			if (!settings.GroundTest((int)tile.type) || !flag)
			{
				return false;
			}
			if ((!Main.tile[checkedX - 1, num].active() || !settings.GroundTest((int)Main.tile[checkedX - 1, num].type)) && (!Main.tile[checkedX + 1, num].active() || !settings.GroundTest((int)Main.tile[checkedX + 1, num].type)))
			{
				return false;
			}
			TileColorCache cache = Main.tile[checkedX, num].BlockColorAndCoating();
			if (Main.tenthAnniversaryWorld && !WorldGen.gen && (settings.TreeTileType == 596 || settings.TreeTileType == 616))
			{
				cache.Color = (byte)WorldGen.genRand.Next(1, 13);
			}
			int num2 = 2;
			int num3 = WorldGen.genRand.Next(settings.TreeHeightMin, settings.TreeHeightMax + 1);
			int num4 = num3 + settings.TreeTopPaddingNeeded;
			if (!WorldGen.EmptyTileCheck(checkedX - num2, checkedX + num2, num - num4, num - 1, 20))
			{
				return false;
			}
			bool flag2 = false;
			bool flag3 = false;
			int num5;
			for (int i = num - num3; i < num; i++)
			{
				Tile tile2 = Main.tile[checkedX, i];
				tile2.frameNumber((byte)WorldGen.genRand.Next(3));
				tile2.active(true);
				tile2.type = settings.TreeTileType;
				tile2.UseBlockColors(cache);
				num5 = WorldGen.genRand.Next(3);
				int num6 = WorldGen.genRand.Next(10);
				if (i == num - 1 || i == num - num3)
				{
					num6 = 0;
				}
				while (((num6 == 5 || num6 == 7) && flag2) || ((num6 == 6 || num6 == 7) && flag3))
				{
					num6 = WorldGen.genRand.Next(10);
				}
				flag2 = false;
				flag3 = false;
				if (num6 == 5 || num6 == 7)
				{
					flag2 = true;
				}
				if (num6 == 6 || num6 == 7)
				{
					flag3 = true;
				}
				if (num6 == 1)
				{
					if (num5 == 0)
					{
						tile2.frameX = 0;
						tile2.frameY = 66;
					}
					if (num5 == 1)
					{
						tile2.frameX = 0;
						tile2.frameY = 88;
					}
					if (num5 == 2)
					{
						tile2.frameX = 0;
						tile2.frameY = 110;
					}
				}
				else if (num6 == 2)
				{
					if (num5 == 0)
					{
						tile2.frameX = 22;
						tile2.frameY = 0;
					}
					if (num5 == 1)
					{
						tile2.frameX = 22;
						tile2.frameY = 22;
					}
					if (num5 == 2)
					{
						tile2.frameX = 22;
						tile2.frameY = 44;
					}
				}
				else if (num6 == 3)
				{
					if (num5 == 0)
					{
						tile2.frameX = 44;
						tile2.frameY = 66;
					}
					if (num5 == 1)
					{
						tile2.frameX = 44;
						tile2.frameY = 88;
					}
					if (num5 == 2)
					{
						tile2.frameX = 44;
						tile2.frameY = 110;
					}
				}
				else if (num6 == 4)
				{
					if (num5 == 0)
					{
						tile2.frameX = 22;
						tile2.frameY = 66;
					}
					if (num5 == 1)
					{
						tile2.frameX = 22;
						tile2.frameY = 88;
					}
					if (num5 == 2)
					{
						tile2.frameX = 22;
						tile2.frameY = 110;
					}
				}
				else if (num6 == 5)
				{
					if (num5 == 0)
					{
						tile2.frameX = 88;
						tile2.frameY = 0;
					}
					if (num5 == 1)
					{
						tile2.frameX = 88;
						tile2.frameY = 22;
					}
					if (num5 == 2)
					{
						tile2.frameX = 88;
						tile2.frameY = 44;
					}
				}
				else if (num6 == 6)
				{
					if (num5 == 0)
					{
						tile2.frameX = 66;
						tile2.frameY = 66;
					}
					if (num5 == 1)
					{
						tile2.frameX = 66;
						tile2.frameY = 88;
					}
					if (num5 == 2)
					{
						tile2.frameX = 66;
						tile2.frameY = 110;
					}
				}
				else if (num6 == 7)
				{
					if (num5 == 0)
					{
						tile2.frameX = 110;
						tile2.frameY = 66;
					}
					if (num5 == 1)
					{
						tile2.frameX = 110;
						tile2.frameY = 88;
					}
					if (num5 == 2)
					{
						tile2.frameX = 110;
						tile2.frameY = 110;
					}
				}
				else
				{
					if (num5 == 0)
					{
						tile2.frameX = 0;
						tile2.frameY = 0;
					}
					if (num5 == 1)
					{
						tile2.frameX = 0;
						tile2.frameY = 22;
					}
					if (num5 == 2)
					{
						tile2.frameX = 0;
						tile2.frameY = 44;
					}
				}
				if (num6 == 5 || num6 == 7)
				{
					Tile tile3 = Main.tile[checkedX - 1, i];
					tile3.active(true);
					tile3.type = settings.TreeTileType;
					tile3.UseBlockColors(cache);
					num5 = WorldGen.genRand.Next(3);
					if (WorldGen.genRand.Next(3) < 2)
					{
						if (num5 == 0)
						{
							tile3.frameX = 44;
							tile3.frameY = 198;
						}
						if (num5 == 1)
						{
							tile3.frameX = 44;
							tile3.frameY = 220;
						}
						if (num5 == 2)
						{
							tile3.frameX = 44;
							tile3.frameY = 242;
						}
					}
					else
					{
						if (num5 == 0)
						{
							tile3.frameX = 66;
							tile3.frameY = 0;
						}
						if (num5 == 1)
						{
							tile3.frameX = 66;
							tile3.frameY = 22;
						}
						if (num5 == 2)
						{
							tile3.frameX = 66;
							tile3.frameY = 44;
						}
					}
				}
				if (num6 == 6 || num6 == 7)
				{
					Tile tile4 = Main.tile[checkedX + 1, i];
					tile4.active(true);
					tile4.type = settings.TreeTileType;
					tile4.UseBlockColors(cache);
					num5 = WorldGen.genRand.Next(3);
					if (WorldGen.genRand.Next(3) < 2)
					{
						if (num5 == 0)
						{
							tile4.frameX = 66;
							tile4.frameY = 198;
						}
						if (num5 == 1)
						{
							tile4.frameX = 66;
							tile4.frameY = 220;
						}
						if (num5 == 2)
						{
							tile4.frameX = 66;
							tile4.frameY = 242;
						}
					}
					else
					{
						if (num5 == 0)
						{
							tile4.frameX = 88;
							tile4.frameY = 66;
						}
						if (num5 == 1)
						{
							tile4.frameX = 88;
							tile4.frameY = 88;
						}
						if (num5 == 2)
						{
							tile4.frameX = 88;
							tile4.frameY = 110;
						}
					}
				}
			}
			bool flag4 = false;
			bool flag5 = false;
			if (Main.tile[checkedX - 1, num].nactive() && !Main.tile[checkedX - 1, num].halfBrick() && Main.tile[checkedX - 1, num].slope() == 0 && WorldGen.IsTileTypeFitForTree(Main.tile[checkedX - 1, num].type))
			{
				flag4 = true;
			}
			if (Main.tile[checkedX + 1, num].nactive() && !Main.tile[checkedX + 1, num].halfBrick() && Main.tile[checkedX + 1, num].slope() == 0 && WorldGen.IsTileTypeFitForTree(Main.tile[checkedX + 1, num].type))
			{
				flag5 = true;
			}
			if (WorldGen.genRand.Next(3) == 0)
			{
				flag4 = false;
			}
			if (WorldGen.genRand.Next(3) == 0)
			{
				flag5 = false;
			}
			if (flag5)
			{
				Main.tile[checkedX + 1, num - 1].active(true);
				Main.tile[checkedX + 1, num - 1].type = settings.TreeTileType;
				Main.tile[checkedX + 1, num - 1].UseBlockColors(cache);
				num5 = WorldGen.genRand.Next(3);
				if (num5 == 0)
				{
					Main.tile[checkedX + 1, num - 1].frameX = 22;
					Main.tile[checkedX + 1, num - 1].frameY = 132;
				}
				if (num5 == 1)
				{
					Main.tile[checkedX + 1, num - 1].frameX = 22;
					Main.tile[checkedX + 1, num - 1].frameY = 154;
				}
				if (num5 == 2)
				{
					Main.tile[checkedX + 1, num - 1].frameX = 22;
					Main.tile[checkedX + 1, num - 1].frameY = 176;
				}
			}
			if (flag4)
			{
				Main.tile[checkedX - 1, num - 1].active(true);
				Main.tile[checkedX - 1, num - 1].type = settings.TreeTileType;
				Main.tile[checkedX - 1, num - 1].UseBlockColors(cache);
				num5 = WorldGen.genRand.Next(3);
				if (num5 == 0)
				{
					Main.tile[checkedX - 1, num - 1].frameX = 44;
					Main.tile[checkedX - 1, num - 1].frameY = 132;
				}
				if (num5 == 1)
				{
					Main.tile[checkedX - 1, num - 1].frameX = 44;
					Main.tile[checkedX - 1, num - 1].frameY = 154;
				}
				if (num5 == 2)
				{
					Main.tile[checkedX - 1, num - 1].frameX = 44;
					Main.tile[checkedX - 1, num - 1].frameY = 176;
				}
			}
			num5 = WorldGen.genRand.Next(3);
			if (flag4 && flag5)
			{
				if (num5 == 0)
				{
					Main.tile[checkedX, num - 1].frameX = 88;
					Main.tile[checkedX, num - 1].frameY = 132;
				}
				if (num5 == 1)
				{
					Main.tile[checkedX, num - 1].frameX = 88;
					Main.tile[checkedX, num - 1].frameY = 154;
				}
				if (num5 == 2)
				{
					Main.tile[checkedX, num - 1].frameX = 88;
					Main.tile[checkedX, num - 1].frameY = 176;
				}
			}
			else if (flag4)
			{
				if (num5 == 0)
				{
					Main.tile[checkedX, num - 1].frameX = 0;
					Main.tile[checkedX, num - 1].frameY = 132;
				}
				if (num5 == 1)
				{
					Main.tile[checkedX, num - 1].frameX = 0;
					Main.tile[checkedX, num - 1].frameY = 154;
				}
				if (num5 == 2)
				{
					Main.tile[checkedX, num - 1].frameX = 0;
					Main.tile[checkedX, num - 1].frameY = 176;
				}
			}
			else if (flag5)
			{
				if (num5 == 0)
				{
					Main.tile[checkedX, num - 1].frameX = 66;
					Main.tile[checkedX, num - 1].frameY = 132;
				}
				if (num5 == 1)
				{
					Main.tile[checkedX, num - 1].frameX = 66;
					Main.tile[checkedX, num - 1].frameY = 154;
				}
				if (num5 == 2)
				{
					Main.tile[checkedX, num - 1].frameX = 66;
					Main.tile[checkedX, num - 1].frameY = 176;
				}
			}
			if (WorldGen.genRand.Next(13) != 0)
			{
				num5 = WorldGen.genRand.Next(3);
				if (num5 == 0)
				{
					Main.tile[checkedX, num - num3].frameX = 22;
					Main.tile[checkedX, num - num3].frameY = 198;
				}
				if (num5 == 1)
				{
					Main.tile[checkedX, num - num3].frameX = 22;
					Main.tile[checkedX, num - num3].frameY = 220;
				}
				if (num5 == 2)
				{
					Main.tile[checkedX, num - num3].frameX = 22;
					Main.tile[checkedX, num - num3].frameY = 242;
				}
			}
			else
			{
				num5 = WorldGen.genRand.Next(3);
				if (num5 == 0)
				{
					Main.tile[checkedX, num - num3].frameX = 0;
					Main.tile[checkedX, num - num3].frameY = 198;
				}
				if (num5 == 1)
				{
					Main.tile[checkedX, num - num3].frameX = 0;
					Main.tile[checkedX, num - num3].frameY = 220;
				}
				if (num5 == 2)
				{
					Main.tile[checkedX, num - num3].frameX = 0;
					Main.tile[checkedX, num - num3].frameY = 242;
				}
			}
			WorldGen.RangeFrame(checkedX - 2, num - num3 - 1, checkedX + 2, num + 1);
			if (Main.netMode == 2)
			{
				NetMessage.SendTileSquare(-1, checkedX - 1, num - num3, 3, num3, TileChangeType.None);
			}
			return true;
		}

		// Token: 0x06000EA4 RID: 3748 RVA: 0x00412B2C File Offset: 0x00410D2C
		public static void GrowUndergroundTree(int i, int y)
		{
			if (Main.tile[i, y].type != 60)
			{
				return;
			}
			if (Main.tile[i, y].nactive() && !Main.tile[i, y].halfBrick() && Main.tile[i, y].slope() == 0 && Main.tile[i, y].type == 60 && ((Main.tile[i - 1, y].active() && Main.tile[i - 1, y].type == 60) || (Main.tile[i + 1, y].active() && Main.tile[i + 1, y].type == 60)))
			{
				int num = 1;
				int num2 = WorldGen.genRand.Next(5, 15);
				int num3 = num2 + 2;
				if (Main.tile[i, y].type == 60)
				{
					num3 += 5;
				}
				if (WorldGen.EmptyTileCheck(i - num, i + num, y - num3, y - 1, 20))
				{
					bool flag = false;
					bool flag2 = false;
					int num4;
					for (int j = y - num2; j < y; j++)
					{
						Main.tile[i, j].frameNumber((byte)WorldGen.genRand.Next(3));
						Main.tile[i, j].active(true);
						Main.tile[i, j].type = 5;
						num4 = WorldGen.genRand.Next(3);
						int num5 = WorldGen.genRand.Next(10);
						if (j == y - 1 || j == y - num2)
						{
							num5 = 0;
						}
						while (((num5 == 5 || num5 == 7) && flag) || ((num5 == 6 || num5 == 7) && flag2))
						{
							num5 = WorldGen.genRand.Next(10);
						}
						flag = false;
						flag2 = false;
						if (num5 == 5 || num5 == 7)
						{
							flag = true;
						}
						if (num5 == 6 || num5 == 7)
						{
							flag2 = true;
						}
						if (num5 == 1)
						{
							if (num4 == 0)
							{
								Main.tile[i, j].frameX = 0;
								Main.tile[i, j].frameY = 66;
							}
							if (num4 == 1)
							{
								Main.tile[i, j].frameX = 0;
								Main.tile[i, j].frameY = 88;
							}
							if (num4 == 2)
							{
								Main.tile[i, j].frameX = 0;
								Main.tile[i, j].frameY = 110;
							}
						}
						else if (num5 == 2)
						{
							if (num4 == 0)
							{
								Main.tile[i, j].frameX = 22;
								Main.tile[i, j].frameY = 0;
							}
							if (num4 == 1)
							{
								Main.tile[i, j].frameX = 22;
								Main.tile[i, j].frameY = 22;
							}
							if (num4 == 2)
							{
								Main.tile[i, j].frameX = 22;
								Main.tile[i, j].frameY = 44;
							}
						}
						else if (num5 == 3)
						{
							if (num4 == 0)
							{
								Main.tile[i, j].frameX = 44;
								Main.tile[i, j].frameY = 66;
							}
							if (num4 == 1)
							{
								Main.tile[i, j].frameX = 44;
								Main.tile[i, j].frameY = 88;
							}
							if (num4 == 2)
							{
								Main.tile[i, j].frameX = 44;
								Main.tile[i, j].frameY = 110;
							}
						}
						else if (num5 == 4)
						{
							if (num4 == 0)
							{
								Main.tile[i, j].frameX = 22;
								Main.tile[i, j].frameY = 66;
							}
							if (num4 == 1)
							{
								Main.tile[i, j].frameX = 22;
								Main.tile[i, j].frameY = 88;
							}
							if (num4 == 2)
							{
								Main.tile[i, j].frameX = 22;
								Main.tile[i, j].frameY = 110;
							}
						}
						else if (num5 == 5)
						{
							if (num4 == 0)
							{
								Main.tile[i, j].frameX = 88;
								Main.tile[i, j].frameY = 0;
							}
							if (num4 == 1)
							{
								Main.tile[i, j].frameX = 88;
								Main.tile[i, j].frameY = 22;
							}
							if (num4 == 2)
							{
								Main.tile[i, j].frameX = 88;
								Main.tile[i, j].frameY = 44;
							}
						}
						else if (num5 == 6)
						{
							if (num4 == 0)
							{
								Main.tile[i, j].frameX = 66;
								Main.tile[i, j].frameY = 66;
							}
							if (num4 == 1)
							{
								Main.tile[i, j].frameX = 66;
								Main.tile[i, j].frameY = 88;
							}
							if (num4 == 2)
							{
								Main.tile[i, j].frameX = 66;
								Main.tile[i, j].frameY = 110;
							}
						}
						else if (num5 == 7)
						{
							if (num4 == 0)
							{
								Main.tile[i, j].frameX = 110;
								Main.tile[i, j].frameY = 66;
							}
							if (num4 == 1)
							{
								Main.tile[i, j].frameX = 110;
								Main.tile[i, j].frameY = 88;
							}
							if (num4 == 2)
							{
								Main.tile[i, j].frameX = 110;
								Main.tile[i, j].frameY = 110;
							}
						}
						else
						{
							if (num4 == 0)
							{
								Main.tile[i, j].frameX = 0;
								Main.tile[i, j].frameY = 0;
							}
							if (num4 == 1)
							{
								Main.tile[i, j].frameX = 0;
								Main.tile[i, j].frameY = 22;
							}
							if (num4 == 2)
							{
								Main.tile[i, j].frameX = 0;
								Main.tile[i, j].frameY = 44;
							}
						}
						if (num5 == 5 || num5 == 7)
						{
							Main.tile[i - 1, j].active(true);
							Main.tile[i - 1, j].type = 5;
							num4 = WorldGen.genRand.Next(3);
							if (WorldGen.genRand.Next(3) < 2)
							{
								if (num4 == 0)
								{
									Main.tile[i - 1, j].frameX = 44;
									Main.tile[i - 1, j].frameY = 198;
								}
								if (num4 == 1)
								{
									Main.tile[i - 1, j].frameX = 44;
									Main.tile[i - 1, j].frameY = 220;
								}
								if (num4 == 2)
								{
									Main.tile[i - 1, j].frameX = 44;
									Main.tile[i - 1, j].frameY = 242;
								}
							}
							else
							{
								if (num4 == 0)
								{
									Main.tile[i - 1, j].frameX = 66;
									Main.tile[i - 1, j].frameY = 0;
								}
								if (num4 == 1)
								{
									Main.tile[i - 1, j].frameX = 66;
									Main.tile[i - 1, j].frameY = 22;
								}
								if (num4 == 2)
								{
									Main.tile[i - 1, j].frameX = 66;
									Main.tile[i - 1, j].frameY = 44;
								}
							}
						}
						if (num5 == 6 || num5 == 7)
						{
							Main.tile[i + 1, j].active(true);
							Main.tile[i + 1, j].type = 5;
							num4 = WorldGen.genRand.Next(3);
							if (WorldGen.genRand.Next(3) < 2)
							{
								if (num4 == 0)
								{
									Main.tile[i + 1, j].frameX = 66;
									Main.tile[i + 1, j].frameY = 198;
								}
								if (num4 == 1)
								{
									Main.tile[i + 1, j].frameX = 66;
									Main.tile[i + 1, j].frameY = 220;
								}
								if (num4 == 2)
								{
									Main.tile[i + 1, j].frameX = 66;
									Main.tile[i + 1, j].frameY = 242;
								}
							}
							else
							{
								if (num4 == 0)
								{
									Main.tile[i + 1, j].frameX = 88;
									Main.tile[i + 1, j].frameY = 66;
								}
								if (num4 == 1)
								{
									Main.tile[i + 1, j].frameX = 88;
									Main.tile[i + 1, j].frameY = 88;
								}
								if (num4 == 2)
								{
									Main.tile[i + 1, j].frameX = 88;
									Main.tile[i + 1, j].frameY = 110;
								}
							}
						}
					}
					int num6 = WorldGen.genRand.Next(3);
					bool flag3 = false;
					bool flag4 = false;
					if (Main.tile[i - 1, y].nactive() && !Main.tile[i - 1, y].halfBrick() && Main.tile[i - 1, y].slope() == 0 && (Main.tile[i - 1, y].type == 2 || Main.tile[i - 1, y].type == 23 || Main.tile[i - 1, y].type == 60 || Main.tile[i - 1, y].type == 109 || Main.tile[i - 1, y].type == 147))
					{
						flag3 = true;
					}
					if (Main.tile[i + 1, y].nactive() && !Main.tile[i + 1, y].halfBrick() && Main.tile[i + 1, y].slope() == 0 && (Main.tile[i + 1, y].type == 2 || Main.tile[i + 1, y].type == 23 || Main.tile[i + 1, y].type == 60 || Main.tile[i + 1, y].type == 109 || Main.tile[i + 1, y].type == 147))
					{
						flag4 = true;
					}
					if (!flag3)
					{
						if (num6 == 0)
						{
							num6 = 2;
						}
						if (num6 == 1)
						{
							num6 = 3;
						}
					}
					if (!flag4)
					{
						if (num6 == 0)
						{
							num6 = 1;
						}
						if (num6 == 2)
						{
							num6 = 3;
						}
					}
					if (flag3 && !flag4)
					{
						num6 = 2;
					}
					if (flag4 && !flag3)
					{
						num6 = 1;
					}
					if (num6 == 0 || num6 == 1)
					{
						Main.tile[i + 1, y - 1].active(true);
						Main.tile[i + 1, y - 1].type = 5;
						num4 = WorldGen.genRand.Next(3);
						if (num4 == 0)
						{
							Main.tile[i + 1, y - 1].frameX = 22;
							Main.tile[i + 1, y - 1].frameY = 132;
						}
						if (num4 == 1)
						{
							Main.tile[i + 1, y - 1].frameX = 22;
							Main.tile[i + 1, y - 1].frameY = 154;
						}
						if (num4 == 2)
						{
							Main.tile[i + 1, y - 1].frameX = 22;
							Main.tile[i + 1, y - 1].frameY = 176;
						}
					}
					if (num6 == 0 || num6 == 2)
					{
						Main.tile[i - 1, y - 1].active(true);
						Main.tile[i - 1, y - 1].type = 5;
						num4 = WorldGen.genRand.Next(3);
						if (num4 == 0)
						{
							Main.tile[i - 1, y - 1].frameX = 44;
							Main.tile[i - 1, y - 1].frameY = 132;
						}
						if (num4 == 1)
						{
							Main.tile[i - 1, y - 1].frameX = 44;
							Main.tile[i - 1, y - 1].frameY = 154;
						}
						if (num4 == 2)
						{
							Main.tile[i - 1, y - 1].frameX = 44;
							Main.tile[i - 1, y - 1].frameY = 176;
						}
					}
					num4 = WorldGen.genRand.Next(3);
					if (num6 == 0)
					{
						if (num4 == 0)
						{
							Main.tile[i, y - 1].frameX = 88;
							Main.tile[i, y - 1].frameY = 132;
						}
						if (num4 == 1)
						{
							Main.tile[i, y - 1].frameX = 88;
							Main.tile[i, y - 1].frameY = 154;
						}
						if (num4 == 2)
						{
							Main.tile[i, y - 1].frameX = 88;
							Main.tile[i, y - 1].frameY = 176;
						}
					}
					else if (num6 == 1)
					{
						if (num4 == 0)
						{
							Main.tile[i, y - 1].frameX = 0;
							Main.tile[i, y - 1].frameY = 132;
						}
						if (num4 == 1)
						{
							Main.tile[i, y - 1].frameX = 0;
							Main.tile[i, y - 1].frameY = 154;
						}
						if (num4 == 2)
						{
							Main.tile[i, y - 1].frameX = 0;
							Main.tile[i, y - 1].frameY = 176;
						}
					}
					else if (num6 == 2)
					{
						if (num4 == 0)
						{
							Main.tile[i, y - 1].frameX = 66;
							Main.tile[i, y - 1].frameY = 132;
						}
						if (num4 == 1)
						{
							Main.tile[i, y - 1].frameX = 66;
							Main.tile[i, y - 1].frameY = 154;
						}
						if (num4 == 2)
						{
							Main.tile[i, y - 1].frameX = 66;
							Main.tile[i, y - 1].frameY = 176;
						}
					}
					if (WorldGen.genRand.Next(8) != 0)
					{
						num4 = WorldGen.genRand.Next(3);
						if (num4 == 0)
						{
							Main.tile[i, y - num2].frameX = 22;
							Main.tile[i, y - num2].frameY = 198;
						}
						if (num4 == 1)
						{
							Main.tile[i, y - num2].frameX = 22;
							Main.tile[i, y - num2].frameY = 220;
						}
						if (num4 == 2)
						{
							Main.tile[i, y - num2].frameX = 22;
							Main.tile[i, y - num2].frameY = 242;
						}
					}
					else
					{
						num4 = WorldGen.genRand.Next(3);
						if (num4 == 0)
						{
							Main.tile[i, y - num2].frameX = 0;
							Main.tile[i, y - num2].frameY = 198;
						}
						if (num4 == 1)
						{
							Main.tile[i, y - num2].frameX = 0;
							Main.tile[i, y - num2].frameY = 220;
						}
						if (num4 == 2)
						{
							Main.tile[i, y - num2].frameX = 0;
							Main.tile[i, y - num2].frameY = 242;
						}
					}
					WorldGen.RangeFrame(i - 2, y - num2 - 1, i + 2, y + 1);
					if (Main.netMode == 2 && !WorldGen.gen)
					{
						NetMessage.SendTileSquare(-1, i - 1, y - num2, 3, num2, TileChangeType.None);
					}
				}
			}
		}

		// Token: 0x06000EA5 RID: 3749 RVA: 0x00413BEC File Offset: 0x00411DEC
		public static bool GrowShroom(int i, int y)
		{
			if (Main.tile[i - 1, y - 1].lava() || Main.tile[i - 1, y - 1].lava() || Main.tile[i + 1, y - 1].lava())
			{
				return false;
			}
			if (Main.tile[i, y].nactive() && Main.tile[i, y].type == 70 && Main.tile[i, y - 1].wall == 0 && Main.tile[i - 1, y].active() && Main.tile[i - 1, y].type == 70 && Main.tile[i + 1, y].active() && Main.tile[i + 1, y].type == 70 && WorldGen.EmptyTileCheck(i - 2, i + 2, y - 13, y - 3, 71) && WorldGen.EmptyTileCheck(i - 1, i + 1, y - 3, y - 1, 71))
			{
				if (WorldGen.gen && WorldGen.genRand.Next(3) != 0)
				{
					Main.tile[i, y].halfBrick(false);
					Main.tile[i, y].slope(0);
				}
				if (!Main.tile[i, y].halfBrick() && Main.tile[i, y].slope() == 0)
				{
					int num = WorldGen.genRand.Next(4, 11);
					for (int j = y - num; j < y; j++)
					{
						Main.tile[i, j].frameNumber((byte)WorldGen.genRand.Next(3));
						Main.tile[i, j].active(true);
						Main.tile[i, j].type = 72;
						int num2 = WorldGen.genRand.Next(3);
						if (num2 == 0)
						{
							Main.tile[i, j].frameX = 0;
							Main.tile[i, j].frameY = 0;
						}
						if (num2 == 1)
						{
							Main.tile[i, j].frameX = 0;
							Main.tile[i, j].frameY = 18;
						}
						if (num2 == 2)
						{
							Main.tile[i, j].frameX = 0;
							Main.tile[i, j].frameY = 36;
						}
					}
					int num3 = WorldGen.genRand.Next(3);
					if (num3 == 0)
					{
						Main.tile[i, y - num].frameX = 36;
						Main.tile[i, y - num].frameY = 0;
					}
					if (num3 == 1)
					{
						Main.tile[i, y - num].frameX = 36;
						Main.tile[i, y - num].frameY = 18;
					}
					if (num3 == 2)
					{
						Main.tile[i, y - num].frameX = 36;
						Main.tile[i, y - num].frameY = 36;
					}
					WorldGen.RangeFrame(i - 2, y - num - 1, i + 2, y + 1);
					if (Main.netMode == 2)
					{
						NetMessage.SendTileSquare(-1, i - 1, y - num, 3, num, TileChangeType.None);
					}
					return true;
				}
			}
			return false;
		}

		// Token: 0x06000EA6 RID: 3750 RVA: 0x00413F2C File Offset: 0x0041212C
		public static void AddTrees(bool undergroundOnly = false)
		{
			double num = 0.1 + WorldGen.genRand.NextDouble() * 0.35;
			double num2 = 0.1 + WorldGen.genRand.NextDouble() * 0.35;
			int num3 = 20;
			int num4 = (int)Main.worldSurface;
			if (!undergroundOnly)
			{
				for (int i = 1; i < Main.maxTilesX - 1; i++)
				{
					for (int j = num3; j < num4; j++)
					{
						if (i < 380)
						{
							if (WorldGen.genRand.NextDouble() < num && Main.tile[i, j].liquid == 0)
							{
								WorldGen.GrowPalmTree(i, j);
							}
						}
						else if (i > Main.maxTilesX - 380 && WorldGen.genRand.NextDouble() < num2 && Main.tile[i, j].liquid == 0)
						{
							WorldGen.GrowPalmTree(i, j);
						}
						int num5 = 20;
						if (WorldGen.drunkWorldGen)
						{
							num5 /= 3;
						}
						if (WorldGen.remixWorldGen)
						{
							num5 /= 2;
						}
						if (Main.tile[i, j].type == 2 && (Main.tenthAnniversaryWorld || WorldGen.genRand.Next(num5) == 0))
						{
							if (WorldGen.genRand.Next(2) == 0)
							{
								WorldGen.GrowTreeWithSettings(i, j, WorldGen.GrowTreeSettings.Profiles.VanityTree_Willow);
							}
							else
							{
								WorldGen.GrowTreeWithSettings(i, j, WorldGen.GrowTreeSettings.Profiles.VanityTree_Sakura);
							}
						}
						else
						{
							WorldGen.GrowTree(i, j);
						}
					}
					if (WorldGen.genRand.Next(3) == 0)
					{
						i++;
					}
					if (WorldGen.genRand.Next(4) == 0)
					{
						i++;
					}
				}
			}
			if (WorldGen.remixWorldGen)
			{
				num3 = (int)Main.worldSurface;
				num4 = Main.maxTilesY - 300;
				for (int k = 1; k < Main.maxTilesX - 1; k++)
				{
					for (int l = num3; l < num4; l++)
					{
						int maxValue = 7;
						if (Main.tile[k, l].type == 2 && (Main.tenthAnniversaryWorld || WorldGen.genRand.Next(maxValue) == 0))
						{
							if (WorldGen.genRand.Next(2) == 0)
							{
								WorldGen.GrowTreeWithSettings(k, l, WorldGen.GrowTreeSettings.Profiles.VanityTree_Willow);
							}
							else
							{
								WorldGen.GrowTreeWithSettings(k, l, WorldGen.GrowTreeSettings.Profiles.VanityTree_Sakura);
							}
						}
						else
						{
							WorldGen.GrowTree(k, l);
						}
					}
				}
			}
		}

		// Token: 0x06000EA7 RID: 3751 RVA: 0x00414180 File Offset: 0x00412380
		public static void ExplodeMine(int i, int j, bool fromWiring)
		{
			ushort type = Main.tile[i, j].type;
			WorldGen.KillTile(i, j, false, false, true);
			NetMessage.SendTileSquare(-1, i, j, TileChangeType.None);
			Projectile.NewProjectile(WorldGen.GetProjectileSource_PlayerOrWires(i, j, fromWiring, Main.LocalPlayer), (float)(i * 16 + 8), (float)(j * 16 + 8), 0f, 0f, 164, 250, 10f, Main.myPlayer, 0f, 0f, 0f);
		}

		// Token: 0x06000EA8 RID: 3752 RVA: 0x00414200 File Offset: 0x00412400
		public static bool EmptyTileCheck(int startX, int endX, int startY, int endY, int ignoreID = -1)
		{
			if (startX < 0)
			{
				return false;
			}
			if (endX >= Main.maxTilesX)
			{
				return false;
			}
			if (startY < 0)
			{
				return false;
			}
			if (endY >= Main.maxTilesY)
			{
				return false;
			}
			bool flag = false;
			if (ignoreID != -1 && TileID.Sets.CommonSapling[ignoreID])
			{
				flag = true;
			}
			for (int i = startX; i < endX + 1; i++)
			{
				for (int j = startY; j < endY + 1; j++)
				{
					if (Main.tile[i, j].active())
					{
						if (ignoreID == -1)
						{
							return false;
						}
						if (ignoreID == 11)
						{
							ushort type = Main.tile[i, j].type;
							if (type != 11)
							{
								return false;
							}
						}
						else if (ignoreID == 71)
						{
							ushort type = Main.tile[i, j].type;
							if (type != 71)
							{
								return false;
							}
						}
						else if (flag)
						{
							if (!TileID.Sets.CommonSapling[(int)Main.tile[i, j].type])
							{
								ushort type = Main.tile[i, j].type;
								if (type <= 113)
								{
									if (type <= 62)
									{
										if (type <= 24)
										{
											if (type == 3 || type == 24)
											{
												goto IL_1AD;
											}
										}
										else if (type == 32 || type - 61 <= 1)
										{
											goto IL_1AD;
										}
									}
									else if (type <= 84)
									{
										switch (type)
										{
										case 69:
										case 71:
										case 73:
										case 74:
											goto IL_1AD;
										case 70:
										case 72:
											break;
										default:
											if (type - 82 <= 2)
											{
												goto IL_1AD;
											}
											break;
										}
									}
									else if (type == 110 || type == 113)
									{
										goto IL_1AD;
									}
								}
								else if (type <= 352)
								{
									if (type <= 201)
									{
										if (type == 184 || type == 201)
										{
											goto IL_1AD;
										}
									}
									else if (type == 233 || type == 352)
									{
										goto IL_1AD;
									}
								}
								else if (type <= 530)
								{
									if (type == 485 || type - 529 <= 1)
									{
										goto IL_1AD;
									}
								}
								else if (type == 637 || type == 655)
								{
									goto IL_1AD;
								}
								return false;
							}
							break;
						}
					}
					IL_1AD:;
				}
			}
			return true;
		}

		// Token: 0x06000EA9 RID: 3753 RVA: 0x004143D5 File Offset: 0x004125D5
		public static void StartHardmode()
		{
			if (Main.netMode == 1 || Main.hardMode)
			{
				return;
			}
			Main.hardMode = true;
			ThreadPool.QueueUserWorkItem(new WaitCallback(WorldGen.smCallBack), 1);
		}

		// Token: 0x06000EAA RID: 3754 RVA: 0x00414408 File Offset: 0x00412608
		public static void TryProtectingSpawnedItems()
		{
			for (int i = 0; i < 400; i++)
			{
				Item item = Main.item[i];
				if (WorldGen.EligibleForSpawnProtection(item))
				{
					item.timeSinceItemSpawned -= 18000;
				}
			}
		}

		// Token: 0x06000EAB RID: 3755 RVA: 0x00414447 File Offset: 0x00412647
		private static bool EligibleForSpawnProtection(Item item)
		{
			return item.active && ItemID.Sets.OverflowProtectionTimeOffset[item.type] == 0;
		}

		// Token: 0x06000EAC RID: 3756 RVA: 0x00414464 File Offset: 0x00412664
		public static void UndoSpawnedItemProtection()
		{
			for (int i = 0; i < 400; i++)
			{
				Item item = Main.item[i];
				if (WorldGen.EligibleForSpawnProtection(item) && item.timeSinceItemSpawned < 0)
				{
					item.timeSinceItemSpawned += 18000;
				}
			}
		}

		// Token: 0x06000EAD RID: 3757 RVA: 0x004144AC File Offset: 0x004126AC
		public static void smCallBack(object threadContext)
		{
			WorldGen.IsGeneratingHardMode = true;
			WorldGen.TryProtectingSpawnedItems();
			if (Main.rand == null)
			{
				Main.rand = new UnifiedRandom((int)DateTime.Now.Ticks);
			}
			double num = (double)WorldGen.genRand.Next(300, 400) * 0.001;
			double num2 = (double)WorldGen.genRand.Next(200, 300) * 0.001;
			int num3 = (int)((double)Main.maxTilesX * num);
			int num4 = (int)((double)Main.maxTilesX * (1.0 - num));
			int num5 = 1;
			if (WorldGen.genRand.Next(2) == 0)
			{
				num4 = (int)((double)Main.maxTilesX * num);
				num3 = (int)((double)Main.maxTilesX * (1.0 - num));
				num5 = -1;
			}
			int num6 = 1;
			if (GenVars.dungeonX < Main.maxTilesX / 2)
			{
				num6 = -1;
			}
			if (num6 < 0)
			{
				if (num4 < num3)
				{
					num4 = (int)((double)Main.maxTilesX * num2);
				}
				else
				{
					num3 = (int)((double)Main.maxTilesX * num2);
				}
			}
			else if (num4 > num3)
			{
				num4 = (int)((double)Main.maxTilesX * (1.0 - num2));
			}
			else
			{
				num3 = (int)((double)Main.maxTilesX * (1.0 - num2));
			}
			if (Main.remixWorld)
			{
				int num7 = Main.maxTilesX / 7;
				int num8 = Main.maxTilesX / 14;
				if (Main.dungeonX < Main.maxTilesX / 2)
				{
					for (int i = Main.maxTilesX - num7 - num8; i < Main.maxTilesX; i++)
					{
						for (int j = (int)Main.worldSurface + WorldGen.genRand.Next(-1, 2); j < Main.maxTilesY - 10; j++)
						{
							if (i > Main.maxTilesX - num7)
							{
								WorldGen.Convert(i, j, 2, 1);
							}
							else if (TileID.Sets.Crimson[(int)Main.tile[i, j].type] || TileID.Sets.Corrupt[(int)Main.tile[i, j].type])
							{
								WorldGen.Convert(i, j, 2, 1);
							}
						}
					}
				}
				else
				{
					for (int k = 0; k < num7 + num8; k++)
					{
						for (int l = (int)Main.worldSurface + WorldGen.genRand.Next(-1, 2); l < Main.maxTilesY - 10; l++)
						{
							if (k < num7)
							{
								WorldGen.Convert(k, l, 2, 1);
							}
							else if (TileID.Sets.Crimson[(int)Main.tile[k, l].type] || TileID.Sets.Corrupt[(int)Main.tile[k, l].type])
							{
								WorldGen.Convert(k, l, 2, 1);
							}
						}
					}
				}
			}
			else
			{
				WorldGen.GERunner(num3, 0, (double)(3 * num5), 5.0, true);
				WorldGen.GERunner(num4, 0, (double)(3 * -(double)num5), 5.0, false);
			}
			double num9 = (double)Main.maxTilesX / 4200.0;
			int m = (int)(25.0 * num9);
			ShapeData shapeData = new ShapeData();
			int num10 = 0;
			while (m > 0)
			{
				if (++num10 % 15000 == 0)
				{
					m--;
				}
				Point point = WorldGen.RandomWorldPoint((int)Main.worldSurface - 100, 1, 190, 1);
				Tile tile = Main.tile[point.X, point.Y];
				Tile tile2 = Main.tile[point.X, point.Y - 1];
				ushort num11 = 0;
				if (TileID.Sets.Crimson[(int)tile.type])
				{
					num11 = (ushort)(192 + WorldGen.genRand.Next(4));
				}
				else if (TileID.Sets.Corrupt[(int)tile.type])
				{
					num11 = (ushort)(188 + WorldGen.genRand.Next(4));
				}
				else if (TileID.Sets.Hallow[(int)tile.type])
				{
					num11 = (ushort)(200 + WorldGen.genRand.Next(4));
				}
				if (tile.active() && num11 != 0 && !tile2.active())
				{
					bool flag = WorldUtils.Gen(new Point(point.X, point.Y - 1), new ShapeFloodFill(1000), Actions.Chain(new GenAction[]
					{
						new Modifiers.IsNotSolid(),
						new Modifiers.OnlyWalls(new ushort[]
						{
							0,
							54,
							55,
							56,
							57,
							58,
							59,
							61,
							185,
							212,
							213,
							214,
							215,
							2,
							196,
							197,
							198,
							199,
							15,
							40,
							71,
							64,
							204,
							205,
							206,
							207,
							208,
							209,
							210,
							211,
							71
						}),
						new Actions.Blank().Output(shapeData)
					}));
					if (shapeData.Count > 50 && flag)
					{
						WorldUtils.Gen(new Point(point.X, point.Y), new ModShapes.OuterOutline(shapeData, true, true), new Actions.PlaceWall(num11, true));
						m--;
					}
					shapeData.Clear();
				}
			}
			if (Main.netMode == 0)
			{
				Main.NewText(Lang.misc[15].Value, 50, byte.MaxValue, 130);
			}
			else if (Main.netMode == 2)
			{
				ChatHelper.BroadcastChatMessage(NetworkText.FromKey(Lang.misc[15].Key, new object[0]), new Color(50, 255, 130), -1);
			}
			AchievementsHelper.NotifyProgressionEvent(9);
			if (Main.netMode == 2)
			{
				Netplay.ResetSections();
			}
			WorldGen.UndoSpawnedItemProtection();
			WorldGen.IsGeneratingHardMode = false;
		}

		// Token: 0x06000EAE RID: 3758 RVA: 0x004149C8 File Offset: 0x00412BC8
		public static bool PlaceDoor(int i, int j, int type, int style = 0)
		{
			int num = style / 36;
			int num2 = style % 36;
			int num3 = 54 * num;
			int num4 = 54 * num2;
			bool result;
			try
			{
				if (Main.tile[i, j - 2].nactive() && Main.tileSolid[(int)Main.tile[i, j - 2].type] && WorldGen.SolidTile(i, j + 2, false))
				{
					Main.tile[i, j - 1].active(true);
					Main.tile[i, j - 1].type = 10;
					Main.tile[i, j - 1].frameY = (short)num4;
					Main.tile[i, j - 1].frameX = (short)(num3 + WorldGen.genRand.Next(3) * 18);
					Main.tile[i, j].active(true);
					Main.tile[i, j].type = 10;
					Main.tile[i, j].frameY = (short)(num4 + 18);
					Main.tile[i, j].frameX = (short)(num3 + WorldGen.genRand.Next(3) * 18);
					Main.tile[i, j + 1].active(true);
					Main.tile[i, j + 1].type = 10;
					Main.tile[i, j + 1].frameY = (short)(num4 + 36);
					Main.tile[i, j + 1].frameX = (short)(num3 + WorldGen.genRand.Next(3) * 18);
					result = true;
				}
				else
				{
					result = false;
				}
			}
			catch
			{
				result = false;
			}
			return result;
		}

		// Token: 0x06000EAF RID: 3759 RVA: 0x00414B80 File Offset: 0x00412D80
		public static bool CloseDoor(int i, int j, bool forced = false)
		{
			int num = 0;
			int num2 = i;
			if (Main.tile[i, j] == null)
			{
				Main.tile[i, j] = new Tile();
			}
			int frameX = (int)Main.tile[i, j].frameX;
			Tile tile = Main.tile[i, j];
			if (tile.type != 11)
			{
				return false;
			}
			int k = (int)tile.frameY;
			int num3 = 0;
			int num4 = 0;
			while (k >= 54)
			{
				k -= 54;
				num3++;
			}
			if (frameX >= 72)
			{
				num3 += 36 * (frameX / 72);
				num4 += 54 * (frameX / 72);
			}
			int num5 = j - k / 18;
			int num6 = frameX % 72;
			if (num6 == 0)
			{
				num2 = i;
				num = 1;
			}
			else if (num6 == 18)
			{
				num2 = i - 1;
				num = 1;
			}
			else if (num6 == 36)
			{
				num2 = i + 1;
				num = -1;
			}
			else if (num6 == 54)
			{
				num2 = i;
				num = -1;
			}
			int num7 = num2;
			if (num == -1)
			{
				num7 = num2 - 1;
			}
			if (!forced)
			{
				for (int l = num5; l < num5 + 3; l++)
				{
					if (!Collision.EmptyTile(num2, l, true))
					{
						return false;
					}
				}
			}
			for (int m = num7; m < num7 + 2; m++)
			{
				for (int n = num5; n < num5 + 3; n++)
				{
					if (m == num2)
					{
						if (Main.tile[m, n] == null)
						{
							Main.tile[m, n] = new Tile();
						}
						Main.tile[m, n].type = 10;
						Main.tile[m, n].frameX = (short)(WorldGen.genRand.Next(3) * 18 + num4);
					}
					else
					{
						if (Main.tile[m, n] == null)
						{
							Main.tile[m, n] = new Tile();
						}
						Main.tile[m, n].active(false);
					}
				}
			}
			if (Main.netMode != 1 && Wiring.running)
			{
				Wiring.SkipWire(num2, num5);
				Wiring.SkipWire(num2, num5 + 1);
				Wiring.SkipWire(num2, num5 + 2);
			}
			for (int num8 = num2 - 1; num8 <= num2 + 1; num8++)
			{
				for (int num9 = num5 - 1; num9 <= num5 + 2; num9++)
				{
					WorldGen.TileFrame(num8, num9, false, false);
				}
			}
			SoundEngine.PlaySound(9, i * 16, j * 16, 1, 1f, 0f);
			return true;
		}

		// Token: 0x06000EB0 RID: 3760 RVA: 0x00414DD0 File Offset: 0x00412FD0
		public static bool AddLifeCrystal(int i, int j)
		{
			int k = j;
			while (k < Main.maxTilesY)
			{
				if (Main.tile[i, k].active() && Main.tileSolid[(int)Main.tile[i, k].type])
				{
					int num = k - 1;
					if (Main.tile[i, num - 1].lava() || Main.tile[i - 1, num - 1].lava())
					{
						return false;
					}
					if (Main.tile[i, num - 1].shimmer())
					{
						return false;
					}
					if (!WorldGen.EmptyTileCheck(i - 1, i, num - 1, num, -1))
					{
						return false;
					}
					if (Main.wallDungeon[(int)Main.tile[i, num].wall])
					{
						return false;
					}
					Tile tile = Main.tile[i - 1, num + 1];
					Tile tile2 = Main.tile[i, num + 1];
					if (!tile.nactive() || !Main.tileSolid[(int)tile.type])
					{
						return false;
					}
					if (!tile2.nactive() || !Main.tileSolid[(int)tile2.type])
					{
						return false;
					}
					if (tile.blockType() != 0)
					{
						tile.slope(0);
						tile.halfBrick(false);
					}
					if (tile2.blockType() != 0)
					{
						tile2.slope(0);
						tile2.halfBrick(false);
					}
					Main.tile[i - 1, num - 1].active(true);
					Main.tile[i - 1, num - 1].type = 12;
					Main.tile[i - 1, num - 1].frameX = 0;
					Main.tile[i - 1, num - 1].frameY = 0;
					Main.tile[i, num - 1].active(true);
					Main.tile[i, num - 1].type = 12;
					Main.tile[i, num - 1].frameX = 18;
					Main.tile[i, num - 1].frameY = 0;
					Main.tile[i - 1, num].active(true);
					Main.tile[i - 1, num].type = 12;
					Main.tile[i - 1, num].frameX = 0;
					Main.tile[i - 1, num].frameY = 18;
					Main.tile[i, num].active(true);
					Main.tile[i, num].type = 12;
					Main.tile[i, num].frameX = 18;
					Main.tile[i, num].frameY = 18;
					return true;
				}
				else
				{
					k++;
				}
			}
			return false;
		}

		// Token: 0x06000EB1 RID: 3761 RVA: 0x0041506C File Offset: 0x0041326C
		public static void AddShadowOrb(int x, int y)
		{
			if (x < 10 || x > Main.maxTilesX - 10)
			{
				return;
			}
			if (y < 10 || y > Main.maxTilesY - 10)
			{
				return;
			}
			for (int i = x - 1; i < x + 1; i++)
			{
				for (int j = y - 1; j < y + 1; j++)
				{
					if (Main.tile[i, j].active() && Main.tile[i, j].type == 31)
					{
						return;
					}
				}
			}
			short num = 0;
			if (WorldGen.crimson)
			{
				num += 36;
			}
			Main.tile[x - 1, y - 1].active(true);
			Main.tile[x - 1, y - 1].type = 31;
			Main.tile[x - 1, y - 1].frameX = num;
			Main.tile[x - 1, y - 1].frameY = 0;
			Main.tile[x, y - 1].active(true);
			Main.tile[x, y - 1].type = 31;
			Main.tile[x, y - 1].frameX = 18 + num;
			Main.tile[x, y - 1].frameY = 0;
			Main.tile[x - 1, y].active(true);
			Main.tile[x - 1, y].type = 31;
			Main.tile[x - 1, y].frameX = num;
			Main.tile[x - 1, y].frameY = 18;
			Main.tile[x, y].active(true);
			Main.tile[x, y].type = 31;
			Main.tile[x, y].frameX = 18 + num;
			Main.tile[x, y].frameY = 18;
		}

		// Token: 0x06000EB2 RID: 3762 RVA: 0x00415244 File Offset: 0x00413444
		public static void AddHellHouses()
		{
			int num = (int)((double)Main.maxTilesX * 0.25);
			for (int i = 100; i < Main.maxTilesX - 100; i++)
			{
				if (((!WorldGen.drunkWorldGen && !WorldGen.remixWorldGen) || i <= num || i >= Main.maxTilesX - num) && (WorldGen.drunkWorldGen || WorldGen.remixWorldGen || (i >= num && i <= Main.maxTilesX - num)))
				{
					int num2 = Main.maxTilesY - 40;
					while (Main.tile[i, num2].active() || Main.tile[i, num2].liquid > 0)
					{
						num2--;
					}
					if (Main.tile[i, num2 + 1].active())
					{
						ushort num3 = (ushort)WorldGen.genRand.Next(75, 77);
						byte wallType = 13;
						if (WorldGen.genRand.Next(5) > 0)
						{
							num3 = 75;
						}
						if (num3 == 75)
						{
							wallType = 14;
						}
						if (WorldGen.getGoodWorldGen)
						{
							num3 = 76;
						}
						WorldGen.HellFort(i, num2, num3, wallType);
						i += WorldGen.genRand.Next(30, 130);
						if (WorldGen.genRand.Next(10) == 0)
						{
							i += WorldGen.genRand.Next(0, 200);
						}
					}
				}
			}
			float num4 = (float)(Main.maxTilesX / 4200);
			int num5 = 0;
			while ((float)num5 < 200f * num4)
			{
				int num6 = 0;
				bool flag = false;
				while (!flag)
				{
					num6++;
					int num7 = WorldGen.genRand.Next((int)((double)Main.maxTilesX * 0.2), (int)((double)Main.maxTilesX * 0.8));
					int num8 = WorldGen.genRand.Next(Main.maxTilesY - 300, Main.maxTilesY - 20);
					if (Main.tile[num7, num8].active() && (Main.tile[num7, num8].type == 75 || Main.tile[num7, num8].type == 76))
					{
						int num9 = 0;
						if (Main.tile[num7 - 1, num8].wall > 0)
						{
							num9 = -1;
						}
						else if (Main.tile[num7 + 1, num8].wall > 0)
						{
							num9 = 1;
						}
						if (!Main.tile[num7 + num9, num8].active() && !Main.tile[num7 + num9, num8 + 1].active())
						{
							bool flag2 = false;
							for (int j = num7 - 8; j < num7 + 8; j++)
							{
								for (int k = num8 - 8; k < num8 + 8; k++)
								{
									if (Main.tile[j, k].active() && Main.tile[j, k].type == 4)
									{
										flag2 = true;
										break;
									}
								}
							}
							if (!flag2)
							{
								WorldGen.PlaceTile(num7 + num9, num8, 4, true, true, -1, 7);
								flag = true;
							}
						}
					}
					if (num6 > 1000)
					{
						flag = true;
					}
				}
				num5++;
			}
			double num10 = 4200000.0 / (double)Main.maxTilesX;
			int num11 = 0;
			while ((double)num11 < num10)
			{
				int num12 = 0;
				int num13 = WorldGen.genRand.Next(num, Main.maxTilesX - num);
				int num14 = WorldGen.genRand.Next(Main.maxTilesY - 250, Main.maxTilesY - 20);
				while ((Main.tile[num13, num14].wall != 13 && Main.tile[num13, num14].wall != 14) || Main.tile[num13, num14].active())
				{
					num13 = WorldGen.genRand.Next(num, Main.maxTilesX - num);
					num14 = WorldGen.genRand.Next(Main.maxTilesY - 250, Main.maxTilesY - 20);
					if (WorldGen.drunkWorldGen || WorldGen.remixWorldGen)
					{
						if (WorldGen.genRand.Next(2) == 0)
						{
							num13 = WorldGen.genRand.Next(50, num);
						}
						else
						{
							num13 = WorldGen.genRand.Next(Main.maxTilesX - num, Main.maxTilesX - 50);
						}
					}
					num12++;
					if (num12 > 100000)
					{
						break;
					}
				}
				if (num12 <= 100000 && (Main.tile[num13, num14].wall == 13 || Main.tile[num13, num14].wall == 14) && !Main.tile[num13, num14].active())
				{
					while (!WorldGen.SolidTile(num13, num14, false) && num14 < Main.maxTilesY - 20)
					{
						num14++;
					}
					num14--;
					int num15 = num13;
					int num16 = num13;
					while (!Main.tile[num15, num14].active() && WorldGen.SolidTile(num15, num14 + 1, false))
					{
						num15--;
					}
					num15++;
					while (!Main.tile[num16, num14].active() && WorldGen.SolidTile(num16, num14 + 1, false))
					{
						num16++;
					}
					num16--;
					int num17 = num16 - num15;
					int num18 = (num16 + num15) / 2;
					if (!Main.tile[num18, num14].active() && (Main.tile[num18, num14].wall == 13 || Main.tile[num18, num14].wall == 14) && WorldGen.SolidTile(num18, num14 + 1, false))
					{
						int style = 16;
						int style2 = 13;
						int style3 = 14;
						int style4 = 49;
						int style5 = 4;
						int style6 = 8;
						int style7 = 15;
						int style8 = 9;
						int style9 = 10;
						int style10 = 17;
						int style11 = 25;
						int style12 = 25;
						int style13 = 23;
						int style14 = 25;
						int num19 = WorldGen.genRand.Next(13);
						int num20 = 0;
						int num21 = 0;
						if (num19 == 0)
						{
							num20 = 5;
							num21 = 4;
						}
						if (num19 == 1)
						{
							num20 = 4;
							num21 = 3;
						}
						if (num19 == 2)
						{
							num20 = 3;
							num21 = 5;
						}
						if (num19 == 3)
						{
							num20 = 4;
							num21 = 6;
						}
						if (num19 == 4)
						{
							num20 = 3;
							num21 = 3;
						}
						if (num19 == 5)
						{
							num20 = 5;
							num21 = 3;
						}
						if (num19 == 6)
						{
							num20 = 5;
							num21 = 4;
						}
						if (num19 == 7)
						{
							num20 = 5;
							num21 = 4;
						}
						if (num19 == 8)
						{
							num20 = 5;
							num21 = 4;
						}
						if (num19 == 9)
						{
							num20 = 3;
							num21 = 5;
						}
						if (num19 == 10)
						{
							num20 = 5;
							num21 = 3;
						}
						if (num19 == 11)
						{
							num20 = 2;
							num21 = 4;
						}
						if (num19 == 12)
						{
							num20 = 3;
							num21 = 3;
						}
						for (int l = num18 - num20; l <= num18 + num20; l++)
						{
							for (int m = num14 - num21; m <= num14; m++)
							{
								if (Main.tile[l, m].active())
								{
									num19 = -1;
									break;
								}
							}
						}
						if ((double)num17 < (double)num20 * 1.75)
						{
							num19 = -1;
						}
						if (num19 == 0)
						{
							WorldGen.PlaceTile(num18, num14, 14, true, false, -1, style2);
							int num22 = WorldGen.genRand.Next(6);
							if (num22 < 3)
							{
								WorldGen.PlaceTile(num18 + num22, num14 - 2, 33, true, false, -1, style12);
							}
							if (Main.tile[num18, num14].active())
							{
								if (!Main.tile[num18 - 2, num14].active())
								{
									WorldGen.PlaceTile(num18 - 2, num14, 15, true, false, -1, style);
									if (Main.tile[num18 - 2, num14].active())
									{
										Tile tile = Main.tile[num18 - 2, num14];
										tile.frameX += 18;
										Tile tile2 = Main.tile[num18 - 2, num14 - 1];
										tile2.frameX += 18;
									}
								}
								if (!Main.tile[num18 + 2, num14].active())
								{
									WorldGen.PlaceTile(num18 + 2, num14, 15, true, false, -1, style);
								}
							}
						}
						else if (num19 == 1)
						{
							WorldGen.PlaceTile(num18, num14, 18, true, false, -1, style3);
							int num23 = WorldGen.genRand.Next(4);
							if (num23 < 2)
							{
								WorldGen.PlaceTile(num18 + num23, num14 - 1, 33, true, false, -1, style12);
							}
							if (Main.tile[num18, num14].active())
							{
								if (WorldGen.genRand.Next(2) == 0)
								{
									if (!Main.tile[num18 - 1, num14].active())
									{
										WorldGen.PlaceTile(num18 - 1, num14, 15, true, false, -1, style);
										if (Main.tile[num18 - 1, num14].active())
										{
											Tile tile3 = Main.tile[num18 - 1, num14];
											tile3.frameX += 18;
											Tile tile4 = Main.tile[num18 - 1, num14 - 1];
											tile4.frameX += 18;
										}
									}
								}
								else if (!Main.tile[num18 + 2, num14].active())
								{
									WorldGen.PlaceTile(num18 + 2, num14, 15, true, false, -1, style);
								}
							}
						}
						else if (num19 == 2)
						{
							WorldGen.PlaceTile(num18, num14, 105, true, false, -1, style4);
						}
						else if (num19 == 3)
						{
							WorldGen.PlaceTile(num18, num14, 101, true, false, -1, style5);
						}
						else if (num19 == 4)
						{
							if (WorldGen.genRand.Next(2) == 0)
							{
								WorldGen.PlaceTile(num18, num14, 15, true, false, -1, style);
								Tile tile5 = Main.tile[num18, num14];
								tile5.frameX += 18;
								Tile tile6 = Main.tile[num18, num14 - 1];
								tile6.frameX += 18;
							}
							else
							{
								WorldGen.PlaceTile(num18, num14, 15, true, false, -1, style);
							}
						}
						else if (num19 == 5)
						{
							if (WorldGen.genRand.Next(2) == 0)
							{
								WorldGen.Place4x2(num18, num14, 79, 1, style6);
							}
							else
							{
								WorldGen.Place4x2(num18, num14, 79, -1, style6);
							}
						}
						else if (num19 == 6)
						{
							WorldGen.PlaceTile(num18, num14, 87, true, false, -1, style7);
						}
						else if (num19 == 7)
						{
							WorldGen.PlaceTile(num18, num14, 88, true, false, -1, style8);
						}
						else if (num19 == 8)
						{
							WorldGen.PlaceTile(num18, num14, 89, true, false, -1, style9);
						}
						else if (num19 == 9)
						{
							WorldGen.PlaceTile(num18, num14, 104, true, false, -1, style10);
						}
						else if (num19 == 10)
						{
							if (WorldGen.genRand.Next(2) == 0)
							{
								WorldGen.Place4x2(num18, num14, 90, 1, style14);
							}
							else
							{
								WorldGen.Place4x2(num18, num14, 90, -1, style14);
							}
						}
						else if (num19 == 11)
						{
							WorldGen.PlaceTile(num18, num14, 93, true, false, -1, style13);
						}
						else if (num19 == 12)
						{
							WorldGen.PlaceTile(num18, num14, 100, true, false, -1, style11);
						}
					}
				}
				num11++;
			}
			num10 = 420000.0 / (double)Main.maxTilesX;
			int num24 = 0;
			while ((double)num24 < num10)
			{
				int num25 = 0;
				int num26 = WorldGen.genRand.Next(num, Main.maxTilesX - num);
				int num27 = WorldGen.genRand.Next(Main.maxTilesY - 250, Main.maxTilesY - 20);
				while ((Main.tile[num26, num27].wall != 13 && Main.tile[num26, num27].wall != 14) || Main.tile[num26, num27].active())
				{
					num26 = WorldGen.genRand.Next(num, Main.maxTilesX - num);
					num27 = WorldGen.genRand.Next(Main.maxTilesY - 250, Main.maxTilesY - 20);
					if (WorldGen.drunkWorldGen || WorldGen.remixWorldGen)
					{
						if (WorldGen.genRand.Next(2) == 0)
						{
							num26 = WorldGen.genRand.Next(50, num);
						}
						else
						{
							num26 = WorldGen.genRand.Next(Main.maxTilesX - num, Main.maxTilesX - 50);
						}
					}
					num25++;
					if (num25 > 100000)
					{
						break;
					}
				}
				if (num25 <= 100000)
				{
					int num28;
					int num29;
					int num30;
					int num31;
					for (int n = 0; n < 2; n++)
					{
						num28 = num26;
						num29 = num26;
						while (!Main.tile[num28, num27].active() && (Main.tile[num28, num27].wall == 13 || Main.tile[num28, num27].wall == 14))
						{
							num28--;
						}
						num28++;
						while (!Main.tile[num29, num27].active() && (Main.tile[num29, num27].wall == 13 || Main.tile[num29, num27].wall == 14))
						{
							num29++;
						}
						num29--;
						num26 = (num28 + num29) / 2;
						num30 = num27;
						num31 = num27;
						while (!Main.tile[num26, num30].active() && (Main.tile[num26, num30].wall == 13 || Main.tile[num26, num30].wall == 14))
						{
							num30--;
						}
						num30++;
						while (!Main.tile[num26, num31].active() && (Main.tile[num26, num31].wall == 13 || Main.tile[num26, num31].wall == 14))
						{
							num31++;
						}
						num31--;
						num27 = (num30 + num31) / 2;
					}
					num28 = num26;
					num29 = num26;
					while (!Main.tile[num28, num27].active() && !Main.tile[num28, num27 - 1].active() && !Main.tile[num28, num27 + 1].active())
					{
						num28--;
					}
					num28++;
					while (!Main.tile[num29, num27].active() && !Main.tile[num29, num27 - 1].active() && !Main.tile[num29, num27 + 1].active())
					{
						num29++;
					}
					num29--;
					num30 = num27;
					num31 = num27;
					while (!Main.tile[num26, num30].active() && !Main.tile[num26 - 1, num30].active() && !Main.tile[num26 + 1, num30].active())
					{
						num30--;
					}
					num30++;
					while (!Main.tile[num26, num31].active() && !Main.tile[num26 - 1, num31].active() && !Main.tile[num26 + 1, num31].active())
					{
						num31++;
					}
					num31--;
					num26 = (num28 + num29) / 2;
					num27 = (num30 + num31) / 2;
					int num32 = num29 - num28;
					int num33 = num31 - num30;
					if (num32 > 7 && num33 > 5)
					{
						int num34 = 0;
						if (WorldGen.nearPicture2(num26, num27))
						{
							num34 = -1;
						}
						if (num34 == 0)
						{
							PaintingEntry paintingEntry = WorldGen.RandHellPicture();
							if (!WorldGen.nearPicture(num26, num27))
							{
								WorldGen.PlaceTile(num26, num27, paintingEntry.tileType, true, false, -1, paintingEntry.style);
							}
						}
					}
				}
				num24++;
			}
			int[] array = new int[]
			{
				WorldGen.genRand.Next(16, 22),
				WorldGen.genRand.Next(16, 22),
				WorldGen.genRand.Next(16, 22)
			};
			while (array[1] == array[0])
			{
				array[1] = WorldGen.genRand.Next(16, 22);
			}
			while (array[2] == array[0] || array[2] == array[1])
			{
				array[2] = WorldGen.genRand.Next(16, 22);
			}
			num10 = 420000.0 / (double)Main.maxTilesX;
			int num35 = 0;
			while ((double)num35 < num10)
			{
				int num36 = 0;
				int num37;
				int num38;
				do
				{
					num37 = WorldGen.genRand.Next(num, Main.maxTilesX - num);
					num38 = WorldGen.genRand.Next(Main.maxTilesY - 250, Main.maxTilesY - 20);
					if (WorldGen.drunkWorldGen || WorldGen.remixWorldGen)
					{
						if (WorldGen.genRand.Next(2) == 0)
						{
							num37 = WorldGen.genRand.Next(50, num);
						}
						else
						{
							num37 = WorldGen.genRand.Next(Main.maxTilesX - num, Main.maxTilesX - 50);
						}
					}
					num36++;
				}
				while (num36 <= 100000 && ((Main.tile[num37, num38].wall != 13 && Main.tile[num37, num38].wall != 14) || Main.tile[num37, num38].active()));
				if (num36 <= 100000)
				{
					while (!WorldGen.SolidTile(num37, num38, false) && num38 > 10)
					{
						num38--;
					}
					num38++;
					if (Main.tile[num37, num38].wall == 13 || Main.tile[num37, num38].wall == 14)
					{
						int num39 = WorldGen.genRand.Next(3);
						int style15 = 32;
						int style16 = 32;
						int num40;
						int num41;
						switch (num39)
						{
						default:
							num40 = 1;
							num41 = 3;
							break;
						case 1:
							num40 = 3;
							num41 = 3;
							break;
						case 2:
							num40 = 1;
							num41 = 2;
							break;
						}
						for (int num42 = num37 - 1; num42 <= num37 + num40; num42++)
						{
							for (int num43 = num38; num43 <= num38 + num41; num43++)
							{
								Tile tile7 = Main.tile[num37, num38];
								if (num42 < num37 || num42 == num37 + num40)
								{
									if (tile7.active())
									{
										ushort type = tile7.type;
										if (type <= 34)
										{
											if (type - 10 > 1 && type != 34)
											{
												goto IL_11B9;
											}
										}
										else if (type != 42 && type != 91)
										{
											goto IL_11B9;
										}
										num39 = -1;
									}
								}
								else if (tile7.active())
								{
									num39 = -1;
								}
								IL_11B9:;
							}
						}
						switch (num39)
						{
						case 0:
							WorldGen.PlaceTile(num37, num38, 91, true, false, -1, array[WorldGen.genRand.Next(3)]);
							break;
						case 1:
							WorldGen.PlaceTile(num37, num38, 34, true, false, -1, style15);
							break;
						case 2:
							WorldGen.PlaceTile(num37, num38, 42, true, false, -1, style16);
							break;
						}
					}
				}
				num35++;
			}
		}

		// Token: 0x06000EB3 RID: 3763 RVA: 0x00416494 File Offset: 0x00414694
		public static void HellFort(int i, int j, ushort tileType = 75, byte wallType = 14)
		{
			int[] array = new int[5];
			int[] array2 = new int[5];
			int[] array3 = new int[10];
			int[] array4 = new int[10];
			int num = 8;
			int num2 = 20;
			if (WorldGen.drunkWorldGen)
			{
				num /= 2;
				num2 *= 2;
			}
			array[2] = i - WorldGen.genRand.Next(num / 2, num2 / 2);
			array2[2] = i + WorldGen.genRand.Next(num / 2, num2 / 2);
			array[3] = array2[2];
			array2[3] = array[3] + WorldGen.genRand.Next(num, num2);
			array[4] = array2[3];
			array2[4] = array[4] + WorldGen.genRand.Next(num, num2);
			array2[1] = array[2];
			array[1] = array2[1] - WorldGen.genRand.Next(num, num2);
			array2[0] = array[1];
			array[0] = array2[0] - WorldGen.genRand.Next(num, num2);
			num = 6;
			num2 = 12;
			array3[3] = j - WorldGen.genRand.Next(num, num2);
			array4[3] = j;
			for (int k = 4; k < 10; k++)
			{
				array3[k] = array4[k - 1];
				array4[k] = array3[k] + WorldGen.genRand.Next(num, num2);
			}
			for (int l = 2; l >= 0; l--)
			{
				array4[l] = array3[l + 1];
				array3[l] = array4[l] - WorldGen.genRand.Next(num, num2);
			}
			bool flag = false;
			bool flag2 = false;
			bool[,] array5 = new bool[5, 10];
			int num3 = 3;
			int num4 = 3;
			for (int m = 0; m < 2; m++)
			{
				if (WorldGen.genRand.Next(3) == 0 || WorldGen.drunkWorldGen)
				{
					flag = true;
					int num5 = WorldGen.genRand.Next(10);
					if (num5 < num3)
					{
						num3 = num5;
					}
					if (num5 > num4)
					{
						num4 = num5;
					}
					int num6 = 1;
					if (WorldGen.genRand.Next(2) == 0 || WorldGen.drunkWorldGen)
					{
						array5[0, num5] = true;
						array5[1, num5] = true;
						num6 = 0;
					}
					else
					{
						array5[1, num5] = true;
					}
					int num7 = WorldGen.genRand.Next(2);
					if (num7 == 0)
					{
						num7 = -1;
					}
					int num8 = WorldGen.genRand.Next(10);
					while (num8 > 0 && num5 >= 0 && num5 < 10)
					{
						array5[num6, num5] = true;
						num5 += num7;
					}
				}
				if (WorldGen.genRand.Next(3) == 0 || WorldGen.drunkWorldGen)
				{
					flag2 = true;
					int num9 = WorldGen.genRand.Next(10);
					if (num9 < num3)
					{
						num3 = num9;
					}
					if (num9 > num4)
					{
						num4 = num9;
					}
					int num10 = 3;
					if (WorldGen.genRand.Next(2) == 0 || WorldGen.drunkWorldGen)
					{
						array5[3, num9] = true;
						array5[4, num9] = true;
						num10 = 4;
					}
					else
					{
						array5[3, num9] = true;
					}
					int num11 = WorldGen.genRand.Next(2);
					if (num11 == 0)
					{
						num11 = -1;
					}
					int num12 = WorldGen.genRand.Next(10);
					while (num12 > 0 && num9 >= 0 && num9 < 10)
					{
						array5[num10, num9] = true;
						num9 += num11;
					}
				}
			}
			for (int n = 0; n < 5; n++)
			{
				int num13 = array[n];
				bool flag3 = false;
				if (num13 < 10 || num13 > Main.maxTilesX - 10)
				{
					flag3 = true;
				}
				else
				{
					for (int num14 = Main.UnderworldLayer; num14 < Main.maxTilesY; num14++)
					{
						if (Main.tile[num13, num14].wall > 0)
						{
							flag3 = true;
						}
					}
				}
				if (flag3)
				{
					for (int num15 = 0; num15 < 10; num15++)
					{
						array5[n, num15] = false;
					}
				}
			}
			int num16 = WorldGen.genRand.Next(10);
			if (num16 < num3)
			{
				num3 = num16;
			}
			num16 = WorldGen.genRand.Next(10);
			if (num16 > num4)
			{
				num4 = num16;
			}
			if (!flag && !flag2)
			{
				while (num4 - num3 < 5)
				{
					num16 = WorldGen.genRand.Next(10);
					if (num16 < num3)
					{
						num3 = num16;
					}
					num16 = WorldGen.genRand.Next(10);
					if (num16 > num4)
					{
						num4 = num16;
					}
				}
			}
			for (int num17 = num3; num17 <= num4; num17++)
			{
				array5[2, num17] = true;
			}
			for (int num18 = 0; num18 < 5; num18++)
			{
				for (int num19 = 0; num19 < 10; num19++)
				{
					if (array5[num18, num19] && (array3[num19] < Main.UnderworldLayer || array4[num19] > Main.maxTilesY - 20))
					{
						array5[num18, num19] = false;
					}
				}
			}
			for (int num20 = 0; num20 < 5; num20++)
			{
				for (int num21 = 0; num21 < 10; num21++)
				{
					if (array5[num20, num21])
					{
						for (int num22 = array[num20]; num22 <= array2[num20]; num22++)
						{
							int num23 = array3[num21];
							while (num23 <= array4[num21] && num22 >= 10 && num22 <= Main.maxTilesX - 10)
							{
								Main.tile[num22, num23].liquid = 0;
								if (num22 == array[num20] || num22 == array2[num20] || num23 == array3[num21] || num23 == array4[num21])
								{
									Main.tile[num22, num23].active(true);
									Main.tile[num22, num23].type = tileType;
									Main.tile[num22, num23].halfBrick(false);
									Main.tile[num22, num23].slope(0);
								}
								else
								{
									Main.tile[num22, num23].wall = (ushort)wallType;
									Main.tile[num22, num23].active(false);
								}
								num23++;
							}
						}
					}
				}
			}
			int style = 19;
			int style2 = 13;
			for (int num24 = 0; num24 < 4; num24++)
			{
				bool[] array6 = new bool[10];
				bool flag4 = false;
				for (int num25 = 0; num25 < 10; num25++)
				{
					if (array5[num24, num25] && array5[num24 + 1, num25])
					{
						array6[num25] = true;
						flag4 = true;
					}
				}
				while (flag4)
				{
					int num26 = WorldGen.genRand.Next(10);
					if (array6[num26])
					{
						flag4 = false;
						Main.tile[array2[num24], array4[num26] - 1].active(false);
						Main.tile[array2[num24], array4[num26] - 2].active(false);
						Main.tile[array2[num24], array4[num26] - 3].active(false);
						Main.tile[array2[num24], array4[num26] - 1].wall = (ushort)wallType;
						Main.tile[array2[num24], array4[num26] - 2].wall = (ushort)wallType;
						Main.tile[array2[num24], array4[num26] - 3].wall = (ushort)wallType;
						WorldGen.PlaceTile(array2[num24], array4[num26] - 1, 10, true, false, -1, style);
					}
				}
			}
			for (int num27 = 0; num27 < 5; num27++)
			{
				for (int num28 = 0; num28 < 10; num28++)
				{
					if (array5[num27, num28])
					{
						if (num28 > 0 && array5[num27, num28 - 1])
						{
							int num29 = WorldGen.genRand.Next(array[num27] + 2, array2[num27] - 1);
							int num30 = WorldGen.genRand.Next(array[num27] + 2, array2[num27] - 1);
							int num31 = 0;
							while (num30 - num29 < 2 || num30 - num29 > 5)
							{
								num29 = WorldGen.genRand.Next(array[num27] + 2, array2[num27] - 1);
								num30 = WorldGen.genRand.Next(array[num27] + 2, array2[num27] - 1);
								num31++;
								if (num31 > 10000)
								{
									break;
								}
							}
							if (num31 > 10000)
							{
								break;
							}
							int num32 = num29;
							while (num32 <= num30 && num32 >= 20 && num32 <= Main.maxTilesX - 20)
							{
								Main.tile[num32, array3[num28]].active(false);
								WorldGen.PlaceTile(num32, array3[num28], 19, true, true, -1, style2);
								Main.tile[num32, array3[num28]].wall = (ushort)wallType;
								num32++;
							}
						}
						if (num27 < 4 && array5[num27 + 1, num28] && WorldGen.genRand.Next(3) == 0)
						{
							Main.tile[array2[num27], array4[num28] - 1].active(false);
							Main.tile[array2[num27], array4[num28] - 2].active(false);
							Main.tile[array2[num27], array4[num28] - 3].active(false);
							Main.tile[array2[num27], array4[num28] - 1].wall = (ushort)wallType;
							Main.tile[array2[num27], array4[num28] - 2].wall = (ushort)wallType;
							Main.tile[array2[num27], array4[num28] - 3].wall = (ushort)wallType;
							WorldGen.PlaceTile(array2[num27], array4[num28] - 1, 10, true, false, -1, style);
						}
					}
				}
			}
			bool flag5 = false;
			for (int num33 = 0; num33 < 5; num33++)
			{
				bool[] array7 = new bool[10];
				for (int num34 = 0; num34 < 10; num34++)
				{
					if (array5[num33, num34])
					{
						flag5 = true;
						array7[num34] = true;
					}
				}
				if (flag5)
				{
					bool flag6 = false;
					for (int num35 = 0; num35 < 10; num35++)
					{
						if (array7[num35])
						{
							if (!Main.tile[array[num33] - 1, array4[num35] - 1].active() && !Main.tile[array[num33] - 1, array4[num35] - 2].active() && !Main.tile[array[num33] - 1, array4[num35] - 3].active() && Main.tile[array[num33] - 1, array4[num35] - 1].liquid == 0 && Main.tile[array[num33] - 1, array4[num35] - 2].liquid == 0 && Main.tile[array[num33] - 1, array4[num35] - 3].liquid == 0)
							{
								flag6 = true;
							}
							else
							{
								array7[num35] = false;
							}
						}
					}
					while (flag6)
					{
						int num36 = WorldGen.genRand.Next(10);
						if (array7[num36])
						{
							flag6 = false;
							Main.tile[array[num33], array4[num36] - 1].active(false);
							Main.tile[array[num33], array4[num36] - 2].active(false);
							Main.tile[array[num33], array4[num36] - 3].active(false);
							WorldGen.PlaceTile(array[num33], array4[num36] - 1, 10, true, false, -1, style);
						}
					}
					break;
				}
			}
			bool flag7 = false;
			for (int num37 = 4; num37 >= 0; num37--)
			{
				bool[] array8 = new bool[10];
				for (int num38 = 0; num38 < 10; num38++)
				{
					if (array5[num37, num38])
					{
						flag7 = true;
						array8[num38] = true;
					}
				}
				if (flag7)
				{
					bool flag8 = false;
					for (int num39 = 0; num39 < 10; num39++)
					{
						if (array8[num39])
						{
							if (num37 < 20 || num37 > Main.maxTilesX - 20)
							{
								IL_C70:
								while (flag8)
								{
									int num40 = WorldGen.genRand.Next(10);
									if (array8[num40])
									{
										flag8 = false;
										Main.tile[array2[num37], array4[num40] - 1].active(false);
										Main.tile[array2[num37], array4[num40] - 2].active(false);
										Main.tile[array2[num37], array4[num40] - 3].active(false);
										WorldGen.PlaceTile(array2[num37], array4[num40] - 1, 10, true, false, -1, style);
									}
								}
								goto IL_C87;
							}
							if (!Main.tile[array2[num37] + 1, array4[num39] - 1].active() && !Main.tile[array2[num37] + 1, array4[num39] - 2].active() && !Main.tile[array2[num37] + 1, array4[num39] - 3].active() && Main.tile[array2[num37] + 1, array4[num39] - 1].liquid == 0 && Main.tile[array2[num37] + 1, array4[num39] - 2].liquid == 0 && Main.tile[array2[num37] + 1, array4[num39] - 3].liquid == 0)
							{
								flag8 = true;
							}
							else
							{
								array8[num39] = false;
							}
						}
					}
					goto IL_C70;
				}
			}
			IL_C87:
			bool flag9 = false;
			for (int num41 = 0; num41 < 10; num41++)
			{
				bool[] array9 = new bool[10];
				for (int num42 = 0; num42 < 5; num42++)
				{
					if (array5[num42, num41])
					{
						flag9 = true;
						array9[num42] = true;
					}
				}
				if (flag9)
				{
					bool flag10 = true;
					while (flag10)
					{
						int num43 = WorldGen.genRand.Next(5);
						if (array9[num43])
						{
							int num44 = WorldGen.genRand.Next(array[num43] + 2, array2[num43] - 1);
							int num45 = WorldGen.genRand.Next(array[num43] + 2, array2[num43] - 1);
							int num46 = 0;
							while (num45 - num44 < 2 || num45 - num44 > 5)
							{
								num44 = WorldGen.genRand.Next(array[num43] + 2, array2[num43] - 1);
								num45 = WorldGen.genRand.Next(array[num43] + 2, array2[num43] - 1);
								num46++;
								if (num46 > 10000)
								{
									break;
								}
							}
							if (num46 > 10000)
							{
								return;
							}
							int num47 = num44;
							while (num47 <= num45 && num47 >= 10 && num47 <= Main.maxTilesX - 10)
							{
								if (Main.tile[num47, array3[num41] - 1].active() || Main.tile[num47, array3[num41] - 1].liquid > 0)
								{
									flag10 = false;
								}
								num47++;
							}
							if (flag10)
							{
								int num48 = num44;
								while (num48 <= num45 && num48 >= 10 && num48 <= Main.maxTilesX - 10)
								{
									Main.tile[num48, array3[num41]].active(false);
									WorldGen.PlaceTile(num48, array3[num41], 19, true, true, -1, style2);
									num48++;
								}
							}
							flag10 = false;
						}
					}
					return;
				}
			}
		}

		// Token: 0x06000EB4 RID: 3764 RVA: 0x004172E0 File Offset: 0x004154E0
		public static void HellHouse(int i, int j, byte type = 76, byte wall = 13)
		{
			int num = WorldGen.genRand.Next(8, 20);
			int num2 = WorldGen.genRand.Next(1, 3);
			int num3 = WorldGen.genRand.Next(4, 13);
			int num4 = j;
			for (int k = 0; k < num2; k++)
			{
				int num5 = WorldGen.genRand.Next(5, 9);
				WorldGen.HellRoom(i, num4, num, num5, type, wall);
				num4 -= num5;
			}
			num4 = j;
			for (int l = 0; l < num3; l++)
			{
				int num6 = WorldGen.genRand.Next(5, 9);
				num4 += num6;
				WorldGen.HellRoom(i, num4, num, num6, type, wall);
			}
			for (int m = i - num / 2; m <= i + num / 2; m++)
			{
				num4 = j;
				while (num4 < Main.maxTilesY && ((Main.tile[m, num4].active() && (Main.tile[m, num4].type == 76 || Main.tile[m, num4].type == 75)) || Main.tile[i, num4].wall == 13 || Main.tile[i, num4].wall == 14))
				{
					num4++;
				}
				int num7 = 6 + WorldGen.genRand.Next(3);
				while (num4 < Main.maxTilesY && !Main.tile[m, num4].active())
				{
					num7--;
					Main.tile[m, num4].active(true);
					Main.tile[m, num4].type = 57;
					num4++;
					if (num7 <= 0)
					{
						break;
					}
				}
			}
			int num8 = 0;
			int num9 = 0;
			num4 = j;
			while (num4 < Main.maxTilesY && ((Main.tile[i, num4].active() && (Main.tile[i, num4].type == 76 || Main.tile[i, num4].type == 75)) || Main.tile[i, num4].wall == 13 || Main.tile[i, num4].wall == 14))
			{
				num4++;
			}
			num4--;
			num9 = num4;
			while ((Main.tile[i, num4].active() && (Main.tile[i, num4].type == 76 || Main.tile[i, num4].type == 75)) || Main.tile[i, num4].wall == 13 || Main.tile[i, num4].wall == 14)
			{
				num4--;
				if (Main.tile[i, num4].active() && (Main.tile[i, num4].type == 76 || Main.tile[i, num4].type == 75))
				{
					int num10 = WorldGen.genRand.Next(i - num / 2 + 1, i + num / 2 - 1);
					int num11 = WorldGen.genRand.Next(i - num / 2 + 1, i + num / 2 - 1);
					if (num10 > num11)
					{
						int num12 = num10;
						num10 = num11;
						num11 = num12;
					}
					if (num10 == num11)
					{
						if (num10 < i)
						{
							num11++;
						}
						else
						{
							num10--;
						}
					}
					for (int n = num10; n <= num11; n++)
					{
						if (Main.tile[n, num4 - 1].wall == 13)
						{
							Main.tile[n, num4].wall = 13;
						}
						if (Main.tile[n, num4 - 1].wall == 14)
						{
							Main.tile[n, num4].wall = 14;
						}
						Main.tile[n, num4].type = 19;
						Main.tile[n, num4].active(true);
					}
					num4--;
				}
			}
			num8 = num4;
			double num13 = (double)((num9 - num8) * num) * 0.02;
			int num14 = 0;
			while ((double)num14 < num13)
			{
				int num15 = WorldGen.genRand.Next(i - num / 2, i + num / 2 + 1);
				int num16 = WorldGen.genRand.Next(num8, num9);
				int num17 = WorldGen.genRand.Next(3, 8);
				for (int num18 = num15 - num17; num18 <= num15 + num17; num18++)
				{
					for (int num19 = num16 - num17; num19 <= num16 + num17; num19++)
					{
						double num20 = (double)Math.Abs(num18 - num15);
						double num21 = (double)Math.Abs(num19 - num16);
						if (Math.Sqrt(num20 * num20 + num21 * num21) < (double)num17 * 0.4)
						{
							try
							{
								if (Main.tile[num18, num19].type == 76 || Main.tile[num18, num19].type == 19)
								{
									Main.tile[num18, num19].active(false);
								}
								Main.tile[num18, num19].wall = 0;
							}
							catch
							{
							}
						}
					}
				}
				num14++;
			}
		}

		// Token: 0x06000EB5 RID: 3765 RVA: 0x00417828 File Offset: 0x00415A28
		public static void HellRoom(int i, int j, int width, int height, byte type = 76, byte wall = 13)
		{
			if (j > Main.maxTilesY - 40)
			{
				return;
			}
			for (int k = i - width / 2; k <= i + width / 2; k++)
			{
				for (int l = j - height; l <= j; l++)
				{
					try
					{
						Main.tile[k, l].active(true);
						Main.tile[k, l].type = (ushort)type;
						Main.tile[k, l].liquid = 0;
						Main.tile[k, l].lava(false);
					}
					catch
					{
					}
				}
			}
			for (int m = i - width / 2 + 1; m <= i + width / 2 - 1; m++)
			{
				for (int n = j - height + 1; n <= j - 1; n++)
				{
					try
					{
						Main.tile[m, n].active(false);
						Main.tile[m, n].wall = (ushort)wall;
						Main.tile[m, n].liquid = 0;
						Main.tile[m, n].lava(false);
					}
					catch
					{
					}
				}
			}
		}

		// Token: 0x06000EB6 RID: 3766 RVA: 0x00417948 File Offset: 0x00415B48
		public static void templeCleaner(int x, int y)
		{
			int num = 0;
			if (Main.tile[x + 1, y].active() && Main.tile[x + 1, y].type == 226)
			{
				num++;
			}
			if (Main.tile[x - 1, y].active() && Main.tile[x - 1, y].type == 226)
			{
				num++;
			}
			if (Main.tile[x, y + 1].active() && Main.tile[x, y + 1].type == 226)
			{
				num++;
			}
			if (Main.tile[x, y - 1].active() && Main.tile[x, y - 1].type == 226)
			{
				num++;
			}
			if (Main.tile[x, y].active() && Main.tile[x, y].type == 226)
			{
				if (num <= 1)
				{
					Main.tile[x, y].active(false);
					Main.tile[x, y].wall = 87;
					return;
				}
			}
			else if (!Main.tile[x, y].active() && num == 3)
			{
				Main.tile[x, y].active(true);
				Main.tile[x, y].type = 226;
				Main.tile[x, y].liquid = 0;
				Main.tile[x, y].slope(0);
				Main.tile[x, y].halfBrick(false);
			}
		}

		// Token: 0x06000EB7 RID: 3767 RVA: 0x00417AF4 File Offset: 0x00415CF4
		public static Vector2D templePather(Vector2D templePath, int destX, int destY)
		{
			int num = (int)templePath.X;
			int num2 = (int)templePath.Y;
			int num3 = WorldGen.genRand.Next(5, 20);
			int num4 = WorldGen.genRand.Next(2, 5);
			while (num3 > 0 && (num != destX || num2 != destY))
			{
				num3--;
				if (num > destX)
				{
					num--;
				}
				if (num < destX)
				{
					num++;
				}
				if (num2 > destY)
				{
					num2--;
				}
				if (num2 < destY)
				{
					num2++;
				}
				for (int i = num - num4; i < num + num4; i++)
				{
					for (int j = num2 - num4; j < num2 + num4; j++)
					{
						Main.tile[i, j].active(false);
						Main.tile[i, j].wall = 87;
					}
				}
			}
			return new Vector2D((double)num, (double)num2);
		}

		// Token: 0x06000EB8 RID: 3768 RVA: 0x00417BBC File Offset: 0x00415DBC
		public static void outerTempled(int x, int y)
		{
			if (Main.tile[x, y].active() & Main.tile[x, y].type == 226)
			{
				return;
			}
			if (Main.tile[x, y].wall == 87)
			{
				return;
			}
			int num = 6;
			for (int i = x - num; i <= x + num; i++)
			{
				for (int j = y - num; j <= y + num; j++)
				{
					if (!Main.tile[i, j].active() && Main.tile[i, j].wall == 87)
					{
						Main.tile[x, y].active(true);
						Main.tile[x, y].type = 226;
						Main.tile[x, y].liquid = 0;
						Main.tile[x, y].slope(0);
						Main.tile[x, y].halfBrick(false);
						return;
					}
				}
			}
		}

		// Token: 0x06000EB9 RID: 3769 RVA: 0x00417CC8 File Offset: 0x00415EC8
		public static void makeTemple(int x, int y)
		{
			Rectangle[] array = new Rectangle[100];
			double num = (double)Main.maxTilesX / 4200.0;
			int num2 = WorldGen.genRand.Next((int)(num * 10.0), (int)(num * 16.0));
			if (WorldGen.drunkWorldGen)
			{
				num2 *= 3;
			}
			else if (WorldGen.getGoodWorldGen)
			{
				num2 *= 3;
			}
			else if (WorldGen.remixWorldGen)
			{
				num2 *= 2;
			}
			int num3 = 1;
			if (WorldGen.genRand.Next(2) == 0)
			{
				num3 = -1;
			}
			int num4 = num3;
			int num5 = x;
			int num6 = y;
			int num7 = x;
			int num8 = y;
			int num9 = WorldGen.genRand.Next(1, 3);
			int num10 = 0;
			for (int i = 0; i < num2; i++)
			{
				num10++;
				int num11 = num3;
				int num12 = num7;
				int num13 = num8;
				bool flag = true;
				int num14 = 0;
				int num15 = 0;
				int num16 = -10;
				Rectangle rectangle = new Rectangle(num12 - num14 / 2, num13 - num15 / 2, num14, num15);
				while (flag)
				{
					num12 = num7;
					num13 = num8;
					num14 = WorldGen.genRand.Next(25, 50);
					num15 = WorldGen.genRand.Next(20, 35);
					if (num15 > num14)
					{
						num15 = num14;
					}
					if (i == num2 - 1)
					{
						num14 = WorldGen.genRand.Next(55, 65);
						num15 = WorldGen.genRand.Next(45, 50);
						if (num15 > num14)
						{
							num15 = num14;
						}
						num14 = (int)((double)num14 * 1.6);
						num15 = (int)((double)num15 * 1.35);
						num13 += WorldGen.genRand.Next(5, 10);
					}
					if (num10 > num9)
					{
						num13 += WorldGen.genRand.Next(num15 + 1, num15 + 3) + num16;
						num12 += WorldGen.genRand.Next(-5, 6);
						num11 = num3 * -1;
					}
					else
					{
						num12 += (WorldGen.genRand.Next(num14 + 1, num14 + 3) + num16) * num11;
						num13 += WorldGen.genRand.Next(-5, 6);
					}
					flag = false;
					rectangle = new Rectangle(num12 - num14 / 2, num13 - num15 / 2, num14, num15);
					for (int j = 0; j < i; j++)
					{
						if (rectangle.Intersects(array[j]))
						{
							flag = true;
						}
						if (WorldGen.genRand.Next(100) == 0)
						{
							num16++;
						}
					}
				}
				if (num10 > num9)
				{
					num9++;
					num10 = 1;
				}
				array[i] = rectangle;
				num3 = num11;
				num7 = num12;
				num8 = num13;
			}
			for (int k = 0; k < num2; k++)
			{
				for (int l = 0; l < 2; l++)
				{
					for (int m = 0; m < num2; m++)
					{
						for (int n = 0; n < 2; n++)
						{
							int num17 = array[k].X;
							if (l == 1)
							{
								num17 += array[k].Width - 1;
							}
							int num18 = array[k].Y;
							int num19 = num18 + array[k].Height;
							int num20 = array[m].X;
							if (n == 1)
							{
								num20 += array[m].Width - 1;
							}
							int y2 = array[m].Y;
							int num21 = y2 + array[m].Height;
							while (num17 != num20 || num18 != y2 || num19 != num21)
							{
								if (num17 < num20)
								{
									num17++;
								}
								if (num17 > num20)
								{
									num17--;
								}
								if (num18 < y2)
								{
									num18++;
								}
								if (num18 > y2)
								{
									num18--;
								}
								if (num19 < num21)
								{
									num19++;
								}
								if (num19 > num21)
								{
									num19--;
								}
								int num22 = num17;
								for (int num23 = num18; num23 < num19; num23++)
								{
									Main.tile[num22, num23].active(true);
									Main.tile[num22, num23].type = 226;
									Main.tile[num22, num23].liquid = 0;
									Main.tile[num22, num23].slope(0);
									Main.tile[num22, num23].halfBrick(false);
								}
							}
						}
					}
				}
			}
			for (int num24 = 0; num24 < num2; num24++)
			{
				if (!false)
				{
					for (int num25 = array[num24].X; num25 < array[num24].X + array[num24].Width; num25++)
					{
						for (int num26 = array[num24].Y; num26 < array[num24].Y + array[num24].Height; num26++)
						{
							Main.tile[num25, num26].active(true);
							Main.tile[num25, num26].type = 226;
							Main.tile[num25, num26].liquid = 0;
							Main.tile[num25, num26].slope(0);
							Main.tile[num25, num26].halfBrick(false);
						}
					}
					int num27 = array[num24].X;
					int num28 = num27 + array[num24].Width;
					int num29 = array[num24].Y;
					int num30 = num29 + array[num24].Height;
					num27 += WorldGen.genRand.Next(3, 8);
					num28 -= WorldGen.genRand.Next(3, 8);
					num29 += WorldGen.genRand.Next(3, 8);
					num30 -= WorldGen.genRand.Next(3, 8);
					int num31 = num27;
					int num32 = num28;
					int num33 = num29;
					int num34 = num30;
					int num35 = (num27 + num28) / 2;
					int num36 = (num29 + num30) / 2;
					for (int num37 = num27; num37 < num28; num37++)
					{
						for (int num38 = num29; num38 < num30; num38++)
						{
							if (WorldGen.genRand.Next(20) == 0)
							{
								num33 += WorldGen.genRand.Next(-1, 2);
							}
							if (WorldGen.genRand.Next(20) == 0)
							{
								num34 += WorldGen.genRand.Next(-1, 2);
							}
							if (WorldGen.genRand.Next(20) == 0)
							{
								num31 += WorldGen.genRand.Next(-1, 2);
							}
							if (WorldGen.genRand.Next(20) == 0)
							{
								num32 += WorldGen.genRand.Next(-1, 2);
							}
							if (num31 < num27)
							{
								num31 = num27;
							}
							if (num32 > num28)
							{
								num32 = num28;
							}
							if (num33 < num29)
							{
								num33 = num29;
							}
							if (num34 > num30)
							{
								num34 = num30;
							}
							if (num31 > num35)
							{
								num31 = num35;
							}
							if (num32 < num35)
							{
								num32 = num35;
							}
							if (num33 > num36)
							{
								num33 = num36;
							}
							if (num34 < num36)
							{
								num34 = num36;
							}
							if (num37 >= num31 && (num37 < num32 & num38 >= num33) && num38 <= num34)
							{
								Main.tile[num37, num38].active(false);
								Main.tile[num37, num38].wall = 87;
							}
						}
					}
					for (int num39 = num30; num39 > num29; num39--)
					{
						for (int num40 = num28; num40 > num27; num40--)
						{
							if (WorldGen.genRand.Next(20) == 0)
							{
								num33 += WorldGen.genRand.Next(-1, 2);
							}
							if (WorldGen.genRand.Next(20) == 0)
							{
								num34 += WorldGen.genRand.Next(-1, 2);
							}
							if (WorldGen.genRand.Next(20) == 0)
							{
								num31 += WorldGen.genRand.Next(-1, 2);
							}
							if (WorldGen.genRand.Next(20) == 0)
							{
								num32 += WorldGen.genRand.Next(-1, 2);
							}
							if (num31 < num27)
							{
								num31 = num27;
							}
							if (num32 > num28)
							{
								num32 = num28;
							}
							if (num33 < num29)
							{
								num33 = num29;
							}
							if (num34 > num30)
							{
								num34 = num30;
							}
							if (num31 > num35)
							{
								num31 = num35;
							}
							if (num32 < num35)
							{
								num32 = num35;
							}
							if (num33 > num36)
							{
								num33 = num36;
							}
							if (num34 < num36)
							{
								num34 = num36;
							}
							if (num40 >= num31 && (num40 < num32 & num39 >= num33) && num39 <= num34)
							{
								Main.tile[num40, num39].active(false);
								Main.tile[num40, num39].wall = 87;
							}
						}
					}
				}
			}
			Vector2D vector2D;
			vector2D..ctor((double)num5, (double)num6);
			for (int num41 = 0; num41 < num2; num41++)
			{
				Rectangle rectangle2 = array[num41];
				rectangle2.X += 8;
				rectangle2.Y += 8;
				rectangle2.Width -= 16;
				rectangle2.Height -= 16;
				bool flag2 = true;
				while (flag2)
				{
					int num42 = WorldGen.genRand.Next(rectangle2.X, rectangle2.X + rectangle2.Width);
					int num43 = WorldGen.genRand.Next(rectangle2.Y, rectangle2.Y + rectangle2.Height);
					if (num41 == num2 - 1)
					{
						num42 = rectangle2.X + rectangle2.Width / 2 + WorldGen.genRand.Next(-10, 10);
						num43 = rectangle2.Y + rectangle2.Height / 2 + WorldGen.genRand.Next(-10, 10);
					}
					vector2D = WorldGen.templePather(vector2D, num42, num43);
					if (vector2D.X == (double)num42 && vector2D.Y == (double)num43)
					{
						flag2 = false;
					}
				}
				if (num41 < num2 - 1)
				{
					if (WorldGen.genRand.Next(3) != 0)
					{
						int num44 = num41 + 1;
						if (array[num44].Y >= array[num41].Y + array[num41].Height)
						{
							rectangle2.X = array[num44].X;
							if (num41 == 0)
							{
								if (num3 > 0)
								{
									rectangle2.X += (int)((double)array[num44].Width * 0.8);
								}
								else
								{
									rectangle2.X += (int)((double)array[num44].Width * 0.2);
								}
							}
							else if (array[num44].X < array[num41].X)
							{
								rectangle2.X += (int)((double)array[num44].Width * 0.2);
							}
							else
							{
								rectangle2.X += (int)((double)array[num44].Width * 0.8);
							}
							rectangle2.Y = array[num44].Y;
						}
						else
						{
							rectangle2.X = (array[num41].X + array[num41].Width / 2 + array[num44].X + array[num44].Width / 2) / 2;
							rectangle2.Y = (int)((double)array[num44].Y + (double)array[num44].Height * 0.8);
						}
						int x2 = rectangle2.X;
						int y3 = rectangle2.Y;
						flag2 = true;
						while (flag2)
						{
							int num45 = WorldGen.genRand.Next(x2 - 6, x2 + 7);
							int num46 = WorldGen.genRand.Next(y3 - 6, y3 + 7);
							vector2D = WorldGen.templePather(vector2D, num45, num46);
							if (vector2D.X == (double)num45 && vector2D.Y == (double)num46)
							{
								flag2 = false;
							}
						}
					}
					else
					{
						int num47 = num41 + 1;
						int num48 = (array[num41].X + array[num41].Width / 2 + array[num47].X + array[num47].Width / 2) / 2;
						int num49 = (array[num41].Y + array[num41].Height / 2 + array[num47].Y + array[num47].Height / 2) / 2;
						flag2 = true;
						while (flag2)
						{
							int num50 = WorldGen.genRand.Next(num48 - 6, num48 + 7);
							int num51 = WorldGen.genRand.Next(num49 - 6, num49 + 7);
							vector2D = WorldGen.templePather(vector2D, num50, num51);
							if (vector2D.X == (double)num50 && vector2D.Y == (double)num51)
							{
								flag2 = false;
							}
						}
					}
				}
			}
			int num52 = Main.maxTilesX - 20;
			int num53 = 20;
			int num54 = Main.maxTilesY - 20;
			int num55 = 20;
			for (int num56 = 0; num56 < num2; num56++)
			{
				if (array[num56].X < num52)
				{
					num52 = array[num56].X;
				}
				if (array[num56].X + array[num56].Width > num53)
				{
					num53 = array[num56].X + array[num56].Width;
				}
				if (array[num56].Y < num54)
				{
					num54 = array[num56].Y;
				}
				if (array[num56].Y + array[num56].Height > num55)
				{
					num55 = array[num56].Y + array[num56].Height;
				}
			}
			num52 -= 10;
			num53 += 10;
			num54 -= 10;
			num55 += 10;
			for (int num57 = num52; num57 < num53; num57++)
			{
				for (int num58 = num54; num58 < num55; num58++)
				{
					WorldGen.outerTempled(num57, num58);
				}
			}
			for (int num59 = num53; num59 >= num52; num59--)
			{
				for (int num60 = num54; num60 < num55 / 2; num60++)
				{
					WorldGen.outerTempled(num59, num60);
				}
			}
			for (int num61 = num54; num61 < num55; num61++)
			{
				for (int num62 = num52; num62 < num53; num62++)
				{
					WorldGen.outerTempled(num62, num61);
				}
			}
			for (int num63 = num55; num63 >= num54; num63--)
			{
				for (int num64 = num52; num64 < num53; num64++)
				{
					WorldGen.outerTempled(num64, num63);
				}
			}
			int num65 = num6;
			num3 = -num4;
			Vector2D vector2D2;
			vector2D2..ctor((double)num5, (double)num6);
			int num66 = WorldGen.genRand.Next(2, 5);
			bool flag3 = true;
			int num67 = 0;
			int num68 = WorldGen.genRand.Next(9, 14);
			while (flag3)
			{
				num67++;
				if (num67 >= num68)
				{
					num67 = 0;
					vector2D2.Y -= 1.0;
				}
				vector2D2.X += (double)num3;
				int num69 = (int)vector2D2.X;
				flag3 = false;
				int num70 = (int)vector2D2.Y - num66;
				while ((double)num70 < vector2D2.Y + (double)num66)
				{
					if (Main.tile[num69, num70].wall == 87 || (Main.tile[num69, num70].active() && Main.tile[num69, num70].type == 226))
					{
						flag3 = true;
					}
					if (Main.tile[num69, num70].active() && Main.tile[num69, num70].type == 226)
					{
						if (num70 > num65)
						{
							num65 = num70;
						}
						Main.tile[num69, num70].active(false);
						Main.tile[num69, num70].wall = 87;
					}
					num70++;
				}
			}
			num65 += 2;
			int num71 = num5;
			int num72 = num6;
			while (!Main.tile[num71, num72].active())
			{
				num72++;
				if (num72 >= num65)
				{
					num72 = num65;
					Main.tile[num71, num72].ClearEverything();
					Main.tile[num71, num72].active(true);
					Main.tile[num71, num72].type = 226;
					break;
				}
			}
			num72 -= 4;
			int num73 = num72;
			while ((Main.tile[num71, num73].active() && Main.tile[num71, num73].type == 226) || Main.tile[num71, num73].wall == 87)
			{
				num73--;
			}
			num73 += 2;
			for (int num74 = num71 - 1; num74 <= num71 + 1; num74++)
			{
				for (int num75 = num73; num75 <= num72; num75++)
				{
					Main.tile[num74, num75].active(true);
					Main.tile[num74, num75].type = 226;
					Main.tile[num74, num75].liquid = 0;
					Main.tile[num74, num75].slope(0);
					Main.tile[num74, num75].halfBrick(false);
				}
			}
			for (int num76 = num71 - 4; num76 <= num71 + 4; num76++)
			{
				for (int num77 = num72 - 1; num77 < num72 + 3; num77++)
				{
					Main.tile[num76, num77].active(false);
					Main.tile[num76, num77].wall = 87;
				}
			}
			for (int num78 = num71 - 1; num78 <= num71 + 1; num78++)
			{
				for (int num79 = num72 - 5; num79 <= num72 + 8; num79++)
				{
					Main.tile[num78, num79].active(true);
					Main.tile[num78, num79].type = 226;
					Main.tile[num78, num79].liquid = 0;
					Main.tile[num78, num79].slope(0);
					Main.tile[num78, num79].halfBrick(false);
				}
			}
			for (int num80 = num71 - 3; num80 <= num71 + 3; num80++)
			{
				for (int num81 = num72 - 2; num81 < num72 + 3; num81++)
				{
					if (num81 >= num72 || num80 < num5 - 1 || num80 > num5 + 1)
					{
						Main.tile[num80, num81].active(false);
						Main.tile[num80, num81].wall = 87;
					}
				}
			}
			WorldGen.PlaceTile(num71, num72, 10, true, false, -1, 11);
			for (int num82 = num52; num82 < num53; num82++)
			{
				for (int num83 = num54; num83 < num55; num83++)
				{
					WorldGen.templeCleaner(num82, num83);
				}
			}
			for (int num84 = num55; num84 >= num54; num84--)
			{
				for (int num85 = num53; num85 >= num52; num85--)
				{
					WorldGen.templeCleaner(num85, num84);
				}
			}
			for (int num86 = num52; num86 < num53; num86++)
			{
				for (int num87 = num54; num87 < num55; num87++)
				{
					bool flag4 = true;
					for (int num88 = num86 - 1; num88 <= num86 + 1; num88++)
					{
						for (int num89 = num87 - 1; num89 <= num87 + 1; num89++)
						{
							if ((!Main.tile[num88, num89].active() || Main.tile[num88, num89].type != 226) && Main.tile[num88, num89].wall != 87)
							{
								flag4 = false;
								break;
							}
						}
					}
					if (flag4)
					{
						Main.tile[num86, num87].wall = 87;
					}
				}
			}
			int num90 = 0;
			Rectangle rectangle3 = array[num2 - 1];
			int num91 = rectangle3.Width / 2;
			int num92 = rectangle3.Height / 2;
			int num93;
			int num94;
			for (;;)
			{
				num90++;
				num93 = rectangle3.X + num91 + 15 - WorldGen.genRand.Next(30);
				num94 = rectangle3.Y + num92 + 15 - WorldGen.genRand.Next(30);
				WorldGen.PlaceTile(num93, num94, 237, false, false, -1, 0);
				if (Main.tile[num93, num94].type == 237)
				{
					break;
				}
				if (num90 >= 1000)
				{
					goto Block_126;
				}
			}
			GenVars.lAltarX = num93 - (int)(Main.tile[num93, num94].frameX / 18);
			GenVars.lAltarY = num94 - (int)(Main.tile[num93, num94].frameY / 18);
			goto IL_16CE;
			Block_126:
			num93 = rectangle3.X + num91;
			num94 = rectangle3.Y + num92;
			num93 += WorldGen.genRand.Next(-10, 11);
			num94 += WorldGen.genRand.Next(-10, 11);
			while (!Main.tile[num93, num94].active())
			{
				num94++;
			}
			Main.tile[num93 - 1, num94].active(true);
			Main.tile[num93 - 1, num94].slope(0);
			Main.tile[num93 - 1, num94].halfBrick(false);
			Main.tile[num93 - 1, num94].type = 226;
			Main.tile[num93, num94].active(true);
			Main.tile[num93, num94].slope(0);
			Main.tile[num93, num94].halfBrick(false);
			Main.tile[num93, num94].type = 226;
			Main.tile[num93 + 1, num94].active(true);
			Main.tile[num93 + 1, num94].slope(0);
			Main.tile[num93 + 1, num94].halfBrick(false);
			Main.tile[num93 + 1, num94].type = 226;
			num94 -= 2;
			num93--;
			for (int num95 = -1; num95 <= 3; num95++)
			{
				for (int num96 = -1; num96 <= 1; num96++)
				{
					x = num93 + num95;
					y = num94 + num96;
					Main.tile[x, y].active(false);
				}
			}
			GenVars.lAltarX = num93;
			GenVars.lAltarY = num94;
			for (int num97 = 0; num97 <= 2; num97++)
			{
				for (int num98 = 0; num98 <= 1; num98++)
				{
					x = num93 + num97;
					y = num94 + num98;
					Main.tile[x, y].active(true);
					Main.tile[x, y].type = 237;
					Main.tile[x, y].frameX = (short)(num97 * 18);
					Main.tile[x, y].frameY = (short)(num98 * 18);
				}
			}
			for (int num99 = 0; num99 <= 2; num99++)
			{
				for (int num100 = 0; num100 <= 1; num100++)
				{
					x = num93 + num99;
					y = num94 + num100;
					WorldGen.SquareTileFrame(x, y, true);
				}
			}
			IL_16CE:
			double num101 = (double)num2 * 1.1;
			num101 *= 1.0 + (double)WorldGen.genRand.Next(-25, 26) * 0.01;
			if (WorldGen.drunkWorldGen)
			{
				num101 *= 1.5;
			}
			int num102 = 0;
			while (num101 > 0.0)
			{
				num102++;
				int num103 = WorldGen.genRand.Next(num2);
				int num104 = WorldGen.genRand.Next(array[num103].X, array[num103].X + array[num103].Width);
				int num105 = WorldGen.genRand.Next(array[num103].Y, array[num103].Y + array[num103].Height);
				if (Main.tile[num104, num105].wall == 87 && !Main.tile[num104, num105].active())
				{
					bool flag5 = false;
					if (WorldGen.genRand.Next(2) == 0)
					{
						int num106 = 1;
						if (WorldGen.genRand.Next(2) == 0)
						{
							num106 = -1;
						}
						while (!Main.tile[num104, num105].active())
						{
							num105 += num106;
						}
						num105 -= num106;
						int num107 = WorldGen.genRand.Next(2);
						int num108 = WorldGen.genRand.Next(3, 10);
						bool flag6 = true;
						for (int num109 = num104 - num108; num109 < num104 + num108; num109++)
						{
							for (int num110 = num105 - num108; num110 < num105 + num108; num110++)
							{
								if (Main.tile[num109, num110].active() && (Main.tile[num109, num110].type == 10 || Main.tile[num109, num110].type == 237))
								{
									flag6 = false;
									break;
								}
							}
						}
						if (flag6)
						{
							for (int num111 = num104 - num108; num111 < num104 + num108; num111++)
							{
								for (int num112 = num105 - num108; num112 < num105 + num108; num112++)
								{
									if (WorldGen.SolidTile(num111, num112, false) && Main.tile[num111, num112].type != 232 && !WorldGen.SolidTile(num111, num112 - num106, false))
									{
										Main.tile[num111, num112].type = 232;
										flag5 = true;
										if (num107 == 0)
										{
											Main.tile[num111, num112 - 1].type = 232;
											Main.tile[num111, num112 - 1].active(true);
											if (WorldGen.drunkWorldGen)
											{
												Main.tile[num111, num112 - 2].type = 232;
												Main.tile[num111, num112 - 2].active(true);
											}
										}
										else
										{
											Main.tile[num111, num112 + 1].type = 232;
											Main.tile[num111, num112 + 1].active(true);
											if (WorldGen.drunkWorldGen)
											{
												Main.tile[num111, num112 + 2].type = 232;
												Main.tile[num111, num112 + 2].active(true);
											}
										}
										num107++;
										if (num107 > 1)
										{
											num107 = 0;
										}
									}
								}
							}
						}
						if (flag5)
						{
							num102 = 0;
							num101 -= 1.0;
						}
					}
					else
					{
						int num113 = 1;
						if (WorldGen.genRand.Next(2) == 0)
						{
							num113 = -1;
						}
						while (!Main.tile[num104, num105].active())
						{
							num104 += num113;
						}
						num104 -= num113;
						int num114 = WorldGen.genRand.Next(2);
						int num115 = WorldGen.genRand.Next(3, 10);
						bool flag7 = true;
						for (int num116 = num104 - num115; num116 < num104 + num115; num116++)
						{
							for (int num117 = num105 - num115; num117 < num105 + num115; num117++)
							{
								if (Main.tile[num116, num117].active() && Main.tile[num116, num117].type == 10)
								{
									flag7 = false;
									break;
								}
							}
						}
						if (flag7)
						{
							for (int num118 = num104 - num115; num118 < num104 + num115; num118++)
							{
								for (int num119 = num105 - num115; num119 < num105 + num115; num119++)
								{
									if (WorldGen.SolidTile(num118, num119, false) && Main.tile[num118, num119].type != 232 && !WorldGen.SolidTile(num118 - num113, num119, false))
									{
										Main.tile[num118, num119].type = 232;
										flag5 = true;
										if (num114 == 0)
										{
											Main.tile[num118 - 1, num119].type = 232;
											Main.tile[num118 - 1, num119].active(true);
											if (WorldGen.drunkWorldGen)
											{
												Main.tile[num118 - 2, num119].type = 232;
												Main.tile[num118 - 2, num119].active(true);
											}
										}
										else
										{
											Main.tile[num118 + 1, num119].type = 232;
											Main.tile[num118 + 1, num119].active(true);
											if (WorldGen.drunkWorldGen)
											{
												Main.tile[num118 - 2, num119].type = 232;
												Main.tile[num118 - 2, num119].active(true);
											}
										}
										num114++;
										if (num114 > 1)
										{
											num114 = 0;
										}
									}
								}
							}
						}
						if (flag5)
						{
							num102 = 0;
							num101 -= 1.0;
						}
					}
				}
				if (num102 > 1000)
				{
					num102 = 0;
					num101 -= 1.0;
				}
			}
			GenVars.tLeft = num52;
			GenVars.tRight = num53;
			GenVars.tTop = num54;
			GenVars.tBottom = num55;
			GenVars.tRooms = num2;
		}

		// Token: 0x06000EBA RID: 3770 RVA: 0x004199C0 File Offset: 0x00417BC0
		public static void templePart2()
		{
			int tLeft = GenVars.tLeft;
			int tRight = GenVars.tRight;
			int tTop = GenVars.tTop;
			int tBottom = GenVars.tBottom;
			int tRooms = GenVars.tRooms;
			double num = (double)tRooms * 1.9;
			num *= 1.0 + (double)WorldGen.genRand.Next(-15, 16) * 0.01;
			int num2 = 0;
			while (num > 0.0)
			{
				int num3 = WorldGen.genRand.Next(tLeft, tRight);
				int num4 = WorldGen.genRand.Next(tTop, tBottom);
				if (Main.tile[num3, num4].wall == 87 && !Main.tile[num3, num4].active())
				{
					if (WorldGen.mayanTrap(num3, num4))
					{
						num -= 1.0;
						num2 = 0;
					}
					else
					{
						num2++;
					}
				}
				else
				{
					num2++;
				}
				if (num2 > 100)
				{
					num2 = 0;
					num -= 1.0;
				}
			}
			Main.tileSolid[232] = false;
			double num5 = (double)tRooms * 0.35;
			num5 *= 1.0 + (double)WorldGen.genRand.Next(-15, 16) * 0.01;
			int contain = 1293;
			num2 = 0;
			while (num5 > 0.0)
			{
				int num6 = WorldGen.genRand.Next(tLeft, tRight);
				int num7 = WorldGen.genRand.Next(tTop, tBottom);
				if (Main.tile[num6, num7].wall == 87 && !Main.tile[num6, num7].active() && WorldGen.AddBuriedChest(num6, num7, contain, true, 16, false, 0))
				{
					num5 -= 1.0;
					num2 = 0;
				}
				num2++;
				if (num2 > 10000)
				{
					break;
				}
			}
			double num8 = (double)tRooms * 1.25;
			num8 *= 1.0 + (double)WorldGen.genRand.Next(-25, 36) * 0.01;
			num2 = 0;
			while (num8 > 0.0)
			{
				num2++;
				int num9 = WorldGen.genRand.Next(tLeft, tRight);
				int num10 = WorldGen.genRand.Next(tTop, tBottom);
				if (Main.tile[num9, num10].wall == 87 && !Main.tile[num9, num10].active())
				{
					int num11 = num9;
					int num12 = num10;
					while (!Main.tile[num11, num12].active())
					{
						num12++;
						if (num12 > tBottom)
						{
							break;
						}
					}
					num12--;
					if (num12 <= tBottom)
					{
						WorldGen.PlaceTile(num11, num12, 105, true, false, -1, WorldGen.genRand.Next(43, 46));
						if (Main.tile[num11, num12].type == 105)
						{
							num8 -= 1.0;
						}
					}
				}
			}
			double num13 = (double)tRooms * 1.35;
			num13 *= 1.0 + (double)WorldGen.genRand.Next(-15, 26) * 0.01;
			num2 = 0;
			while (num13 > 0.0)
			{
				num2++;
				int num14 = WorldGen.genRand.Next(tLeft, tRight);
				int num15 = WorldGen.genRand.Next(tTop, tBottom);
				if (Main.tile[num14, num15].wall == 87 && !Main.tile[num14, num15].active())
				{
					int num16 = num14;
					int num17 = num15;
					while (!Main.tile[num16, num17].active())
					{
						num17++;
						if (num17 > tBottom)
						{
							break;
						}
					}
					num17--;
					if (num17 <= tBottom)
					{
						int num18 = WorldGen.genRand.Next(3);
						if (num18 == 0)
						{
							WorldGen.PlaceTile(num16, num17, 18, true, false, -1, 10);
							if (Main.tile[num16, num17].type == 18)
							{
								num13 -= 1.0;
							}
						}
						else if (num18 == 1)
						{
							WorldGen.PlaceTile(num16, num17, 14, true, false, -1, 9);
							if (Main.tile[num16, num17].type == 14)
							{
								num13 -= 1.0;
							}
						}
						else if (num18 == 2)
						{
							WorldGen.PlaceTile(num16, num17, 15, true, false, -1, 12);
							if (Main.tile[num16, num17].type == 15)
							{
								num13 -= 1.0;
							}
						}
					}
				}
				if (num2 > 10000)
				{
					break;
				}
			}
			int i = 1;
			if (Main.maxTilesX > 4200)
			{
				i++;
			}
			if (Main.maxTilesX > 6400)
			{
				i += WorldGen.genRand.Next(2);
			}
			num2 = 0;
			while (i > 0)
			{
				num2++;
				int num19 = WorldGen.genRand.Next(tLeft, tRight);
				int num20 = WorldGen.genRand.Next(tTop, tBottom);
				if (Main.tile[num19, num20].wall == 87 && !Main.tile[num19, num20].active())
				{
					bool flag = false;
					for (int j = -70; j <= 70; j++)
					{
						for (int k = -70; k <= 70; k++)
						{
							int num21 = j + num19;
							int num22 = k + num20;
							if (WorldGen.InWorld(num21, num22, 5))
							{
								Tile tile = Main.tile[num21, num22];
								if (tile.active())
								{
									if (tile.type == 240)
									{
										flag = true;
										break;
									}
									if (j >= -4 && j <= 4 && k >= -4 && k <= 4 && tile.type == 226)
									{
										flag = true;
										break;
									}
								}
							}
						}
						if (flag)
						{
							break;
						}
					}
					if (flag)
					{
						continue;
					}
					if (WorldGen.PlaceTile(num19, num20, 240, true, false, -1, 88))
					{
						i--;
					}
				}
				if (num2 > 10000)
				{
					break;
				}
			}
			Main.tileSolid[232] = true;
		}

		// Token: 0x06000EBB RID: 3771 RVA: 0x00419FC8 File Offset: 0x004181C8
		public static bool nearPicture(int x, int y)
		{
			for (int i = x - 4; i <= x + 3; i++)
			{
				for (int j = y - 3; j <= y + 2; j++)
				{
					if (Main.tile[i, j].active())
					{
						return true;
					}
				}
			}
			return false;
		}

		// Token: 0x06000EBC RID: 3772 RVA: 0x0041A00C File Offset: 0x0041820C
		public static bool nearPicture2(int x, int y)
		{
			if (Main.tile[x, y].wall != 7 && Main.tile[x, y].wall != 8 && Main.tile[x, y].wall != 9)
			{
				for (int i = x - 8; i <= x + 8; i++)
				{
					for (int j = y - 5; j <= y + 5; j++)
					{
						if (Main.tile[i, j].active() && (Main.tile[i, j].type == 240 || Main.tile[i, j].type == 241 || Main.tile[i, j].type == 242))
						{
							return true;
						}
					}
				}
			}
			else
			{
				for (int k = x - 15; k <= x + 15; k++)
				{
					for (int l = y - 10; l <= y + 10; l++)
					{
						if (Main.tile[k, l].active() && (Main.tile[k, l].type == 240 || Main.tile[k, l].type == 241 || Main.tile[k, l].type == 242))
						{
							return true;
						}
					}
				}
			}
			return false;
		}

		// Token: 0x06000EBD RID: 3773 RVA: 0x0041A164 File Offset: 0x00418364
		private static void ShimmerCleanUp()
		{
			WorldGen.ShimmerRemoveWater();
			int num = 120;
			int num2 = 90;
			int num3 = (int)GenVars.shimmerPosition.X - num;
			int num4 = (int)GenVars.shimmerPosition.X + num;
			int num5 = (int)GenVars.shimmerPosition.Y - num;
			int num6 = (int)GenVars.shimmerPosition.Y + num;
			int num7 = num / 4;
			for (int i = num5; i <= num6; i++)
			{
				for (int j = num3; j <= num4; j++)
				{
					int num8 = (int)Math.Sqrt(Math.Pow(Math.Abs((double)j - GenVars.shimmerPosition.X), 2.0) + Math.Pow(Math.Abs((double)i - GenVars.shimmerPosition.Y), 2.0));
					if (num8 < num)
					{
						if (Main.tile[j, i].type == 22 || Main.tile[j, i].type == 204)
						{
							Main.tile[j, i].type = 1;
						}
						if (Main.tile[j, i].type == 51 || Main.tile[j, i].type == 56 || Main.tile[j, i].type == 229 || Main.tile[j, i].type == 230 || Main.tile[j, i].type == 659)
						{
							Main.tile[j, i].active(false);
						}
						if (TileID.Sets.Conversion.Moss[(int)Main.tile[j, i].type])
						{
							Main.tile[j, i].type = 1;
						}
						if (Main.tile[j, i].type == 184)
						{
							Main.tile[j, i].active(false);
						}
					}
					if ((double)i > GenVars.shimmerPosition.Y)
					{
						num8 = (int)Math.Sqrt(Math.Pow(Math.Abs((double)j - GenVars.shimmerPosition.X) * (1.0 + WorldGen.genRand.NextDouble() * 0.02), 2.0) + Math.Pow(Math.Abs((double)i - GenVars.shimmerPosition.Y) * 1.2 * (1.0 + WorldGen.genRand.NextDouble() * 0.02), 2.0));
					}
					else
					{
						num8 = (int)Math.Sqrt(Math.Pow(Math.Abs((double)j - GenVars.shimmerPosition.X) * (1.0 + WorldGen.genRand.NextDouble() * 0.02), 2.0) + Math.Pow(Math.Abs((double)i - GenVars.shimmerPosition.Y) * 1.4 * (1.0 + WorldGen.genRand.NextDouble() * 0.02), 2.0));
					}
					if (num8 < num2)
					{
						WorldGen.Convert(j, i, 0, 3);
					}
				}
			}
			int num9 = (int)GenVars.shimmerPosition.X;
			int num10 = (int)GenVars.shimmerPosition.Y;
			byte b = 127;
			Liquid.tilesIgnoreWater(true);
			while (Main.tile[num9, num10].liquid <= b || !Main.tile[num9, num10].shimmer())
			{
				while (!Main.tile[num9, num10].active())
				{
					Main.tile[num9, num10].liquid = b;
					Main.tile[num9, num10].shimmer(true);
					num9--;
				}
				num9 = (int)GenVars.shimmerPosition.X;
				while (!Main.tile[num9, num10].active())
				{
					Main.tile[num9, num10].liquid = b;
					Main.tile[num9, num10].shimmer(true);
					num9++;
				}
				num9 = (int)GenVars.shimmerPosition.X;
				num10++;
				b = byte.MaxValue;
				if (Main.tile[num9, num10].active())
				{
					break;
				}
			}
			if (WorldGen.tenthAnniversaryWorldGen)
			{
				int num11 = 170;
				int num12 = (int)GenVars.shimmerPosition.X - num11;
				while ((double)num12 <= GenVars.shimmerPosition.X + (double)num11)
				{
					for (int k = (int)GenVars.shimmerPosition.Y + 40; k < Main.maxTilesY - 330 - 100; k++)
					{
						if (WorldGen.InWorld(num12, k, 0))
						{
							if (Main.tile[num12, k].type == 375 || Main.tile[num12, k].type == 374 || Main.tile[num12, k].type == 373)
							{
								Main.tile[num12, k].active(false);
							}
							if (Main.tile[num12, k].liquid > 0 && !Main.tile[num12, k].shimmer())
							{
								WorldGen.Shimmerator(num12, k, false, false);
							}
						}
					}
					num12++;
				}
			}
			Liquid.tilesIgnoreWater(false);
			for (int l = 10; l < Main.maxTilesX - 10; l++)
			{
				for (int m = 10; m < Main.maxTilesY - 10; m++)
				{
					if (Main.tile[l, m].liquid > 0 && Main.tile[l, m].shimmer() && Main.tile[l, m].type == 5)
					{
						WorldGen.KillTile(l, m, false, false, false);
					}
				}
			}
		}

		// Token: 0x06000EBE RID: 3774 RVA: 0x0041A774 File Offset: 0x00418974
		public static void ShimmerRemoveWater()
		{
			if (!WorldGen.generatingWorld)
			{
				return;
			}
			int num = 150;
			int num2 = (int)GenVars.shimmerPosition.X - num;
			int num3 = (int)GenVars.shimmerPosition.X + num;
			int num4 = (int)GenVars.shimmerPosition.Y - num;
			int num5 = (int)GenVars.shimmerPosition.Y + num / 2;
			for (int i = num4; i <= num5; i++)
			{
				for (int j = num2; j <= num3; j++)
				{
					if (WorldGen.InWorld(j, i, 0) && (int)Math.Sqrt(Math.Pow((double)Math.Abs(j - (int)GenVars.shimmerPosition.X), 2.0) + Math.Pow((double)Math.Abs(i - (int)GenVars.shimmerPosition.Y), 2.0)) < num && !Main.tile[j, i].shimmer())
					{
						Main.tile[j, i].liquid = 0;
					}
				}
			}
		}

		// Token: 0x06000EBF RID: 3775 RVA: 0x0041A878 File Offset: 0x00418A78
		public static bool ShimmerMakeBiome(int X, int Y)
		{
			int num = WorldGen.genRand.Next(2);
			double num2 = 0.6;
			double num3 = 1.3;
			double num4 = 0.3;
			if (num == 0)
			{
				num2 = 0.55;
				num3 = 2.0;
			}
			num2 *= 1.05 - WorldGen.genRand.NextDouble() * 0.1;
			num3 *= 1.05 - WorldGen.genRand.NextDouble() * 0.1;
			num4 *= 1.0 - WorldGen.genRand.NextDouble() * 0.1;
			int num5 = WorldGen.genRand.Next(105, 125);
			int num6 = (int)((double)num5 * num4);
			int num7 = (int)((double)num5 * num2);
			int num8 = WorldGen.genRand.Next(9, 13);
			int num9 = X - num5;
			int num10 = X + num5;
			int num11 = Y - num5;
			int num12 = Y + num5;
			for (int i = num11; i <= num12; i++)
			{
				for (int j = num9; j <= num10; j++)
				{
					if (!WorldGen.InWorld(j, i, 50))
					{
						return false;
					}
					if (Main.tile[j, i].type == 203 || Main.tile[j, i].type == 25)
					{
						return false;
					}
				}
			}
			int num13 = Y;
			if (WorldGen.genRand.Next(4) == 0)
			{
				num13 = Y - WorldGen.genRand.Next(2);
			}
			int num14 = Y - num8;
			if (WorldGen.genRand.Next(4) == 0)
			{
				num14 = Y - num8 - WorldGen.genRand.Next(2);
			}
			for (int k = num11; k <= num12; k++)
			{
				for (int l = num9; l <= num10; l++)
				{
					Main.tile[l, k].liquid = 0;
					if (WorldGen.genRand.Next(4) == 0)
					{
						num13 = Y - WorldGen.genRand.Next(2);
					}
					if (WorldGen.genRand.Next(4) == 0)
					{
						num14 = Y - num8 + WorldGen.genRand.Next(2);
					}
					int num15;
					if (k > Y)
					{
						num15 = (int)Math.Sqrt(Math.Pow((double)Math.Abs(l - X) * (1.0 + WorldGen.genRand.NextDouble() * 0.02), 2.0) + Math.Pow((double)Math.Abs(k - Y) * 1.2 * (1.0 + WorldGen.genRand.NextDouble() * 0.02), 2.0));
					}
					else
					{
						num15 = (int)Math.Sqrt(Math.Pow((double)Math.Abs(l - X) * (1.0 + WorldGen.genRand.NextDouble() * 0.02), 2.0) + Math.Pow((double)Math.Abs(k - Y) * 1.4 * (1.0 + WorldGen.genRand.NextDouble() * 0.02), 2.0));
					}
					if (num15 < num5)
					{
						Main.tile[l, k].color(0);
						Main.tile[l, k].wallColor(0);
						Main.tile[l, k].slope(0);
						Main.tile[l, k].halfBrick(false);
						Main.tile[l, k].type = 1;
						if (l > num9 + 5 + WorldGen.genRand.Next(2) && l < num10 - 5 - WorldGen.genRand.Next(2))
						{
							Main.tile[l, k].active(true);
						}
						if ((double)num15 < (double)num5 * 0.9)
						{
							Main.tile[l, k].wall = 0;
						}
					}
					num15 = (int)Math.Sqrt(Math.Pow((double)Math.Abs(l - X) * (1.0 + WorldGen.genRand.NextDouble() * 0.02), 2.0) + Math.Pow((double)Math.Abs(k - Y) * num3 * (1.0 + WorldGen.genRand.NextDouble() * 0.02), 2.0));
					if (k > num14 && k < num13)
					{
						Main.tile[l, k].active(false);
					}
					if (k < num13 && num15 < (int)((double)num7 * (1.0 + WorldGen.genRand.NextDouble() * 0.02)))
					{
						Main.tile[l, k].active(false);
					}
					num15 = (int)Math.Sqrt(Math.Pow((double)Math.Abs(l - X) * (1.0 + WorldGen.genRand.NextDouble() * 0.02), 2.0) + Math.Pow((double)(Math.Abs(k - Y) * 2) * (1.0 + WorldGen.genRand.NextDouble() * 0.02), 2.0));
					if (k >= Y - 1 && num15 < (int)((double)num6 * (1.0 + WorldGen.genRand.NextDouble() * 0.025)))
					{
						if (k <= Y + 2 || num15 != num6 - 1 || WorldGen.genRand.Next(2) != 0)
						{
							Main.tile[l, k].active(false);
						}
						if (k >= Y)
						{
							if (k == Y)
							{
								Main.tile[l, k].liquid = 127;
							}
							else
							{
								Main.tile[l, k].liquid = byte.MaxValue;
							}
							Main.tile[l, k].shimmer(true);
						}
					}
				}
			}
			if (num == 0)
			{
				num9 = (int)((double)X - (double)num5 * num4) - WorldGen.genRand.Next(-15, 1) - 5;
				num10 = (int)((double)X + (double)num5 * num4) + WorldGen.genRand.Next(0, 16);
				int m = num9;
				int num16 = 0;
				while (m < num10)
				{
					int num17 = Y - 3;
					while (!Main.tile[m, num17].active())
					{
						num17--;
					}
					num17 -= 4;
					int n = WorldGen.genRand.Next(5, 10);
					int num18 = WorldGen.genRand.Next(15, 21);
					int num19 = m - n;
					while (n > 0)
					{
						for (num19 = m - n; num19 < m + n; num19++)
						{
							Main.tile[num19, num17].active(true);
							Main.tile[num19, num17].type = 1;
						}
						num16++;
						if (WorldGen.genRand.Next(3) < num16)
						{
							num16 = 0;
							n--;
							m += WorldGen.genRand.Next(-1, 2);
						}
						if (num18 <= 0)
						{
							n--;
						}
						num18--;
						num17++;
					}
					num19 -= WorldGen.genRand.Next(1, 3);
					Main.tile[num19, num17 - 2].active(true);
					Main.tile[num19, num17 - 2].type = 1;
					Main.tile[num19, num17 - 1].active(true);
					Main.tile[num19, num17 - 1].type = 1;
					Main.tile[num19, num17].active(true);
					Main.tile[num19, num17].type = 1;
					if (WorldGen.genRand.Next(2) == 0)
					{
						Main.tile[num19, num17 + 1].active(true);
						Main.tile[num19, num17 + 1].type = 1;
						WorldGen.PlaceTight(num19, num17 + 2, false);
					}
					else
					{
						WorldGen.PlaceTight(num19, num17 + 1, false);
					}
					m += WorldGen.genRand.Next(9, 14);
				}
			}
			WorldGen.ShimmerMakeBiomeOpening(-1, X - num5, Y, num8);
			WorldGen.ShimmerMakeBiomeOpening(1, X + num5, Y, num8);
			int num20 = 70;
			for (int num21 = 0; num21 < 500; num21++)
			{
				int num22 = WorldGen.genRand.Next(X - num20, X + num20);
				int num23 = WorldGen.genRand.Next(Y - 2, Y + 3);
				int num24 = WorldGen.genRand.Next(7);
				int treeTileType = 0;
				switch (num24)
				{
				case 0:
					treeTileType = 583;
					break;
				case 1:
					treeTileType = 584;
					break;
				case 2:
					treeTileType = 585;
					break;
				case 3:
					treeTileType = 586;
					break;
				case 4:
					treeTileType = 587;
					break;
				case 5:
					treeTileType = 588;
					break;
				case 6:
					treeTileType = 589;
					break;
				}
				if (WorldGen.SolidTile(num22 - 1, num23, false) && WorldGen.SolidTile(num22 + 1, num23, false))
				{
					WorldGen.TryGrowingTreeByType(treeTileType, num22, num23);
				}
			}
			return true;
		}

		// Token: 0x06000EC0 RID: 3776 RVA: 0x0041B19C File Offset: 0x0041939C
		private static void ShimmerMakeBiomeOpening(int direction, int X, int Y, int caveOpenningSize)
		{
			int num = X;
			caveOpenningSize--;
			bool flag;
			do
			{
				num += direction;
				flag = true;
				for (int i = Y - caveOpenningSize + 1; i < Y - 1; i++)
				{
					if (WorldGen.SolidTile(num, i, false))
					{
						flag = false;
					}
					if (WorldGen.SolidTile(num + direction, i, false))
					{
						flag = false;
					}
					if (WorldGen.SolidTile(num + direction * 2, i, false))
					{
						flag = false;
					}
					Main.tile[num, i].active(false);
				}
				for (int j = Y - caveOpenningSize; j < Y; j++)
				{
					Main.tile[num - direction, j].active(false);
				}
				if (WorldGen.SolidTile(num - direction, Y - caveOpenningSize - 1, false))
				{
					Main.tile[num - direction, Y - caveOpenningSize - 1].wall = 0;
				}
				if (WorldGen.SolidTile(num - direction, Y, false))
				{
					Main.tile[num - direction, Y].wall = 0;
				}
				if (WorldGen.genRand.Next(2) == 0)
				{
					Y += WorldGen.genRand.Next(-1, 2);
				}
			}
			while (!flag && num >= 50 && num <= Main.maxTilesX - 50 && Math.Abs(num - X) <= 100);
		}

		// Token: 0x06000EC1 RID: 3777 RVA: 0x0041B2B0 File Offset: 0x004194B0
		private static void Shimminate()
		{
			foreach (KeyValuePair<Point, bool> keyValuePair in WorldGen.CountedTiles)
			{
				Point key = keyValuePair.Key;
				Main.tile[key.X, key.Y].shimmer(true);
				Main.tile[key.X, key.Y].liquid = byte.MaxValue;
				if (Main.tile[key.X, key.Y].type == 5 || Main.tile[key.X, key.Y].type == 56 || (Main.tileCut[(int)Main.tile[key.X, key.Y].type] && Main.tile[key.X, key.Y].type != 28))
				{
					WorldGen.KillTile(key.X, key.Y, false, false, false);
				}
			}
		}

		// Token: 0x06000EC2 RID: 3778 RVA: 0x0041B3D8 File Offset: 0x004195D8
		public static void Shimmerator(int x, int y, bool jungle = false, bool lavaOk = false)
		{
			WorldGen.numTileCount = 0;
			WorldGen.CountedTiles.Clear();
			WorldGen.ShimmeratorNext(x, y);
			if (WorldGen.numTileCount > 0 && WorldGen.numTileCount < WorldGen.maxTileCount)
			{
				WorldGen.Shimminate();
			}
		}

		// Token: 0x06000EC3 RID: 3779 RVA: 0x0041B40C File Offset: 0x0041960C
		private static void ShimmeratorNext(int x, int y)
		{
			if (WorldGen.numTileCount >= WorldGen.maxTileCount)
			{
				return;
			}
			if (x <= 1 || x >= Main.maxTilesX - 1 || y <= 1 || y >= Main.maxTilesY - 1)
			{
				WorldGen.numTileCount = WorldGen.maxTileCount;
				return;
			}
			if (WorldGen.CountedTiles.ContainsKey(new Point(x, y)))
			{
				return;
			}
			if ((!WorldGen.SolidTile(x, y, false) && !Main.tile[x, y].shimmer() && Main.tile[x, y].liquid > 0) || (Main.tile[x, y].active() && Main.tile[x, y].type == 56))
			{
				WorldGen.CountedTiles.Add(new Point(x, y), true);
				WorldGen.numTileCount++;
				WorldGen.ShimmeratorNext(x - 1, y);
				WorldGen.ShimmeratorNext(x + 1, y);
				WorldGen.ShimmeratorNext(x, y - 1);
				WorldGen.ShimmeratorNext(x, y + 1);
			}
		}

		// Token: 0x06000EC4 RID: 3780 RVA: 0x0041B4FC File Offset: 0x004196FC
		public static void MakeDungeon(int x, int y)
		{
			GenVars.dEnteranceX = 0;
			GenVars.numDRooms = 0;
			GenVars.numDDoors = 0;
			GenVars.numDungeonPlatforms = 0;
			int num = WorldGen.genRand.Next(3);
			WorldGen.genRand.Next(3);
			if (WorldGen.remixWorldGen)
			{
				if (WorldGen.crimson)
				{
					num = 2;
				}
				else
				{
					num = 0;
				}
			}
			ushort num2;
			int num3;
			switch (num)
			{
			case 0:
				num2 = 41;
				num3 = 7;
				GenVars.crackedType = 481;
				goto IL_8A;
			case 1:
				num2 = 43;
				num3 = 8;
				GenVars.crackedType = 482;
				goto IL_8A;
			}
			num2 = 44;
			num3 = 9;
			GenVars.crackedType = 483;
			IL_8A:
			Main.tileSolid[(int)GenVars.crackedType] = false;
			GenVars.dungeonLake = true;
			GenVars.numDDoors = 0;
			GenVars.numDungeonPlatforms = 0;
			GenVars.numDRooms = 0;
			GenVars.dungeonX = x;
			GenVars.dungeonY = y;
			GenVars.dMinX = x;
			GenVars.dMaxX = x;
			GenVars.dMinY = y;
			GenVars.dMaxY = y;
			GenVars.dxStrength1 = (double)WorldGen.genRand.Next(25, 30);
			GenVars.dyStrength1 = (double)WorldGen.genRand.Next(20, 25);
			GenVars.dxStrength2 = (double)WorldGen.genRand.Next(35, 50);
			GenVars.dyStrength2 = (double)WorldGen.genRand.Next(10, 15);
			double num4 = (double)(Main.maxTilesX / 60);
			num4 += (double)WorldGen.genRand.Next(0, (int)(num4 / 3.0));
			double num5 = num4;
			int num6 = 5;
			WorldGen.DungeonRoom(GenVars.dungeonX, GenVars.dungeonY, num2, num3);
			while (num4 > 0.0)
			{
				if (GenVars.dungeonX < GenVars.dMinX)
				{
					GenVars.dMinX = GenVars.dungeonX;
				}
				if (GenVars.dungeonX > GenVars.dMaxX)
				{
					GenVars.dMaxX = GenVars.dungeonX;
				}
				if (GenVars.dungeonY > GenVars.dMaxY)
				{
					GenVars.dMaxY = GenVars.dungeonY;
				}
				num4 -= 1.0;
				Main.statusText = string.Concat(new object[]
				{
					Lang.gen[58].Value,
					" ",
					(int)((num5 - num4) / num5 * 60.0),
					"%"
				});
				if (num6 > 0)
				{
					num6--;
				}
				if (num6 == 0 & WorldGen.genRand.Next(3) == 0)
				{
					num6 = 5;
					if (WorldGen.genRand.Next(2) == 0)
					{
						int dungeonX = GenVars.dungeonX;
						int dungeonY = GenVars.dungeonY;
						WorldGen.DungeonHalls(GenVars.dungeonX, GenVars.dungeonY, num2, num3, false);
						if (WorldGen.genRand.Next(2) == 0)
						{
							WorldGen.DungeonHalls(GenVars.dungeonX, GenVars.dungeonY, num2, num3, false);
						}
						WorldGen.DungeonRoom(GenVars.dungeonX, GenVars.dungeonY, num2, num3);
						GenVars.dungeonX = dungeonX;
						GenVars.dungeonY = dungeonY;
					}
					else
					{
						WorldGen.DungeonRoom(GenVars.dungeonX, GenVars.dungeonY, num2, num3);
					}
				}
				else
				{
					WorldGen.DungeonHalls(GenVars.dungeonX, GenVars.dungeonY, num2, num3, false);
				}
			}
			WorldGen.DungeonRoom(GenVars.dungeonX, GenVars.dungeonY, num2, num3);
			int num7 = GenVars.dRoomX[0];
			int num8 = GenVars.dRoomY[0];
			for (int i = 0; i < GenVars.numDRooms; i++)
			{
				if (GenVars.dRoomY[i] < num8)
				{
					num7 = GenVars.dRoomX[i];
					num8 = GenVars.dRoomY[i];
				}
			}
			GenVars.dungeonX = num7;
			GenVars.dungeonY = num8;
			GenVars.dEnteranceX = num7;
			GenVars.dSurface = false;
			num6 = 5;
			if (WorldGen.drunkWorldGen)
			{
				GenVars.dSurface = true;
			}
			while (!GenVars.dSurface)
			{
				if (num6 > 0)
				{
					num6--;
				}
				if (num6 == 0 && WorldGen.genRand.Next(5) == 0 && (double)GenVars.dungeonY > Main.worldSurface + 100.0)
				{
					num6 = 10;
					int dungeonX2 = GenVars.dungeonX;
					int dungeonY2 = GenVars.dungeonY;
					WorldGen.DungeonHalls(GenVars.dungeonX, GenVars.dungeonY, num2, num3, true);
					WorldGen.DungeonRoom(GenVars.dungeonX, GenVars.dungeonY, num2, num3);
					GenVars.dungeonX = dungeonX2;
					GenVars.dungeonY = dungeonY2;
				}
				WorldGen.DungeonStairs(GenVars.dungeonX, GenVars.dungeonY, num2, num3);
			}
			WorldGen.DungeonEnt(GenVars.dungeonX, GenVars.dungeonY, num2, num3);
			Main.statusText = Lang.gen[58].Value + " 65%";
			int num9 = Main.maxTilesX * 2;
			for (int j = 0; j < num9; j++)
			{
				int i2 = WorldGen.genRand.Next(GenVars.dMinX, GenVars.dMaxX);
				int num10 = GenVars.dMinY;
				if ((double)num10 < Main.worldSurface)
				{
					num10 = (int)Main.worldSurface;
				}
				int j2 = WorldGen.genRand.Next(num10, GenVars.dMaxY);
				if (WorldGen.DungeonPitTrap(i2, j2, num2, num3))
				{
					j += 1500;
				}
				else
				{
					j++;
				}
			}
			for (int k = 0; k < GenVars.numDRooms; k++)
			{
				for (int l = GenVars.dRoomL[k]; l <= GenVars.dRoomR[k]; l++)
				{
					if (!Main.tile[l, GenVars.dRoomT[k] - 1].active())
					{
						GenVars.dungeonPlatformX[GenVars.numDungeonPlatforms] = l;
						GenVars.dungeonPlatformY[GenVars.numDungeonPlatforms] = GenVars.dRoomT[k] - 1;
						GenVars.numDungeonPlatforms++;
						break;
					}
				}
				for (int m = GenVars.dRoomL[k]; m <= GenVars.dRoomR[k]; m++)
				{
					if (!Main.tile[m, GenVars.dRoomB[k] + 1].active())
					{
						GenVars.dungeonPlatformX[GenVars.numDungeonPlatforms] = m;
						GenVars.dungeonPlatformY[GenVars.numDungeonPlatforms] = GenVars.dRoomB[k] + 1;
						GenVars.numDungeonPlatforms++;
						break;
					}
				}
				for (int n = GenVars.dRoomT[k]; n <= GenVars.dRoomB[k]; n++)
				{
					if (!Main.tile[GenVars.dRoomL[k] - 1, n].active())
					{
						GenVars.DDoorX[GenVars.numDDoors] = GenVars.dRoomL[k] - 1;
						GenVars.DDoorY[GenVars.numDDoors] = n;
						GenVars.DDoorPos[GenVars.numDDoors] = -1;
						GenVars.numDDoors++;
						break;
					}
				}
				for (int num11 = GenVars.dRoomT[k]; num11 <= GenVars.dRoomB[k]; num11++)
				{
					if (!Main.tile[GenVars.dRoomR[k] + 1, num11].active())
					{
						GenVars.DDoorX[GenVars.numDDoors] = GenVars.dRoomR[k] + 1;
						GenVars.DDoorY[GenVars.numDDoors] = num11;
						GenVars.DDoorPos[GenVars.numDDoors] = 1;
						GenVars.numDDoors++;
						break;
					}
				}
			}
			Main.statusText = Lang.gen[58].Value + " 70%";
			int num12 = 0;
			int num13 = 1000;
			int num14 = 0;
			int num15 = Main.maxTilesX / 100;
			if (WorldGen.getGoodWorldGen)
			{
				num15 *= 3;
			}
			while (num14 < num15)
			{
				num12++;
				int num16 = WorldGen.genRand.Next(GenVars.dMinX, GenVars.dMaxX);
				int num17 = WorldGen.genRand.Next((int)Main.worldSurface + 25, GenVars.dMaxY);
				if (WorldGen.drunkWorldGen)
				{
					num17 = WorldGen.genRand.Next(GenVars.dungeonY + 25, GenVars.dMaxY);
				}
				int num18 = num16;
				if ((int)Main.tile[num16, num17].wall == num3 && !Main.tile[num16, num17].active())
				{
					int num19 = 1;
					if (WorldGen.genRand.Next(2) == 0)
					{
						num19 = -1;
					}
					while (!Main.tile[num16, num17].active())
					{
						num17 += num19;
					}
					if (Main.tile[num16 - 1, num17].active() && Main.tile[num16 + 1, num17].active() && Main.tile[num16 - 1, num17].type != GenVars.crackedType && !Main.tile[num16 - 1, num17 - num19].active() && !Main.tile[num16 + 1, num17 - num19].active())
					{
						num14++;
						int num20 = WorldGen.genRand.Next(5, 13);
						while (Main.tile[num16 - 1, num17].active() && Main.tile[num16 - 1, num17].type != GenVars.crackedType && Main.tile[num16, num17 + num19].active() && Main.tile[num16, num17].active() && !Main.tile[num16, num17 - num19].active() && num20 > 0)
						{
							Main.tile[num16, num17].type = 48;
							if (!Main.tile[num16 - 1, num17 - num19].active() && !Main.tile[num16 + 1, num17 - num19].active())
							{
								Main.tile[num16, num17 - num19].Clear(TileDataType.Slope);
								Main.tile[num16, num17 - num19].type = 48;
								Main.tile[num16, num17 - num19].active(true);
								Main.tile[num16, num17 - num19 * 2].Clear(TileDataType.Slope);
								Main.tile[num16, num17 - num19 * 2].type = 48;
								Main.tile[num16, num17 - num19 * 2].active(true);
							}
							num16--;
							num20--;
						}
						num20 = WorldGen.genRand.Next(5, 13);
						num16 = num18 + 1;
						while (Main.tile[num16 + 1, num17].active() && Main.tile[num16 + 1, num17].type != GenVars.crackedType && Main.tile[num16, num17 + num19].active() && Main.tile[num16, num17].active() && !Main.tile[num16, num17 - num19].active() && num20 > 0)
						{
							Main.tile[num16, num17].type = 48;
							if (!Main.tile[num16 - 1, num17 - num19].active() && !Main.tile[num16 + 1, num17 - num19].active())
							{
								Main.tile[num16, num17 - num19].Clear(TileDataType.Slope);
								Main.tile[num16, num17 - num19].type = 48;
								Main.tile[num16, num17 - num19].active(true);
								Main.tile[num16, num17 - num19 * 2].Clear(TileDataType.Slope);
								Main.tile[num16, num17 - num19 * 2].type = 48;
								Main.tile[num16, num17 - num19 * 2].active(true);
							}
							num16++;
							num20--;
						}
					}
				}
				if (num12 > num13)
				{
					num12 = 0;
					num14++;
				}
			}
			num12 = 0;
			num13 = 1000;
			num14 = 0;
			Main.statusText = Lang.gen[58].Value + " 75%";
			while (num14 < num15)
			{
				num12++;
				int num21 = WorldGen.genRand.Next(GenVars.dMinX, GenVars.dMaxX);
				int num22 = WorldGen.genRand.Next((int)Main.worldSurface + 25, GenVars.dMaxY);
				int num23 = num22;
				if ((int)Main.tile[num21, num22].wall == num3 && !Main.tile[num21, num22].active())
				{
					int num24 = 1;
					if (WorldGen.genRand.Next(2) == 0)
					{
						num24 = -1;
					}
					while (num21 > 5 && num21 < Main.maxTilesX - 5 && !Main.tile[num21, num22].active())
					{
						num21 += num24;
					}
					if (Main.tile[num21, num22 - 1].active() && Main.tile[num21, num22 + 1].active() && Main.tile[num21, num22 - 1].type != GenVars.crackedType && !Main.tile[num21 - num24, num22 - 1].active() && !Main.tile[num21 - num24, num22 + 1].active())
					{
						num14++;
						int num25 = WorldGen.genRand.Next(5, 13);
						while (Main.tile[num21, num22 - 1].active() && Main.tile[num21, num22 - 1].type != GenVars.crackedType && Main.tile[num21 + num24, num22].active() && Main.tile[num21, num22].active() && !Main.tile[num21 - num24, num22].active() && num25 > 0)
						{
							Main.tile[num21, num22].type = 48;
							if (!Main.tile[num21 - num24, num22 - 1].active() && !Main.tile[num21 - num24, num22 + 1].active())
							{
								Main.tile[num21 - num24, num22].type = 48;
								Main.tile[num21 - num24, num22].active(true);
								Main.tile[num21 - num24, num22].Clear(TileDataType.Slope);
								Main.tile[num21 - num24 * 2, num22].type = 48;
								Main.tile[num21 - num24 * 2, num22].active(true);
								Main.tile[num21 - num24 * 2, num22].Clear(TileDataType.Slope);
							}
							num22--;
							num25--;
						}
						num25 = WorldGen.genRand.Next(5, 13);
						num22 = num23 + 1;
						while (Main.tile[num21, num22 + 1].active() && Main.tile[num21, num22 + 1].type != GenVars.crackedType && Main.tile[num21 + num24, num22].active() && Main.tile[num21, num22].active() && !Main.tile[num21 - num24, num22].active() && num25 > 0)
						{
							Main.tile[num21, num22].type = 48;
							if (!Main.tile[num21 - num24, num22 - 1].active() && !Main.tile[num21 - num24, num22 + 1].active())
							{
								Main.tile[num21 - num24, num22].type = 48;
								Main.tile[num21 - num24, num22].active(true);
								Main.tile[num21 - num24, num22].Clear(TileDataType.Slope);
								Main.tile[num21 - num24 * 2, num22].type = 48;
								Main.tile[num21 - num24 * 2, num22].active(true);
								Main.tile[num21 - num24 * 2, num22].Clear(TileDataType.Slope);
							}
							num22++;
							num25--;
						}
					}
				}
				if (num12 > num13)
				{
					num12 = 0;
					num14++;
				}
			}
			Main.statusText = Lang.gen[58].Value + " 80%";
			for (int num26 = 0; num26 < GenVars.numDDoors; num26++)
			{
				int num27 = GenVars.DDoorX[num26] - 10;
				int num28 = GenVars.DDoorX[num26] + 10;
				int num29 = 100;
				int num30 = 0;
				for (int num31 = num27; num31 < num28; num31++)
				{
					bool flag = true;
					int num32 = GenVars.DDoorY[num26];
					while (num32 > 10 && !Main.tile[num31, num32].active())
					{
						num32--;
					}
					if (!Main.tileDungeon[(int)Main.tile[num31, num32].type])
					{
						flag = false;
					}
					int num33 = num32;
					num32 = GenVars.DDoorY[num26];
					while (!Main.tile[num31, num32].active())
					{
						num32++;
					}
					if (!Main.tileDungeon[(int)Main.tile[num31, num32].type])
					{
						flag = false;
					}
					int num34 = num32;
					if (num34 - num33 >= 3)
					{
						int num35 = num31 - 20;
						int num36 = num31 + 20;
						int num37 = num34 - 10;
						int num38 = num34 + 10;
						for (int num39 = num35; num39 < num36; num39++)
						{
							for (int num40 = num37; num40 < num38; num40++)
							{
								if (Main.tile[num39, num40].active() && Main.tile[num39, num40].type == 10)
								{
									flag = false;
									break;
								}
							}
						}
						if (flag)
						{
							for (int num41 = num34 - 3; num41 < num34; num41++)
							{
								for (int num42 = num31 - 3; num42 <= num31 + 3; num42++)
								{
									if (Main.tile[num42, num41].active())
									{
										flag = false;
										break;
									}
								}
							}
						}
						if (flag && num34 - num33 < 20)
						{
							bool flag2 = false;
							if (GenVars.DDoorPos[num26] == 0 && num34 - num33 < num29)
							{
								flag2 = true;
							}
							if (GenVars.DDoorPos[num26] == -1 && num31 > num30)
							{
								flag2 = true;
							}
							if (GenVars.DDoorPos[num26] == 1 && (num31 < num30 || num30 == 0))
							{
								flag2 = true;
							}
							if (flag2)
							{
								num30 = num31;
								num29 = num34 - num33;
							}
						}
					}
				}
				if (num29 < 20)
				{
					int num43 = num30;
					int num44 = GenVars.DDoorY[num26];
					int num45 = num44;
					while (!Main.tile[num43, num44].active())
					{
						Main.tile[num43, num44].active(false);
						num44++;
					}
					while (!Main.tile[num43, num45].active())
					{
						num45--;
					}
					num44--;
					num45++;
					for (int num46 = num45; num46 < num44 - 2; num46++)
					{
						Main.tile[num43, num46].Clear(TileDataType.Slope);
						Main.tile[num43, num46].active(true);
						Main.tile[num43, num46].type = num2;
						if (Main.tile[num43 - 1, num46].type == num2)
						{
							Main.tile[num43 - 1, num46].active(false);
							Main.tile[num43 - 1, num46].ClearEverything();
							Main.tile[num43 - 1, num46].wall = (ushort)num3;
						}
						if (Main.tile[num43 - 2, num46].type == num2)
						{
							Main.tile[num43 - 2, num46].active(false);
							Main.tile[num43 - 2, num46].ClearEverything();
							Main.tile[num43 - 2, num46].wall = (ushort)num3;
						}
						if (Main.tile[num43 + 1, num46].type == num2)
						{
							Main.tile[num43 + 1, num46].active(false);
							Main.tile[num43 + 1, num46].ClearEverything();
							Main.tile[num43 + 1, num46].wall = (ushort)num3;
						}
						if (Main.tile[num43 + 2, num46].type == num2)
						{
							Main.tile[num43 + 2, num46].active(false);
							Main.tile[num43 + 2, num46].ClearEverything();
							Main.tile[num43 + 2, num46].wall = (ushort)num3;
						}
					}
					int style = 13;
					if (WorldGen.genRand.Next(3) == 0)
					{
						if (num3 == 7)
						{
							style = 16;
						}
						else if (num3 == 8)
						{
							style = 17;
						}
						else if (num3 == 9)
						{
							style = 18;
						}
					}
					WorldGen.PlaceTile(num43, num44, 10, true, false, -1, style);
					num43--;
					int num47 = num44 - 3;
					while (!Main.tile[num43, num47].active())
					{
						num47--;
					}
					if (num44 - num47 < num44 - num45 + 5 && Main.tileDungeon[(int)Main.tile[num43, num47].type])
					{
						for (int num48 = num44 - 4 - WorldGen.genRand.Next(3); num48 > num47; num48--)
						{
							Main.tile[num43, num48].Clear(TileDataType.Slope);
							Main.tile[num43, num48].active(true);
							Main.tile[num43, num48].type = num2;
							if (Main.tile[num43 - 1, num48].type == num2)
							{
								Main.tile[num43 - 1, num48].active(false);
								Main.tile[num43 - 1, num48].ClearEverything();
								Main.tile[num43 - 1, num48].wall = (ushort)num3;
							}
							if (Main.tile[num43 - 2, num48].type == num2)
							{
								Main.tile[num43 - 2, num48].active(false);
								Main.tile[num43 - 2, num48].ClearEverything();
								Main.tile[num43 - 2, num48].wall = (ushort)num3;
							}
						}
					}
					num43 += 2;
					num47 = num44 - 3;
					while (!Main.tile[num43, num47].active())
					{
						num47--;
					}
					if (num44 - num47 < num44 - num45 + 5 && Main.tileDungeon[(int)Main.tile[num43, num47].type])
					{
						for (int num49 = num44 - 4 - WorldGen.genRand.Next(3); num49 > num47; num49--)
						{
							Main.tile[num43, num49].active(true);
							Main.tile[num43, num49].Clear(TileDataType.Slope);
							Main.tile[num43, num49].type = num2;
							if (Main.tile[num43 + 1, num49].type == num2)
							{
								Main.tile[num43 + 1, num49].active(false);
								Main.tile[num43 + 1, num49].ClearEverything();
								Main.tile[num43 + 1, num49].wall = (ushort)num3;
							}
							if (Main.tile[num43 + 2, num49].type == num2)
							{
								Main.tile[num43 + 2, num49].active(false);
								Main.tile[num43 + 2, num49].ClearEverything();
								Main.tile[num43 + 2, num49].wall = (ushort)num3;
							}
						}
					}
					num44++;
					num43--;
					for (int num50 = num44 - 8; num50 < num44; num50++)
					{
						if (Main.tile[num43 + 2, num50].type == num2)
						{
							Main.tile[num43 + 2, num50].active(false);
							Main.tile[num43 + 2, num50].ClearEverything();
							Main.tile[num43 + 2, num50].wall = (ushort)num3;
						}
						if (Main.tile[num43 + 3, num50].type == num2)
						{
							Main.tile[num43 + 3, num50].active(false);
							Main.tile[num43 + 3, num50].ClearEverything();
							Main.tile[num43 + 3, num50].wall = (ushort)num3;
						}
						if (Main.tile[num43 - 2, num50].type == num2)
						{
							Main.tile[num43 - 2, num50].active(false);
							Main.tile[num43 - 2, num50].ClearEverything();
							Main.tile[num43 - 2, num50].wall = (ushort)num3;
						}
						if (Main.tile[num43 - 3, num50].type == num2)
						{
							Main.tile[num43 - 3, num50].active(false);
							Main.tile[num43 - 3, num50].ClearEverything();
							Main.tile[num43 - 3, num50].wall = (ushort)num3;
						}
					}
					Main.tile[num43 - 1, num44].active(true);
					Main.tile[num43 - 1, num44].type = num2;
					Main.tile[num43 - 1, num44].Clear(TileDataType.Slope);
					Main.tile[num43 + 1, num44].active(true);
					Main.tile[num43 + 1, num44].type = num2;
					Main.tile[num43 + 1, num44].Clear(TileDataType.Slope);
				}
			}
			int[] array = new int[3];
			if (num3 == 7)
			{
				array[0] = 7;
				array[1] = 94;
				array[2] = 95;
			}
			else if (num3 == 9)
			{
				array[0] = 9;
				array[1] = 96;
				array[2] = 97;
			}
			else
			{
				array[0] = 8;
				array[1] = 98;
				array[2] = 99;
			}
			for (int num51 = 0; num51 < 5; num51++)
			{
				for (int num52 = 0; num52 < 3; num52++)
				{
					int num53 = WorldGen.genRand.Next(40, 240);
					int num54 = WorldGen.genRand.Next(GenVars.dMinX, GenVars.dMaxX);
					int num55 = WorldGen.genRand.Next(GenVars.dMinY, GenVars.dMaxY);
					for (int num56 = num54 - num53; num56 < num54 + num53; num56++)
					{
						for (int num57 = num55 - num53; num57 < num55 + num53; num57++)
						{
							if ((double)num57 > Main.worldSurface)
							{
								double num58 = (double)Math.Abs(num54 - num56);
								double num59 = (double)Math.Abs(num55 - num57);
								if (Math.Sqrt(num58 * num58 + num59 * num59) < (double)num53 * 0.4 && Main.wallDungeon[(int)Main.tile[num56, num57].wall])
								{
									WorldGen.Spread.WallDungeon(num56, num57, array[num52]);
								}
							}
						}
					}
				}
			}
			Main.statusText = Lang.gen[58].Value + " 85%";
			for (int num60 = 0; num60 < GenVars.numDungeonPlatforms; num60++)
			{
				int num61 = GenVars.dungeonPlatformX[num60];
				int num62 = GenVars.dungeonPlatformY[num60];
				int num63 = Main.maxTilesX;
				int num64 = 10;
				if ((double)num62 < Main.worldSurface + 50.0)
				{
					num64 = 20;
				}
				for (int num65 = num62 - 5; num65 <= num62 + 5; num65++)
				{
					int num66 = num61;
					int num67 = num61;
					bool flag3 = false;
					if (!Main.tile[num66, num65].active())
					{
						while (!Main.tile[num66, num65].active())
						{
							num66--;
							if (!Main.tileDungeon[(int)Main.tile[num66, num65].type] || num66 == 0)
							{
								flag3 = true;
								IL_1BAB:
								while (!Main.tile[num67, num65].active())
								{
									num67++;
									if (!Main.tileDungeon[(int)Main.tile[num67, num65].type] || num67 == Main.maxTilesX - 1)
									{
										flag3 = true;
										break;
									}
								}
								goto IL_1BC0;
							}
						}
						goto IL_1BAB;
					}
					flag3 = true;
					IL_1BC0:
					if (!flag3 && num67 - num66 <= num64)
					{
						bool flag4 = true;
						int num68 = num61 - num64 / 2 - 2;
						int num69 = num61 + num64 / 2 + 2;
						int num70 = num65 - 5;
						int num71 = num65 + 5;
						for (int num72 = num68; num72 <= num69; num72++)
						{
							for (int num73 = num70; num73 <= num71; num73++)
							{
								if (Main.tile[num72, num73].active() && Main.tile[num72, num73].type == 19)
								{
									flag4 = false;
									break;
								}
							}
						}
						for (int num74 = num65 + 3; num74 >= num65 - 5; num74--)
						{
							if (Main.tile[num61, num74].active())
							{
								flag4 = false;
								break;
							}
						}
						if (flag4)
						{
							num63 = num65;
							break;
						}
					}
				}
				if (num63 > num62 - 10 && num63 < num62 + 10)
				{
					int num75 = num61;
					int num76 = num63;
					int num77 = num61 + 1;
					while (!Main.tile[num75, num76].active())
					{
						Main.tile[num75, num76].active(true);
						Main.tile[num75, num76].type = 19;
						Main.tile[num75, num76].Clear(TileDataType.Slope);
						if (num3 == 7)
						{
							Main.tile[num75, num76].frameY = 108;
						}
						else if (num3 == 8)
						{
							Main.tile[num75, num76].frameY = 144;
						}
						else
						{
							Main.tile[num75, num76].frameY = 126;
						}
						WorldGen.TileFrame(num75, num76, false, false);
						num75--;
					}
					while (!Main.tile[num77, num76].active())
					{
						Main.tile[num77, num76].active(true);
						Main.tile[num77, num76].type = 19;
						Main.tile[num77, num76].Clear(TileDataType.Slope);
						if (num3 == 7)
						{
							Main.tile[num77, num76].frameY = 108;
						}
						else if (num3 == 8)
						{
							Main.tile[num77, num76].frameY = 144;
						}
						else
						{
							Main.tile[num77, num76].frameY = 126;
						}
						WorldGen.TileFrame(num77, num76, false, false);
						num77++;
					}
				}
			}
			int num78 = 5;
			if (WorldGen.drunkWorldGen)
			{
				num78 = 6;
			}
			for (int num79 = 0; num79 < num78; num79++)
			{
				bool flag5 = false;
				while (!flag5)
				{
					int num80 = WorldGen.genRand.Next(GenVars.dMinX, GenVars.dMaxX);
					int num81 = WorldGen.genRand.Next((int)Main.worldSurface, GenVars.dMaxY);
					if (Main.wallDungeon[(int)Main.tile[num80, num81].wall] && !Main.tile[num80, num81].active())
					{
						ushort chestTileType = 21;
						int contain = 0;
						int style2 = 0;
						if (num79 == 0)
						{
							style2 = 23;
							contain = 1156;
						}
						else if (num79 == 1)
						{
							if (!WorldGen.crimson)
							{
								style2 = 24;
								contain = 1571;
							}
							else
							{
								style2 = 25;
								contain = 1569;
							}
						}
						else if (num79 == 5)
						{
							if (WorldGen.crimson)
							{
								style2 = 24;
								contain = 1571;
							}
							else
							{
								style2 = 25;
								contain = 1569;
							}
						}
						else if (num79 == 2)
						{
							style2 = 26;
							contain = 1260;
						}
						else if (num79 == 3)
						{
							style2 = 27;
							contain = 1572;
						}
						else if (num79 == 4)
						{
							chestTileType = 467;
							style2 = 13;
							contain = 4607;
						}
						flag5 = WorldGen.AddBuriedChest(num80, num81, contain, false, style2, false, chestTileType);
					}
				}
			}
			int[] array2 = new int[3];
			array2[0] = WorldGen.genRand.Next(9, 13);
			array2[1] = WorldGen.genRand.Next(9, 13);
			while (array2[1] == array2[0])
			{
				array2[1] = WorldGen.genRand.Next(9, 13);
			}
			array2[2] = WorldGen.genRand.Next(9, 13);
			while (array2[2] == array2[0] || array2[2] == array2[1])
			{
				array2[2] = WorldGen.genRand.Next(9, 13);
			}
			Main.statusText = Lang.gen[58].Value + " 90%";
			num12 = 0;
			num13 = 1000;
			num14 = 0;
			while (num14 < Main.maxTilesX / 20)
			{
				num12++;
				int num82 = WorldGen.genRand.Next(GenVars.dMinX, GenVars.dMaxX);
				int num83 = WorldGen.genRand.Next(GenVars.dMinY, GenVars.dMaxY);
				bool flag6 = true;
				if (Main.wallDungeon[(int)Main.tile[num82, num83].wall] && !Main.tile[num82, num83].active())
				{
					int num84 = 1;
					if (WorldGen.genRand.Next(2) == 0)
					{
						num84 = -1;
					}
					while (flag6 && !Main.tile[num82, num83].active())
					{
						num82 -= num84;
						if (num82 < 5 || num82 > Main.maxTilesX - 5)
						{
							flag6 = false;
						}
						else if (Main.tile[num82, num83].active() && !Main.tileDungeon[(int)Main.tile[num82, num83].type])
						{
							flag6 = false;
						}
					}
					if (flag6 && Main.tile[num82, num83].active() && Main.tileDungeon[(int)Main.tile[num82, num83].type] && Main.tile[num82, num83 - 1].active() && Main.tileDungeon[(int)Main.tile[num82, num83 - 1].type] && Main.tile[num82, num83 + 1].active() && Main.tileDungeon[(int)Main.tile[num82, num83 + 1].type])
					{
						num82 += num84;
						for (int num85 = num82 - 3; num85 <= num82 + 3; num85++)
						{
							for (int num86 = num83 - 3; num86 <= num83 + 3; num86++)
							{
								if (Main.tile[num85, num86].active() && Main.tile[num85, num86].type == 19)
								{
									flag6 = false;
									break;
								}
							}
						}
						if (flag6 && (!Main.tile[num82, num83 - 1].active() & !Main.tile[num82, num83 - 2].active() & !Main.tile[num82, num83 - 3].active()))
						{
							int num87 = num82;
							int num88 = num82;
							while (num87 > GenVars.dMinX && num87 < GenVars.dMaxX && !Main.tile[num87, num83].active() && !Main.tile[num87, num83 - 1].active() && !Main.tile[num87, num83 + 1].active())
							{
								num87 += num84;
							}
							num87 = Math.Abs(num82 - num87);
							bool flag7 = false;
							if (WorldGen.genRand.Next(2) == 0)
							{
								flag7 = true;
							}
							if (num87 > 5)
							{
								for (int num89 = WorldGen.genRand.Next(1, 4); num89 > 0; num89--)
								{
									Main.tile[num82, num83].active(true);
									Main.tile[num82, num83].Clear(TileDataType.Slope);
									Main.tile[num82, num83].type = 19;
									if ((int)Main.tile[num82, num83].wall == array[0])
									{
										Main.tile[num82, num83].frameY = (short)(18 * array2[0]);
									}
									else if ((int)Main.tile[num82, num83].wall == array[1])
									{
										Main.tile[num82, num83].frameY = (short)(18 * array2[1]);
									}
									else
									{
										Main.tile[num82, num83].frameY = (short)(18 * array2[2]);
									}
									WorldGen.TileFrame(num82, num83, false, false);
									if (flag7)
									{
										WorldGen.PlaceTile(num82, num83 - 1, 50, true, false, -1, 0);
										if (WorldGen.genRand.Next(50) == 0 && (double)num83 > (Main.worldSurface + Main.rockLayer) / 2.0 && Main.tile[num82, num83 - 1].type == 50)
										{
											Main.tile[num82, num83 - 1].frameX = 90;
										}
									}
									num82 += num84;
								}
								num12 = 0;
								num14++;
								if (!flag7 && WorldGen.genRand.Next(2) == 0)
								{
									num82 = num88;
									num83--;
									int num90 = 0;
									if (WorldGen.genRand.Next(4) == 0)
									{
										num90 = 1;
									}
									if (num90 == 0)
									{
										num90 = 13;
									}
									else if (num90 == 1)
									{
										num90 = 49;
									}
									WorldGen.PlaceTile(num82, num83, num90, true, false, -1, 0);
									if (Main.tile[num82, num83].type == 13)
									{
										if (WorldGen.genRand.Next(2) == 0)
										{
											Main.tile[num82, num83].frameX = 18;
										}
										else
										{
											Main.tile[num82, num83].frameX = 36;
										}
									}
								}
							}
						}
					}
				}
				if (num12 > num13)
				{
					num12 = 0;
					num14++;
				}
			}
			Main.statusText = Lang.gen[58].Value + " 95%";
			int num91 = 1;
			for (int num92 = 0; num92 < GenVars.numDRooms; num92++)
			{
				int num93 = 0;
				while (num93 < 1000)
				{
					int num94 = (int)((double)GenVars.dRoomSize[num92] * 0.4);
					int i3 = GenVars.dRoomX[num92] + WorldGen.genRand.Next(-num94, num94 + 1);
					int num95 = GenVars.dRoomY[num92] + WorldGen.genRand.Next(-num94, num94 + 1);
					int style3 = 2;
					if (num91 == 1)
					{
						num91++;
					}
					int num96;
					if (num91 == 2)
					{
						num96 = 155;
					}
					else if (num91 == 3)
					{
						num96 = 156;
					}
					else if (num91 == 4)
					{
						if (WorldGen.remixWorldGen)
						{
							num96 = 2623;
						}
						else
						{
							num96 = 157;
						}
					}
					else if (num91 == 5)
					{
						num96 = 163;
					}
					else if (num91 == 6)
					{
						num96 = 113;
					}
					else if (num91 == 7)
					{
						num96 = 3317;
					}
					else if (num91 == 8)
					{
						num96 = 327;
						style3 = 0;
					}
					else
					{
						num96 = 164;
						num91 = 0;
					}
					if ((double)num95 < Main.worldSurface + 50.0)
					{
						num96 = 327;
						style3 = 0;
					}
					if (num96 == 0 && WorldGen.genRand.Next(2) == 0)
					{
						num93 = 1000;
					}
					else
					{
						if (WorldGen.AddBuriedChest(i3, num95, num96, false, style3, false, 0))
						{
							num93 += 1000;
							num91++;
						}
						num93++;
					}
				}
			}
			GenVars.dMinX -= 25;
			GenVars.dMaxX += 25;
			GenVars.dMinY -= 25;
			GenVars.dMaxY += 25;
			if (GenVars.dMinX < 0)
			{
				GenVars.dMinX = 0;
			}
			if (GenVars.dMaxX > Main.maxTilesX)
			{
				GenVars.dMaxX = Main.maxTilesX;
			}
			if (GenVars.dMinY < 0)
			{
				GenVars.dMinY = 0;
			}
			if (GenVars.dMaxY > Main.maxTilesY)
			{
				GenVars.dMaxY = Main.maxTilesY;
			}
			num12 = 0;
			num13 = 1000;
			num14 = 0;
			WorldGen.MakeDungeon_Lights(num2, ref num12, num13, ref num14, array);
			num12 = 0;
			num13 = 1000;
			num14 = 0;
			WorldGen.MakeDungeon_Traps(ref num12, num13, ref num14);
			double count = WorldGen.MakeDungeon_GroundFurniture(num3);
			count = WorldGen.MakeDungeon_Pictures(array, count);
			count = WorldGen.MakeDungeon_Banners(array, count);
		}

		// Token: 0x06000EC5 RID: 3781 RVA: 0x0041DCBC File Offset: 0x0041BEBC
		private static void MakeDungeon_Traps(ref int failCount, int failMax, ref int numAdd)
		{
			while (numAdd < Main.maxTilesX / 500)
			{
				failCount++;
				int num = WorldGen.genRand.Next(GenVars.dMinX, GenVars.dMaxX);
				int num2 = WorldGen.genRand.Next(GenVars.dMinY, GenVars.dMaxY);
				while ((double)num2 < Main.worldSurface)
				{
					num2 = WorldGen.genRand.Next(GenVars.dMinY, GenVars.dMaxY);
				}
				if (Main.wallDungeon[(int)Main.tile[num, num2].wall] && WorldGen.placeTrap(num, num2, 0))
				{
					failCount = failMax;
				}
				if (failCount > failMax)
				{
					numAdd++;
					failCount = 0;
				}
			}
		}

		// Token: 0x06000EC6 RID: 3782 RVA: 0x0041DD64 File Offset: 0x0041BF64
		private static void MakeDungeon_Lights(ushort tileType, ref int failCount, int failMax, ref int numAdd, int[] roomWall)
		{
			int[] array = new int[3];
			array[0] = WorldGen.genRand.Next(7);
			array[1] = WorldGen.genRand.Next(7);
			while (array[1] == array[0])
			{
				array[1] = WorldGen.genRand.Next(7);
			}
			array[2] = WorldGen.genRand.Next(7);
			while (array[2] == array[0] || array[2] == array[1])
			{
				array[2] = WorldGen.genRand.Next(7);
			}
			while (numAdd < Main.maxTilesX / 150)
			{
				failCount++;
				int num = WorldGen.genRand.Next(GenVars.dMinX, GenVars.dMaxX);
				int num2 = WorldGen.genRand.Next(GenVars.dMinY, GenVars.dMaxY);
				if (Main.wallDungeon[(int)Main.tile[num, num2].wall])
				{
					int i = num2;
					while (i > GenVars.dMinY)
					{
						if (Main.tile[num, i - 1].active() && Main.tile[num, i - 1].type == tileType)
						{
							bool flag = false;
							for (int j = num - 15; j < num + 15; j++)
							{
								for (int k = i - 15; k < i + 15; k++)
								{
									if (j > 0 && j < Main.maxTilesX && k > 0 && k < Main.maxTilesY && (Main.tile[j, k].type == 42 || Main.tile[j, k].type == 34))
									{
										flag = true;
										break;
									}
								}
							}
							if (Main.tile[num - 1, i].active() || Main.tile[num + 1, i].active() || Main.tile[num - 1, i + 1].active() || Main.tile[num + 1, i + 1].active() || Main.tile[num, i + 2].active())
							{
								flag = true;
							}
							if (flag)
							{
								break;
							}
							bool flag2 = false;
							if (!flag2 && WorldGen.genRand.Next(7) == 0)
							{
								int style = 27;
								switch (roomWall[0])
								{
								case 7:
									style = 27;
									break;
								case 8:
									style = 28;
									break;
								case 9:
									style = 29;
									break;
								}
								bool flag3 = false;
								for (int l = 0; l < 15; l++)
								{
									if (WorldGen.SolidTile(num, i + l, false))
									{
										flag3 = true;
										break;
									}
								}
								if (!flag3)
								{
									WorldGen.PlaceChand(num, i, 34, style);
								}
								if (Main.tile[num, i].type == 34)
								{
									flag2 = true;
									failCount = 0;
									numAdd++;
									for (int m = 0; m < 1000; m++)
									{
										int num3 = num + WorldGen.genRand.Next(-12, 13);
										int num4 = i + WorldGen.genRand.Next(3, 21);
										if (!Main.tile[num3, num4].active() && !Main.tile[num3, num4 + 1].active() && Main.tileDungeon[(int)Main.tile[num3 - 1, num4].type] && Main.tileDungeon[(int)Main.tile[num3 + 1, num4].type] && Collision.CanHit(new Point(num3 * 16, num4 * 16), 16, 16, new Point(num * 16, i * 16 + 1), 16, 16))
										{
											if (((WorldGen.SolidTile(num3 - 1, num4, false) && Main.tile[num3 - 1, num4].type != 10) || (WorldGen.SolidTile(num3 + 1, num4, false) && Main.tile[num3 + 1, num4].type != 10) || WorldGen.SolidTile(num3, num4 + 1, false)) && Main.wallDungeon[(int)Main.tile[num3, num4].wall] && (Main.tileDungeon[(int)Main.tile[num3 - 1, num4].type] || Main.tileDungeon[(int)Main.tile[num3 + 1, num4].type]))
											{
												WorldGen.PlaceTile(num3, num4, 136, true, false, -1, 0);
											}
											if (Main.tile[num3, num4].active())
											{
												while (num3 != num || num4 != i)
												{
													Main.tile[num3, num4].wire(true);
													if (num3 > num)
													{
														num3--;
													}
													if (num3 < num)
													{
														num3++;
													}
													Main.tile[num3, num4].wire(true);
													if (num4 > i)
													{
														num4--;
													}
													if (num4 < i)
													{
														num4++;
													}
													Main.tile[num3, num4].wire(true);
												}
												if (WorldGen.genRand.Next(3) > 0)
												{
													Main.tile[num, i].frameX = 18;
													Main.tile[num, i + 1].frameX = 18;
													break;
												}
												break;
											}
										}
									}
								}
							}
							if (flag2)
							{
								break;
							}
							int style2 = array[0];
							if ((int)Main.tile[num, i].wall == roomWall[1])
							{
								style2 = array[1];
							}
							if ((int)Main.tile[num, i].wall == roomWall[2])
							{
								style2 = array[2];
							}
							WorldGen.Place1x2Top(num, i, 42, style2);
							if (Main.tile[num, i].type == 42)
							{
								failCount = 0;
								numAdd++;
								for (int n = 0; n < 1000; n++)
								{
									int num5 = num + WorldGen.genRand.Next(-12, 13);
									int num6 = i + WorldGen.genRand.Next(3, 21);
									if (!Main.tile[num5, num6].active() && !Main.tile[num5, num6 + 1].active() && Main.tile[num5 - 1, num6].type != 48 && Main.tile[num5 + 1, num6].type != 48 && Collision.CanHit(new Point(num5 * 16, num6 * 16), 16, 16, new Point(num * 16, i * 16 + 1), 16, 16))
									{
										if ((WorldGen.SolidTile(num5 - 1, num6, false) && Main.tile[num5 - 1, num6].type != 10) || (WorldGen.SolidTile(num5 + 1, num6, false) && Main.tile[num5 + 1, num6].type != 10) || WorldGen.SolidTile(num5, num6 + 1, false))
										{
											WorldGen.PlaceTile(num5, num6, 136, true, false, -1, 0);
										}
										if (Main.tile[num5, num6].active())
										{
											while (num5 != num || num6 != i)
											{
												Main.tile[num5, num6].wire(true);
												if (num5 > num)
												{
													num5--;
												}
												if (num5 < num)
												{
													num5++;
												}
												Main.tile[num5, num6].wire(true);
												if (num6 > i)
												{
													num6--;
												}
												if (num6 < i)
												{
													num6++;
												}
												Main.tile[num5, num6].wire(true);
											}
											if (WorldGen.genRand.Next(3) > 0)
											{
												Main.tile[num, i].frameX = 18;
												Main.tile[num, i + 1].frameX = 18;
												break;
											}
											break;
										}
									}
								}
								break;
							}
							break;
						}
						else
						{
							i--;
						}
					}
				}
				if (failCount > failMax)
				{
					numAdd++;
					failCount = 0;
				}
			}
		}

		// Token: 0x06000EC7 RID: 3783 RVA: 0x0041E514 File Offset: 0x0041C714
		private static double MakeDungeon_Banners(int[] roomWall, double count)
		{
			count = 840000.0 / (double)Main.maxTilesX;
			int num = 0;
			while ((double)num < count)
			{
				int num2 = WorldGen.genRand.Next(GenVars.dMinX, GenVars.dMaxX);
				int num3 = WorldGen.genRand.Next(GenVars.dMinY, GenVars.dMaxY);
				while (!Main.wallDungeon[(int)Main.tile[num2, num3].wall] || Main.tile[num2, num3].active())
				{
					num2 = WorldGen.genRand.Next(GenVars.dMinX, GenVars.dMaxX);
					num3 = WorldGen.genRand.Next(GenVars.dMinY, GenVars.dMaxY);
				}
				while (!WorldGen.SolidTile(num2, num3, false) && num3 > 10)
				{
					num3--;
				}
				num3++;
				if (Main.wallDungeon[(int)Main.tile[num2, num3].wall] && Main.tile[num2, num3 - 1].type != 48 && !Main.tile[num2, num3].active() && !Main.tile[num2, num3 + 1].active() && !Main.tile[num2, num3 + 2].active() && !Main.tile[num2, num3 + 3].active())
				{
					bool flag = true;
					for (int i = num2 - 1; i <= num2 + 1; i++)
					{
						for (int j = num3; j <= num3 + 3; j++)
						{
							if (Main.tile[i, j].active() && (Main.tile[i, j].type == 10 || Main.tile[i, j].type == 11 || Main.tile[i, j].type == 91))
							{
								flag = false;
							}
						}
					}
					if (flag)
					{
						int num4 = 10;
						if ((int)Main.tile[num2, num3].wall == roomWall[1])
						{
							num4 = 12;
						}
						if ((int)Main.tile[num2, num3].wall == roomWall[2])
						{
							num4 = 14;
						}
						num4 += WorldGen.genRand.Next(2);
						WorldGen.PlaceTile(num2, num3, 91, true, false, -1, num4);
					}
				}
				num++;
			}
			return count;
		}

		// Token: 0x06000EC8 RID: 3784 RVA: 0x0041E754 File Offset: 0x0041C954
		private static double MakeDungeon_Pictures(int[] roomWall, double count)
		{
			count = 420000.0 / (double)Main.maxTilesX;
			int num = 0;
			while ((double)num < count)
			{
				int num2 = WorldGen.genRand.Next(GenVars.dMinX, GenVars.dMaxX);
				int num3 = WorldGen.genRand.Next((int)Main.worldSurface, GenVars.dMaxY);
				while (!Main.wallDungeon[(int)Main.tile[num2, num3].wall] || Main.tile[num2, num3].active())
				{
					num2 = WorldGen.genRand.Next(GenVars.dMinX, GenVars.dMaxX);
					num3 = WorldGen.genRand.Next((int)Main.worldSurface, GenVars.dMaxY);
				}
				int num4;
				int num5;
				int num6;
				int num7;
				for (int i = 0; i < 2; i++)
				{
					num4 = num2;
					num5 = num2;
					while (!Main.tile[num4, num3].active() && Main.wallDungeon[(int)Main.tile[num4, num3].wall])
					{
						num4--;
					}
					num4++;
					while (!Main.tile[num5, num3].active() && Main.wallDungeon[(int)Main.tile[num5, num3].wall])
					{
						num5++;
					}
					num5--;
					num2 = (num4 + num5) / 2;
					num6 = num3;
					num7 = num3;
					while (!Main.tile[num2, num6].active() && Main.wallDungeon[(int)Main.tile[num2, num6].wall])
					{
						num6--;
					}
					num6++;
					while (!Main.tile[num2, num7].active() && Main.wallDungeon[(int)Main.tile[num2, num7].wall])
					{
						num7++;
					}
					num7--;
					num3 = (num6 + num7) / 2;
				}
				num4 = num2;
				num5 = num2;
				while (!Main.tile[num4, num3].active() && !Main.tile[num4, num3 - 1].active() && !Main.tile[num4, num3 + 1].active())
				{
					num4--;
				}
				num4++;
				while (!Main.tile[num5, num3].active() && !Main.tile[num5, num3 - 1].active() && !Main.tile[num5, num3 + 1].active())
				{
					num5++;
				}
				num5--;
				num6 = num3;
				num7 = num3;
				while (!Main.tile[num2, num6].active() && !Main.tile[num2 - 1, num6].active() && !Main.tile[num2 + 1, num6].active())
				{
					num6--;
				}
				num6++;
				while (!Main.tile[num2, num7].active() && !Main.tile[num2 - 1, num7].active() && !Main.tile[num2 + 1, num7].active())
				{
					num7++;
				}
				num7--;
				num2 = (num4 + num5) / 2;
				num3 = (num6 + num7) / 2;
				int num8 = num5 - num4;
				int num9 = num7 - num6;
				if (num8 > 7 && num9 > 5)
				{
					bool[] array = new bool[3];
					array[0] = true;
					if (num8 > num9 * 3 && num8 > 21)
					{
						array[1] = true;
					}
					if (num9 > num8 * 3 && num9 > 21)
					{
						array[2] = true;
					}
					int num10 = WorldGen.genRand.Next(3);
					if ((int)Main.tile[num2, num3].wall == roomWall[0])
					{
						num10 = 0;
					}
					while (!array[num10])
					{
						num10 = WorldGen.genRand.Next(3);
					}
					if (WorldGen.nearPicture2(num2, num3))
					{
						num10 = -1;
					}
					if (num10 == 0)
					{
						PaintingEntry paintingEntry = WorldGen.RandPictureTile();
						if ((int)Main.tile[num2, num3].wall != roomWall[0])
						{
							paintingEntry = WorldGen.RandBonePicture();
						}
						if (!WorldGen.nearPicture(num2, num3))
						{
							WorldGen.PlaceTile(num2, num3, paintingEntry.tileType, true, false, -1, paintingEntry.style);
						}
					}
					else if (num10 == 1)
					{
						PaintingEntry paintingEntry2 = WorldGen.RandPictureTile();
						if ((int)Main.tile[num2, num3].wall != roomWall[0])
						{
							paintingEntry2 = WorldGen.RandBonePicture();
						}
						if (!Main.tile[num2, num3].active())
						{
							WorldGen.PlaceTile(num2, num3, paintingEntry2.tileType, true, false, -1, paintingEntry2.style);
						}
						int num11 = num2;
						int num12 = num3;
						int num13 = num3;
						for (int j = 0; j < 2; j++)
						{
							num2 += 7;
							num6 = num13;
							num7 = num13;
							while (!Main.tile[num2, num6].active() && !Main.tile[num2 - 1, num6].active() && !Main.tile[num2 + 1, num6].active())
							{
								num6--;
							}
							num6++;
							while (!Main.tile[num2, num7].active() && !Main.tile[num2 - 1, num7].active() && !Main.tile[num2 + 1, num7].active())
							{
								num7++;
							}
							num7--;
							num13 = (num6 + num7) / 2;
							paintingEntry2 = WorldGen.RandPictureTile();
							if ((int)Main.tile[num2, num13].wall != roomWall[0])
							{
								paintingEntry2 = WorldGen.RandBonePicture();
							}
							if (Math.Abs(num12 - num13) >= 4 || WorldGen.nearPicture(num2, num13))
							{
								break;
							}
							WorldGen.PlaceTile(num2, num13, paintingEntry2.tileType, true, false, -1, paintingEntry2.style);
						}
						num13 = num3;
						num2 = num11;
						for (int k = 0; k < 2; k++)
						{
							num2 -= 7;
							num6 = num13;
							num7 = num13;
							while (!Main.tile[num2, num6].active() && !Main.tile[num2 - 1, num6].active() && !Main.tile[num2 + 1, num6].active())
							{
								num6--;
							}
							num6++;
							while (!Main.tile[num2, num7].active() && !Main.tile[num2 - 1, num7].active() && !Main.tile[num2 + 1, num7].active())
							{
								num7++;
							}
							num7--;
							num13 = (num6 + num7) / 2;
							paintingEntry2 = WorldGen.RandPictureTile();
							if ((int)Main.tile[num2, num13].wall != roomWall[0])
							{
								paintingEntry2 = WorldGen.RandBonePicture();
							}
							if (Math.Abs(num12 - num13) >= 4 || WorldGen.nearPicture(num2, num13))
							{
								break;
							}
							WorldGen.PlaceTile(num2, num13, paintingEntry2.tileType, true, false, -1, paintingEntry2.style);
						}
					}
					else if (num10 == 2)
					{
						PaintingEntry paintingEntry3 = WorldGen.RandPictureTile();
						if ((int)Main.tile[num2, num3].wall != roomWall[0])
						{
							paintingEntry3 = WorldGen.RandBonePicture();
						}
						if (!Main.tile[num2, num3].active())
						{
							WorldGen.PlaceTile(num2, num3, paintingEntry3.tileType, true, false, -1, paintingEntry3.style);
						}
						int num14 = num3;
						int num15 = num2;
						int num16 = num2;
						for (int l = 0; l < 3; l++)
						{
							num3 += 7;
							num4 = num16;
							num5 = num16;
							while (!Main.tile[num4, num3].active() && !Main.tile[num4, num3 - 1].active() && !Main.tile[num4, num3 + 1].active())
							{
								num4--;
							}
							num4++;
							while (!Main.tile[num5, num3].active() && !Main.tile[num5, num3 - 1].active() && !Main.tile[num5, num3 + 1].active())
							{
								num5++;
							}
							num5--;
							num16 = (num4 + num5) / 2;
							paintingEntry3 = WorldGen.RandPictureTile();
							if ((int)Main.tile[num16, num3].wall != roomWall[0])
							{
								paintingEntry3 = WorldGen.RandBonePicture();
							}
							if (Math.Abs(num15 - num16) >= 4 || WorldGen.nearPicture(num16, num3))
							{
								break;
							}
							WorldGen.PlaceTile(num16, num3, paintingEntry3.tileType, true, false, -1, paintingEntry3.style);
						}
						num16 = num2;
						num3 = num14;
						for (int m = 0; m < 3; m++)
						{
							num3 -= 7;
							num4 = num16;
							num5 = num16;
							while (!Main.tile[num4, num3].active() && !Main.tile[num4, num3 - 1].active() && !Main.tile[num4, num3 + 1].active())
							{
								num4--;
							}
							num4++;
							while (!Main.tile[num5, num3].active() && !Main.tile[num5, num3 - 1].active() && !Main.tile[num5, num3 + 1].active())
							{
								num5++;
							}
							num5--;
							num16 = (num4 + num5) / 2;
							paintingEntry3 = WorldGen.RandPictureTile();
							if ((int)Main.tile[num16, num3].wall != roomWall[0])
							{
								paintingEntry3 = WorldGen.RandBonePicture();
							}
							if (Math.Abs(num15 - num16) >= 4 || WorldGen.nearPicture(num16, num3))
							{
								break;
							}
							WorldGen.PlaceTile(num16, num3, paintingEntry3.tileType, true, false, -1, paintingEntry3.style);
						}
					}
				}
				num++;
			}
			return count;
		}

		// Token: 0x06000EC9 RID: 3785 RVA: 0x0041F0A8 File Offset: 0x0041D2A8
		private static double MakeDungeon_GroundFurniture(int wallType)
		{
			double num = (double)(2000 * Main.maxTilesX) / 4200.0;
			int num2 = 1 + (int)((double)Main.maxTilesX / 4200.0);
			int num3 = 1 + (int)((double)Main.maxTilesX / 4200.0);
			int num4 = 0;
			while ((double)num4 < num)
			{
				if (num2 > 0 || num3 > 0)
				{
					num4--;
				}
				int num5 = WorldGen.genRand.Next(GenVars.dMinX, GenVars.dMaxX);
				int num6 = WorldGen.genRand.Next((int)Main.worldSurface + 10, GenVars.dMaxY);
				while (!Main.wallDungeon[(int)Main.tile[num5, num6].wall] || Main.tile[num5, num6].active())
				{
					num5 = WorldGen.genRand.Next(GenVars.dMinX, GenVars.dMaxX);
					num6 = WorldGen.genRand.Next((int)Main.worldSurface + 10, GenVars.dMaxY);
				}
				if (Main.wallDungeon[(int)Main.tile[num5, num6].wall] && !Main.tile[num5, num6].active())
				{
					while (!WorldGen.SolidTile(num5, num6, false) && num6 < Main.UnderworldLayer)
					{
						num6++;
					}
					num6--;
					int num7 = num5;
					int num8 = num5;
					while (!Main.tile[num7, num6].active() && WorldGen.SolidTile(num7, num6 + 1, false))
					{
						num7--;
					}
					num7++;
					while (!Main.tile[num8, num6].active() && WorldGen.SolidTile(num8, num6 + 1, false))
					{
						num8++;
					}
					num8--;
					int num9 = num8 - num7;
					int num10 = (num8 + num7) / 2;
					if (!Main.tile[num10, num6].active() && Main.wallDungeon[(int)Main.tile[num10, num6].wall] && WorldGen.SolidTile(num10, num6 + 1, false) && Main.tile[num10, num6 + 1].type != 48)
					{
						int style = 13;
						int style2 = 10;
						int style3 = 11;
						int num11 = 1;
						int num12 = 46;
						int style4 = 1;
						int num13 = 5;
						int num14 = 11;
						int num15 = 5;
						int num16 = 6;
						int num17 = 21;
						int num18 = 22;
						int num19 = 24;
						int num20 = 30;
						if (wallType == 8)
						{
							style = 14;
							style2 = 11;
							style3 = 12;
							num11 = 2;
							num12 = 47;
							style4 = 2;
							num13 = 6;
							num14 = 12;
							num15 = 6;
							num16 = 7;
							num17 = 22;
							num18 = 23;
							num19 = 25;
							num20 = 31;
						}
						else if (wallType == 9)
						{
							style = 15;
							style2 = 12;
							style3 = 13;
							num11 = 3;
							num12 = 48;
							style4 = 3;
							num13 = 7;
							num14 = 13;
							num15 = 7;
							num16 = 8;
							num17 = 23;
							num18 = 24;
							num19 = 26;
							num20 = 32;
						}
						if (Main.tile[num10, num6].wall >= 94 && Main.tile[num10, num6].wall <= 105)
						{
							style = 17;
							style2 = 14;
							style3 = 15;
							num11 = -1;
							num12 = -1;
							style4 = 5;
							num13 = -1;
							num14 = -1;
							num15 = -1;
							num16 = -1;
							num17 = -1;
							num18 = -1;
							num19 = -1;
							num20 = -1;
						}
						int num21 = WorldGen.genRand.Next(13);
						if ((num21 == 10 || num21 == 11 || num21 == 12) && WorldGen.genRand.Next(4) != 0)
						{
							num21 = WorldGen.genRand.Next(13);
						}
						while ((num21 == 2 && num12 == -1) || (num21 == 5 && num13 == -1) || (num21 == 6 && num14 == -1) || (num21 == 7 && num15 == -1) || (num21 == 8 && num16 == -1) || (num21 == 9 && num17 == -1) || (num21 == 10 && num18 == -1) || (num21 == 11 && num19 == -1) || (num21 == 12 && num20 == -1))
						{
							num21 = WorldGen.genRand.Next(13);
						}
						int num22 = 0;
						int num23 = 0;
						if (num21 == 0)
						{
							num22 = 5;
							num23 = 4;
						}
						if (num21 == 1)
						{
							num22 = 4;
							num23 = 3;
						}
						if (num21 == 2)
						{
							num22 = 3;
							num23 = 5;
						}
						if (num21 == 3)
						{
							num22 = 4;
							num23 = 6;
						}
						if (num21 == 4)
						{
							num22 = 3;
							num23 = 3;
						}
						if (num21 == 5)
						{
							num22 = 5;
							num23 = 3;
						}
						if (num21 == 6)
						{
							num22 = 5;
							num23 = 4;
						}
						if (num21 == 7)
						{
							num22 = 5;
							num23 = 4;
						}
						if (num21 == 8)
						{
							num22 = 5;
							num23 = 4;
						}
						if (num21 == 9)
						{
							num22 = 5;
							num23 = 3;
						}
						if (num21 == 10)
						{
							num22 = 2;
							num23 = 4;
						}
						if (num21 == 11)
						{
							num22 = 3;
							num23 = 3;
						}
						if (num21 == 12)
						{
							num22 = 2;
							num23 = 5;
						}
						for (int i = num10 - num22; i <= num10 + num22; i++)
						{
							for (int j = num6 - num23; j <= num6; j++)
							{
								if (Main.tile[i, j].active())
								{
									num21 = -1;
									break;
								}
							}
						}
						if ((double)num9 < (double)num22 * 1.75)
						{
							num21 = -1;
						}
						if (num2 > 0 || num3 > 0)
						{
							if (num2 > 0)
							{
								WorldGen.PlaceTile(num10, num6, 355, true, false, -1, 0);
								if (Main.tile[num10, num6].type == 355)
								{
									num2--;
								}
							}
							else if (num3 > 0)
							{
								WorldGen.PlaceTile(num10, num6, 354, true, false, -1, 0);
								if (Main.tile[num10, num6].type == 354)
								{
									num3--;
								}
							}
						}
						else if (num21 == 0)
						{
							WorldGen.PlaceTile(num10, num6, 14, true, false, -1, style2);
							if (Main.tile[num10, num6].active())
							{
								if (!Main.tile[num10 - 2, num6].active())
								{
									WorldGen.PlaceTile(num10 - 2, num6, 15, true, false, -1, style);
									if (Main.tile[num10 - 2, num6].active())
									{
										Tile tile = Main.tile[num10 - 2, num6];
										tile.frameX += 18;
										Tile tile2 = Main.tile[num10 - 2, num6 - 1];
										tile2.frameX += 18;
									}
								}
								if (!Main.tile[num10 + 2, num6].active())
								{
									WorldGen.PlaceTile(num10 + 2, num6, 15, true, false, -1, style);
								}
							}
							for (int k = num10 - 1; k <= num10 + 1; k++)
							{
								if (WorldGen.genRand.Next(2) == 0 && !Main.tile[k, num6 - 2].active())
								{
									int num24 = WorldGen.genRand.Next(5);
									if (num11 != -1 && num24 <= 1 && !Main.tileLighted[(int)Main.tile[k - 1, num6 - 2].type])
									{
										WorldGen.PlaceTile(k, num6 - 2, 33, true, false, -1, num11);
									}
									if (num24 == 2 && !Main.tileLighted[(int)Main.tile[k - 1, num6 - 2].type])
									{
										WorldGen.PlaceTile(k, num6 - 2, 49, true, false, -1, 0);
									}
									if (num24 == 3)
									{
										WorldGen.PlaceTile(k, num6 - 2, 50, true, false, -1, 0);
									}
									if (num24 == 4)
									{
										WorldGen.PlaceTile(k, num6 - 2, 103, true, false, -1, 0);
									}
								}
							}
						}
						else if (num21 == 1)
						{
							WorldGen.PlaceTile(num10, num6, 18, true, false, -1, style3);
							if (Main.tile[num10, num6].active())
							{
								if (WorldGen.genRand.Next(2) == 0)
								{
									if (!Main.tile[num10 - 1, num6].active())
									{
										WorldGen.PlaceTile(num10 - 1, num6, 15, true, false, -1, style);
										if (Main.tile[num10 - 1, num6].active())
										{
											Tile tile3 = Main.tile[num10 - 1, num6];
											tile3.frameX += 18;
											Tile tile4 = Main.tile[num10 - 1, num6 - 1];
											tile4.frameX += 18;
										}
									}
								}
								else if (!Main.tile[num10 + 2, num6].active())
								{
									WorldGen.PlaceTile(num10 + 2, num6, 15, true, false, -1, style);
								}
								for (int l = num10; l <= num10 + 1; l++)
								{
									if (WorldGen.genRand.Next(2) == 0 && !Main.tile[l, num6 - 1].active())
									{
										int num25 = WorldGen.genRand.Next(5);
										if (num11 != -1 && num25 <= 1 && !Main.tileLighted[(int)Main.tile[l - 1, num6 - 1].type])
										{
											WorldGen.PlaceTile(l, num6 - 1, 33, true, false, -1, num11);
										}
										if (num25 == 2 && !Main.tileLighted[(int)Main.tile[l - 1, num6 - 1].type])
										{
											WorldGen.PlaceTile(l, num6 - 1, 49, true, false, -1, 0);
										}
										if (num25 == 3)
										{
											WorldGen.PlaceTile(l, num6 - 1, 50, true, false, -1, 0);
										}
										if (num25 == 4)
										{
											WorldGen.PlaceTile(l, num6 - 1, 103, true, false, -1, 0);
										}
									}
								}
							}
						}
						else if (num21 == 2)
						{
							WorldGen.PlaceTile(num10, num6, 105, true, false, -1, num12);
						}
						else if (num21 == 3)
						{
							WorldGen.PlaceTile(num10, num6, 101, true, false, -1, style4);
						}
						else if (num21 == 4)
						{
							if (WorldGen.genRand.Next(2) == 0)
							{
								WorldGen.PlaceTile(num10, num6, 15, true, false, -1, style);
								Tile tile5 = Main.tile[num10, num6];
								tile5.frameX += 18;
								Tile tile6 = Main.tile[num10, num6 - 1];
								tile6.frameX += 18;
							}
							else
							{
								WorldGen.PlaceTile(num10, num6, 15, true, false, -1, style);
							}
						}
						else if (num21 == 5)
						{
							if (WorldGen.genRand.Next(2) == 0)
							{
								WorldGen.Place4x2(num10, num6, 79, 1, num13);
							}
							else
							{
								WorldGen.Place4x2(num10, num6, 79, -1, num13);
							}
						}
						else if (num21 == 6)
						{
							WorldGen.PlaceTile(num10, num6, 87, true, false, -1, num14);
						}
						else if (num21 == 7)
						{
							WorldGen.PlaceTile(num10, num6, 88, true, false, -1, num15);
						}
						else if (num21 == 8)
						{
							WorldGen.PlaceTile(num10, num6, 89, true, false, -1, num16);
						}
						else if (num21 == 9)
						{
							if (WorldGen.genRand.Next(2) == 0)
							{
								WorldGen.Place4x2(num10, num6, 90, 1, num17);
							}
							else
							{
								WorldGen.Place4x2(num10, num6, 90, -1, num17);
							}
						}
						else if (num21 == 10)
						{
							WorldGen.PlaceTile(num10, num6, 93, true, false, -1, num19);
						}
						else if (num21 == 11)
						{
							WorldGen.PlaceTile(num10, num6, 100, true, false, -1, num18);
						}
						else if (num21 == 12)
						{
							WorldGen.PlaceTile(num10, num6, 104, true, false, -1, num20);
						}
					}
				}
				num4++;
			}
			return num;
		}

		// Token: 0x06000ECA RID: 3786 RVA: 0x0041FB6C File Offset: 0x0041DD6C
		public static PaintingEntry RandBonePicture()
		{
			int num = WorldGen.genRand.Next(2);
			int num2 = 0;
			if (num == 0)
			{
				num = 240;
				num2 = WorldGen.genRand.Next(2);
				if (num2 == 0)
				{
					num2 = 16;
				}
				else if (num2 == 1)
				{
					num2 = 17;
				}
			}
			else if (num == 1)
			{
				num = 241;
				num2 = WorldGen.genRand.Next(9);
			}
			return new PaintingEntry
			{
				tileType = num,
				style = num2
			};
		}

		// Token: 0x06000ECB RID: 3787 RVA: 0x0041FBE0 File Offset: 0x0041DDE0
		public static PaintingEntry RandHellPicture()
		{
			int num = WorldGen.genRand.Next(4);
			if (num == 1)
			{
				num = WorldGen.genRand.Next(4);
			}
			int num2;
			if (num == 0)
			{
				num = 240;
				num2 = WorldGen.genRand.Next(5);
				if (num2 == 0)
				{
					num2 = 27;
				}
				else if (num2 == 1)
				{
					num2 = 29;
				}
				else if (num2 == 2)
				{
					num2 = 30;
				}
				else if (num2 == 3)
				{
					num2 = 31;
				}
				else if (num2 == 4)
				{
					num2 = 32;
				}
			}
			else if (num == 1)
			{
				num = 242;
				num2 = 14;
			}
			else if (num == 2)
			{
				num = 245;
				num2 = WorldGen.genRand.Next(3);
				if (num2 == 0)
				{
					num2 = 1;
				}
				else if (num2 == 1)
				{
					num2 = 2;
				}
				else if (num2 == 2)
				{
					num2 = 4;
				}
			}
			else
			{
				num = 246;
				num2 = WorldGen.genRand.Next(3);
				if (num2 == 0)
				{
					num2 = 0;
				}
				else if (num2 == 1)
				{
					num2 = 16;
				}
				else if (num2 == 2)
				{
					num2 = 17;
				}
			}
			return new PaintingEntry
			{
				tileType = num,
				style = num2
			};
		}

		// Token: 0x06000ECC RID: 3788 RVA: 0x0041FCD0 File Offset: 0x0041DED0
		public static PaintingEntry RandHousePictureDesert()
		{
			int num = WorldGen.genRand.Next(4);
			int style;
			if (num <= 1)
			{
				num = 240;
				int maxValue = 6;
				style = 63 + WorldGen.genRand.Next(maxValue);
			}
			else if (num == 2)
			{
				num = 245;
				int maxValue2 = 2;
				style = 7 + WorldGen.genRand.Next(maxValue2);
			}
			else
			{
				num = 242;
				int maxValue3 = 6;
				style = 37 + WorldGen.genRand.Next(maxValue3);
			}
			return new PaintingEntry
			{
				tileType = num,
				style = style
			};
		}

		// Token: 0x06000ECD RID: 3789 RVA: 0x0041FD58 File Offset: 0x0041DF58
		public static PaintingEntry RandHousePicture()
		{
			int num = WorldGen.genRand.Next(4);
			if (num >= 3 && WorldGen.genRand.Next(2) != 0)
			{
				num = WorldGen.genRand.Next(3);
			}
			int num2;
			if (num <= 1)
			{
				num = 240;
				int maxValue = 15;
				num2 = WorldGen.genRand.Next(maxValue);
				if (num2 == 0)
				{
					num2 = 26;
				}
				else if (num2 == 1)
				{
					num2 = 28;
				}
				else if (num2 == 2)
				{
					num2 = 20;
				}
				else if (num2 == 3)
				{
					num2 = 21;
				}
				else if (num2 == 4)
				{
					num2 = 22;
				}
				else if (num2 == 5)
				{
					num2 = 24;
				}
				else if (num2 == 6)
				{
					num2 = 25;
				}
				else if (num2 == 7)
				{
					num2 = 33;
				}
				else if (num2 == 8)
				{
					num2 = 34;
				}
				else if (num2 == 9)
				{
					num2 = 35;
				}
				else if (num2 == 10)
				{
					num2 = 76;
				}
				else if (num2 == 11)
				{
					num2 = 77;
				}
				else if (num2 == 12)
				{
					num2 = 78;
				}
				else if (num2 == 13)
				{
					num2 = 79;
				}
				else if (num2 == 14)
				{
					num2 = 82;
				}
			}
			else if (num == 2)
			{
				int maxValue2 = 9;
				num = 245;
				num2 = WorldGen.genRand.Next(maxValue2);
				if (num2 == 0 && WorldGen.genRand.Next(3) != 0)
				{
					num2 = WorldGen.genRand.Next(maxValue2);
				}
				if (num2 == 0)
				{
					num2 = 0;
				}
				else if (num2 == 1)
				{
					num2 = 3;
				}
				else if (num2 == 2)
				{
					num2 = 5;
				}
				else if (num2 == 3)
				{
					num2 = 6;
				}
				else if (num2 == 4)
				{
					num2 = 14;
				}
				else if (num2 == 5)
				{
					int num3 = WorldGen.genRand.Next(4);
					if (num3 == 0)
					{
						num2 = 15;
					}
					if (num3 == 1)
					{
						num2 = 16;
					}
					if (num3 == 2)
					{
						num2 = 17;
					}
					if (num3 == 3)
					{
						num2 = 18;
					}
				}
				else if (num2 == 6)
				{
					num2 = 19;
				}
				else if (num2 == 7)
				{
					num2 = 20;
				}
				else if (num2 == 8)
				{
					num2 = 21;
				}
			}
			else
			{
				num = 246;
				int maxValue3 = 8;
				num2 = WorldGen.genRand.Next(maxValue3);
				if (num2 == 0)
				{
					num2 = 1;
				}
				else if (num2 == 1)
				{
					num2 = 30;
				}
				else if (num2 == 2)
				{
					num2 = 31;
				}
				else if (num2 == 3)
				{
					num2 = 32;
				}
				else if (num2 == 4)
				{
					num2 = 33;
				}
				else if (num2 == 5)
				{
					num2 = 34;
				}
				else if (num2 == 6)
				{
					num2 = 35;
				}
				else if (num2 == 7)
				{
					num2 = 36;
				}
			}
			return new PaintingEntry
			{
				tileType = num,
				style = num2
			};
		}

		// Token: 0x06000ECE RID: 3790 RVA: 0x0041FF94 File Offset: 0x0041E194
		public static PaintingEntry RandPictureTile()
		{
			int num = WorldGen.genRand.Next(3);
			int num2 = 0;
			if (num <= 1)
			{
				int maxValue = 7;
				num = 240;
				num2 = WorldGen.genRand.Next(maxValue);
				if (num2 == 6)
				{
					num2 = WorldGen.genRand.Next(maxValue);
				}
				if (num2 == 0)
				{
					num2 = 12;
				}
				else if (num2 == 1)
				{
					num2 = 13;
				}
				else if (num2 == 2)
				{
					num2 = 14;
				}
				else if (num2 == 3)
				{
					num2 = 15;
				}
				else if (num2 == 4)
				{
					num2 = 18;
				}
				else if (num2 == 5)
				{
					num2 = 19;
				}
				else if (num2 == 6)
				{
					num2 = 23;
				}
			}
			else if (num == 2)
			{
				num = 242;
				int maxValue2 = 17;
				num2 = WorldGen.genRand.Next(maxValue2);
				if (num2 > 13)
				{
					if (num2 == 14)
					{
						num2 = 15;
					}
					else if (num2 == 15)
					{
						num2 = 16;
					}
					else if (num2 == 16)
					{
						num2 = 30;
					}
				}
			}
			return new PaintingEntry
			{
				tileType = num,
				style = num2
			};
		}

		// Token: 0x06000ECF RID: 3791 RVA: 0x0042006C File Offset: 0x0041E26C
		public static void DungeonStairs(int i, int j, ushort tileType, int wallType)
		{
			Vector2D zero = Vector2D.Zero;
			double num = (double)WorldGen.genRand.Next(5, 9);
			Vector2D vector2D;
			vector2D.X = (double)i;
			vector2D.Y = (double)j;
			int k = WorldGen.genRand.Next(10, 30);
			int num2;
			if (i > GenVars.dEnteranceX)
			{
				num2 = -1;
			}
			else
			{
				num2 = 1;
			}
			if (i > Main.maxTilesX - 400)
			{
				num2 = -1;
			}
			else if (i < 400)
			{
				num2 = 1;
			}
			zero.Y = -1.0;
			zero.X = (double)num2;
			if (WorldGen.genRand.Next(3) != 0)
			{
				zero.X *= 1.0 + (double)WorldGen.genRand.Next(0, 200) * 0.01;
			}
			else if (WorldGen.genRand.Next(3) == 0)
			{
				zero.X *= (double)WorldGen.genRand.Next(50, 76) * 0.01;
			}
			else if (WorldGen.genRand.Next(6) == 0)
			{
				zero.Y *= 2.0;
			}
			if (GenVars.dungeonX < Main.maxTilesX / 2 && zero.X < 0.0 && zero.X < 0.5)
			{
				zero.X = -0.5;
			}
			if (GenVars.dungeonX > Main.maxTilesX / 2 && zero.X > 0.0 && zero.X > 0.5)
			{
				zero.X = -0.5;
			}
			if (WorldGen.drunkWorldGen)
			{
				num2 *= -1;
				zero.X *= -1.0;
			}
			while (k > 0)
			{
				k--;
				int num3 = (int)(vector2D.X - num - 4.0 - (double)WorldGen.genRand.Next(6));
				int num4 = (int)(vector2D.X + num + 4.0 + (double)WorldGen.genRand.Next(6));
				int num5 = (int)(vector2D.Y - num - 4.0);
				int num6 = (int)(vector2D.Y + num + 4.0 + (double)WorldGen.genRand.Next(6));
				if (num3 < 0)
				{
					num3 = 0;
				}
				if (num4 > Main.maxTilesX)
				{
					num4 = Main.maxTilesX;
				}
				if (num5 < 0)
				{
					num5 = 0;
				}
				if (num6 > Main.maxTilesY)
				{
					num6 = Main.maxTilesY;
				}
				int num7 = 1;
				if (vector2D.X > (double)(Main.maxTilesX / 2))
				{
					num7 = -1;
				}
				int num8 = (int)(vector2D.X + GenVars.dxStrength1 * 0.6 * (double)num7 + GenVars.dxStrength2 * (double)num7);
				int num9 = (int)(GenVars.dyStrength2 * 0.5);
				if (vector2D.Y < Main.worldSurface - 5.0 && Main.tile[num8, (int)(vector2D.Y - num - 6.0 + (double)num9)].wall == 0 && Main.tile[num8, (int)(vector2D.Y - num - 7.0 + (double)num9)].wall == 0 && Main.tile[num8, (int)(vector2D.Y - num - 8.0 + (double)num9)].wall == 0)
				{
					GenVars.dSurface = true;
					WorldGen.TileRunner(num8, (int)(vector2D.Y - num - 6.0 + (double)num9), (double)WorldGen.genRand.Next(25, 35), WorldGen.genRand.Next(10, 20), -1, false, 0.0, -1.0, false, true, -1);
				}
				for (int l = num3; l < num4; l++)
				{
					for (int m = num5; m < num6; m++)
					{
						Main.tile[l, m].liquid = 0;
						if (!Main.wallDungeon[(int)Main.tile[l, m].wall])
						{
							Main.tile[l, m].wall = 0;
							Main.tile[l, m].active(true);
							Main.tile[l, m].type = tileType;
						}
					}
				}
				for (int n = num3 + 1; n < num4 - 1; n++)
				{
					for (int num10 = num5 + 1; num10 < num6 - 1; num10++)
					{
						Main.tile[n, num10].wall = (ushort)wallType;
					}
				}
				int num11 = 0;
				if (WorldGen.genRand.Next((int)num) == 0)
				{
					num11 = WorldGen.genRand.Next(1, 3);
				}
				num3 = (int)(vector2D.X - num * 0.5 - (double)num11);
				num4 = (int)(vector2D.X + num * 0.5 + (double)num11);
				num5 = (int)(vector2D.Y - num * 0.5 - (double)num11);
				num6 = (int)(vector2D.Y + num * 0.5 + (double)num11);
				if (num3 < 0)
				{
					num3 = 0;
				}
				if (num4 > Main.maxTilesX)
				{
					num4 = Main.maxTilesX;
				}
				if (num5 < 0)
				{
					num5 = 0;
				}
				if (num6 > Main.maxTilesY)
				{
					num6 = Main.maxTilesY;
				}
				for (int num12 = num3; num12 < num4; num12++)
				{
					for (int num13 = num5; num13 < num6; num13++)
					{
						Main.tile[num12, num13].active(false);
						WorldGen.PlaceWall(num12, num13, wallType, true);
					}
				}
				if (GenVars.dSurface)
				{
					k = 0;
				}
				vector2D += zero;
				if (vector2D.Y < Main.worldSurface)
				{
					zero.Y *= 0.98;
				}
			}
			GenVars.dungeonX = (int)vector2D.X;
			GenVars.dungeonY = (int)vector2D.Y;
		}

		// Token: 0x06000ED0 RID: 3792 RVA: 0x0042064C File Offset: 0x0041E84C
		public static bool PlaceSandTrap(int i, int j)
		{
			int num = 6;
			int num2 = 4;
			int num3 = 25;
			int num4 = j;
			while (!Main.tile[i, num4].active() && num4 < Main.UnderworldLayer)
			{
				num4++;
			}
			if (!Main.tileSolid[(int)Main.tile[i, num4].type] || Main.tile[i, num4].halfBrick() || Main.tile[i, num4].topSlope())
			{
				return false;
			}
			if ((Main.tile[i, num4].type != 53 && Main.tile[i, num4].type != 397 && Main.tile[i, num4].type != 396) || (Main.tile[i, num4].wall != 216 && Main.tile[i, num4].wall != 187))
			{
				return false;
			}
			num4--;
			int num5 = -1;
			int num6 = WorldGen.genRand.Next(6, 12);
			int num7 = WorldGen.genRand.Next(6, 14);
			for (int k = i - num3; k <= i + num3; k++)
			{
				for (int l = num4 - num3; l < num4 + num3; l++)
				{
					if (Main.tile[k, l].wire())
					{
						return false;
					}
					if (TileID.Sets.BasicChest[(int)Main.tile[k, l].type])
					{
						return false;
					}
					if (TileID.Sets.Paintings[(int)Main.tile[k, l].type])
					{
						return false;
					}
					if (Main.tile[k, l].type == 10)
					{
						return false;
					}
					if (Main.tile[k, l].type == 19)
					{
						return false;
					}
					if (Main.tile[k, l].type == 15)
					{
						return false;
					}
					if (Main.tile[k, l].type == 219)
					{
						return false;
					}
				}
			}
			for (int m = i - 2; m <= i + 2; m++)
			{
				for (int n = num4 + 1; n <= num4 + 3; n++)
				{
					if (!Main.tile[m, n].active() || !Main.tileSolid[(int)Main.tile[m, n].type])
					{
						return false;
					}
				}
			}
			if (Main.tile[i, num4 + 1].type == 162)
			{
				return false;
			}
			int num8 = num4;
			while (num8 > num4 - 30)
			{
				if (Main.tile[i, num8].active())
				{
					if (Main.tile[i, num8].type == 396)
					{
						num5 = num8;
						break;
					}
					return false;
				}
				else
				{
					num8--;
				}
			}
			if (num5 <= -1)
			{
				return false;
			}
			if (num4 - num5 < num7 + num2)
			{
				return false;
			}
			int num9 = 0;
			int num10 = (num4 + num5) / 2;
			for (int num11 = i - num6; num11 <= i + num6; num11++)
			{
				if (Main.tile[num11, num10].active() && Main.tileSolid[(int)Main.tile[num11, num10].type])
				{
					return false;
				}
				for (int num12 = num5 - num7; num12 <= num5; num12++)
				{
					if (Main.tile[num11, num12].active())
					{
						if (TileID.Sets.Ore[(int)Main.tile[num11, num12].type] || Main.tile[num11, num12].type == 404)
						{
							return false;
						}
						if (Main.tileSolid[(int)Main.tile[num11, num12].type])
						{
							num9++;
						}
					}
				}
			}
			double num13 = (double)((num6 * 2 + 1) * (num7 + 1)) * 0.75;
			if ((double)num9 < num13)
			{
				return false;
			}
			for (int num14 = i - num6 - 1; num14 <= i + num6 + 1; num14++)
			{
				for (int num15 = num5 - num7; num15 <= num5; num15++)
				{
					bool flag = false;
					if (Main.tile[num14, num15].active() && Main.tileSolid[(int)Main.tile[num14, num15].type])
					{
						flag = true;
					}
					if (num15 == num5)
					{
						Main.tile[num14, num15].slope(0);
						Main.tile[num14, num15].halfBrick(false);
						if (!flag)
						{
							Main.tile[num14, num15].active(true);
							Main.tile[num14, num15].type = 396;
						}
					}
					else if (num15 == num5 - num7)
					{
						Main.tile[num14, num15].ClearTile();
						Main.tile[num14, num15].active(true);
						if (flag && Main.tile[num14, num15 - 1].active() && Main.tileSolid[(int)Main.tile[num14, num15 - 1].type])
						{
							Main.tile[num14, num15].type = 397;
						}
						else
						{
							Main.tile[num14, num15].type = 396;
						}
					}
					else if (num14 == i - num6 - 1 || num14 == i + num6 + 1)
					{
						if (!flag)
						{
							Main.tile[num14, num15].ClearTile();
							Main.tile[num14, num15].active(true);
							Main.tile[num14, num15].type = 396;
						}
						else
						{
							Main.tile[num14, num15].slope(0);
							Main.tile[num14, num15].halfBrick(false);
						}
					}
					else
					{
						Main.tile[num14, num15].ClearTile();
						Main.tile[num14, num15].active(true);
						Main.tile[num14, num15].type = 53;
					}
				}
			}
			int num16 = (int)((double)num5 - (double)num7 * 0.666);
			while ((double)num16 <= (double)num5 - (double)num7 * 0.333)
			{
				if ((double)num16 < (double)num5 - (double)num7 * 0.4)
				{
					if (Main.tile[i - num6 - 2, num16].bottomSlope())
					{
						Main.tile[i - num6 - 2, num16].slope(0);
					}
				}
				else if ((double)num16 > (double)num5 - (double)num7 * 0.6)
				{
					if (Main.tile[i - num6 - 2, num16].topSlope())
					{
						Main.tile[i - num6 - 2, num16].slope(0);
					}
					Main.tile[i - num6 - 2, num16].halfBrick(false);
				}
				else
				{
					Main.tile[i - num6 - 2, num16].halfBrick(false);
					Main.tile[i - num6 - 2, num16].slope(0);
				}
				if (!Main.tile[i - num6 - 2, num16].active() || !Main.tileSolid[(int)Main.tile[i - num6 - 2, num16].type])
				{
					Main.tile[i - num6 - 2, num16].active(true);
					Main.tile[i - num6 - 2, num16].type = 396;
				}
				if (!Main.tile[i + num6 + 2, num16].active() || !Main.tileSolid[(int)Main.tile[i + num6 + 2, num16].type])
				{
					Main.tile[i + num6 + 2, num16].active(true);
					Main.tile[i + num6 + 2, num16].type = 396;
				}
				num16++;
			}
			for (int num17 = num5 - num7; num17 <= num5; num17++)
			{
				Main.tile[i - num6 - 2, num17].slope(0);
				Main.tile[i - num6 - 2, num17].halfBrick(false);
				Main.tile[i - num6 - 1, num17].slope(0);
				Main.tile[i - num6 - 1, num17].halfBrick(false);
				Main.tile[i - num6 + 1, num17].slope(0);
				Main.tile[i - num6 + 1, num17].halfBrick(false);
				Main.tile[i - num6 + 2, num17].slope(0);
				Main.tile[i - num6 + 2, num17].halfBrick(false);
			}
			for (int num18 = i - num6 - 1; num18 < i + num6 + 1; num18++)
			{
				int num19 = num4 - num7 - 1;
				if (Main.tile[num18, num19].bottomSlope())
				{
					Main.tile[num18, num19].slope(0);
				}
				Main.tile[num18, num19].halfBrick(false);
			}
			WorldGen.KillTile(i - 2, num4, false, false, false);
			WorldGen.KillTile(i - 1, num4, false, false, false);
			WorldGen.KillTile(i + 1, num4, false, false, false);
			WorldGen.KillTile(i + 2, num4, false, false, false);
			WorldGen.PlaceTile(i, num4, 135, true, false, -1, 7);
			for (int num20 = i - num6; num20 <= i + num6; num20++)
			{
				int num21 = num4;
				if ((double)num20 < (double)i - (double)num6 * 0.8 || (double)num20 > (double)i + (double)num6 * 0.8)
				{
					num21 = num4 - 3;
				}
				else if ((double)num20 < (double)i - (double)num6 * 0.6 || (double)num20 > (double)i + (double)num6 * 0.6)
				{
					num21 = num4 - 2;
				}
				else if ((double)num20 < (double)i - (double)num6 * 0.4 || (double)num20 > (double)i + (double)num6 * 0.4)
				{
					num21 = num4 - 1;
				}
				for (int num22 = num5; num22 <= num4; num22++)
				{
					if (num20 == i && num22 <= num4)
					{
						Main.tile[i, num22].wire(true);
					}
					if (Main.tile[num20, num22].active() && Main.tileSolid[(int)Main.tile[num20, num22].type])
					{
						if (num22 < num5 + num - 4)
						{
							Main.tile[num20, num22].actuator(true);
							Main.tile[num20, num22].wire(true);
						}
						else if (num22 < num21)
						{
							WorldGen.KillTile(num20, num22, false, false, false);
						}
					}
				}
			}
			return true;
		}

		// Token: 0x06000ED1 RID: 3793 RVA: 0x00421140 File Offset: 0x0041F340
		public static bool DungeonPitTrap(int i, int j, ushort tileType, int wallType)
		{
			int num = 30;
			int num2 = j;
			int num3 = num2;
			int num4 = WorldGen.genRand.Next(8, 19);
			int num5 = WorldGen.genRand.Next(19, 46);
			int num6 = num4 + WorldGen.genRand.Next(6, 10);
			int num7 = num5 + WorldGen.genRand.Next(6, 10);
			if (!Main.wallDungeon[(int)Main.tile[i, num2].wall])
			{
				return false;
			}
			if (Main.tile[i, num2].active())
			{
				return false;
			}
			int k = num2;
			while (k < Main.maxTilesY)
			{
				if (k > Main.maxTilesY - 300)
				{
					return false;
				}
				if (Main.tile[i, k].active() && WorldGen.SolidTile(i, k, false))
				{
					if (Main.tile[i, k].type == 48)
					{
						return false;
					}
					num2 = k;
					break;
				}
				else
				{
					k++;
				}
			}
			if (!Main.wallDungeon[(int)Main.tile[i - num4, num2].wall] || !Main.wallDungeon[(int)Main.tile[i + num4, num2].wall])
			{
				return false;
			}
			for (int l = num2; l < num2 + num; l++)
			{
				bool flag = true;
				for (int m = i - num4; m <= i + num4; m++)
				{
					Tile tile = Main.tile[m, l];
					if (tile.active() && Main.tileDungeon[(int)tile.type])
					{
						flag = false;
					}
				}
				if (flag)
				{
					num2 = l;
					break;
				}
			}
			for (int n = i - num4; n <= i + num4; n++)
			{
				for (int num8 = num2; num8 <= num2 + num5; num8++)
				{
					Tile tile2 = Main.tile[n, num8];
					if (tile2.active() && (Main.tileDungeon[(int)tile2.type] || tile2.type == GenVars.crackedType))
					{
						return false;
					}
				}
			}
			bool flag2 = false;
			if (GenVars.dungeonLake)
			{
				flag2 = true;
				GenVars.dungeonLake = false;
			}
			else if (WorldGen.genRand.Next(8) == 0)
			{
				flag2 = true;
			}
			for (int num9 = i - num4; num9 <= i + num4; num9++)
			{
				for (int num10 = num3; num10 <= num2 + num5; num10++)
				{
					if (Main.tileDungeon[(int)Main.tile[num9, num10].type])
					{
						Main.tile[num9, num10].type = GenVars.crackedType;
						Main.tile[num9, num10].wall = (ushort)wallType;
					}
				}
			}
			for (int num11 = i - num6; num11 <= i + num6; num11++)
			{
				for (int num12 = num3; num12 <= num2 + num7; num12++)
				{
					Main.tile[num11, num12].lava(false);
					Main.tile[num11, num12].liquid = 0;
					if (!Main.wallDungeon[(int)Main.tile[num11, num12].wall] && Main.tile[num11, num12].type != GenVars.crackedType)
					{
						Main.tile[num11, num12].Clear(TileDataType.Slope);
						Main.tile[num11, num12].type = tileType;
						Main.tile[num11, num12].active(true);
						if (num11 > i - num6 && num11 < i + num6 && num12 < num2 + num7)
						{
							Main.tile[num11, num12].wall = (ushort)wallType;
						}
					}
				}
			}
			for (int num13 = i - num4; num13 <= i + num4; num13++)
			{
				for (int num14 = num3; num14 <= num2 + num5; num14++)
				{
					if (Main.tile[num13, num14].type != GenVars.crackedType)
					{
						if (flag2)
						{
							Main.tile[num13, num14].liquid = byte.MaxValue;
						}
						if (num13 == i - num4 || num13 == i + num4 || num14 == num2 + num5)
						{
							Main.tile[num13, num14].type = 48;
						}
						else if ((num13 == i - num4 + 1 && num14 % 2 == 0) || (num13 == i + num4 - 1 && num14 % 2 == 0) || (num14 == num2 + num5 - 1 && num13 % 2 == 0))
						{
							Main.tile[num13, num14].type = 48;
						}
						else
						{
							Main.tile[num13, num14].active(false);
						}
					}
				}
			}
			return true;
		}

		// Token: 0x06000ED2 RID: 3794 RVA: 0x004215B8 File Offset: 0x0041F7B8
		public static void DungeonHalls(int i, int j, ushort tileType, int wallType, bool forceX = false)
		{
			Vector2D zero = Vector2D.Zero;
			double num = (double)WorldGen.genRand.Next(4, 6);
			double num2 = num;
			Vector2D zero2 = Vector2D.Zero;
			Vector2D zero3 = Vector2D.Zero;
			Vector2D vector2D;
			vector2D.X = (double)i;
			vector2D.Y = (double)j;
			int k = WorldGen.genRand.Next(35, 80);
			bool flag = false;
			if (WorldGen.genRand.Next(6) == 0)
			{
				flag = true;
			}
			if (forceX)
			{
				k += 20;
				GenVars.lastDungeonHall = Vector2D.Zero;
			}
			else if (WorldGen.genRand.Next(5) == 0)
			{
				num *= 2.0;
				k /= 2;
			}
			bool flag2 = false;
			bool flag3 = false;
			bool flag4 = true;
			while (!flag2)
			{
				bool flag5 = false;
				int num5;
				if (flag4 && !forceX)
				{
					bool flag6 = true;
					bool flag7 = true;
					bool flag8 = true;
					bool flag9 = true;
					int num3 = k;
					bool flag10 = false;
					for (int l = j; l > j - num3; l--)
					{
						if ((int)Main.tile[i, l].wall == wallType)
						{
							if (flag10)
							{
								flag6 = false;
								break;
							}
						}
						else
						{
							flag10 = true;
						}
					}
					flag10 = false;
					for (int m = j; m < j + num3; m++)
					{
						if ((int)Main.tile[i, m].wall == wallType)
						{
							if (flag10)
							{
								flag7 = false;
								break;
							}
						}
						else
						{
							flag10 = true;
						}
					}
					flag10 = false;
					for (int n = i; n > i - num3; n--)
					{
						if ((int)Main.tile[n, j].wall == wallType)
						{
							if (flag10)
							{
								flag8 = false;
								break;
							}
						}
						else
						{
							flag10 = true;
						}
					}
					flag10 = false;
					for (int num4 = i; num4 < i + num3; num4++)
					{
						if ((int)Main.tile[num4, j].wall == wallType)
						{
							if (flag10)
							{
								flag9 = false;
								break;
							}
						}
						else
						{
							flag10 = true;
						}
					}
					if (!flag8 && !flag9 && !flag6 && !flag7)
					{
						if (WorldGen.genRand.Next(2) == 0)
						{
							num5 = -1;
						}
						else
						{
							num5 = 1;
						}
						if (WorldGen.genRand.Next(2) == 0)
						{
							flag5 = true;
						}
					}
					else
					{
						int num6 = WorldGen.genRand.Next(4);
						do
						{
							num6 = WorldGen.genRand.Next(4);
						}
						while ((num6 != 0 || !flag6) && (num6 != 1 || !flag7) && (num6 != 2 || !flag8) && (num6 != 3 || !flag9));
						if (num6 == 0)
						{
							num5 = -1;
						}
						else if (num6 == 1)
						{
							num5 = 1;
						}
						else
						{
							flag5 = true;
							if (num6 == 2)
							{
								num5 = -1;
							}
							else
							{
								num5 = 1;
							}
						}
					}
				}
				else
				{
					if (WorldGen.genRand.Next(2) == 0)
					{
						num5 = -1;
					}
					else
					{
						num5 = 1;
					}
					if (WorldGen.genRand.Next(2) == 0)
					{
						flag5 = true;
					}
				}
				flag4 = false;
				if (forceX)
				{
					flag5 = true;
				}
				if (flag5)
				{
					zero2.Y = 0.0;
					zero2.X = (double)num5;
					zero3.Y = 0.0;
					zero3.X = (double)(-(double)num5);
					zero.Y = 0.0;
					zero.X = (double)num5;
					if (WorldGen.genRand.Next(3) == 0)
					{
						if (WorldGen.genRand.Next(2) == 0)
						{
							zero.Y = -0.2;
						}
						else
						{
							zero.Y = 0.2;
						}
					}
				}
				else
				{
					num += 1.0;
					zero.Y = (double)num5;
					zero.X = 0.0;
					zero2.X = 0.0;
					zero2.Y = (double)num5;
					zero3.X = 0.0;
					zero3.Y = (double)(-(double)num5);
					if (WorldGen.genRand.Next(3) != 0)
					{
						flag3 = true;
						if (WorldGen.genRand.Next(2) == 0)
						{
							zero.X = (double)WorldGen.genRand.Next(10, 20) * 0.1;
						}
						else
						{
							zero.X = (double)(-(double)WorldGen.genRand.Next(10, 20)) * 0.1;
						}
					}
					else if (WorldGen.genRand.Next(2) == 0)
					{
						if (WorldGen.genRand.Next(2) == 0)
						{
							zero.X = (double)WorldGen.genRand.Next(20, 40) * 0.01;
						}
						else
						{
							zero.X = (double)(-(double)WorldGen.genRand.Next(20, 40)) * 0.01;
						}
					}
					else
					{
						k /= 2;
					}
				}
				if (GenVars.lastDungeonHall != zero3)
				{
					flag2 = true;
				}
			}
			int num7 = 0;
			bool flag11 = vector2D.Y < Main.rockLayer + 100.0;
			if (WorldGen.remixWorldGen)
			{
				flag11 = (vector2D.Y < Main.worldSurface + 100.0);
			}
			if (!forceX)
			{
				if (vector2D.X > (double)(WorldGen.lastMaxTilesX - 200))
				{
					int num5 = -1;
					zero2.Y = 0.0;
					zero2.X = (double)num5;
					zero.Y = 0.0;
					zero.X = (double)num5;
					if (WorldGen.genRand.Next(3) == 0)
					{
						if (WorldGen.genRand.Next(2) == 0)
						{
							zero.Y = -0.2;
						}
						else
						{
							zero.Y = 0.2;
						}
					}
				}
				else if (vector2D.X < 200.0)
				{
					int num5 = 1;
					zero2.Y = 0.0;
					zero2.X = (double)num5;
					zero.Y = 0.0;
					zero.X = (double)num5;
					if (WorldGen.genRand.Next(3) == 0)
					{
						if (WorldGen.genRand.Next(2) == 0)
						{
							zero.Y = -0.2;
						}
						else
						{
							zero.Y = 0.2;
						}
					}
				}
				else if (vector2D.Y > (double)(WorldGen.lastMaxTilesY - 300))
				{
					int num5 = -1;
					num += 1.0;
					zero.Y = (double)num5;
					zero.X = 0.0;
					zero2.X = 0.0;
					zero2.Y = (double)num5;
					if (WorldGen.genRand.Next(2) == 0)
					{
						if (WorldGen.genRand.Next(2) == 0)
						{
							zero.X = (double)WorldGen.genRand.Next(20, 50) * 0.01;
						}
						else
						{
							zero.X = (double)(-(double)WorldGen.genRand.Next(20, 50)) * 0.01;
						}
					}
				}
				else if (flag11)
				{
					int num5 = 1;
					num += 1.0;
					zero.Y = (double)num5;
					zero.X = 0.0;
					zero2.X = 0.0;
					zero2.Y = (double)num5;
					if (WorldGen.genRand.Next(3) != 0)
					{
						flag3 = true;
						if (WorldGen.genRand.Next(2) == 0)
						{
							zero.X = (double)WorldGen.genRand.Next(10, 20) * 0.1;
						}
						else
						{
							zero.X = (double)(-(double)WorldGen.genRand.Next(10, 20)) * 0.1;
						}
					}
					else if (WorldGen.genRand.Next(2) == 0)
					{
						if (WorldGen.genRand.Next(2) == 0)
						{
							zero.X = (double)WorldGen.genRand.Next(20, 50) * 0.01;
						}
						else
						{
							zero.X = (double)WorldGen.genRand.Next(20, 50) * 0.01;
						}
					}
				}
				else if (vector2D.X < (double)(Main.maxTilesX / 2) && vector2D.X > (double)Main.maxTilesX * 0.25)
				{
					int num5 = -1;
					zero2.Y = 0.0;
					zero2.X = (double)num5;
					zero.Y = 0.0;
					zero.X = (double)num5;
					if (WorldGen.genRand.Next(3) == 0)
					{
						if (WorldGen.genRand.Next(2) == 0)
						{
							zero.Y = -0.2;
						}
						else
						{
							zero.Y = 0.2;
						}
					}
				}
				else if (vector2D.X > (double)(Main.maxTilesX / 2) && vector2D.X < (double)Main.maxTilesX * 0.75)
				{
					int num5 = 1;
					zero2.Y = 0.0;
					zero2.X = (double)num5;
					zero.Y = 0.0;
					zero.X = (double)num5;
					if (WorldGen.genRand.Next(3) == 0)
					{
						if (WorldGen.genRand.Next(2) == 0)
						{
							zero.Y = -0.2;
						}
						else
						{
							zero.Y = 0.2;
						}
					}
				}
			}
			if (zero2.Y == 0.0)
			{
				GenVars.DDoorX[GenVars.numDDoors] = (int)vector2D.X;
				GenVars.DDoorY[GenVars.numDDoors] = (int)vector2D.Y;
				GenVars.DDoorPos[GenVars.numDDoors] = 0;
				GenVars.numDDoors++;
			}
			else
			{
				GenVars.dungeonPlatformX[GenVars.numDungeonPlatforms] = (int)vector2D.X;
				GenVars.dungeonPlatformY[GenVars.numDungeonPlatforms] = (int)vector2D.Y;
				GenVars.numDungeonPlatforms++;
			}
			GenVars.lastDungeonHall = zero2;
			if (Math.Abs(zero.X) > Math.Abs(zero.Y) && WorldGen.genRand.Next(3) != 0)
			{
				num = (double)((int)(num2 * ((double)WorldGen.genRand.Next(110, 150) * 0.01)));
			}
			while (k > 0)
			{
				num7++;
				if (zero2.X > 0.0 && vector2D.X > (double)(Main.maxTilesX - 100))
				{
					k = 0;
				}
				else if (zero2.X < 0.0 && vector2D.X < 100.0)
				{
					k = 0;
				}
				else if (zero2.Y > 0.0 && vector2D.Y > (double)(Main.maxTilesY - 100))
				{
					k = 0;
				}
				else if (WorldGen.remixWorldGen && zero2.Y < 0.0 && vector2D.Y < (Main.rockLayer + Main.worldSurface) / 2.0)
				{
					k = 0;
				}
				else if (!WorldGen.remixWorldGen && zero2.Y < 0.0 && vector2D.Y < Main.rockLayer + 50.0)
				{
					k = 0;
				}
				k--;
				int num8 = (int)(vector2D.X - num - 4.0 - (double)WorldGen.genRand.Next(6));
				int num9 = (int)(vector2D.X + num + 4.0 + (double)WorldGen.genRand.Next(6));
				int num10 = (int)(vector2D.Y - num - 4.0 - (double)WorldGen.genRand.Next(6));
				int num11 = (int)(vector2D.Y + num + 4.0 + (double)WorldGen.genRand.Next(6));
				if (num8 < 0)
				{
					num8 = 0;
				}
				if (num9 > Main.maxTilesX)
				{
					num9 = Main.maxTilesX;
				}
				if (num10 < 0)
				{
					num10 = 0;
				}
				if (num11 > Main.maxTilesY)
				{
					num11 = Main.maxTilesY;
				}
				for (int num12 = num8; num12 < num9; num12++)
				{
					for (int num13 = num10; num13 < num11; num13++)
					{
						if (num12 < GenVars.dMinX)
						{
							GenVars.dMinX = num12;
						}
						if (num12 > GenVars.dMaxX)
						{
							GenVars.dMaxX = num12;
						}
						if (num13 > GenVars.dMaxY)
						{
							GenVars.dMaxY = num13;
						}
						Main.tile[num12, num13].liquid = 0;
						if (!Main.wallDungeon[(int)Main.tile[num12, num13].wall])
						{
							Main.tile[num12, num13].active(true);
							Main.tile[num12, num13].type = tileType;
							Main.tile[num12, num13].Clear(TileDataType.Slope);
						}
					}
				}
				for (int num14 = num8 + 1; num14 < num9 - 1; num14++)
				{
					for (int num15 = num10 + 1; num15 < num11 - 1; num15++)
					{
						Main.tile[num14, num15].wall = (ushort)wallType;
					}
				}
				int num16 = 0;
				if (zero.Y == 0.0 && WorldGen.genRand.Next((int)num + 1) == 0)
				{
					num16 = WorldGen.genRand.Next(1, 3);
				}
				else if (zero.X == 0.0 && WorldGen.genRand.Next((int)num - 1) == 0)
				{
					num16 = WorldGen.genRand.Next(1, 3);
				}
				else if (WorldGen.genRand.Next((int)num * 3) == 0)
				{
					num16 = WorldGen.genRand.Next(1, 3);
				}
				num8 = (int)(vector2D.X - num * 0.5 - (double)num16);
				num9 = (int)(vector2D.X + num * 0.5 + (double)num16);
				num10 = (int)(vector2D.Y - num * 0.5 - (double)num16);
				num11 = (int)(vector2D.Y + num * 0.5 + (double)num16);
				if (num8 < 0)
				{
					num8 = 0;
				}
				if (num9 > Main.maxTilesX)
				{
					num9 = Main.maxTilesX;
				}
				if (num10 < 0)
				{
					num10 = 0;
				}
				if (num11 > Main.maxTilesY)
				{
					num11 = Main.maxTilesY;
				}
				for (int num17 = num8; num17 < num9; num17++)
				{
					for (int num18 = num10; num18 < num11; num18++)
					{
						Main.tile[num17, num18].Clear(TileDataType.Slope);
						if (flag)
						{
							if (Main.tile[num17, num18].active() || (int)Main.tile[num17, num18].wall != wallType)
							{
								Main.tile[num17, num18].active(true);
								Main.tile[num17, num18].type = GenVars.crackedType;
							}
						}
						else
						{
							Main.tile[num17, num18].active(false);
						}
						Main.tile[num17, num18].Clear(TileDataType.Slope);
						Main.tile[num17, num18].wall = (ushort)wallType;
					}
				}
				vector2D += zero;
				if (flag3 && num7 > WorldGen.genRand.Next(10, 20))
				{
					num7 = 0;
					zero.X *= -1.0;
				}
			}
			GenVars.dungeonX = (int)vector2D.X;
			GenVars.dungeonY = (int)vector2D.Y;
			if (zero2.Y == 0.0)
			{
				GenVars.DDoorX[GenVars.numDDoors] = (int)vector2D.X;
				GenVars.DDoorY[GenVars.numDDoors] = (int)vector2D.Y;
				GenVars.DDoorPos[GenVars.numDDoors] = 0;
				GenVars.numDDoors++;
				return;
			}
			GenVars.dungeonPlatformX[GenVars.numDungeonPlatforms] = (int)vector2D.X;
			GenVars.dungeonPlatformY[GenVars.numDungeonPlatforms] = (int)vector2D.Y;
			GenVars.numDungeonPlatforms++;
		}

		// Token: 0x06000ED3 RID: 3795 RVA: 0x00422518 File Offset: 0x00420718
		public static void DungeonRoom(int i, int j, ushort tileType, int wallType)
		{
			double num = (double)WorldGen.genRand.Next(15, 30);
			Vector2D vector2D;
			vector2D.X = (double)WorldGen.genRand.Next(-10, 11) * 0.1;
			vector2D.Y = (double)WorldGen.genRand.Next(-10, 11) * 0.1;
			Vector2D vector2D2;
			vector2D2.X = (double)i;
			vector2D2.Y = (double)j - num / 2.0;
			int k = WorldGen.genRand.Next(10, 20);
			double num2 = vector2D2.X;
			double num3 = vector2D2.X;
			double num4 = vector2D2.Y;
			double num5 = vector2D2.Y;
			while (k > 0)
			{
				k--;
				int num6 = (int)(vector2D2.X - num * 0.8 - 5.0);
				int num7 = (int)(vector2D2.X + num * 0.8 + 5.0);
				int num8 = (int)(vector2D2.Y - num * 0.8 - 5.0);
				int num9 = (int)(vector2D2.Y + num * 0.8 + 5.0);
				if (num6 < 0)
				{
					num6 = 0;
				}
				if (num7 > Main.maxTilesX)
				{
					num7 = Main.maxTilesX;
				}
				if (num8 < 0)
				{
					num8 = 0;
				}
				if (num9 > Main.maxTilesY)
				{
					num9 = Main.maxTilesY;
				}
				for (int l = num6; l < num7; l++)
				{
					for (int m = num8; m < num9; m++)
					{
						if (l < GenVars.dMinX)
						{
							GenVars.dMinX = l;
						}
						if (l > GenVars.dMaxX)
						{
							GenVars.dMaxX = l;
						}
						if (m > GenVars.dMaxY)
						{
							GenVars.dMaxY = m;
						}
						Main.tile[l, m].liquid = 0;
						if (!Main.wallDungeon[(int)Main.tile[l, m].wall])
						{
							Main.tile[l, m].Clear(TileDataType.Slope);
							Main.tile[l, m].active(true);
							Main.tile[l, m].type = tileType;
						}
					}
				}
				for (int n = num6 + 1; n < num7 - 1; n++)
				{
					for (int num10 = num8 + 1; num10 < num9 - 1; num10++)
					{
						Main.tile[n, num10].wall = (ushort)wallType;
					}
				}
				num6 = (int)(vector2D2.X - num * 0.5);
				num7 = (int)(vector2D2.X + num * 0.5);
				num8 = (int)(vector2D2.Y - num * 0.5);
				num9 = (int)(vector2D2.Y + num * 0.5);
				if (num6 < 0)
				{
					num6 = 0;
				}
				if (num7 > Main.maxTilesX)
				{
					num7 = Main.maxTilesX;
				}
				if (num8 < 0)
				{
					num8 = 0;
				}
				if (num9 > Main.maxTilesY)
				{
					num9 = Main.maxTilesY;
				}
				if ((double)num6 < num2)
				{
					num2 = (double)num6;
				}
				if ((double)num7 > num3)
				{
					num3 = (double)num7;
				}
				if ((double)num8 < num4)
				{
					num4 = (double)num8;
				}
				if ((double)num9 > num5)
				{
					num5 = (double)num9;
				}
				for (int num11 = num6; num11 < num7; num11++)
				{
					for (int num12 = num8; num12 < num9; num12++)
					{
						Main.tile[num11, num12].active(false);
						Main.tile[num11, num12].wall = (ushort)wallType;
					}
				}
				vector2D2 += vector2D;
				vector2D.X += (double)WorldGen.genRand.Next(-10, 11) * 0.05;
				vector2D.Y += (double)WorldGen.genRand.Next(-10, 11) * 0.05;
				if (vector2D.X > 1.0)
				{
					vector2D.X = 1.0;
				}
				if (vector2D.X < -1.0)
				{
					vector2D.X = -1.0;
				}
				if (vector2D.Y > 1.0)
				{
					vector2D.Y = 1.0;
				}
				if (vector2D.Y < -1.0)
				{
					vector2D.Y = -1.0;
				}
			}
			GenVars.dRoomX[GenVars.numDRooms] = (int)vector2D2.X;
			GenVars.dRoomY[GenVars.numDRooms] = (int)vector2D2.Y;
			GenVars.dRoomSize[GenVars.numDRooms] = (int)num;
			GenVars.dRoomL[GenVars.numDRooms] = (int)num2;
			GenVars.dRoomR[GenVars.numDRooms] = (int)num3;
			GenVars.dRoomT[GenVars.numDRooms] = (int)num4;
			GenVars.dRoomB[GenVars.numDRooms] = (int)num5;
			GenVars.dRoomTreasure[GenVars.numDRooms] = false;
			GenVars.numDRooms++;
		}

		// Token: 0x06000ED4 RID: 3796 RVA: 0x004229E0 File Offset: 0x00420BE0
		public static void DungeonEnt(int i, int j, ushort tileType, int wallType)
		{
			int num = 60;
			for (int k = i - num; k < i + num; k++)
			{
				for (int l = j - num; l < j + num; l++)
				{
					if (WorldGen.InWorld(k, l, 0))
					{
						Main.tile[k, l].liquid = 0;
						Main.tile[k, l].lava(false);
						Main.tile[k, l].Clear(TileDataType.Slope);
					}
				}
			}
			double num2 = GenVars.dxStrength1;
			double num3 = GenVars.dyStrength1;
			Vector2D vector2D;
			vector2D.X = (double)i;
			vector2D.Y = (double)j - num3 / 2.0;
			GenVars.dMinY = (int)vector2D.Y;
			int num4 = 1;
			if (i > Main.maxTilesX / 2)
			{
				num4 = -1;
			}
			if (WorldGen.drunkWorldGen || WorldGen.getGoodWorldGen)
			{
				num4 *= -1;
			}
			int num5 = (int)(vector2D.X - num2 * 0.6 - (double)WorldGen.genRand.Next(2, 5));
			int num6 = (int)(vector2D.X + num2 * 0.6 + (double)WorldGen.genRand.Next(2, 5));
			int num7 = (int)(vector2D.Y - num3 * 0.6 - (double)WorldGen.genRand.Next(2, 5));
			int num8 = (int)(vector2D.Y + num3 * 0.6 + (double)WorldGen.genRand.Next(8, 16));
			if (num5 < 0)
			{
				num5 = 0;
			}
			if (num6 > Main.maxTilesX)
			{
				num6 = Main.maxTilesX;
			}
			if (num7 < 0)
			{
				num7 = 0;
			}
			if (num8 > Main.maxTilesY)
			{
				num8 = Main.maxTilesY;
			}
			for (int m = num5; m < num6; m++)
			{
				for (int n = num7; n < num8; n++)
				{
					Main.tile[m, n].liquid = 0;
					if ((int)Main.tile[m, n].wall != wallType)
					{
						Main.tile[m, n].wall = 0;
						if (m > num5 + 1 && m < num6 - 2 && n > num7 + 1 && n < num8 - 2)
						{
							Main.tile[m, n].wall = (ushort)wallType;
						}
						Main.tile[m, n].active(true);
						Main.tile[m, n].type = tileType;
						Main.tile[m, n].Clear(TileDataType.Slope);
					}
				}
			}
			int num9 = num5;
			int num10 = num5 + 5 + WorldGen.genRand.Next(4);
			int num11 = num7 - 3 - WorldGen.genRand.Next(3);
			int num12 = num7;
			for (int num13 = num9; num13 < num10; num13++)
			{
				for (int num14 = num11; num14 < num12; num14++)
				{
					Main.tile[num13, num14].liquid = 0;
					if ((int)Main.tile[num13, num14].wall != wallType)
					{
						Main.tile[num13, num14].active(true);
						Main.tile[num13, num14].type = tileType;
						Main.tile[num13, num14].Clear(TileDataType.Slope);
					}
				}
			}
			num9 = num6 - 5 - WorldGen.genRand.Next(4);
			num10 = num6;
			num11 = num7 - 3 - WorldGen.genRand.Next(3);
			num12 = num7;
			for (int num15 = num9; num15 < num10; num15++)
			{
				for (int num16 = num11; num16 < num12; num16++)
				{
					Main.tile[num15, num16].liquid = 0;
					if ((int)Main.tile[num15, num16].wall != wallType)
					{
						Main.tile[num15, num16].active(true);
						Main.tile[num15, num16].type = tileType;
						Main.tile[num15, num16].Clear(TileDataType.Slope);
					}
				}
			}
			int num17 = 1 + WorldGen.genRand.Next(2);
			int num18 = 2 + WorldGen.genRand.Next(4);
			int num19 = 0;
			for (int num20 = num5; num20 < num6; num20++)
			{
				for (int num21 = num7 - num17; num21 < num7; num21++)
				{
					Main.tile[num20, num21].liquid = 0;
					if ((int)Main.tile[num20, num21].wall != wallType)
					{
						Main.tile[num20, num21].active(true);
						Main.tile[num20, num21].type = tileType;
						Main.tile[num20, num21].Clear(TileDataType.Slope);
					}
				}
				num19++;
				if (num19 >= num18)
				{
					num20 += num18;
					num19 = 0;
				}
			}
			for (int num22 = num5; num22 < num6; num22++)
			{
				int num23 = num8;
				while ((double)num23 < Main.worldSurface)
				{
					Main.tile[num22, num23].liquid = 0;
					if (!Main.wallDungeon[(int)Main.tile[num22, num23].wall])
					{
						Main.tile[num22, num23].active(true);
						Main.tile[num22, num23].type = tileType;
					}
					if (num22 > num5 && num22 < num6 - 1)
					{
						Main.tile[num22, num23].wall = (ushort)wallType;
					}
					Main.tile[num22, num23].Clear(TileDataType.Slope);
					num23++;
				}
			}
			num5 = (int)(vector2D.X - num2 * 0.6);
			num6 = (int)(vector2D.X + num2 * 0.6);
			num7 = (int)(vector2D.Y - num3 * 0.6);
			num8 = (int)(vector2D.Y + num3 * 0.6);
			if (num5 < 0)
			{
				num5 = 0;
			}
			if (num6 > Main.maxTilesX)
			{
				num6 = Main.maxTilesX;
			}
			if (num7 < 0)
			{
				num7 = 0;
			}
			if (num8 > Main.maxTilesY)
			{
				num8 = Main.maxTilesY;
			}
			for (int num24 = num5; num24 < num6; num24++)
			{
				for (int num25 = num7; num25 < num8; num25++)
				{
					Main.tile[num24, num25].liquid = 0;
					Main.tile[num24, num25].wall = (ushort)wallType;
					Main.tile[num24, num25].Clear(TileDataType.Slope);
				}
			}
			num5 = (int)(vector2D.X - num2 * 0.6 - 1.0);
			num6 = (int)(vector2D.X + num2 * 0.6 + 1.0);
			num7 = (int)(vector2D.Y - num3 * 0.6 - 1.0);
			num8 = (int)(vector2D.Y + num3 * 0.6 + 1.0);
			if (num5 < 0)
			{
				num5 = 0;
			}
			if (num6 > Main.maxTilesX)
			{
				num6 = Main.maxTilesX;
			}
			if (num7 < 0)
			{
				num7 = 0;
			}
			if (num8 > Main.maxTilesY)
			{
				num8 = Main.maxTilesY;
			}
			if (WorldGen.drunkWorldGen)
			{
				num5 -= 4;
			}
			for (int num26 = num5; num26 < num6; num26++)
			{
				for (int num27 = num7; num27 < num8; num27++)
				{
					Main.tile[num26, num27].liquid = 0;
					Main.tile[num26, num27].wall = (ushort)wallType;
					Main.tile[num26, num27].Clear(TileDataType.Slope);
				}
			}
			num5 = (int)(vector2D.X - num2 * 0.5);
			num6 = (int)(vector2D.X + num2 * 0.5);
			num7 = (int)(vector2D.Y - num3 * 0.5);
			num8 = (int)(vector2D.Y + num3 * 0.5);
			if (num5 < 0)
			{
				num5 = 0;
			}
			if (num6 > Main.maxTilesX)
			{
				num6 = Main.maxTilesX;
			}
			if (num7 < 0)
			{
				num7 = 0;
			}
			if (num8 > Main.maxTilesY)
			{
				num8 = Main.maxTilesY;
			}
			for (int num28 = num5; num28 < num6; num28++)
			{
				for (int num29 = num7; num29 < num8; num29++)
				{
					Main.tile[num28, num29].liquid = 0;
					Main.tile[num28, num29].active(false);
					Main.tile[num28, num29].wall = (ushort)wallType;
				}
			}
			int num30 = (int)vector2D.X;
			int num31 = num8;
			for (int num32 = 0; num32 < 20; num32++)
			{
				num30 = (int)vector2D.X - num32;
				if (!Main.tile[num30, num31].active() && Main.wallDungeon[(int)Main.tile[num30, num31].wall])
				{
					GenVars.dungeonPlatformX[GenVars.numDungeonPlatforms] = num30;
					GenVars.dungeonPlatformY[GenVars.numDungeonPlatforms] = num31;
					GenVars.numDungeonPlatforms++;
					break;
				}
				num30 = (int)vector2D.X + num32;
				if (!Main.tile[num30, num31].active() && Main.wallDungeon[(int)Main.tile[num30, num31].wall])
				{
					GenVars.dungeonPlatformX[GenVars.numDungeonPlatforms] = num30;
					GenVars.dungeonPlatformY[GenVars.numDungeonPlatforms] = num31;
					GenVars.numDungeonPlatforms++;
					break;
				}
			}
			vector2D.X += num2 * 0.6 * (double)num4;
			vector2D.Y += num3 * 0.5;
			num2 = GenVars.dxStrength2;
			num3 = GenVars.dyStrength2;
			vector2D.X += num2 * 0.55 * (double)num4;
			vector2D.Y -= num3 * 0.5;
			num5 = (int)(vector2D.X - num2 * 0.6 - (double)WorldGen.genRand.Next(1, 3));
			num6 = (int)(vector2D.X + num2 * 0.6 + (double)WorldGen.genRand.Next(1, 3));
			num7 = (int)(vector2D.Y - num3 * 0.6 - (double)WorldGen.genRand.Next(1, 3));
			num8 = (int)(vector2D.Y + num3 * 0.6 + (double)WorldGen.genRand.Next(6, 16));
			if (num5 < 0)
			{
				num5 = 0;
			}
			if (num6 > Main.maxTilesX)
			{
				num6 = Main.maxTilesX;
			}
			if (num7 < 0)
			{
				num7 = 0;
			}
			if (num8 > Main.maxTilesY)
			{
				num8 = Main.maxTilesY;
			}
			for (int num33 = num5; num33 < num6; num33++)
			{
				for (int num34 = num7; num34 < num8; num34++)
				{
					Main.tile[num33, num34].liquid = 0;
					if ((int)Main.tile[num33, num34].wall != wallType)
					{
						bool flag = true;
						if (num4 < 0)
						{
							if ((double)num33 < vector2D.X - num2 * 0.5)
							{
								flag = false;
							}
						}
						else if ((double)num33 > vector2D.X + num2 * 0.5 - 1.0)
						{
							flag = false;
						}
						if (flag)
						{
							Main.tile[num33, num34].wall = 0;
							Main.tile[num33, num34].active(true);
							Main.tile[num33, num34].type = tileType;
							Main.tile[num33, num34].Clear(TileDataType.Slope);
						}
					}
				}
			}
			for (int num35 = num5; num35 < num6; num35++)
			{
				int num36 = num8;
				while ((double)num36 < Main.worldSurface)
				{
					Main.tile[num35, num36].liquid = 0;
					if (!Main.wallDungeon[(int)Main.tile[num35, num36].wall])
					{
						Main.tile[num35, num36].active(true);
						Main.tile[num35, num36].type = tileType;
					}
					Main.tile[num35, num36].wall = (ushort)wallType;
					Main.tile[num35, num36].Clear(TileDataType.Slope);
					num36++;
				}
			}
			num5 = (int)(vector2D.X - num2 * 0.5);
			num6 = (int)(vector2D.X + num2 * 0.5);
			num9 = num5;
			if (num4 < 0)
			{
				num9++;
			}
			num10 = num9 + 5 + WorldGen.genRand.Next(4);
			num11 = num7 - 3 - WorldGen.genRand.Next(3);
			num12 = num7;
			for (int num37 = num9; num37 < num10; num37++)
			{
				for (int num38 = num11; num38 < num12; num38++)
				{
					Main.tile[num37, num38].liquid = 0;
					if ((int)Main.tile[num37, num38].wall != wallType)
					{
						Main.tile[num37, num38].active(true);
						Main.tile[num37, num38].type = tileType;
						Main.tile[num37, num38].Clear(TileDataType.Slope);
					}
				}
			}
			num9 = num6 - 5 - WorldGen.genRand.Next(4);
			num10 = num6;
			num11 = num7 - 3 - WorldGen.genRand.Next(3);
			num12 = num7;
			for (int num39 = num9; num39 < num10; num39++)
			{
				for (int num40 = num11; num40 < num12; num40++)
				{
					Main.tile[num39, num40].liquid = 0;
					if ((int)Main.tile[num39, num40].wall != wallType)
					{
						Main.tile[num39, num40].active(true);
						Main.tile[num39, num40].type = tileType;
						Main.tile[num39, num40].Clear(TileDataType.Slope);
					}
				}
			}
			num17 = 1 + WorldGen.genRand.Next(2);
			num18 = 2 + WorldGen.genRand.Next(4);
			num19 = 0;
			if (num4 < 0)
			{
				num6++;
			}
			for (int num41 = num5 + 1; num41 < num6 - 1; num41++)
			{
				for (int num42 = num7 - num17; num42 < num7; num42++)
				{
					Main.tile[num41, num42].liquid = 0;
					if ((int)Main.tile[num41, num42].wall != wallType)
					{
						Main.tile[num41, num42].active(true);
						Main.tile[num41, num42].type = tileType;
						Main.tile[num41, num42].Clear(TileDataType.Slope);
					}
				}
				num19++;
				if (num19 >= num18)
				{
					num41 += num18;
					num19 = 0;
				}
			}
			if (!WorldGen.drunkWorldGen)
			{
				num5 = (int)(vector2D.X - num2 * 0.6);
				num6 = (int)(vector2D.X + num2 * 0.6);
				num7 = (int)(vector2D.Y - num3 * 0.6);
				num8 = (int)(vector2D.Y + num3 * 0.6);
				if (num5 < 0)
				{
					num5 = 0;
				}
				if (num6 > Main.maxTilesX)
				{
					num6 = Main.maxTilesX;
				}
				if (num7 < 0)
				{
					num7 = 0;
				}
				if (num8 > Main.maxTilesY)
				{
					num8 = Main.maxTilesY;
				}
				for (int num43 = num5; num43 < num6; num43++)
				{
					for (int num44 = num7; num44 < num8; num44++)
					{
						Main.tile[num43, num44].liquid = 0;
						Main.tile[num43, num44].wall = 0;
					}
				}
			}
			num5 = (int)(vector2D.X - num2 * 0.5);
			num6 = (int)(vector2D.X + num2 * 0.5);
			num7 = (int)(vector2D.Y - num3 * 0.5);
			num8 = (int)(vector2D.Y + num3 * 0.5);
			if (num5 < 0)
			{
				num5 = 0;
			}
			if (num6 > Main.maxTilesX)
			{
				num6 = Main.maxTilesX;
			}
			if (num7 < 0)
			{
				num7 = 0;
			}
			if (num8 > Main.maxTilesY)
			{
				num8 = Main.maxTilesY;
			}
			for (int num45 = num5; num45 < num6; num45++)
			{
				for (int num46 = num7; num46 < num8; num46++)
				{
					Main.tile[num45, num46].liquid = 0;
					Main.tile[num45, num46].active(false);
					Main.tile[num45, num46].wall = 0;
				}
			}
			Main.dungeonX = (int)vector2D.X;
			Main.dungeonY = num8;
			int num47 = NPC.NewNPC(new EntitySource_WorldGen(), Main.dungeonX * 16 + 8, Main.dungeonY * 16, 37, 0, 0f, 0f, 0f, 0f, 255);
			Main.npc[num47].homeless = false;
			Main.npc[num47].homeTileX = Main.dungeonX;
			Main.npc[num47].homeTileY = Main.dungeonY;
			if (WorldGen.drunkWorldGen)
			{
				int num48 = (int)Main.worldSurface;
				while (Main.tile[GenVars.dungeonX, num48].active() || Main.tile[GenVars.dungeonX, num48].wall > 0 || Main.tile[GenVars.dungeonX, num48 - 1].active() || Main.tile[GenVars.dungeonX, num48 - 1].wall > 0 || Main.tile[GenVars.dungeonX, num48 - 2].active() || Main.tile[GenVars.dungeonX, num48 - 2].wall > 0 || Main.tile[GenVars.dungeonX, num48 - 3].active() || Main.tile[GenVars.dungeonX, num48 - 3].wall > 0 || Main.tile[GenVars.dungeonX, num48 - 4].active() || Main.tile[GenVars.dungeonX, num48 - 4].wall > 0)
				{
					num48--;
					if (num48 < 50)
					{
						break;
					}
				}
				if (num48 > 50)
				{
					WorldGen.GrowDungeonTree(GenVars.dungeonX, num48, false);
				}
			}
			if (!WorldGen.drunkWorldGen)
			{
				int num49 = 100;
				if (num4 == 1)
				{
					int num50 = 0;
					for (int num51 = num6; num51 < num6 + num49; num51++)
					{
						num50++;
						for (int num52 = num8 + num50; num52 < num8 + num49; num52++)
						{
							Main.tile[num51, num52].liquid = 0;
							Main.tile[num51, num52 - 1].liquid = 0;
							Main.tile[num51, num52 - 2].liquid = 0;
							Main.tile[num51, num52 - 3].liquid = 0;
							if (!Main.wallDungeon[(int)Main.tile[num51, num52].wall] && Main.tile[num51, num52].wall != 3 && Main.tile[num51, num52].wall != 83)
							{
								Main.tile[num51, num52].active(true);
								Main.tile[num51, num52].type = tileType;
								Main.tile[num51, num52].Clear(TileDataType.Slope);
							}
						}
					}
				}
				else
				{
					int num53 = 0;
					for (int num54 = num5; num54 > num5 - num49; num54--)
					{
						num53++;
						for (int num55 = num8 + num53; num55 < num8 + num49; num55++)
						{
							Main.tile[num54, num55].liquid = 0;
							Main.tile[num54, num55 - 1].liquid = 0;
							Main.tile[num54, num55 - 2].liquid = 0;
							Main.tile[num54, num55 - 3].liquid = 0;
							if (!Main.wallDungeon[(int)Main.tile[num54, num55].wall] && Main.tile[num54, num55].wall != 3 && Main.tile[num54, num55].wall != 83)
							{
								Main.tile[num54, num55].active(true);
								Main.tile[num54, num55].type = tileType;
								Main.tile[num54, num55].Clear(TileDataType.Slope);
							}
						}
					}
				}
			}
			num17 = 1 + WorldGen.genRand.Next(2);
			num18 = 2 + WorldGen.genRand.Next(4);
			num19 = 0;
			num5 = (int)(vector2D.X - num2 * 0.5);
			num6 = (int)(vector2D.X + num2 * 0.5);
			if (WorldGen.drunkWorldGen)
			{
				if (num4 == 1)
				{
					num6--;
					num5--;
				}
				else
				{
					num5++;
					num6++;
				}
			}
			else
			{
				num5 += 2;
				num6 -= 2;
			}
			for (int num56 = num5; num56 < num6; num56++)
			{
				for (int num57 = num7; num57 < num8 + 1; num57++)
				{
					WorldGen.PlaceWall(num56, num57, wallType, true);
				}
				if (!WorldGen.drunkWorldGen)
				{
					num19++;
					if (num19 >= num18)
					{
						num56 += num18 * 2;
						num19 = 0;
					}
				}
			}
			if (WorldGen.drunkWorldGen)
			{
				num5 = (int)(vector2D.X - num2 * 0.5);
				num6 = (int)(vector2D.X + num2 * 0.5);
				if (num4 == 1)
				{
					num5 = num6 - 3;
				}
				else
				{
					num6 = num5 + 3;
				}
				for (int num58 = num5; num58 < num6; num58++)
				{
					for (int num59 = num7; num59 < num8 + 1; num59++)
					{
						Main.tile[num58, num59].active(true);
						Main.tile[num58, num59].type = tileType;
						Main.tile[num58, num59].Clear(TileDataType.Slope);
					}
				}
			}
			vector2D.X -= num2 * 0.6 * (double)num4;
			vector2D.Y += num3 * 0.5;
			num2 = 15.0;
			num3 = 3.0;
			vector2D.Y -= num3 * 0.5;
			num5 = (int)(vector2D.X - num2 * 0.5);
			num6 = (int)(vector2D.X + num2 * 0.5);
			num7 = (int)(vector2D.Y - num3 * 0.5);
			num8 = (int)(vector2D.Y + num3 * 0.5);
			if (num5 < 0)
			{
				num5 = 0;
			}
			if (num6 > Main.maxTilesX)
			{
				num6 = Main.maxTilesX;
			}
			if (num7 < 0)
			{
				num7 = 0;
			}
			if (num8 > Main.maxTilesY)
			{
				num8 = Main.maxTilesY;
			}
			for (int num60 = num5; num60 < num6; num60++)
			{
				for (int num61 = num7; num61 < num8; num61++)
				{
					Main.tile[num60, num61].active(false);
				}
			}
			if (num4 < 0)
			{
				vector2D.X -= 1.0;
			}
			WorldGen.PlaceTile((int)vector2D.X, (int)vector2D.Y + 1, 10, true, false, -1, 13);
		}

		// Token: 0x06000ED5 RID: 3797 RVA: 0x00424140 File Offset: 0x00422340
		public static bool AddBuriedChest(Point point, int contain = 0, bool notNearOtherChests = false, int Style = -1)
		{
			return WorldGen.AddBuriedChest(point.X, point.Y, contain, notNearOtherChests, Style, false, 0);
		}

		// Token: 0x06000ED6 RID: 3798 RVA: 0x00424158 File Offset: 0x00422358
		public static bool IsChestRigged(int x, int y)
		{
			return Main.tile[x, y].type == 467 && Main.tile[x, y].frameX / 36 == 4;
		}

		// Token: 0x06000ED7 RID: 3799 RVA: 0x0042418C File Offset: 0x0042238C
		private static bool IsUndergroundDesert(int x, int y)
		{
			if ((double)y < Main.worldSurface)
			{
				return false;
			}
			if ((double)x < (double)Main.maxTilesX * 0.15 || (double)x > (double)Main.maxTilesX * 0.85)
			{
				return false;
			}
			if (WorldGen.remixWorldGen && (double)y > Main.rockLayer)
			{
				return false;
			}
			int num = 15;
			for (int i = x - num; i <= x + num; i++)
			{
				for (int j = y - num; j <= y + num; j++)
				{
					if (Main.tile[i, j].wall == 187 || Main.tile[i, j].wall == 216)
					{
						return true;
					}
				}
			}
			return false;
		}

		// Token: 0x06000ED8 RID: 3800 RVA: 0x00424236 File Offset: 0x00422436
		private static bool IsDungeon(int x, int y)
		{
			return (double)y >= Main.worldSurface && x >= 0 && x <= Main.maxTilesX && Main.wallDungeon[(int)Main.tile[x, y].wall];
		}

		// Token: 0x06000ED9 RID: 3801 RVA: 0x00424270 File Offset: 0x00422470
		public static bool AddBuriedChest(int i, int j, int contain = 0, bool notNearOtherChests = false, int Style = -1, bool trySlope = false, ushort chestTileType = 0)
		{
			if (chestTileType == 0)
			{
				chestTileType = 21;
			}
			bool flag = false;
			bool flag2 = false;
			bool flag3 = false;
			bool flag4 = false;
			bool flag5 = false;
			bool flag6 = false;
			bool flag7 = false;
			bool flag8 = false;
			bool flag9 = false;
			bool flag10 = false;
			int num = 15;
			if (WorldGen.tenthAnniversaryWorldGen)
			{
				num *= 3;
			}
			int k = j;
			while (k < Main.maxTilesY - 10)
			{
				int num2 = -1;
				int num3 = -1;
				if (Main.tile[i, k].shimmer())
				{
					return false;
				}
				if (trySlope && Main.tile[i, k].active() && Main.tileSolid[(int)Main.tile[i, k].type] && !Main.tileSolidTop[(int)Main.tile[i, k].type])
				{
					if (Style == 17)
					{
						int num4 = 30;
						for (int l = i - num4; l <= i + num4; l++)
						{
							for (int m = k - num4; m <= k + num4; m++)
							{
								if (!WorldGen.InWorld(l, m, 5))
								{
									return false;
								}
								if (Main.tile[l, m].active() && (Main.tile[l, m].type == 21 || Main.tile[l, m].type == 467))
								{
									return false;
								}
							}
						}
					}
					if (Main.tile[i - 1, k].topSlope())
					{
						num2 = (int)Main.tile[i - 1, k].slope();
						Main.tile[i - 1, k].slope(0);
					}
					if (Main.tile[i, k].topSlope())
					{
						num3 = (int)Main.tile[i, k].slope();
						Main.tile[i, k].slope(0);
					}
				}
				if (WorldGen.remixWorldGen && (double)i > (double)Main.maxTilesX * 0.37 && (double)i < (double)Main.maxTilesX * 0.63 && k > Main.maxTilesY - 250)
				{
					return false;
				}
				int num5 = 2;
				for (int n = i - num5; n <= i + num5; n++)
				{
					for (int num6 = k - num5; num6 <= k + num5; num6++)
					{
						if (Main.tile[n, num6].active() && (TileID.Sets.Boulders[(int)Main.tile[n, num6].type] || Main.tile[n, num6].type == 26 || Main.tile[n, num6].type == 237))
						{
							return false;
						}
					}
				}
				if (WorldGen.SolidTile(i, k, false))
				{
					bool flag11 = false;
					int num7 = k;
					int num8 = 0;
					bool flag12 = (double)num7 >= Main.worldSurface + 25.0;
					if (WorldGen.remixWorldGen)
					{
						flag12 = (num7 < Main.maxTilesY - 400);
					}
					if (flag12 || contain > 0)
					{
						num8 = 1;
					}
					if (Style >= 0)
					{
						num8 = Style;
					}
					if ((chestTileType == 467 && num8 == 10) || (contain == 0 && num7 <= Main.maxTilesY - 205 && WorldGen.IsUndergroundDesert(i, k)))
					{
						flag2 = true;
						num8 = 10;
						chestTileType = 467;
						if (num7 > (GenVars.desertHiveHigh * 3 + GenVars.desertHiveLow * 4) / 7)
						{
							contain = (int)Utils.SelectRandom<short>(WorldGen.genRand, new short[]
							{
								4061,
								4062,
								4276
							});
						}
						else
						{
							contain = (int)Utils.SelectRandom<short>(WorldGen.genRand, new short[]
							{
								4056,
								4055,
								4262,
								4263
							});
						}
						if (WorldGen.getGoodWorldGen && WorldGen.genRand.Next(num) == 0)
						{
							contain = 52;
						}
					}
					if (chestTileType == 21 && (num8 == 11 || (contain == 0 && (double)num7 >= Main.worldSurface + 25.0 && num7 <= Main.maxTilesY - 205 && (Main.tile[i, k].type == 147 || Main.tile[i, k].type == 161 || Main.tile[i, k].type == 162))))
					{
						flag = true;
						num8 = 11;
						int num9 = WorldGen.genRand.Next(6);
						if (num9 == 0)
						{
							contain = 670;
						}
						else if (num9 == 1)
						{
							contain = 724;
						}
						else if (num9 == 2)
						{
							contain = 950;
						}
						else if (num9 == 3)
						{
							if (WorldGen.remixWorldGen)
							{
								contain = 725;
							}
							else
							{
								contain = 1319;
							}
						}
						else if (num9 == 4)
						{
							contain = 987;
						}
						else
						{
							contain = 1579;
						}
						if (WorldGen.genRand.Next(20) == 0)
						{
							contain = 997;
						}
						if (WorldGen.genRand.Next(50) == 0)
						{
							contain = 669;
						}
						if (WorldGen.getGoodWorldGen && WorldGen.genRand.Next(num) == 0)
						{
							contain = 52;
						}
					}
					if (chestTileType == 21 && (Style == 10 || contain == 211 || contain == 212 || contain == 213 || contain == 753))
					{
						flag3 = true;
						num8 = 10;
						if (WorldGen.getGoodWorldGen && WorldGen.genRand.Next(num) == 0)
						{
							contain = 52;
						}
					}
					if (chestTileType == 21 && num7 > Main.maxTilesY - 205 && contain == 0)
					{
						flag7 = true;
						contain = GenVars.hellChestItem[GenVars.hellChest];
						num8 = 4;
						flag11 = true;
						if (WorldGen.getGoodWorldGen && WorldGen.genRand.Next(num) == 0)
						{
							contain = 52;
						}
					}
					if (chestTileType == 21 && num8 == 17)
					{
						flag4 = true;
						if (WorldGen.getGoodWorldGen && WorldGen.genRand.Next(num) == 0)
						{
							contain = 52;
						}
					}
					if (chestTileType == 21 && num8 == 12)
					{
						flag5 = true;
						if (WorldGen.getGoodWorldGen && WorldGen.genRand.Next(num) == 0)
						{
							contain = 52;
						}
					}
					if (chestTileType == 21 && num8 == 32)
					{
						flag6 = true;
						if (WorldGen.getGoodWorldGen && WorldGen.genRand.Next(num) == 0)
						{
							contain = 52;
						}
					}
					if (chestTileType == 21 && num8 != 0 && WorldGen.IsDungeon(i, k))
					{
						flag8 = true;
					}
					if (chestTileType == 21 && num8 != 0 && (contain == 848 || contain == 857 || contain == 934))
					{
						flag9 = true;
					}
					if (chestTileType == 21 && (num8 == 13 || contain == 159 || contain == 65 || contain == 158 || contain == 2219))
					{
						flag10 = true;
						if (WorldGen.remixWorldGen && !WorldGen.getGoodWorldGen)
						{
							if (WorldGen.crimson)
							{
								num8 = 43;
							}
							else
							{
								chestTileType = 467;
								num8 = 3;
							}
						}
					}
					if (WorldGen.noTrapsWorldGen && num8 == 1 && chestTileType == 21 && (!WorldGen.remixWorldGen || WorldGen.genRand.Next(3) == 0))
					{
						num8 = 4;
						chestTileType = 467;
					}
					int num10;
					if (chestTileType == 467)
					{
						num10 = WorldGen.PlaceChest(i - 1, num7 - 1, chestTileType, notNearOtherChests, num8);
					}
					else
					{
						num10 = WorldGen.PlaceChest(i - 1, num7 - 1, chestTileType, notNearOtherChests, num8);
					}
					if (num10 >= 0)
					{
						if (flag11)
						{
							GenVars.hellChest++;
							if (GenVars.hellChest >= GenVars.hellChestItem.Length)
							{
								GenVars.hellChest = 0;
							}
						}
						Chest chest = Main.chest[num10];
						int num11 = 0;
						while (num11 == 0)
						{
							bool flag13 = (double)num7 < Main.worldSurface + 25.0;
							if (WorldGen.remixWorldGen)
							{
								flag13 = ((double)num7 >= (Main.rockLayer + (double)((Main.maxTilesY - 350) * 2)) / 3.0);
							}
							if ((num8 == 0 && flag13) || flag9)
							{
								if (contain > 0)
								{
									chest.item[num11].SetDefaults(contain);
									chest.item[num11].Prefix(-1);
									num11++;
									if (contain == 848)
									{
										chest.item[num11].SetDefaults(866);
										num11++;
									}
									else if (contain == 832)
									{
										chest.item[num11].SetDefaults(933);
										num11++;
										if (WorldGen.genRand.Next(6) == 0)
										{
											int num12 = WorldGen.genRand.Next(2);
											if (num12 != 0)
											{
												if (num12 == 1)
												{
													num12 = 4427;
												}
											}
											else
											{
												num12 = 4429;
											}
											chest.item[num11].SetDefaults(num12);
											num11++;
										}
									}
									if (Main.tenthAnniversaryWorld && flag9)
									{
										chest.item[num11++].SetDefaults(848);
										chest.item[num11++].SetDefaults(866);
									}
								}
								else
								{
									int num13 = WorldGen.genRand.Next(10);
									if (num13 == 0)
									{
										chest.item[num11].SetDefaults(280);
										chest.item[num11].Prefix(-1);
									}
									if (num13 == 1)
									{
										chest.item[num11].SetDefaults(281);
										chest.item[num11].Prefix(-1);
									}
									if (num13 == 2)
									{
										chest.item[num11].SetDefaults(284);
										chest.item[num11].Prefix(-1);
									}
									if (num13 == 3)
									{
										chest.item[num11].SetDefaults(285);
										chest.item[num11].Prefix(-1);
									}
									if (num13 == 4)
									{
										chest.item[num11].SetDefaults(953);
										chest.item[num11].Prefix(-1);
									}
									if (num13 == 5)
									{
										chest.item[num11].SetDefaults(946);
										chest.item[num11].Prefix(-1);
									}
									if (num13 == 6)
									{
										chest.item[num11].SetDefaults(3068);
										chest.item[num11].Prefix(-1);
									}
									if (num13 == 7)
									{
										if (WorldGen.remixWorldGen)
										{
											chest.item[num11].SetDefaults(517);
											chest.item[num11].Prefix(-1);
										}
										else
										{
											chest.item[num11].SetDefaults(3069);
											chest.item[num11].Prefix(-1);
										}
									}
									if (num13 == 8)
									{
										chest.item[num11].SetDefaults(3084);
										chest.item[num11].Prefix(-1);
									}
									if (num13 == 9)
									{
										chest.item[num11].SetDefaults(4341);
										chest.item[num11].Prefix(-1);
									}
									num11++;
								}
								if (WorldGen.genRand.Next(6) == 0)
								{
									int stack = WorldGen.genRand.Next(40, 76);
									chest.item[num11].SetDefaults(282);
									chest.item[num11].stack = stack;
									num11++;
								}
								if (WorldGen.genRand.Next(6) == 0)
								{
									int stack2 = WorldGen.genRand.Next(150, 301);
									chest.item[num11].SetDefaults(279);
									chest.item[num11].stack = stack2;
									num11++;
								}
								if (WorldGen.genRand.Next(6) == 0)
								{
									chest.item[num11].SetDefaults(3093);
									chest.item[num11].stack = 1;
									if (WorldGen.genRand.Next(5) == 0)
									{
										chest.item[num11].stack += WorldGen.genRand.Next(2);
									}
									if (WorldGen.genRand.Next(10) == 0)
									{
										chest.item[num11].stack += WorldGen.genRand.Next(3);
									}
									num11++;
								}
								if (WorldGen.genRand.Next(6) == 0)
								{
									chest.item[num11].SetDefaults(4345);
									chest.item[num11].stack = 1;
									if (WorldGen.genRand.Next(5) == 0)
									{
										chest.item[num11].stack += WorldGen.genRand.Next(2);
									}
									if (WorldGen.genRand.Next(10) == 0)
									{
										chest.item[num11].stack += WorldGen.genRand.Next(3);
									}
									num11++;
								}
								if (WorldGen.genRand.Next(3) == 0)
								{
									chest.item[num11].SetDefaults(168);
									chest.item[num11].stack = WorldGen.genRand.Next(3, 6);
									num11++;
								}
								if (WorldGen.genRand.Next(2) == 0)
								{
									int num14 = WorldGen.genRand.Next(2);
									int stack3 = WorldGen.genRand.Next(8) + 3;
									if (num14 == 0)
									{
										chest.item[num11].SetDefaults(GenVars.copperBar);
									}
									if (num14 == 1)
									{
										chest.item[num11].SetDefaults(GenVars.ironBar);
									}
									chest.item[num11].stack = stack3;
									num11++;
								}
								if (WorldGen.genRand.Next(2) == 0)
								{
									int stack4 = WorldGen.genRand.Next(50, 101);
									chest.item[num11].SetDefaults(965);
									chest.item[num11].stack = stack4;
									num11++;
								}
								if (WorldGen.genRand.Next(3) != 0)
								{
									int num15 = WorldGen.genRand.Next(2);
									int stack5 = WorldGen.genRand.Next(26) + 25;
									if (num15 == 0)
									{
										chest.item[num11].SetDefaults(40);
									}
									if (num15 == 1)
									{
										chest.item[num11].SetDefaults(42);
									}
									chest.item[num11].stack = stack5;
									num11++;
								}
								if (WorldGen.genRand.Next(2) == 0)
								{
									int stack6 = WorldGen.genRand.Next(3) + 3;
									chest.item[num11].SetDefaults(28);
									chest.item[num11].stack = stack6;
									num11++;
								}
								if (WorldGen.genRand.Next(3) != 0)
								{
									chest.item[num11].SetDefaults(2350);
									chest.item[num11].stack = WorldGen.genRand.Next(3, 6);
									num11++;
								}
								if (WorldGen.genRand.Next(3) > 0)
								{
									int num16 = WorldGen.genRand.Next(6);
									int stack7 = WorldGen.genRand.Next(1, 3);
									if (num16 == 0)
									{
										chest.item[num11].SetDefaults(292);
									}
									if (num16 == 1)
									{
										chest.item[num11].SetDefaults(298);
									}
									if (num16 == 2)
									{
										chest.item[num11].SetDefaults(299);
									}
									if (num16 == 3)
									{
										chest.item[num11].SetDefaults(290);
									}
									if (num16 == 4)
									{
										chest.item[num11].SetDefaults(2322);
									}
									if (num16 == 5)
									{
										chest.item[num11].SetDefaults(2325);
									}
									chest.item[num11].stack = stack7;
									num11++;
								}
								if (WorldGen.genRand.Next(2) == 0)
								{
									int num17 = WorldGen.genRand.Next(2);
									int stack8 = WorldGen.genRand.Next(11) + 10;
									if (num17 == 0)
									{
										chest.item[num11].SetDefaults(8);
									}
									if (num17 == 1)
									{
										chest.item[num11].SetDefaults(31);
									}
									chest.item[num11].stack = stack8;
									num11++;
								}
								if (WorldGen.genRand.Next(2) == 0)
								{
									chest.item[num11].SetDefaults(72);
									chest.item[num11].stack = WorldGen.genRand.Next(10, 30);
									num11++;
								}
								if (WorldGen.genRand.Next(2) == 0)
								{
									chest.item[num11].SetDefaults(9);
									chest.item[num11].stack = WorldGen.genRand.Next(50, 100);
									num11++;
								}
							}
							else if ((!WorldGen.remixWorldGen && (double)num7 < Main.rockLayer) || (WorldGen.remixWorldGen && (double)num7 > Main.rockLayer && num7 < Main.maxTilesY - 250))
							{
								if (contain > 0)
								{
									if (contain == 832)
									{
										chest.item[num11].SetDefaults(933);
										num11++;
									}
									chest.item[num11].SetDefaults(contain);
									chest.item[num11].Prefix(-1);
									num11++;
									if (flag4)
									{
										if (WorldGen.genRand.Next(2) == 0)
										{
											chest.item[num11++].SetDefaults(4425);
										}
										if (WorldGen.genRand.Next(2) == 0)
										{
											chest.item[num11++].SetDefaults(4460);
										}
									}
									if (flag10 && WorldGen.genRand.Next(40) == 0)
									{
										chest.item[num11++].SetDefaults(4978);
									}
									if (flag5 && WorldGen.genRand.Next(10) == 0)
									{
										int num18 = WorldGen.genRand.Next(2);
										if (num18 != 0)
										{
											if (num18 == 1)
											{
												num18 = 4427;
											}
										}
										else
										{
											num18 = 4429;
										}
										chest.item[num11].SetDefaults(num18);
										num11++;
									}
									if (flag8 && (!GenVars.generatedShadowKey || WorldGen.genRand.Next(3) == 0))
									{
										GenVars.generatedShadowKey = true;
										chest.item[num11].SetDefaults(329);
										num11++;
									}
								}
								else
								{
									int num19 = WorldGen.genRand.Next(6);
									if (num19 == 0)
									{
										chest.item[num11].SetDefaults(49);
										chest.item[num11].Prefix(-1);
									}
									else if (num19 == 1)
									{
										chest.item[num11].SetDefaults(50);
										chest.item[num11].Prefix(-1);
									}
									else if (num19 == 2)
									{
										chest.item[num11].SetDefaults(53);
										chest.item[num11].Prefix(-1);
									}
									else if (num19 == 3)
									{
										chest.item[num11].SetDefaults(54);
										chest.item[num11].Prefix(-1);
									}
									else if (num19 == 4)
									{
										chest.item[num11].SetDefaults(5011);
										chest.item[num11].Prefix(-1);
									}
									else
									{
										chest.item[num11].SetDefaults(975);
										chest.item[num11].Prefix(-1);
									}
									num11++;
									if (WorldGen.genRand.Next(20) == 0)
									{
										chest.item[num11].SetDefaults(997);
										chest.item[num11].Prefix(-1);
										num11++;
									}
									else if (WorldGen.genRand.Next(20) == 0)
									{
										chest.item[num11].SetDefaults(930);
										chest.item[num11].Prefix(-1);
										num11++;
										chest.item[num11].SetDefaults(931);
										chest.item[num11].stack = WorldGen.genRand.Next(26) + 25;
										num11++;
									}
									if (flag6 && WorldGen.genRand.Next(2) == 0)
									{
										chest.item[num11].SetDefaults(4450);
										num11++;
									}
									if (flag6 && WorldGen.genRand.Next(3) == 0)
									{
										chest.item[num11].SetDefaults(4779);
										num11++;
										chest.item[num11].SetDefaults(4780);
										num11++;
										chest.item[num11].SetDefaults(4781);
										num11++;
									}
								}
								if (flag2)
								{
									if (WorldGen.genRand.Next(3) == 0)
									{
										chest.item[num11].SetDefaults(4423);
										chest.item[num11].stack = WorldGen.genRand.Next(10, 20);
										num11++;
									}
								}
								else if (WorldGen.genRand.Next(3) == 0)
								{
									chest.item[num11].SetDefaults(166);
									chest.item[num11].stack = WorldGen.genRand.Next(10, 20);
									num11++;
								}
								if (WorldGen.genRand.Next(5) == 0)
								{
									chest.item[num11].SetDefaults(52);
									num11++;
								}
								if (WorldGen.genRand.Next(3) == 0)
								{
									int stack9 = WorldGen.genRand.Next(50, 101);
									chest.item[num11].SetDefaults(965);
									chest.item[num11].stack = stack9;
									num11++;
								}
								if (WorldGen.genRand.Next(2) == 0)
								{
									int num20 = WorldGen.genRand.Next(2);
									int stack10 = WorldGen.genRand.Next(10) + 5;
									if (num20 == 0)
									{
										chest.item[num11].SetDefaults(GenVars.ironBar);
									}
									if (num20 == 1)
									{
										chest.item[num11].SetDefaults(GenVars.silverBar);
									}
									chest.item[num11].stack = stack10;
									num11++;
								}
								if (WorldGen.genRand.Next(2) == 0)
								{
									int num21 = WorldGen.genRand.Next(2);
									int stack11 = WorldGen.genRand.Next(25) + 25;
									if (num21 == 0)
									{
										chest.item[num11].SetDefaults(40);
									}
									if (num21 == 1)
									{
										chest.item[num11].SetDefaults(42);
									}
									chest.item[num11].stack = stack11;
									num11++;
								}
								if (WorldGen.genRand.Next(2) == 0)
								{
									int stack12 = WorldGen.genRand.Next(3) + 3;
									chest.item[num11].SetDefaults(28);
									chest.item[num11].stack = stack12;
									num11++;
								}
								if (WorldGen.genRand.Next(3) > 0)
								{
									int num22 = WorldGen.genRand.Next(9);
									int stack13 = WorldGen.genRand.Next(1, 3);
									if (num22 == 0)
									{
										chest.item[num11].SetDefaults(289);
									}
									if (num22 == 1)
									{
										chest.item[num11].SetDefaults(298);
									}
									if (num22 == 2)
									{
										chest.item[num11].SetDefaults(299);
									}
									if (num22 == 3)
									{
										chest.item[num11].SetDefaults(290);
									}
									if (num22 == 4)
									{
										chest.item[num11].SetDefaults(303);
									}
									if (num22 == 5)
									{
										chest.item[num11].SetDefaults(291);
									}
									if (num22 == 6)
									{
										chest.item[num11].SetDefaults(304);
									}
									if (num22 == 7)
									{
										chest.item[num11].SetDefaults(2322);
									}
									if (num22 == 8)
									{
										chest.item[num11].SetDefaults(2329);
									}
									chest.item[num11].stack = stack13;
									num11++;
								}
								if (WorldGen.genRand.Next(3) != 0)
								{
									int stack14 = WorldGen.genRand.Next(2, 5);
									chest.item[num11].SetDefaults(2350);
									chest.item[num11].stack = stack14;
									num11++;
								}
								if (WorldGen.genRand.Next(2) == 0)
								{
									int stack15 = WorldGen.genRand.Next(11) + 10;
									if (num8 == 11)
									{
										chest.item[num11].SetDefaults(974);
									}
									else
									{
										chest.item[num11].SetDefaults(8);
									}
									chest.item[num11].stack = stack15;
									num11++;
								}
								if (WorldGen.genRand.Next(2) == 0)
								{
									chest.item[num11].SetDefaults(72);
									chest.item[num11].stack = WorldGen.genRand.Next(50, 90);
									num11++;
								}
							}
							else if (num7 < Main.maxTilesY - 250 || (WorldGen.remixWorldGen && (Style == 7 || Style == 14)))
							{
								if (contain > 0)
								{
									chest.item[num11].SetDefaults(contain);
									chest.item[num11].Prefix(-1);
									num11++;
									if (flag && WorldGen.genRand.Next(5) == 0)
									{
										chest.item[num11].SetDefaults(3199);
										num11++;
									}
									if (flag2)
									{
										if (WorldGen.genRand.Next(7) == 0)
										{
											chest.item[num11].SetDefaults(4346);
											num11++;
										}
										if (WorldGen.genRand.Next(15) == 0)
										{
											chest.item[num11].SetDefaults(4066);
											num11++;
										}
									}
									if (flag3 && WorldGen.genRand.Next(6) == 0)
									{
										chest.item[num11++].SetDefaults(3360);
										chest.item[num11++].SetDefaults(3361);
									}
									if (flag3 && WorldGen.genRand.Next(10) == 0)
									{
										chest.item[num11++].SetDefaults(4426);
									}
									if (flag4)
									{
										if (WorldGen.genRand.Next(2) == 0)
										{
											chest.item[num11++].SetDefaults(4425);
										}
										if (WorldGen.genRand.Next(2) == 0)
										{
											chest.item[num11++].SetDefaults(4460);
										}
									}
									if (flag8 && (!GenVars.generatedShadowKey || WorldGen.genRand.Next(3) == 0))
									{
										GenVars.generatedShadowKey = true;
										chest.item[num11].SetDefaults(329);
										num11++;
									}
								}
								else
								{
									int num23 = WorldGen.genRand.Next(7);
									bool flag14 = num7 > GenVars.lavaLine;
									if (WorldGen.remixWorldGen)
									{
										flag14 = ((double)num7 > Main.worldSurface && (double)num7 < Main.rockLayer);
									}
									int maxValue = 20;
									if (WorldGen.tenthAnniversaryWorldGen)
									{
										maxValue = 15;
									}
									if (WorldGen.genRand.Next(maxValue) == 0 && flag14)
									{
										chest.item[num11].SetDefaults(906);
										chest.item[num11].Prefix(-1);
									}
									else if (WorldGen.genRand.Next(15) == 0)
									{
										chest.item[num11].SetDefaults(997);
										chest.item[num11].Prefix(-1);
									}
									else
									{
										if (num23 == 0)
										{
											chest.item[num11].SetDefaults(49);
											chest.item[num11].Prefix(-1);
										}
										if (num23 == 1)
										{
											chest.item[num11].SetDefaults(50);
											chest.item[num11].Prefix(-1);
										}
										if (num23 == 2)
										{
											chest.item[num11].SetDefaults(53);
											chest.item[num11].Prefix(-1);
										}
										if (num23 == 3)
										{
											chest.item[num11].SetDefaults(54);
											chest.item[num11].Prefix(-1);
										}
										if (num23 == 4)
										{
											chest.item[num11].SetDefaults(5011);
											chest.item[num11].Prefix(-1);
										}
										if (num23 == 5)
										{
											chest.item[num11].SetDefaults(975);
											chest.item[num11].Prefix(-1);
										}
										if (num23 == 6)
										{
											chest.item[num11].SetDefaults(930);
											chest.item[num11].Prefix(-1);
											num11++;
											chest.item[num11].SetDefaults(931);
											chest.item[num11].stack = WorldGen.genRand.Next(26) + 25;
										}
									}
									num11++;
									if (flag6)
									{
										if (WorldGen.genRand.Next(2) == 0)
										{
											chest.item[num11].SetDefaults(4450);
											num11++;
										}
										else
										{
											chest.item[num11].SetDefaults(4779);
											num11++;
											chest.item[num11].SetDefaults(4780);
											num11++;
											chest.item[num11].SetDefaults(4781);
											num11++;
										}
									}
								}
								if (WorldGen.genRand.Next(5) == 0)
								{
									chest.item[num11].SetDefaults(43);
									num11++;
								}
								if (WorldGen.genRand.Next(3) == 0)
								{
									chest.item[num11].SetDefaults(167);
									num11++;
								}
								if (WorldGen.genRand.Next(4) == 0)
								{
									chest.item[num11].SetDefaults(51);
									chest.item[num11].stack = WorldGen.genRand.Next(26) + 25;
									num11++;
								}
								if (WorldGen.genRand.Next(2) == 0)
								{
									int num24 = WorldGen.genRand.Next(2);
									int stack16 = WorldGen.genRand.Next(8) + 3;
									if (num24 == 0)
									{
										chest.item[num11].SetDefaults(GenVars.goldBar);
									}
									if (num24 == 1)
									{
										chest.item[num11].SetDefaults(GenVars.silverBar);
									}
									chest.item[num11].stack = stack16;
									num11++;
								}
								if (WorldGen.genRand.Next(2) == 0)
								{
									int num25 = WorldGen.genRand.Next(2);
									int stack17 = WorldGen.genRand.Next(26) + 25;
									if (num25 == 0)
									{
										chest.item[num11].SetDefaults(41);
									}
									if (num25 == 1)
									{
										chest.item[num11].SetDefaults(279);
									}
									chest.item[num11].stack = stack17;
									num11++;
								}
								if (WorldGen.genRand.Next(2) == 0)
								{
									int stack18 = WorldGen.genRand.Next(3) + 3;
									chest.item[num11].SetDefaults(188);
									chest.item[num11].stack = stack18;
									num11++;
								}
								if (WorldGen.genRand.Next(3) > 0)
								{
									int num26 = WorldGen.genRand.Next(6);
									int stack19 = WorldGen.genRand.Next(1, 3);
									if (num26 == 0)
									{
										chest.item[num11].SetDefaults(296);
									}
									if (num26 == 1)
									{
										chest.item[num11].SetDefaults(295);
									}
									if (num26 == 2)
									{
										chest.item[num11].SetDefaults(299);
									}
									if (num26 == 3)
									{
										chest.item[num11].SetDefaults(302);
									}
									if (num26 == 4)
									{
										chest.item[num11].SetDefaults(303);
									}
									if (num26 == 5)
									{
										chest.item[num11].SetDefaults(305);
									}
									chest.item[num11].stack = stack19;
									num11++;
								}
								if (WorldGen.genRand.Next(3) > 1)
								{
									int num27 = WorldGen.genRand.Next(6);
									int stack20 = WorldGen.genRand.Next(1, 3);
									if (num27 == 0)
									{
										chest.item[num11].SetDefaults(301);
									}
									if (num27 == 1)
									{
										chest.item[num11].SetDefaults(297);
									}
									if (num27 == 2)
									{
										chest.item[num11].SetDefaults(304);
									}
									if (num27 == 3)
									{
										chest.item[num11].SetDefaults(2329);
									}
									if (num27 == 4)
									{
										chest.item[num11].SetDefaults(2351);
									}
									if (num27 == 5)
									{
										chest.item[num11].SetDefaults(2326);
									}
									chest.item[num11].stack = stack20;
									num11++;
								}
								if (WorldGen.genRand.Next(2) == 0)
								{
									int stack21 = WorldGen.genRand.Next(2, 5);
									chest.item[num11].SetDefaults(2350);
									chest.item[num11].stack = stack21;
									num11++;
								}
								if (WorldGen.genRand.Next(2) == 0)
								{
									int num28 = WorldGen.genRand.Next(2);
									int stack22 = WorldGen.genRand.Next(15) + 15;
									if (num28 == 0)
									{
										if (num8 == 11)
										{
											chest.item[num11].SetDefaults(974);
										}
										else
										{
											chest.item[num11].SetDefaults(8);
										}
									}
									if (num28 == 1)
									{
										chest.item[num11].SetDefaults(282);
									}
									chest.item[num11].stack = stack22;
									num11++;
								}
								if (WorldGen.genRand.Next(2) == 0)
								{
									chest.item[num11].SetDefaults(73);
									chest.item[num11].stack = WorldGen.genRand.Next(1, 3);
									num11++;
								}
							}
							else
							{
								if (contain > 0)
								{
									chest.item[num11].SetDefaults(contain);
									chest.item[num11].Prefix(-1);
									num11++;
									if (flag7 && WorldGen.genRand.Next(5) == 0)
									{
										chest.item[num11].SetDefaults(5010);
										num11++;
									}
									if (flag7 && WorldGen.genRand.Next(10) == 0)
									{
										chest.item[num11].SetDefaults(4443);
										num11++;
									}
									if (flag7 && WorldGen.genRand.Next(10) == 0)
									{
										chest.item[num11].SetDefaults(4737);
										num11++;
									}
									if (flag7 && WorldGen.genRand.Next(10) == 0)
									{
										chest.item[num11].SetDefaults(4551);
										num11++;
									}
								}
								else
								{
									int num29 = WorldGen.genRand.Next(4);
									if (num29 == 0)
									{
										chest.item[num11].SetDefaults(49);
										chest.item[num11].Prefix(-1);
									}
									if (num29 == 1)
									{
										chest.item[num11].SetDefaults(50);
										chest.item[num11].Prefix(-1);
									}
									if (num29 == 2)
									{
										chest.item[num11].SetDefaults(53);
										chest.item[num11].Prefix(-1);
									}
									if (num29 == 3)
									{
										chest.item[num11].SetDefaults(54);
										chest.item[num11].Prefix(-1);
									}
									num11++;
								}
								if (WorldGen.genRand.Next(3) == 0)
								{
									chest.item[num11].SetDefaults(167);
									num11++;
								}
								if (WorldGen.genRand.Next(2) == 0)
								{
									int num30 = WorldGen.genRand.Next(2);
									int stack23 = WorldGen.genRand.Next(15) + 15;
									if (num30 == 0)
									{
										chest.item[num11].SetDefaults(117);
									}
									if (num30 == 1)
									{
										chest.item[num11].SetDefaults(GenVars.goldBar);
									}
									chest.item[num11].stack = stack23;
									num11++;
								}
								if (WorldGen.genRand.Next(2) == 0)
								{
									int num31 = WorldGen.genRand.Next(2);
									int stack24 = WorldGen.genRand.Next(25) + 50;
									if (num31 == 0)
									{
										chest.item[num11].SetDefaults(265);
									}
									if (num31 == 1)
									{
										if (WorldGen.SavedOreTiers.Silver == 168)
										{
											chest.item[num11].SetDefaults(4915);
										}
										else
										{
											chest.item[num11].SetDefaults(278);
										}
									}
									chest.item[num11].stack = stack24;
									num11++;
								}
								if (WorldGen.genRand.Next(2) == 0)
								{
									int stack25 = WorldGen.genRand.Next(6) + 15;
									chest.item[num11].SetDefaults(227);
									chest.item[num11].stack = stack25;
									num11++;
								}
								if (WorldGen.genRand.Next(4) > 0)
								{
									int num32 = WorldGen.genRand.Next(8);
									int stack26 = WorldGen.genRand.Next(1, 3);
									if (num32 == 0)
									{
										chest.item[num11].SetDefaults(296);
									}
									if (num32 == 1)
									{
										chest.item[num11].SetDefaults(295);
									}
									if (num32 == 2)
									{
										chest.item[num11].SetDefaults(293);
									}
									if (num32 == 3)
									{
										chest.item[num11].SetDefaults(288);
									}
									if (num32 == 4)
									{
										chest.item[num11].SetDefaults(294);
									}
									if (num32 == 5)
									{
										chest.item[num11].SetDefaults(297);
									}
									if (num32 == 6)
									{
										chest.item[num11].SetDefaults(304);
									}
									if (num32 == 7)
									{
										chest.item[num11].SetDefaults(2323);
									}
									chest.item[num11].stack = stack26;
									num11++;
								}
								if (WorldGen.genRand.Next(3) > 0)
								{
									int num33 = WorldGen.genRand.Next(8);
									int stack27 = WorldGen.genRand.Next(1, 3);
									if (num33 == 0)
									{
										chest.item[num11].SetDefaults(305);
									}
									if (num33 == 1)
									{
										chest.item[num11].SetDefaults(301);
									}
									if (num33 == 2)
									{
										chest.item[num11].SetDefaults(302);
									}
									if (num33 == 3)
									{
										chest.item[num11].SetDefaults(288);
									}
									if (num33 == 4)
									{
										chest.item[num11].SetDefaults(300);
									}
									if (num33 == 5)
									{
										chest.item[num11].SetDefaults(2351);
									}
									if (num33 == 6)
									{
										chest.item[num11].SetDefaults(2348);
									}
									if (num33 == 7)
									{
										chest.item[num11].SetDefaults(2345);
									}
									chest.item[num11].stack = stack27;
									num11++;
								}
								if (WorldGen.genRand.Next(3) == 0)
								{
									int stack28 = WorldGen.genRand.Next(1, 3);
									if (WorldGen.genRand.Next(2) == 0)
									{
										chest.item[num11].SetDefaults(2350);
									}
									else
									{
										chest.item[num11].SetDefaults(4870);
									}
									chest.item[num11].stack = stack28;
									num11++;
								}
								if (WorldGen.genRand.Next(2) == 0)
								{
									int num34 = WorldGen.genRand.Next(2);
									int stack29 = WorldGen.genRand.Next(15) + 15;
									if (num34 == 0)
									{
										chest.item[num11].SetDefaults(8);
									}
									if (num34 == 1)
									{
										chest.item[num11].SetDefaults(282);
									}
									chest.item[num11].stack = stack29;
									num11++;
								}
								if (WorldGen.genRand.Next(2) == 0)
								{
									chest.item[num11].SetDefaults(73);
									chest.item[num11].stack = WorldGen.genRand.Next(2, 5);
									num11++;
								}
							}
							if (num11 > 0 && chestTileType == 21)
							{
								if (num8 == 10 && WorldGen.genRand.Next(4) == 0)
								{
									chest.item[num11].SetDefaults(2204);
									num11++;
								}
								if (num8 == 11 && WorldGen.genRand.Next(7) == 0)
								{
									chest.item[num11].SetDefaults(2198);
									num11++;
								}
								if (flag10 && WorldGen.genRand.Next(3) == 0)
								{
									chest.item[num11].SetDefaults(2197);
									num11++;
								}
								if (flag10)
								{
									int num35 = WorldGen.genRand.Next(6);
									if (num35 == 0)
									{
										chest.item[num11].SetDefaults(5258);
									}
									if (num35 == 1)
									{
										chest.item[num11].SetDefaults(5226);
									}
									if (num35 == 2)
									{
										chest.item[num11].SetDefaults(5254);
									}
									if (num35 == 3)
									{
										chest.item[num11].SetDefaults(5238);
									}
									if (num35 == 4)
									{
										chest.item[num11].SetDefaults(5255);
									}
									if (num35 == 5)
									{
										chest.item[num11].SetDefaults(5388);
									}
									num11++;
								}
								if (flag10)
								{
									chest.item[num11].SetDefaults(751);
									chest.item[num11].stack = WorldGen.genRand.Next(50, 101);
									num11++;
								}
								if (num8 == 16)
								{
									chest.item[num11].SetDefaults(2195);
									num11++;
								}
								if (Main.wallDungeon[(int)Main.tile[i, k].wall] && WorldGen.genRand.Next(8) == 0)
								{
									chest.item[num11].SetDefaults(2192);
									num11++;
								}
								if ((num8 == 23 || num8 == 24 || num8 == 25 || num8 == 26 || num8 == 27) && WorldGen.genRand.Next(2) == 0)
								{
									chest.item[num11].SetDefaults(5234);
									num11++;
								}
								if (num8 == 16)
								{
									if (WorldGen.genRand.Next(5) == 0)
									{
										chest.item[num11].SetDefaults(2767);
										num11++;
									}
									else
									{
										chest.item[num11].SetDefaults(2766);
										chest.item[num11].stack = WorldGen.genRand.Next(3, 8);
										num11++;
									}
								}
							}
							if (num11 > 0 && chestTileType == 467)
							{
								if (flag10 && WorldGen.genRand.Next(3) == 0)
								{
									chest.item[num11].SetDefaults(2197);
									num11++;
								}
								if (flag10)
								{
									int num36 = WorldGen.genRand.Next(5);
									if (num36 == 0)
									{
										chest.item[num11].SetDefaults(5258);
									}
									if (num36 == 1)
									{
										chest.item[num11].SetDefaults(5226);
									}
									if (num36 == 2)
									{
										chest.item[num11].SetDefaults(5254);
									}
									if (num36 == 3)
									{
										chest.item[num11].SetDefaults(5238);
									}
									if (num36 == 4)
									{
										chest.item[num11].SetDefaults(5255);
									}
									num11++;
								}
								if (flag10)
								{
									chest.item[num11].SetDefaults(751);
									chest.item[num11].stack = WorldGen.genRand.Next(50, 101);
									num11++;
								}
								if (num8 == 13 && WorldGen.genRand.Next(2) == 0)
								{
									chest.item[num11].SetDefaults(5234);
									num11++;
								}
							}
						}
						return true;
					}
					if (trySlope)
					{
						if (num2 > -1)
						{
							Main.tile[i - 1, k].slope((byte)num2);
						}
						if (num3 > -1)
						{
							Main.tile[i, k].slope((byte)num3);
						}
					}
					return false;
				}
				else
				{
					k++;
				}
			}
			return false;
		}

		// Token: 0x06000EDA RID: 3802 RVA: 0x00426CFC File Offset: 0x00424EFC
		public static void UnlockDoor(int i, int j)
		{
			int num = j;
			if (Main.tile[i, num] == null)
			{
				return;
			}
			while (Main.tile[i, num].frameY != 594)
			{
				num--;
				if (Main.tile[i, num].frameY < 594 || num <= 0)
				{
					return;
				}
			}
			SoundEngine.PlaySound(22, i * 16, num * 16 + 16, 1, 1f, 0f);
			for (int k = num; k <= num + 2; k++)
			{
				if (Main.tile[i, k] == null)
				{
					Main.tile[i, k] = new Tile();
				}
				Tile tile = Main.tile[i, k];
				tile.frameY += 54;
				for (int l = 0; l < 4; l++)
				{
					Dust.NewDust(new Vector2((float)(i * 16), (float)(k * 16)), 16, 16, 11, 0f, 0f, 0, default(Color), 1f);
				}
			}
			AchievementsHelper.NotifyProgressionEvent(22);
		}

		// Token: 0x06000EDB RID: 3803 RVA: 0x00426E08 File Offset: 0x00425008
		public static bool OpenDoor(int i, int j, int direction)
		{
			if (Main.tile[i, j - 1] == null)
			{
				Main.tile[i, j - 1] = new Tile();
			}
			if (Main.tile[i, j - 2] == null)
			{
				Main.tile[i, j - 2] = new Tile();
			}
			if (Main.tile[i, j + 1] == null)
			{
				Main.tile[i, j + 1] = new Tile();
			}
			if (Main.tile[i, j] == null)
			{
				Main.tile[i, j] = new Tile();
			}
			Tile tile = Main.tile[i, j];
			if (tile.type != 10)
			{
				return false;
			}
			if (WorldGen.IsLockedDoor(tile))
			{
				return false;
			}
			short num = 0;
			int k = (int)tile.frameY;
			int num2 = 0;
			while (k >= 54)
			{
				k -= 54;
				num2++;
			}
			if (tile.frameX >= 54)
			{
				int num3 = (int)(tile.frameX / 54);
				num2 += 36 * num3;
				num += (short)(72 * num3);
			}
			int num4 = j - k / 18;
			TileColorCache cache = Main.tile[i, num4].BlockColorAndCoating();
			if (Main.tile[i, num4 + 1] == null)
			{
				Main.tile[i, num4 + 1] = new Tile();
			}
			TileColorCache cache2 = Main.tile[i, num4 + 1].BlockColorAndCoating();
			if (Main.tile[i, num4 + 2] == null)
			{
				Main.tile[i, num4 + 2] = new Tile();
			}
			TileColorCache cache3 = Main.tile[i, num4 + 2].BlockColorAndCoating();
			int num5;
			int num6;
			if (direction == -1)
			{
				num5 = i - 1;
				num += 36;
				num6 = i - 1;
			}
			else
			{
				num5 = i;
				num6 = i + 1;
			}
			for (int l = num4; l < num4 + 3; l++)
			{
				if (Main.tile[num6, l] == null)
				{
					Main.tile[num6, l] = new Tile();
				}
				if (Main.tile[num6, l].active())
				{
					if (!Main.tileCut[(int)Main.tile[num6, l].type] && Main.tile[num6, l].type != 3 && Main.tile[num6, l].type != 24 && Main.tile[num6, l].type != 52 && Main.tile[num6, l].type != 61 && Main.tile[num6, l].type != 62 && Main.tile[num6, l].type != 69 && Main.tile[num6, l].type != 655 && Main.tile[num6, l].type != 71 && Main.tile[num6, l].type != 73 && Main.tile[num6, l].type != 74 && Main.tile[num6, l].type != 110 && Main.tile[num6, l].type != 113 && Main.tile[num6, l].type != 115 && Main.tile[num6, l].type != 165)
					{
						return false;
					}
					WorldGen.KillTile(num6, l, false, false, false);
				}
			}
			if (Main.netMode != 1 && Wiring.running)
			{
				Wiring.SkipWire(num5, num4);
				Wiring.SkipWire(num5, num4 + 1);
				Wiring.SkipWire(num5, num4 + 2);
				Wiring.SkipWire(num5 + 1, num4);
				Wiring.SkipWire(num5 + 1, num4 + 1);
				Wiring.SkipWire(num5 + 1, num4 + 2);
			}
			int num7 = num2 % 36 * 54;
			SoundEngine.PlaySound(8, i * 16, j * 16, 1, 1f, 0f);
			Main.tile[num5, num4].active(true);
			Main.tile[num5, num4].type = 11;
			Main.tile[num5, num4].frameY = (short)num7;
			Main.tile[num5, num4].frameX = num;
			Main.tile[num5, num4].UseBlockColors(cache);
			if (Main.tile[num5 + 1, num4] == null)
			{
				Main.tile[num5 + 1, num4] = new Tile();
			}
			Main.tile[num5 + 1, num4].active(true);
			Main.tile[num5 + 1, num4].type = 11;
			Main.tile[num5 + 1, num4].frameY = (short)num7;
			Main.tile[num5 + 1, num4].frameX = num + 18;
			Main.tile[num5 + 1, num4].UseBlockColors(cache);
			if (Main.tile[num5, num4 + 1] == null)
			{
				Main.tile[num5, num4 + 1] = new Tile();
			}
			Main.tile[num5, num4 + 1].active(true);
			Main.tile[num5, num4 + 1].type = 11;
			Main.tile[num5, num4 + 1].frameY = (short)(num7 + 18);
			Main.tile[num5, num4 + 1].frameX = num;
			Main.tile[num5, num4 + 1].UseBlockColors(cache2);
			if (Main.tile[num5 + 1, num4 + 1] == null)
			{
				Main.tile[num5 + 1, num4 + 1] = new Tile();
			}
			Main.tile[num5 + 1, num4 + 1].active(true);
			Main.tile[num5 + 1, num4 + 1].type = 11;
			Main.tile[num5 + 1, num4 + 1].frameY = (short)(num7 + 18);
			Main.tile[num5 + 1, num4 + 1].frameX = num + 18;
			Main.tile[num5 + 1, num4 + 1].UseBlockColors(cache2);
			if (Main.tile[num5, num4 + 2] == null)
			{
				Main.tile[num5, num4 + 2] = new Tile();
			}
			Main.tile[num5, num4 + 2].active(true);
			Main.tile[num5, num4 + 2].type = 11;
			Main.tile[num5, num4 + 2].frameY = (short)(num7 + 36);
			Main.tile[num5, num4 + 2].frameX = num;
			Main.tile[num5, num4 + 2].UseBlockColors(cache3);
			if (Main.tile[num5 + 1, num4 + 2] == null)
			{
				Main.tile[num5 + 1, num4 + 2] = new Tile();
			}
			Main.tile[num5 + 1, num4 + 2].active(true);
			Main.tile[num5 + 1, num4 + 2].type = 11;
			Main.tile[num5 + 1, num4 + 2].frameY = (short)(num7 + 36);
			Main.tile[num5 + 1, num4 + 2].frameX = num + 18;
			Main.tile[num5 + 1, num4 + 2].UseBlockColors(cache3);
			for (int m = num5 - 1; m <= num5 + 2; m++)
			{
				for (int n = num4 - 1; n <= num4 + 2; n++)
				{
					WorldGen.TileFrame(m, n, false, false);
				}
			}
			return true;
		}

		// Token: 0x06000EDC RID: 3804 RVA: 0x004275B8 File Offset: 0x004257B8
		public static void Check1xX(int x, int j, short type)
		{
			if (WorldGen.destroyObject)
			{
				return;
			}
			int frameX = (int)Main.tile[x, j].frameX;
			int num = 3;
			if (type == 92)
			{
				num = 6;
			}
			int i = (int)Main.tile[x, j].frameY;
			int num2 = 0;
			while (i >= 18 * num)
			{
				i -= 18 * num;
				num2++;
			}
			int num3 = (int)(Main.tile[x, j].frameX / 18);
			int num4 = j - i / 18;
			bool flag = false;
			for (int k = 0; k < num; k++)
			{
				if (Main.tile[x, num4 + k] == null)
				{
					Main.tile[x, num4 + k] = new Tile();
				}
				if (!Main.tile[x, num4 + k].active())
				{
					flag = true;
				}
				else if (Main.tile[x, num4 + k].type != (ushort)type)
				{
					flag = true;
				}
				else if ((int)Main.tile[x, num4 + k].frameY != k * 18 + num2 * num * 18)
				{
					flag = true;
				}
				else if ((int)Main.tile[x, num4 + k].frameX != frameX)
				{
					flag = true;
				}
			}
			if (Main.tile[x, num4 + num] == null)
			{
				Main.tile[x, num4 + num] = new Tile();
			}
			if (!WorldGen.SolidTileAllowBottomSlope(x, num4 + num))
			{
				flag = true;
			}
			if (flag)
			{
				WorldGen.destroyObject = true;
				for (int l = 0; l < num; l++)
				{
					if (Main.tile[x, num4 + l].type == (ushort)type)
					{
						WorldGen.KillTile(x, num4 + l, false, false, false);
					}
				}
				if (type == 92)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(x, j), x * 16, j * 16, 32, 32, 341, 1, false, 0, false, false);
				}
				if (type == 453)
				{
					int type2;
					if (num3 < 2)
					{
						type2 = 3744;
					}
					else if (num3 < 4)
					{
						type2 = 3745;
					}
					else
					{
						type2 = 3743;
					}
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(x, j), x * 16, j * 16, 16, 32, type2, 1, false, 0, false, false);
				}
				if (type == 93)
				{
					int type3 = 0;
					if (num2 == 0)
					{
						type3 = 342;
					}
					else if (num2 >= 1 && num2 <= 10)
					{
						type3 = 2082 + num2 - 1;
					}
					else if (num2 >= 11 && num2 <= 16)
					{
						type3 = 2129 + num2 - 11;
					}
					else if (num2 == 17)
					{
						type3 = 2225;
					}
					else if (num2 == 18)
					{
						type3 = 2533;
					}
					else if (num2 == 19)
					{
						type3 = 2547;
					}
					else if (num2 == 20)
					{
						type3 = 2563;
					}
					else if (num2 == 21)
					{
						type3 = 2578;
					}
					else if (num2 == 22)
					{
						type3 = 2643;
					}
					else if (num2 == 23)
					{
						type3 = 2644;
					}
					else if (num2 == 24)
					{
						type3 = 2645;
					}
					else if (num2 == 25)
					{
						type3 = 2646;
					}
					else if (num2 == 26)
					{
						type3 = 2647;
					}
					else if (num2 == 27)
					{
						type3 = 2819;
					}
					else if (num2 == 28)
					{
						type3 = 3135;
					}
					else if (num2 == 29)
					{
						type3 = 3137;
					}
					else if (num2 == 30)
					{
						type3 = 3136;
					}
					else if (num2 == 31)
					{
						type3 = 3892;
					}
					else if (num2 == 32)
					{
						type3 = 3942;
					}
					else if (num2 == 33)
					{
						type3 = 3969;
					}
					else if (num2 == 34)
					{
						type3 = 4156;
					}
					else if (num2 == 35)
					{
						type3 = 4177;
					}
					else if (num2 == 36)
					{
						type3 = 4198;
					}
					else if (num2 == 37)
					{
						type3 = 4219;
					}
					else if (num2 == 38)
					{
						type3 = 4308;
					}
					else if (num2 == 39)
					{
						type3 = 4577;
					}
					else if (num2 == 40)
					{
						type3 = 5159;
					}
					else if (num2 == 41)
					{
						type3 = 5180;
					}
					else if (num2 == 42)
					{
						type3 = 5201;
					}
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(x, j), x * 16, j * 16, 32, 32, type3, 1, false, 0, false, false);
				}
				WorldGen.destroyObject = false;
			}
		}

		// Token: 0x06000EDD RID: 3805 RVA: 0x004279E8 File Offset: 0x00425BE8
		public static void Check2xX(int i, int j, ushort type)
		{
			if (WorldGen.destroyObject)
			{
				return;
			}
			int num = i;
			int k;
			for (k = (int)Main.tile[i, j].frameX; k >= 36; k -= 36)
			{
			}
			if (k == 18)
			{
				num--;
			}
			if (Main.tile[num, j] == null)
			{
				Main.tile[num, j] = new Tile();
			}
			int l = (int)(Main.tile[num, j].frameY / 18);
			int num2 = 3;
			if (type == 104)
			{
				num2 = 5;
			}
			if (type == 207)
			{
				num2 = 4;
			}
			int num3 = 0;
			while (l >= num2)
			{
				l -= num2;
				num3 += num2 * 18;
			}
			int num4 = j - l;
			if (type == 410 && num3 != 0)
			{
				num3 += 2;
			}
			if (Main.tile[num, num4] == null)
			{
				Main.tile[num, num4] = new Tile();
			}
			int frameX = (int)Main.tile[num, j].frameX;
			int frameY = (int)Main.tile[num, j].frameY;
			bool flag = false;
			for (int m = 0; m < num2; m++)
			{
				if (Main.tile[num, num4 + m] == null)
				{
					Main.tile[num, num4 + m] = new Tile();
				}
				if (!Main.tile[num, num4 + m].active())
				{
					flag = true;
				}
				else if (Main.tile[num, num4 + m].type != type)
				{
					flag = true;
				}
				else if ((int)Main.tile[num, num4 + m].frameY != m * 18 + num3)
				{
					flag = true;
				}
				else if ((int)Main.tile[num, num4 + m].frameX != frameX)
				{
					flag = true;
				}
				if (Main.tile[num + 1, num4 + m] == null)
				{
					Main.tile[num + 1, num4 + m] = new Tile();
				}
				if (!Main.tile[num + 1, num4 + m].active())
				{
					flag = true;
				}
				else if (Main.tile[num + 1, num4 + m].type != type)
				{
					flag = true;
				}
				else if ((int)Main.tile[num + 1, num4 + m].frameY != m * 18 + num3)
				{
					flag = true;
				}
				else if ((int)Main.tile[num + 1, num4 + m].frameX != frameX + 18)
				{
					flag = true;
				}
			}
			if (type == 465 || type == 531 || type == 591 || type == 592)
			{
				bool flag2 = false;
				for (int n = 0; n < 2; n++)
				{
					bool flag3 = false;
					Tile tileSafely = Framing.GetTileSafely(num + n, num4 - 1);
					if (type != 531 && tileSafely.type == 380)
					{
						flag3 = true;
					}
					else if (type != 531 && TileID.Sets.Platforms[(int)tileSafely.type])
					{
						if (n == 0)
						{
							flag2 = WorldGen.IsBelowANonHammeredPlatform(num + n, num4);
							flag3 = true;
						}
						else if (flag2 == WorldGen.IsBelowANonHammeredPlatform(num + n, num4))
						{
							flag3 = true;
						}
					}
					else
					{
						flag3 = WorldGen.SolidTileAllowTopSlope(num + n, num4 - 1);
					}
					if (!flag3)
					{
						flag = true;
						break;
					}
				}
			}
			else
			{
				if (!WorldGen.SolidTileAllowBottomSlope(num, num4 + num2))
				{
					flag = true;
				}
				if (!WorldGen.SolidTileAllowBottomSlope(num + 1, num4 + num2))
				{
					flag = true;
				}
			}
			if (flag)
			{
				WorldGen.destroyObject = true;
				for (int num5 = 0; num5 < num2; num5++)
				{
					if (Main.tile[num, num4 + num5].type == type)
					{
						WorldGen.KillTile(num, num4 + num5, false, false, false);
					}
					if (Main.tile[num + 1, num4 + num5].type == type)
					{
						WorldGen.KillTile(num + 1, num4 + num5, false, false, false);
					}
				}
				if (type == 104)
				{
					int num6 = frameX / 36;
					int type2;
					if (num6 >= 1 && num6 <= 5)
					{
						type2 = 2237 + num6 - 1;
					}
					else if (num6 == 6)
					{
						type2 = 2560;
					}
					else if (num6 == 7)
					{
						type2 = 2575;
					}
					else if (num6 >= 8 && num6 <= 23)
					{
						type2 = 2591 + num6 - 8;
					}
					else if (num6 == 24)
					{
						type2 = 2809;
					}
					else if (num6 == 25)
					{
						type2 = 3126;
					}
					else if (num6 == 26)
					{
						type2 = 3128;
					}
					else if (num6 == 27)
					{
						type2 = 3127;
					}
					else if (num6 == 28)
					{
						type2 = 3898;
					}
					else if (num6 == 29)
					{
						type2 = 3899;
					}
					else if (num6 == 30)
					{
						type2 = 3900;
					}
					else if (num6 == 31)
					{
						type2 = 3901;
					}
					else if (num6 == 32)
					{
						type2 = 3902;
					}
					else if (num6 == 33)
					{
						type2 = 3940;
					}
					else if (num6 == 34)
					{
						type2 = 3966;
					}
					else if (num6 == 35)
					{
						type2 = 4154;
					}
					else if (num6 == 36)
					{
						type2 = 4175;
					}
					else if (num6 == 37)
					{
						type2 = 4196;
					}
					else if (num6 == 38)
					{
						type2 = 4217;
					}
					else if (num6 == 39)
					{
						type2 = 4306;
					}
					else if (num6 == 40)
					{
						type2 = 4575;
					}
					else if (num6 == 41)
					{
						type2 = 5157;
					}
					else if (num6 == 42)
					{
						type2 = 5178;
					}
					else if (num6 == 43)
					{
						type2 = 5199;
					}
					else
					{
						type2 = 359;
					}
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(num, j), num * 16, j * 16, 32, 32, type2, 1, false, 0, false, false);
				}
				if (type == 105)
				{
					int num7 = frameX / 36;
					int num8 = frameY / 54;
					num8 %= 3;
					num7 += num8 * 55;
					if (num7 == 0)
					{
						num7 = 360;
					}
					else if (num7 == 1)
					{
						num7 = 52;
					}
					else if (num7 == 43)
					{
						num7 = 1152;
					}
					else if (num7 == 44)
					{
						num7 = 1153;
					}
					else if (num7 == 45)
					{
						num7 = 1154;
					}
					else if (num7 == 46)
					{
						num7 = 1408;
					}
					else if (num7 == 47)
					{
						num7 = 1409;
					}
					else if (num7 == 48)
					{
						num7 = 1410;
					}
					else if (num7 == 49)
					{
						num7 = 1462;
					}
					else if (num7 == 50)
					{
						num7 = 2672;
					}
					else if (num7 >= 51 && num7 <= 62)
					{
						num7 = 3651 + num7 - 51;
					}
					else if (num7 >= 63 && num7 <= 75)
					{
						num7 = 3708 + num7 - 63;
					}
					else if (num7 == 76)
					{
						num7 = 4397;
					}
					else if (num7 == 77)
					{
						num7 = 4360;
					}
					else if (num7 == 78)
					{
						num7 = 4342;
					}
					else if (num7 == 79)
					{
						num7 = 4466;
					}
					else if (num7 == 80)
					{
						num7 = 5317;
					}
					else if (num7 == 81)
					{
						num7 = 5318;
					}
					else if (num7 == 82)
					{
						num7 = 5319;
					}
					else
					{
						num7 = 438 + num7 - 2;
					}
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(num, j), num * 16, j * 16, 32, 32, num7, 1, false, 0, false, false);
				}
				if (type == 356)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(num, j), num * 16, j * 16, 32, 32, 3064, 1, false, 0, false, false);
				}
				if (type == 663)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(num, j), num * 16, j * 16, 32, 32, 5381, 1, false, 0, false, false);
				}
				if (type == 456)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(num, j), num * 16, j * 16, 32, 32, 3748, 1, false, 0, false, false);
				}
				if (type == 337)
				{
					int num9 = frameX / 36;
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(num, j), num * 16, j * 16, 32, 32, 2702 + num9, 1, false, 0, false, false);
				}
				if (type == 207)
				{
					int num10 = frameX / 36;
					if (num10 == 0)
					{
						num10 = 909;
					}
					else if (num10 == 1)
					{
						num10 = 910;
					}
					else if (num10 >= 2 && num10 <= 7)
					{
						num10 = 938 + num10;
					}
					else if (num10 == 8)
					{
						num10 = 4922;
					}
					else if (num10 == 9)
					{
						num10 = 4417;
					}
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(num, j), num * 16, j * 16, 32, 32, num10, 1, false, 0, false, false);
				}
				if (type == 410)
				{
					int num11 = frameX / 36;
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(num, j), num * 16, j * 16, 32, 32, num11 + 3536, 1, false, 0, false, false);
				}
				if (type == 480)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(num, j), num * 16, j * 16, 32, 32, 4054, 1, false, 0, false, false);
				}
				if (type == 509)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(num, j), num * 16, j * 16, 32, 32, 4318, 1, false, 0, false, false);
				}
				if (type == 657)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(num, j), num * 16, j * 16, 32, 32, 5345, 1, false, 0, false, false);
				}
				if (type == 658)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(num, j), num * 16, j * 16, 32, 32, 5347, 1, false, 0, false, false);
				}
				if (type == 489)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(num, j), num * 16, j * 16, 32, 32, 4074, 1, false, 0, false, false);
				}
				if (type == 320)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(num, j), num * 16, j * 16, 32, 32, 2496, 1, false, 0, false, false);
				}
				if (type == 349)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(num, j), num * 16, j * 16, 32, 32, 470, 1, false, 0, false, false);
				}
				if (type == 506)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(num, j), num * 16, j * 16, 32, 32, 4276, 1, false, 0, false, false);
				}
				if (type == 545)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(num, j), num * 16, j * 16, 32, 32, 4420, 1, false, 0, false, false);
				}
				if (type == 465)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(num, j), num * 16, j * 16, 32, 32, 3815, 1, false, 0, false, false);
				}
				if (type == 531)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(num, j), num * 16, j * 16, 32, 32, 4355, 1, false, 0, false, false);
				}
				if (type == 378)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(num, j), num * 16, j * 16, 32, 48, 3202, 1, false, 0, false, false);
					TETrainingDummy.Kill(num, num4);
				}
				if (type == 560)
				{
					int num12 = frameX / 36;
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(num, j), num * 16, j * 16, 32, 32, num12 + 4599, 1, false, 0, false, false);
				}
				if (type == 591)
				{
					int num13 = frameX / 36;
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(num, j), num * 16, j * 16, 32, 32, num13 + 4858, 1, false, 0, false, false);
				}
				if (type == 592)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(num, j), num * 16, j * 16, 32, 32, 4867, 1, false, 0, false, false);
				}
				WorldGen.destroyObject = false;
			}
		}

		// Token: 0x06000EDE RID: 3806 RVA: 0x00428528 File Offset: 0x00426728
		public static bool IsBelowANonHammeredPlatform(int x, int y)
		{
			if (y < 1)
			{
				return false;
			}
			Tile tile = Main.tile[x, y - 1];
			return tile != null && tile.active() && TileID.Sets.Platforms[(int)tile.type] && !tile.halfBrick() && tile.slope() == 0;
		}

		// Token: 0x06000EDF RID: 3807 RVA: 0x00428578 File Offset: 0x00426778
		public static void PlaceTight(int x, int y, bool spiders = false)
		{
			if (Main.tile[x, y - 1] == null)
			{
				Main.tile[x, y - 1] = new Tile();
			}
			if (Main.tile[x, y] == null)
			{
				Main.tile[x, y] = new Tile();
			}
			if (Main.tile[x, y + 1] == null)
			{
				Main.tile[x, y + 1] = new Tile();
			}
			if (Main.tile[x, y].shimmer())
			{
				return;
			}
			WorldGen.PlaceUncheckedStalactite(x, y, WorldGen.genRand.Next(2) == 0, WorldGen.genRand.Next(3), spiders);
			if (Main.tile[x, y].type == 165)
			{
				WorldGen.CheckTight(x, y);
			}
		}

		// Token: 0x06000EE0 RID: 3808 RVA: 0x00428640 File Offset: 0x00426840
		public static void PlaceUncheckedStalactite(int x, int y, bool preferSmall, int variation, bool spiders)
		{
			ushort type = 165;
			variation = Utils.Clamp<int>(variation, 0, 2);
			if (WorldGen.SolidTile(x, y - 1, false) && !Main.tile[x, y].active() && !Main.tile[x, y + 1].active())
			{
				if (spiders)
				{
					int num = 108 + variation * 18;
					Main.tile[x, y].type = type;
					Main.tile[x, y].active(true);
					Main.tile[x, y].frameX = (short)num;
					Main.tile[x, y].frameY = 0;
					Main.tile[x, y + 1].type = type;
					Main.tile[x, y + 1].active(true);
					Main.tile[x, y + 1].frameX = (short)num;
					Main.tile[x, y + 1].frameY = 18;
					return;
				}
				if (Main.tile[x, y - 1].type == 147 || Main.tile[x, y - 1].type == 161 || Main.tile[x, y - 1].type == 163 || Main.tile[x, y - 1].type == 164 || Main.tile[x, y - 1].type == 200)
				{
					if (preferSmall)
					{
						int num2 = variation * 18;
						Main.tile[x, y].type = type;
						Main.tile[x, y].active(true);
						Main.tile[x, y].frameX = (short)num2;
						Main.tile[x, y].frameY = 72;
					}
					else
					{
						int num3 = variation * 18;
						Main.tile[x, y].type = type;
						Main.tile[x, y].active(true);
						Main.tile[x, y].frameX = (short)num3;
						Main.tile[x, y].frameY = 0;
						Main.tile[x, y + 1].type = type;
						Main.tile[x, y + 1].active(true);
						Main.tile[x, y + 1].frameX = (short)num3;
						Main.tile[x, y + 1].frameY = 18;
					}
				}
				if (Main.tile[x, y - 1].type == 1 || Main.tileMoss[(int)Main.tile[x, y - 1].type] || Main.tile[x, y - 1].type == 117 || Main.tile[x, y - 1].type == 25 || Main.tile[x, y - 1].type == 203)
				{
					if (preferSmall)
					{
						int num4 = 54 + variation * 18;
						Main.tile[x, y].type = type;
						Main.tile[x, y].active(true);
						Main.tile[x, y].frameX = (short)num4;
						Main.tile[x, y].frameY = 72;
					}
					else
					{
						int num5 = 54 + variation * 18;
						Main.tile[x, y].type = type;
						Main.tile[x, y].active(true);
						Main.tile[x, y].frameX = (short)num5;
						Main.tile[x, y].frameY = 0;
						Main.tile[x, y + 1].type = type;
						Main.tile[x, y + 1].active(true);
						Main.tile[x, y + 1].frameX = (short)num5;
						Main.tile[x, y + 1].frameY = 18;
					}
				}
				if (Main.tile[x, y - 1].type == 225)
				{
					int num6 = 162 + variation * 18;
					Main.tile[x, y].type = type;
					Main.tile[x, y].active(true);
					Main.tile[x, y].frameX = (short)num6;
					Main.tile[x, y].frameY = 72;
				}
				if (Main.tile[x, y - 1].type == 396 || Main.tile[x, y - 1].type == 397)
				{
					if (preferSmall)
					{
						int num7 = 378 + variation * 18;
						Main.tile[x, y].type = type;
						Main.tile[x, y].active(true);
						Main.tile[x, y].frameX = (short)num7;
						Main.tile[x, y].frameY = 72;
					}
					else
					{
						int num8 = 378 + variation * 18;
						Main.tile[x, y].type = type;
						Main.tile[x, y].active(true);
						Main.tile[x, y].frameX = (short)num8;
						Main.tile[x, y].frameY = 0;
						Main.tile[x, y + 1].type = type;
						Main.tile[x, y + 1].active(true);
						Main.tile[x, y + 1].frameX = (short)num8;
						Main.tile[x, y + 1].frameY = 18;
					}
				}
				if (Main.tile[x, y - 1].type == 368)
				{
					if (preferSmall)
					{
						int num9 = 432 + variation * 18;
						Main.tile[x, y].type = type;
						Main.tile[x, y].active(true);
						Main.tile[x, y].frameX = (short)num9;
						Main.tile[x, y].frameY = 72;
					}
					else
					{
						int num10 = 432 + variation * 18;
						Main.tile[x, y].type = type;
						Main.tile[x, y].active(true);
						Main.tile[x, y].frameX = (short)num10;
						Main.tile[x, y].frameY = 0;
						Main.tile[x, y + 1].type = type;
						Main.tile[x, y + 1].active(true);
						Main.tile[x, y + 1].frameX = (short)num10;
						Main.tile[x, y + 1].frameY = 18;
					}
				}
				if (Main.tile[x, y - 1].type == 367)
				{
					if (preferSmall)
					{
						int num11 = 486 + variation * 18;
						Main.tile[x, y].type = type;
						Main.tile[x, y].active(true);
						Main.tile[x, y].frameX = (short)num11;
						Main.tile[x, y].frameY = 72;
						return;
					}
					int num12 = 486 + variation * 18;
					Main.tile[x, y].type = type;
					Main.tile[x, y].active(true);
					Main.tile[x, y].frameX = (short)num12;
					Main.tile[x, y].frameY = 0;
					Main.tile[x, y + 1].type = type;
					Main.tile[x, y + 1].active(true);
					Main.tile[x, y + 1].frameX = (short)num12;
					Main.tile[x, y + 1].frameY = 18;
					return;
				}
			}
			else
			{
				if (spiders)
				{
					return;
				}
				if (WorldGen.SolidTile(x, y + 1, false) && !Main.tile[x, y].active() && !Main.tile[x, y - 1].active())
				{
					if (Main.tile[x, y + 1].type == 1 || Main.tileMoss[(int)Main.tile[x, y + 1].type] || Main.tile[x, y - 1].type == 117 || Main.tile[x, y - 1].type == 25 || Main.tile[x, y - 1].type == 203)
					{
						if (preferSmall)
						{
							int num13 = 54 + variation * 18;
							Main.tile[x, y].type = type;
							Main.tile[x, y].active(true);
							Main.tile[x, y].frameX = (short)num13;
							Main.tile[x, y].frameY = 90;
						}
						else
						{
							int num14 = 54 + variation * 18;
							Main.tile[x, y - 1].type = type;
							Main.tile[x, y - 1].active(true);
							Main.tile[x, y - 1].frameX = (short)num14;
							Main.tile[x, y - 1].frameY = 36;
							Main.tile[x, y].type = type;
							Main.tile[x, y].active(true);
							Main.tile[x, y].frameX = (short)num14;
							Main.tile[x, y].frameY = 54;
						}
					}
					if (Main.tile[x, y + 1].type == 225)
					{
						int num15 = 162 + variation * 18;
						Main.tile[x, y].type = type;
						Main.tile[x, y].active(true);
						Main.tile[x, y].frameX = (short)num15;
						Main.tile[x, y].frameY = 90;
					}
					if (Main.tile[x, y + 1].type == 396 || Main.tile[x, y + 1].type == 397)
					{
						if (preferSmall)
						{
							int num16 = 378 + variation * 18;
							Main.tile[x, y].type = type;
							Main.tile[x, y].active(true);
							Main.tile[x, y].frameX = (short)num16;
							Main.tile[x, y].frameY = 90;
						}
						else
						{
							int num17 = 378 + variation * 18;
							Main.tile[x, y - 1].type = type;
							Main.tile[x, y - 1].active(true);
							Main.tile[x, y - 1].frameX = (short)num17;
							Main.tile[x, y - 1].frameY = 36;
							Main.tile[x, y].type = type;
							Main.tile[x, y].active(true);
							Main.tile[x, y].frameX = (short)num17;
							Main.tile[x, y].frameY = 54;
						}
					}
					if (Main.tile[x, y + 1].type == 368)
					{
						if (preferSmall)
						{
							int num18 = 432 + variation * 18;
							Main.tile[x, y].type = type;
							Main.tile[x, y].active(true);
							Main.tile[x, y].frameX = (short)num18;
							Main.tile[x, y].frameY = 90;
						}
						else
						{
							int num19 = 432 + variation * 18;
							Main.tile[x, y - 1].type = type;
							Main.tile[x, y - 1].active(true);
							Main.tile[x, y - 1].frameX = (short)num19;
							Main.tile[x, y - 1].frameY = 36;
							Main.tile[x, y].type = type;
							Main.tile[x, y].active(true);
							Main.tile[x, y].frameX = (short)num19;
							Main.tile[x, y].frameY = 54;
						}
					}
					if (Main.tile[x, y + 1].type == 367)
					{
						if (preferSmall)
						{
							int num20 = 486 + variation * 18;
							Main.tile[x, y].type = type;
							Main.tile[x, y].active(true);
							Main.tile[x, y].frameX = (short)num20;
							Main.tile[x, y].frameY = 90;
							return;
						}
						int num21 = 486 + variation * 18;
						Main.tile[x, y - 1].type = type;
						Main.tile[x, y - 1].active(true);
						Main.tile[x, y - 1].frameX = (short)num21;
						Main.tile[x, y - 1].frameY = 36;
						Main.tile[x, y].type = type;
						Main.tile[x, y].active(true);
						Main.tile[x, y].frameX = (short)num21;
						Main.tile[x, y].frameY = 54;
					}
				}
			}
		}

		// Token: 0x06000EE1 RID: 3809 RVA: 0x004293F0 File Offset: 0x004275F0
		public static bool UpdateStalagtiteStyle(int x, int j)
		{
			if (Main.netMode == 1)
			{
				return true;
			}
			if (Main.tile[x, j] == null)
			{
				return true;
			}
			int num;
			bool flag;
			WorldGen.GetStalagtiteStyle(x, j, out num, out flag);
			if (flag)
			{
				return false;
			}
			bool flag2;
			int num2;
			int num3;
			int num4;
			WorldGen.GetDesiredStalagtiteStyle(x, j, out flag2, out num2, out num3, out num4);
			if (flag2)
			{
				return false;
			}
			if (num != num2)
			{
				int num5 = WorldGen.genRand.Next(3) * 18;
				if (num2 == 0)
				{
					num5 += 54;
				}
				else if (num2 == 1)
				{
					num5 += 216;
				}
				else if (num2 == 2)
				{
					num5 += 270;
				}
				else if (num2 == 3)
				{
					num5 += 324;
				}
				else if (num2 == 4)
				{
					num5 += 378;
				}
				else if (num2 == 5)
				{
					num5 += 432;
				}
				else if (num2 == 6)
				{
					num5 += 486;
				}
				else if (num2 == 7)
				{
					num5 = num5;
				}
				else if (num2 == 8)
				{
					num5 += 540;
				}
				else if (num2 == 9)
				{
					num5 += 594;
				}
				else if (num2 == 10)
				{
					num5 += 648;
				}
				for (int i = num4; i < num4 + num3; i++)
				{
					Main.tile[x, i].frameX = (short)num5;
				}
				if (Main.netMode == 2)
				{
					NetMessage.SendTileSquare(-1, x, num4, 1, 2, TileChangeType.None);
				}
			}
			return true;
		}

		// Token: 0x06000EE2 RID: 3810 RVA: 0x00429540 File Offset: 0x00427740
		private static void GetDesiredStalagtiteStyle(int x, int j, out bool fail, out int desiredStyle, out int height, out int y)
		{
			fail = false;
			desiredStyle = 0;
			height = 1;
			y = j;
			if (Main.tile[x, y].frameY == 72)
			{
				desiredStyle = (int)Main.tile[x, y - 1].type;
			}
			else if (Main.tile[x, y].frameY == 90)
			{
				desiredStyle = (int)Main.tile[x, y + 1].type;
			}
			else if (Main.tile[x, y].frameY >= 36)
			{
				if (Main.tile[x, y].frameY == 54)
				{
					y--;
				}
				height = 2;
				desiredStyle = (int)Main.tile[x, y + 2].type;
			}
			else
			{
				if (Main.tile[x, y].frameY == 18)
				{
					y--;
				}
				height = 2;
				desiredStyle = (int)Main.tile[x, y - 1].type;
			}
			if (desiredStyle == 1 || Main.tileMoss[desiredStyle])
			{
				desiredStyle = 0;
				return;
			}
			if (desiredStyle == 200)
			{
				desiredStyle = 10;
				return;
			}
			if (desiredStyle == 164)
			{
				desiredStyle = 8;
				return;
			}
			if (desiredStyle == 163)
			{
				desiredStyle = 9;
				return;
			}
			if (desiredStyle == 117 || desiredStyle == 402 || desiredStyle == 403)
			{
				desiredStyle = 1;
				return;
			}
			if (desiredStyle == 25 || desiredStyle == 398 || desiredStyle == 400)
			{
				desiredStyle = 2;
				return;
			}
			if (desiredStyle == 203 || desiredStyle == 399 || desiredStyle == 401)
			{
				desiredStyle = 3;
				return;
			}
			if (desiredStyle == 396 || desiredStyle == 397)
			{
				desiredStyle = 4;
				return;
			}
			if (desiredStyle == 367)
			{
				desiredStyle = 6;
				return;
			}
			if (desiredStyle == 368)
			{
				desiredStyle = 5;
				return;
			}
			if (desiredStyle == 161 || desiredStyle == 147)
			{
				desiredStyle = 7;
				return;
			}
			fail = true;
		}

		// Token: 0x06000EE3 RID: 3811 RVA: 0x0042972C File Offset: 0x0042792C
		private static void GetStalagtiteStyle(int x, int y, out int style, out bool fail)
		{
			style = 0;
			fail = false;
			switch (Main.tile[x, y].frameX / 54)
			{
			case 0:
				style = 7;
				return;
			case 1:
				style = 0;
				return;
			default:
				fail = true;
				return;
			case 4:
				style = 1;
				return;
			case 5:
				style = 2;
				return;
			case 6:
				style = 3;
				return;
			case 7:
				style = 4;
				return;
			case 8:
				style = 5;
				return;
			case 9:
				style = 6;
				return;
			case 10:
				style = 8;
				return;
			case 11:
				style = 9;
				return;
			case 12:
				style = 10;
				return;
			}
		}

		// Token: 0x06000EE4 RID: 3812 RVA: 0x004297C0 File Offset: 0x004279C0
		public static void CheckTight(int x, int j)
		{
			if (Main.tile[x, j] == null)
			{
				return;
			}
			int num = j;
			if (Main.tile[x, num].frameY == 72)
			{
				if (Main.tile[x, num - 1] == null)
				{
					Main.tile[x, num - 1] = new Tile();
				}
				if (Main.tile[x, num] == null)
				{
					Main.tile[x, num] = new Tile();
				}
				if (Main.tile[x, num + 1] == null)
				{
					Main.tile[x, num + 1] = new Tile();
				}
				bool flag = false;
				if (!WorldGen.SolidTile(x, num - 1, false))
				{
					flag = true;
				}
				if (!flag && !WorldGen.UpdateStalagtiteStyle(x, num))
				{
					flag = true;
				}
				if (flag)
				{
					WorldGen.destroyObject = true;
					if (Main.tile[x, num].type == Main.tile[x, j].type)
					{
						WorldGen.KillTile(x, num, false, false, false);
					}
					WorldGen.destroyObject = false;
					return;
				}
			}
			else if (Main.tile[x, num].frameY == 90)
			{
				if (Main.tile[x, num - 1] == null)
				{
					Main.tile[x, num - 1] = new Tile();
				}
				if (Main.tile[x, num] == null)
				{
					Main.tile[x, num] = new Tile();
				}
				if (Main.tile[x, num + 1] == null)
				{
					Main.tile[x, num + 1] = new Tile();
				}
				bool flag2 = false;
				if (!WorldGen.SolidTile(x, num + 1, false))
				{
					flag2 = true;
				}
				if (!flag2 && !WorldGen.UpdateStalagtiteStyle(x, num))
				{
					flag2 = true;
				}
				if (flag2)
				{
					WorldGen.destroyObject = true;
					if (Main.tile[x, num].type == Main.tile[x, j].type)
					{
						WorldGen.KillTile(x, num, false, false, false);
					}
					WorldGen.destroyObject = false;
					return;
				}
			}
			else if (Main.tile[x, num].frameY >= 36)
			{
				if (Main.tile[x, num].frameY == 54)
				{
					num--;
				}
				if (Main.tile[x, num] == null)
				{
					Main.tile[x, num] = new Tile();
				}
				if (Main.tile[x, num + 1] == null)
				{
					Main.tile[x, num + 1] = new Tile();
				}
				if (Main.tile[x, num + 2] == null)
				{
					Main.tile[x, num + 2] = new Tile();
				}
				bool flag3 = false;
				if (!WorldGen.SolidTile(x, num + 2, false))
				{
					flag3 = true;
				}
				if (Main.tile[x, num + 1].type != Main.tile[x, num].type)
				{
					flag3 = true;
				}
				if (Main.tile[x, num + 1].frameX != Main.tile[x, num].frameX)
				{
					flag3 = true;
				}
				if (!flag3 && !WorldGen.UpdateStalagtiteStyle(x, num))
				{
					flag3 = true;
				}
				if (flag3)
				{
					WorldGen.destroyObject = true;
					if (Main.tile[x, num].type == Main.tile[x, j].type)
					{
						WorldGen.KillTile(x, num, false, false, false);
					}
					if (Main.tile[x, num + 1].type == Main.tile[x, j].type)
					{
						WorldGen.KillTile(x, num + 1, false, false, false);
					}
					WorldGen.destroyObject = false;
					return;
				}
			}
			else
			{
				if (Main.tile[x, num].frameY == 18)
				{
					num--;
				}
				if (Main.tile[x, num - 1] == null)
				{
					Main.tile[x, num - 1] = new Tile();
				}
				if (Main.tile[x, num] == null)
				{
					Main.tile[x, num] = new Tile();
				}
				if (Main.tile[x, num + 1] == null)
				{
					Main.tile[x, num + 1] = new Tile();
				}
				bool flag4 = false;
				if (!WorldGen.SolidTile(x, num - 1, false))
				{
					flag4 = true;
				}
				if (Main.tile[x, num + 1].type != Main.tile[x, num].type)
				{
					flag4 = true;
				}
				if (Main.tile[x, num + 1].frameX != Main.tile[x, num].frameX)
				{
					flag4 = true;
				}
				if (!flag4 && !WorldGen.UpdateStalagtiteStyle(x, num))
				{
					flag4 = true;
				}
				if (flag4)
				{
					WorldGen.destroyObject = true;
					if (Main.tile[x, num].type == Main.tile[x, j].type)
					{
						WorldGen.KillTile(x, num, false, false, false);
					}
					if (Main.tile[x, num + 1].type == Main.tile[x, j].type)
					{
						WorldGen.KillTile(x, num + 1, false, false, false);
					}
					WorldGen.destroyObject = false;
				}
			}
		}

		// Token: 0x06000EE5 RID: 3813 RVA: 0x00429C70 File Offset: 0x00427E70
		public static void Place1xX(int x, int y, ushort type, int style = 0)
		{
			int num = style * 18;
			int num2 = 3;
			if (type == 92)
			{
				num2 = 6;
			}
			bool flag = true;
			for (int i = y - num2 + 1; i < y + 1; i++)
			{
				if (Main.tile[x, i] == null)
				{
					Main.tile[x, i] = new Tile();
				}
				if (Main.tile[x, i].active())
				{
					flag = false;
				}
				if (type == 93 && Main.tile[x, i].liquid > 0)
				{
					flag = false;
				}
			}
			if (flag && WorldGen.SolidTile2(x, y + 1))
			{
				for (int j = 0; j < num2; j++)
				{
					Main.tile[x, y - num2 + 1 + j].active(true);
					Main.tile[x, y - num2 + 1 + j].frameY = (short)(j * 18 + num2 * num);
					Main.tile[x, y - num2 + 1 + j].frameX = 0;
					Main.tile[x, y - num2 + 1 + j].type = type;
				}
			}
		}

		// Token: 0x06000EE6 RID: 3814 RVA: 0x00429D7C File Offset: 0x00427F7C
		public static int checkXmasTreeDrop(int x, int y, int obj)
		{
			int num = x;
			int num2 = y;
			if (Main.tile[x, y].frameX < 10)
			{
				num -= (int)Main.tile[x, y].frameX;
				num2 -= (int)Main.tile[x, y].frameY;
			}
			int num3 = 0;
			if ((Main.tile[num, num2].frameY & 1) == 1)
			{
				num3++;
			}
			if ((Main.tile[num, num2].frameY & 2) == 2)
			{
				num3 += 2;
			}
			if ((Main.tile[num, num2].frameY & 4) == 4)
			{
				num3 += 4;
			}
			int num4 = 0;
			if ((Main.tile[num, num2].frameY & 8) == 8)
			{
				num4++;
			}
			if ((Main.tile[num, num2].frameY & 16) == 16)
			{
				num4 += 2;
			}
			if ((Main.tile[num, num2].frameY & 32) == 32)
			{
				num4 += 4;
			}
			int num5 = 0;
			if ((Main.tile[num, num2].frameY & 64) == 64)
			{
				num5++;
			}
			if ((Main.tile[num, num2].frameY & 128) == 128)
			{
				num5 += 2;
			}
			if ((Main.tile[num, num2].frameY & 256) == 256)
			{
				num5 += 4;
			}
			if ((Main.tile[num, num2].frameY & 512) == 512)
			{
				num5 += 8;
			}
			int num6 = 0;
			if ((Main.tile[num, num2].frameY & 1024) == 1024)
			{
				num6++;
			}
			if ((Main.tile[num, num2].frameY & 2048) == 2048)
			{
				num6 += 2;
			}
			if ((Main.tile[num, num2].frameY & 4096) == 4096)
			{
				num6 += 4;
			}
			if ((Main.tile[num, num2].frameY & 8192) == 8192)
			{
				num6 += 8;
			}
			if (obj == 0 && num3 > 0)
			{
				return num3;
			}
			if (obj == 1 && num4 > 0)
			{
				return num4;
			}
			if (obj == 2 && num5 > 0)
			{
				return num5;
			}
			if (obj == 3 && num6 > 0)
			{
				return num6;
			}
			return -1;
		}

		// Token: 0x06000EE7 RID: 3815 RVA: 0x00429FBC File Offset: 0x004281BC
		public static void dropXmasTree(int x, int y, int obj)
		{
			int num = x;
			int num2 = y;
			if (Main.tile[x, y].frameX < 10)
			{
				num -= (int)Main.tile[x, y].frameX;
				num2 -= (int)Main.tile[x, y].frameY;
			}
			int num3 = 0;
			if ((Main.tile[num, num2].frameY & 1) == 1)
			{
				num3++;
			}
			if ((Main.tile[num, num2].frameY & 2) == 2)
			{
				num3 += 2;
			}
			if ((Main.tile[num, num2].frameY & 4) == 4)
			{
				num3 += 4;
			}
			int num4 = 0;
			if ((Main.tile[num, num2].frameY & 8) == 8)
			{
				num4++;
			}
			if ((Main.tile[num, num2].frameY & 16) == 16)
			{
				num4 += 2;
			}
			if ((Main.tile[num, num2].frameY & 32) == 32)
			{
				num4 += 4;
			}
			int num5 = 0;
			if ((Main.tile[num, num2].frameY & 64) == 64)
			{
				num5++;
			}
			if ((Main.tile[num, num2].frameY & 128) == 128)
			{
				num5 += 2;
			}
			if ((Main.tile[num, num2].frameY & 256) == 256)
			{
				num5 += 4;
			}
			if ((Main.tile[num, num2].frameY & 512) == 512)
			{
				num5 += 8;
			}
			int num6 = 0;
			if ((Main.tile[num, num2].frameY & 1024) == 1024)
			{
				num6++;
			}
			if ((Main.tile[num, num2].frameY & 2048) == 2048)
			{
				num6 += 2;
			}
			if ((Main.tile[num, num2].frameY & 4096) == 4096)
			{
				num6 += 4;
			}
			if ((Main.tile[num, num2].frameY & 8192) == 8192)
			{
				num6 += 8;
			}
			if (obj == 0 && num3 > 0)
			{
				int number = Item.NewItem(WorldGen.GetItemSource_FromTileBreak(x, y), x * 16, y * 16, 16, 16, 1874 + num3 - 1, 1, false, 0, false, false);
				if (Main.netMode == 1)
				{
					NetMessage.SendData(21, -1, -1, null, number, 1f, 0f, 0f, 0, 0, 0);
					return;
				}
			}
			else if (obj == 1 && num4 > 0)
			{
				int number2 = Item.NewItem(WorldGen.GetItemSource_FromTileBreak(x, y), x * 16, y * 16, 16, 16, 1878 + num4 - 1, 1, false, 0, false, false);
				if (Main.netMode == 1)
				{
					NetMessage.SendData(21, -1, -1, null, number2, 1f, 0f, 0f, 0, 0, 0);
					return;
				}
			}
			else if (obj == 2 && num5 > 0)
			{
				int number3 = Item.NewItem(WorldGen.GetItemSource_FromTileBreak(x, y), x * 16, y * 16, 16, 16, 1884 + num5 - 1, 1, false, 0, false, false);
				if (Main.netMode == 1)
				{
					NetMessage.SendData(21, -1, -1, null, number3, 1f, 0f, 0f, 0, 0, 0);
					return;
				}
			}
			else if (obj == 3 && num6 > 0)
			{
				int number4 = Item.NewItem(WorldGen.GetItemSource_FromTileBreak(x, y), x * 16, y * 16, 16, 16, 1895 + num6 - 1, 1, false, 0, false, false);
				if (Main.netMode == 1)
				{
					NetMessage.SendData(21, -1, -1, null, number4, 1f, 0f, 0f, 0, 0, 0);
				}
			}
		}

		// Token: 0x06000EE8 RID: 3816 RVA: 0x0042A334 File Offset: 0x00428534
		public static void setXmasTree(int x, int y, int obj, int style)
		{
			int num = x;
			int num2 = y;
			if (Main.tile[x, y].frameX < 10)
			{
				num -= (int)Main.tile[x, y].frameX;
				num2 -= (int)Main.tile[x, y].frameY;
			}
			if (obj == 0)
			{
				if ((style & 1) == 1)
				{
					Tile tile = Main.tile[num, num2];
					tile.frameY |= 1;
				}
				else
				{
					Main.tile[num, num2].frameY = (Main.tile[num, num2].frameY & -2);
				}
				if ((style & 2) == 2)
				{
					Tile tile2 = Main.tile[num, num2];
					tile2.frameY |= 2;
				}
				else
				{
					Main.tile[num, num2].frameY = (Main.tile[num, num2].frameY & -3);
				}
				if ((style & 4) == 4)
				{
					Tile tile3 = Main.tile[num, num2];
					tile3.frameY |= 4;
				}
				else
				{
					Main.tile[num, num2].frameY = (Main.tile[num, num2].frameY & -5);
				}
			}
			if (obj == 1)
			{
				if ((style & 1) == 1)
				{
					Tile tile4 = Main.tile[num, num2];
					tile4.frameY |= 8;
				}
				else
				{
					Main.tile[num, num2].frameY = (Main.tile[num, num2].frameY & -9);
				}
				if ((style & 2) == 2)
				{
					Tile tile5 = Main.tile[num, num2];
					tile5.frameY |= 16;
				}
				else
				{
					Main.tile[num, num2].frameY = (Main.tile[num, num2].frameY & -17);
				}
				if ((style & 4) == 4)
				{
					Tile tile6 = Main.tile[num, num2];
					tile6.frameY |= 32;
				}
				else
				{
					Main.tile[num, num2].frameY = (Main.tile[num, num2].frameY & -33);
				}
			}
			if (obj == 2)
			{
				if ((style & 1) == 1)
				{
					Tile tile7 = Main.tile[num, num2];
					tile7.frameY |= 64;
				}
				else
				{
					Main.tile[num, num2].frameY = (Main.tile[num, num2].frameY & -65);
				}
				if ((style & 2) == 2)
				{
					Tile tile8 = Main.tile[num, num2];
					tile8.frameY |= 128;
				}
				else
				{
					Main.tile[num, num2].frameY = (Main.tile[num, num2].frameY & -129);
				}
				if ((style & 4) == 4)
				{
					Tile tile9 = Main.tile[num, num2];
					tile9.frameY |= 256;
				}
				else
				{
					Main.tile[num, num2].frameY = (Main.tile[num, num2].frameY & -257);
				}
				if ((style & 8) == 8)
				{
					Tile tile10 = Main.tile[num, num2];
					tile10.frameY |= 512;
				}
				else
				{
					Main.tile[num, num2].frameY = (Main.tile[num, num2].frameY & -513);
				}
			}
			if (obj == 3)
			{
				if ((style & 1) == 1)
				{
					Tile tile11 = Main.tile[num, num2];
					tile11.frameY |= 1024;
				}
				else
				{
					Main.tile[num, num2].frameY = (Main.tile[num, num2].frameY & -1025);
				}
				if ((style & 2) == 2)
				{
					Tile tile12 = Main.tile[num, num2];
					tile12.frameY |= 2048;
				}
				else
				{
					Main.tile[num, num2].frameY = (Main.tile[num, num2].frameY & -2049);
				}
				if ((style & 4) == 4)
				{
					Tile tile13 = Main.tile[num, num2];
					tile13.frameY |= 4096;
				}
				else
				{
					Main.tile[num, num2].frameY = (Main.tile[num, num2].frameY & -4097);
				}
				if ((style & 8) == 8)
				{
					Tile tile14 = Main.tile[num, num2];
					tile14.frameY |= 8192;
					return;
				}
				Main.tile[num, num2].frameY = (Main.tile[num, num2].frameY & -8193);
			}
		}

		// Token: 0x06000EE9 RID: 3817 RVA: 0x0042A7C0 File Offset: 0x004289C0
		public static int PlaceXmasTree_Direct(int x, int y, int type, int style, int dir, int alternate)
		{
			for (short num = 0; num < 4; num += 1)
			{
				for (short num2 = 0; num2 < 8; num2 += 1)
				{
					Tile tile = Main.tile[x + (int)num, y + (int)num2];
					tile.active(true);
					tile.type = (ushort)type;
					if (num == 0 && num2 == 0)
					{
						tile.frameX = 10;
						tile.frameY = 0;
					}
					else
					{
						tile.frameX = num;
						tile.frameY = num2;
					}
				}
			}
			return 0;
		}

		// Token: 0x06000EEA RID: 3818 RVA: 0x0042A830 File Offset: 0x00428A30
		public static void PlaceXmasTree(int x, int y, ushort type = 171)
		{
			bool flag = true;
			int num = x - 1;
			int num2 = y - 7;
			for (int i = num; i < num + 4; i++)
			{
				for (int j = num2; j < num2 + 8; j++)
				{
					if (Main.tile[i, j].active())
					{
						flag = false;
					}
				}
				if (i > num && i < num + 3 && !WorldGen.SolidTile(i, num2 + 8, false))
				{
					flag = false;
				}
			}
			if (flag)
			{
				int num3 = 0;
				for (int k = num; k < num + 4; k++)
				{
					int num4 = 0;
					for (int l = num2; l < num2 + 8; l++)
					{
						Main.tile[k, l].active(true);
						if (num3 == 0 && num4 == 0)
						{
							Main.tile[k, l].frameX = 10;
							Main.tile[k, l].frameY = 0;
						}
						else
						{
							Main.tile[k, l].frameX = (short)num3;
							Main.tile[k, l].frameY = (short)num4;
						}
						Main.tile[k, l].type = type;
						Main.tile[k, l].active(true);
						num4++;
					}
					num3++;
				}
			}
		}

		// Token: 0x06000EEB RID: 3819 RVA: 0x0042A978 File Offset: 0x00428B78
		public static void CheckXmasTree(int x, int y)
		{
			if (WorldGen.destroyObject)
			{
				return;
			}
			int num = x;
			int num2 = y;
			if (Main.tile[x, y].frameX < 10)
			{
				num -= (int)Main.tile[x, y].frameX;
				num2 -= (int)Main.tile[x, y].frameY;
			}
			bool flag = false;
			int num3 = 0;
			for (int i = num; i < num + 4; i++)
			{
				int num4 = 0;
				for (int j = num2; j < num2 + 8; j++)
				{
					if (Main.tile[i, j].active() && Main.tile[i, j].type == 171)
					{
						if (num3 != 0 && num4 != 0 && (int)Main.tile[i, j].frameX != num3 && (int)Main.tile[i, j].frameY != num4)
						{
							flag = true;
						}
					}
					else
					{
						flag = true;
					}
					num4++;
				}
				num3++;
				if (i > num && i < num + 3 && !WorldGen.SolidTile2(i, num2 + 8))
				{
					flag = true;
				}
			}
			if (flag)
			{
				WorldGen.destroyObject = true;
				for (int k = num; k < num + 4; k++)
				{
					for (int l = num2; l < num2 + 8; l++)
					{
						if (Main.tile[k, l].type == 171)
						{
							WorldGen.KillTile(k, l, false, false, false);
						}
					}
				}
				Item.NewItem(WorldGen.GetItemSource_FromTileBreak(x, y), x * 16, y * 16, 32, 32, 1873, 1, false, 0, false, false);
				WorldGen.destroyObject = false;
			}
		}

		// Token: 0x06000EEC RID: 3820 RVA: 0x0042AB08 File Offset: 0x00428D08
		public static void Place2xX(int x, int y, ushort type, int style = 0)
		{
			int num = style * 36;
			int num2 = 0;
			int num3 = 3;
			if (type == 105 && style == 34)
			{
				type = 349;
				style = 0;
				num = 0;
			}
			if (type == 105)
			{
				int num4 = style / 55;
				num -= 1980 * num4;
				num2 += 54 * num4;
			}
			if (type == 104)
			{
				num3 = 5;
			}
			if (type == 207)
			{
				num3 = 4;
			}
			bool flag = true;
			for (int i = y - num3 + 1; i < y + 1; i++)
			{
				if (Main.tile[x, i] == null)
				{
					Main.tile[x, i] = new Tile();
				}
				if (Main.tile[x, i].active())
				{
					flag = false;
				}
				if (Main.tile[x + 1, i] == null)
				{
					Main.tile[x + 1, i] = new Tile();
				}
				if (Main.tile[x + 1, i].active())
				{
					flag = false;
				}
			}
			if (flag && WorldGen.SolidTile2(x, y + 1) && WorldGen.SolidTile2(x + 1, y + 1))
			{
				for (int j = 0; j < num3; j++)
				{
					Main.tile[x, y - num3 + 1 + j].active(true);
					Main.tile[x, y - num3 + 1 + j].frameY = (short)(num2 + j * 18);
					Main.tile[x, y - num3 + 1 + j].frameX = (short)num;
					Main.tile[x, y - num3 + 1 + j].type = type;
					Main.tile[x + 1, y - num3 + 1 + j].active(true);
					Main.tile[x + 1, y - num3 + 1 + j].frameY = (short)(num2 + j * 18);
					Main.tile[x + 1, y - num3 + 1 + j].frameX = (short)(num + 18);
					Main.tile[x + 1, y - num3 + 1 + j].type = type;
				}
			}
		}

		// Token: 0x06000EED RID: 3821 RVA: 0x0042AD10 File Offset: 0x00428F10
		public static int GetItemDrop_Benches(int style)
		{
			switch (style)
			{
			default:
				return 335;
			case 1:
				return 2397;
			case 2:
				return 2398;
			case 3:
				return 2399;
			case 4:
				return 2400;
			case 5:
				return 2401;
			case 6:
				return 2402;
			case 7:
				return 2403;
			case 8:
				return 2404;
			case 9:
				return 2405;
			case 10:
				return 2406;
			case 11:
				return 2407;
			case 12:
				return 2408;
			case 13:
				return 2409;
			case 14:
				return 2410;
			case 15:
				return 2411;
			case 16:
				return 2412;
			case 17:
				return 2413;
			case 18:
				return 2414;
			case 19:
				return 2415;
			case 20:
				return 2416;
			case 21:
				return 2521;
			case 22:
				return 2527;
			case 23:
				return 2539;
			case 24:
				return 858;
			case 25:
				return 2582;
			case 26:
				return 2634;
			case 27:
				return 2635;
			case 28:
				return 2636;
			case 29:
				return 2823;
			case 30:
				return 3150;
			case 31:
				return 3152;
			case 32:
				return 3151;
			case 33:
				return 3918;
			case 34:
				return 3919;
			case 35:
				return 3947;
			case 36:
				return 3973;
			case 37:
				return 4161;
			case 38:
				return 4182;
			case 39:
				return 4203;
			case 40:
				return 4224;
			case 41:
				return 4313;
			case 42:
				return 4582;
			case 43:
				return 4993;
			case 44:
				return 5164;
			case 45:
				return 5185;
			case 46:
				return 5206;
			}
		}

		// Token: 0x06000EEE RID: 3822 RVA: 0x0042AEF8 File Offset: 0x004290F8
		public static int GetItemDrop_PicnicTables(int style)
		{
			if (style == 0 || style != 1)
			{
				return 4064;
			}
			return 4065;
		}

		// Token: 0x06000EEF RID: 3823 RVA: 0x0042AF0C File Offset: 0x0042910C
		public static int GetItemDrop_Chair(int style)
		{
			switch (style)
			{
			case 1:
				return 358;
			case 2:
				return 628;
			case 3:
				return 629;
			case 4:
				return 630;
			case 5:
				return 806;
			case 6:
				return 807;
			case 7:
				return 808;
			case 8:
				return 809;
			case 9:
				return 810;
			case 10:
				return 826;
			case 11:
				return 915;
			case 12:
				return 1143;
			case 13:
				return 1396;
			case 14:
				return 1399;
			case 15:
				return 1402;
			case 16:
				return 1459;
			case 17:
				return 1509;
			case 18:
			case 19:
			case 20:
			case 21:
			case 22:
			case 23:
				return 1703 + style - 18;
			case 24:
				return 1792;
			case 25:
				return 1814;
			case 26:
				return 1925;
			case 27:
				return 2228;
			case 28:
				return 2288;
			case 29:
				return 2524;
			case 30:
				return 2557;
			case 31:
				return 2572;
			case 32:
				return 2812;
			case 33:
				return 3174;
			case 34:
				return 3176;
			case 35:
				return 3175;
			case 36:
				return 3889;
			case 37:
				return 3937;
			case 38:
				return 3963;
			case 39:
				return 4151;
			case 40:
				return 4172;
			case 41:
				return 4193;
			case 42:
				return 4214;
			case 43:
				return 4304;
			case 44:
				return 4572;
			case 45:
				return 5154;
			case 46:
				return 5175;
			case 47:
				return 5196;
			default:
				return 34;
			}
		}

		// Token: 0x06000EF0 RID: 3824 RVA: 0x0042B0E0 File Offset: 0x004292E0
		public static int GetItemDrop_Toilet(int style)
		{
			int num = 4096 + style;
			switch (style)
			{
			case 32:
				num = 4141;
				break;
			case 33:
				num = 4165;
				break;
			case 34:
				num = 4186;
				break;
			case 35:
				num = 4207;
				break;
			case 36:
				num = 4228;
				break;
			case 37:
				num = 4316;
				break;
			case 38:
				num = 4586;
				break;
			case 39:
				num = 4731;
				break;
			case 40:
				num = 5168;
				break;
			case 41:
				num = 5189;
				break;
			case 42:
				num = 5210;
				break;
			}
			if (num > 5210)
			{
				num = 5210;
			}
			return num;
		}

		// Token: 0x06000EF1 RID: 3825 RVA: 0x0042B194 File Offset: 0x00429394
		public static void Check1x2(int x, int j, ushort type)
		{
			if (WorldGen.destroyObject)
			{
				return;
			}
			int num = j;
			bool flag = true;
			if (Main.tile[x, num] == null)
			{
				Main.tile[x, num] = new Tile();
			}
			if (Main.tile[x, num + 1] == null)
			{
				Main.tile[x, num + 1] = new Tile();
			}
			int i = (int)Main.tile[x, num].frameY;
			int num2 = 0;
			while (i >= 40)
			{
				i -= 40;
				num2++;
			}
			if (i == 18)
			{
				num--;
			}
			int num3 = (int)(Main.tile[x, num].frameX / 18);
			if (Main.tile[x, num].frameX == -1)
			{
				num3 = (int)(Main.tile[x, num + 1].frameX / 18);
			}
			if (Main.tile[x, num] == null)
			{
				Main.tile[x, num] = new Tile();
			}
			if ((int)Main.tile[x, num].frameY == 40 * num2 && (int)Main.tile[x, num + 1].frameY == 40 * num2 + 18 && Main.tile[x, num].type == type && Main.tile[x, num + 1].type == type)
			{
				flag = false;
			}
			if (Main.tile[x, num + 2] == null)
			{
				Main.tile[x, num + 2] = new Tile();
			}
			if (!WorldGen.SolidTileAllowBottomSlope(x, num + 2) && !TileID.Sets.Platforms[(int)Main.tile[x, num + 2].type])
			{
				flag = true;
			}
			if (Main.tile[x, num].type == 20)
			{
				int num4 = (int)(Main.tile[x, num].frameX / 54);
				int type2 = (int)Main.tile[x, num + 2].type;
				int num5 = -1;
				if (type2 == 2 || type2 == 477)
				{
					num5 = 0;
				}
				else if (type2 == 147)
				{
					num5 = 1;
				}
				else if (type2 == 60)
				{
					num5 = 2;
				}
				else if (type2 == 23 || type2 == 661)
				{
					num5 = 3;
				}
				else if (type2 == 199 || type2 == 662)
				{
					num5 = 4;
				}
				else if (type2 == 109 || type2 == 492)
				{
					num5 = 5;
				}
				else if (type2 == 53)
				{
					num5 = 6;
				}
				else if (type2 == 116)
				{
					num5 = 7;
				}
				else if (type2 == 234)
				{
					num5 = 8;
				}
				else if (type2 == 112)
				{
					num5 = 9;
				}
				else if (type2 == 633)
				{
					num5 = 10;
				}
				else
				{
					flag = true;
				}
				if (!flag && num4 != num5)
				{
					int num6 = 54 * num5;
					num6 += WorldGen.genRand.Next(3) * 18;
					Main.tile[x, num].frameX = (short)num6;
					Main.tile[x, num + 1].frameX = (short)num6;
				}
			}
			if (flag)
			{
				WorldGen.destroyObject = true;
				if (Main.tile[x, num].type == type)
				{
					WorldGen.KillTile(x, num, false, false, false);
				}
				if (Main.tile[x, num + 1].type == type)
				{
					WorldGen.KillTile(x, num + 1, false, false, false);
				}
				if (type == 216)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(x, num), x * 16, num * 16, 32, 32, 970 + num2, 1, false, 0, false, false);
				}
				if (type == 338)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(x, num), x * 16, num * 16, 32, 32, 2738, 1, false, 0, false, false);
				}
				if (type == 390)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(x, num), x * 16, num * 16, 16, 32, 3253, 1, false, 0, false, false);
				}
				if (type == 493)
				{
					int num7 = 0;
					switch (num3)
					{
					case 0:
						num7 = 4083;
						break;
					case 1:
						num7 = 4084;
						break;
					case 2:
						num7 = 4085;
						break;
					case 3:
						num7 = 4086;
						break;
					case 4:
						num7 = 4087;
						break;
					case 5:
						num7 = 4088;
						break;
					}
					if (num7 > 0)
					{
						Item.NewItem(WorldGen.GetItemSource_FromTileBreak(x, num), x * 16, num * 16, 32, 32, num7, 1, false, 0, false, false);
					}
				}
				if (type == 15)
				{
					int itemDrop_Chair = WorldGen.GetItemDrop_Chair(num2);
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(x, num), x * 16, num * 16, 32, 32, itemDrop_Chair, 1, false, 0, false, false);
				}
				if (type == 497)
				{
					int itemDrop_Toilet = WorldGen.GetItemDrop_Toilet(num2);
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(x, num), x * 16, num * 16, 32, 32, itemDrop_Toilet, 1, false, 0, false, false);
				}
				else if (type == 134)
				{
					if (num2 == 1)
					{
						Item.NewItem(WorldGen.GetItemSource_FromTileBreak(x, num), x * 16, num * 16, 32, 32, 1220, 1, false, 0, false, false);
					}
					else
					{
						Item.NewItem(WorldGen.GetItemSource_FromTileBreak(x, num), x * 16, num * 16, 32, 32, 525, 1, false, 0, false, false);
					}
				}
				WorldGen.destroyObject = false;
			}
		}

		// Token: 0x06000EF2 RID: 3826 RVA: 0x0042B67C File Offset: 0x0042987C
		public static void CheckOnTable1x1(int x, int y, int type)
		{
			if (Main.tile[x, y + 1] != null)
			{
				if (Main.tile[x, y + 1].topSlope())
				{
					if (!TileID.Sets.Platforms[(int)Main.tile[x, y + 1].type])
					{
						WorldGen.KillTile(x, y, false, false, false);
						return;
					}
					if ((Main.tile[x, y + 1].blockType() != 3 || !Main.tile[x - 1, y + 1].active() || Main.tile[x - 1, y + 1].blockType() != 0 || !TileID.Sets.Platforms[(int)Main.tile[x - 1, y + 1].type]) && (Main.tile[x, y + 1].blockType() != 2 || !Main.tile[x + 1, y + 1].active() || Main.tile[x + 1, y + 1].blockType() != 0 || !TileID.Sets.Platforms[(int)Main.tile[x + 1, y + 1].type]))
					{
						WorldGen.KillTile(x, y, false, false, false);
						return;
					}
				}
				else if (!Main.tile[x, y + 1].active() || !Main.tileTable[(int)Main.tile[x, y + 1].type] || Main.tile[x, y + 1].halfBrick())
				{
					if (type == 78)
					{
						if (!WorldGen.SolidTileAllowBottomSlope(x, y + 1))
						{
							WorldGen.KillTile(x, y, false, false, false);
							return;
						}
					}
					else
					{
						WorldGen.KillTile(x, y, false, false, false);
					}
				}
			}
		}

		// Token: 0x06000EF3 RID: 3827 RVA: 0x0042B81C File Offset: 0x00429A1C
		public static void CheckSign(int x, int y, ushort type)
		{
			if (WorldGen.destroyObject)
			{
				return;
			}
			int num = x - 2;
			int num2 = x + 3;
			int num3 = y - 2;
			int num4 = y + 3;
			if (num < 0)
			{
				return;
			}
			if (num2 > Main.maxTilesX)
			{
				return;
			}
			if (num3 < 0)
			{
				return;
			}
			if (num4 > Main.maxTilesY)
			{
				return;
			}
			bool flag = false;
			for (int i = num; i < num2; i++)
			{
				for (int j = num3; j < num4; j++)
				{
					if (Main.tile[i, j] == null)
					{
						Main.tile[i, j] = new Tile();
					}
				}
			}
			int num5 = (int)(Main.tile[x, y].frameX / 18);
			int num6 = (int)(Main.tile[x, y].frameY / 18);
			num5 %= 2;
			num6 %= 2;
			int num7 = x - num5;
			int num8 = y - num6;
			int num9 = (int)(Main.tile[num7, num8].frameX / 18 / 2);
			int num10 = (int)(Main.tile[num7, num8].frameY / 18 / 2);
			int k = (int)(Main.tile[x, y].frameX / 18);
			int num11 = 0;
			while (k > 1)
			{
				k -= 2;
				num11++;
			}
			num = num7;
			num2 = num7 + 2;
			num3 = num8;
			num4 = num8 + 2;
			num5 = 0;
			for (int l = num; l < num2; l++)
			{
				num6 = 0;
				for (int m = num3; m < num4; m++)
				{
					if (!Main.tile[l, m].active() || Main.tile[l, m].type != type)
					{
						flag = true;
						break;
					}
					if ((int)(Main.tile[l, m].frameX / 18) != num5 + num9 * 2 || (int)(Main.tile[l, m].frameY / 18) != num6 + num10 * 2)
					{
						flag = true;
						break;
					}
					num6++;
				}
				num5++;
			}
			if (!flag)
			{
				if (type == 85)
				{
					if (WorldGen.SolidTileAllowBottomSlope(num7, num8 + 2) && WorldGen.SolidTileAllowBottomSlope(num7 + 1, num8 + 2))
					{
						num9 = num11;
					}
					else
					{
						flag = true;
					}
				}
				else if (WorldGen.TopEdgeCanBeAttachedTo(num7, num8 + 2) && WorldGen.TopEdgeCanBeAttachedTo(num7 + 1, num8 + 2))
				{
					num9 = 0;
				}
				else if (WorldGen.BottomEdgeCanBeAttachedTo(num7, num8 - 1) && WorldGen.BottomEdgeCanBeAttachedTo(num7 + 1, num8 - 1))
				{
					num9 = 1;
				}
				else if (WorldGen.RightEdgeCanBeAttachedTo(num7 - 1, num8) && WorldGen.RightEdgeCanBeAttachedTo(num7 - 1, num8 + 1))
				{
					num9 = 2;
				}
				else if (WorldGen.LeftEdgeCanBeAttachedTo(num7 + 2, num8) && WorldGen.LeftEdgeCanBeAttachedTo(num7 + 2, num8 + 1))
				{
					num9 = 3;
				}
				else if (Main.tile[num7, num8].wall > 0 && Main.tile[num7 + 1, num8].wall > 0 && Main.tile[num7, num8 + 1].wall > 0 && Main.tile[num7 + 1, num8 + 1].wall > 0)
				{
					num9 = 4;
				}
				else
				{
					flag = true;
				}
			}
			if (flag)
			{
				if (type == 395)
				{
					int num12 = TEItemFrame.Find(num7, num8);
					if (num12 != -1 && ((TEItemFrame)TileEntity.ByID[num12]).item.stack > 0)
					{
						((TEItemFrame)TileEntity.ByID[num12]).DropItem();
						if (Main.netMode != 2)
						{
							Main.LocalPlayer.InterruptItemUsageIfOverTile(395);
						}
					}
				}
				WorldGen.destroyObject = true;
				for (int n = num; n < num2; n++)
				{
					for (int num13 = num3; num13 < num4; num13++)
					{
						if (Main.tile[n, num13].type == type)
						{
							WorldGen.KillTile(n, num13, false, false, false);
						}
					}
				}
				if (type != 395)
				{
					Sign.KillSign(num7, num8);
				}
				if (type == 85)
				{
					int type2 = 321;
					if (num11 >= 6 && num11 <= 10)
					{
						type2 = 3229 + num11 - 6;
					}
					else if (num11 >= 1 && num11 <= 5)
					{
						type2 = 1173 + num11 - 1;
					}
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(x, y), x * 16, y * 16, 32, 32, type2, 1, false, 0, false, false);
					if (Main.netMode != 1 && WorldGen.genRand.Next(2) == 0 && NPC.CountNPCS(316) < 2)
					{
						int num14 = (int)Player.FindClosest(new Vector2((float)(x * 16), (float)(y * 16)), 16, 16);
						if (Main.player[num14].ZoneGraveyard || !Main.dayTime || (double)y > Main.worldSurface)
						{
							NPC.SpawnOnPlayer(num14, 316);
						}
					}
				}
				else if (type == 395)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(num7, num8), num7 * 16, num8 * 16, 32, 32, 3270, 1, false, 0, false, false);
					TEItemFrame.Kill(num7, num8);
				}
				else if (type == 425)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(num7, num8), num7 * 16, num8 * 16, 32, 32, 3617, 1, false, 0, false, false);
				}
				else if (type == 573)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(num7, num8), num7 * 16, num8 * 16, 32, 32, 4710, 1, false, 0, false, false);
				}
				else if (type == 511)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(num7, num8), num7 * 16, num8 * 16, 32, 32, 4320, 1, false, 0, false, false);
				}
				else if (type == 510)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(num7, num8), num7 * 16, num8 * 16, 32, 32, 4319, 1, false, 0, false, false);
				}
				else
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(x, y), x * 16, y * 16, 32, 32, 171, 1, false, 0, false, false);
				}
				WorldGen.destroyObject = false;
				return;
			}
			int num15 = 36 * num9;
			for (int num16 = 0; num16 < 2; num16++)
			{
				for (int num17 = 0; num17 < 2; num17++)
				{
					Main.tile[num7 + num16, num8 + num17].active(true);
					Main.tile[num7 + num16, num8 + num17].type = type;
					Main.tile[num7 + num16, num8 + num17].frameX = (short)(num15 + 18 * num16);
					Main.tile[num7 + num16, num8 + num17].frameY = (short)(18 * num17 + num10 * 36);
				}
			}
		}

		// Token: 0x06000EF4 RID: 3828 RVA: 0x0042BEAC File Offset: 0x0042A0AC
		public static bool PlaceSign(int x, int y, ushort type, int Style = 0)
		{
			int num = x - 2;
			int num2 = x + 3;
			int num3 = y - 2;
			int num4 = y + 3;
			if (num < 0)
			{
				return false;
			}
			if (num2 > Main.maxTilesX)
			{
				return false;
			}
			if (num3 < 0)
			{
				return false;
			}
			if (num4 > Main.maxTilesY)
			{
				return false;
			}
			for (int i = num; i < num2; i++)
			{
				for (int j = num3; j < num4; j++)
				{
					if (Main.tile[i, j] == null)
					{
						Main.tile[i, j] = new Tile();
					}
				}
			}
			int num5 = x;
			int num6 = y;
			int num7 = 0;
			if (type == 55 || type == 425 || type == 510 || type == 511)
			{
				if (WorldGen.SolidTile2(x, y + 1) && WorldGen.SolidTile2(x + 1, y + 1))
				{
					num6--;
					num7 = 0;
				}
				else if (Main.tile[x, y - 1].nactive() && Main.tileSolid[(int)Main.tile[x, y - 1].type] && !Main.tileSolidTop[(int)Main.tile[x, y - 1].type] && Main.tile[x + 1, y - 1].nactive() && Main.tileSolid[(int)Main.tile[x + 1, y - 1].type] && !Main.tileSolidTop[(int)Main.tile[x + 1, y - 1].type])
				{
					num7 = 1;
				}
				else if (Main.tile[x - 1, y].nactive() && Main.tileSolid[(int)Main.tile[x - 1, y].type] && !Main.tileSolidTop[(int)Main.tile[x - 1, y].type] && !Main.tileNoAttach[(int)Main.tile[x - 1, y].type] && Main.tile[x - 1, y + 1].nactive() && Main.tileSolid[(int)Main.tile[x - 1, y + 1].type] && !Main.tileSolidTop[(int)Main.tile[x - 1, y + 1].type] && !Main.tileNoAttach[(int)Main.tile[x - 1, y + 1].type])
				{
					num7 = 2;
				}
				else if (Main.tile[x + 1, y].nactive() && Main.tileSolid[(int)Main.tile[x + 1, y].type] && !Main.tileSolidTop[(int)Main.tile[x + 1, y].type] && !Main.tileNoAttach[(int)Main.tile[x + 1, y].type] && Main.tile[x + 1, y + 1].nactive() && Main.tileSolid[(int)Main.tile[x + 1, y + 1].type] && !Main.tileSolidTop[(int)Main.tile[x + 1, y + 1].type] && !Main.tileNoAttach[(int)Main.tile[x + 1, y + 1].type])
				{
					num5--;
					num7 = 3;
				}
				else
				{
					if (Main.tile[num5, num6].wall <= 0 || Main.tile[num5 + 1, num6].wall <= 0 || Main.tile[num5, num6 + 1].wall <= 0 || Main.tile[num5 + 1, num6 + 1].wall <= 0)
					{
						return false;
					}
					num7 = 4;
				}
			}
			if (Main.tile[num5, num6].active() || Main.tile[num5 + 1, num6].active() || Main.tile[num5, num6 + 1].active() || Main.tile[num5 + 1, num6 + 1].active())
			{
				return false;
			}
			int num8 = 36 * num7;
			for (int k = 0; k < 2; k++)
			{
				for (int l = 0; l < 2; l++)
				{
					Main.tile[num5 + k, num6 + l].active(true);
					Main.tile[num5 + k, num6 + l].type = type;
					Main.tile[num5 + k, num6 + l].frameX = (short)(num8 + 18 * k);
					Main.tile[num5 + k, num6 + l].frameY = (short)(18 * l);
				}
			}
			return true;
		}

		// Token: 0x06000EF5 RID: 3829 RVA: 0x0042C358 File Offset: 0x0042A558
		public static bool Place2x2Horizontal(int x, int y, ushort type, int Style = 0)
		{
			int num = x - 2;
			int num2 = x + 3;
			int num3 = y - 2;
			int num4 = y + 3;
			if (num < 0)
			{
				return false;
			}
			if (num2 > Main.maxTilesX)
			{
				return false;
			}
			if (num3 < 0)
			{
				return false;
			}
			if (num4 > Main.maxTilesY)
			{
				return false;
			}
			for (int i = num; i < num2; i++)
			{
				for (int j = num3; j < num4; j++)
				{
					if (Main.tile[i, j] == null)
					{
						Main.tile[i, j] = new Tile();
					}
				}
			}
			if (!WorldGen.SolidTile2(x, y + 1) || !WorldGen.SolidTile2(x + 1, y + 1))
			{
				return false;
			}
			int num5 = y - 1;
			if (Main.tile[x, num5].active() || Main.tile[x + 1, num5].active() || Main.tile[x, num5 + 1].active() || Main.tile[x + 1, num5 + 1].active())
			{
				return false;
			}
			int num6 = 36 * Style;
			for (int k = 0; k < 2; k++)
			{
				for (int l = 0; l < 2; l++)
				{
					Main.tile[x + k, num5 + l].active(true);
					Main.tile[x + k, num5 + l].type = type;
					Main.tile[x + k, num5 + l].frameX = (short)(num6 + 18 * k);
					Main.tile[x + k, num5 + l].frameY = (short)(18 * l);
				}
			}
			return true;
		}

		// Token: 0x06000EF6 RID: 3830 RVA: 0x0042C508 File Offset: 0x0042A708
		public static Color paintColor(int color)
		{
			Color white = Color.White;
			if (color == 1 || color == 13)
			{
				white.R = byte.MaxValue;
				white.G = 0;
				white.B = 0;
			}
			if (color == 2 || color == 14)
			{
				white.R = byte.MaxValue;
				white.G = 127;
				white.B = 0;
			}
			if (color == 3 || color == 15)
			{
				white.R = byte.MaxValue;
				white.G = byte.MaxValue;
				white.B = 0;
			}
			if (color == 4 || color == 16)
			{
				white.R = 127;
				white.G = byte.MaxValue;
				white.B = 0;
			}
			if (color == 5 || color == 17)
			{
				white.R = 0;
				white.G = byte.MaxValue;
				white.B = 0;
			}
			if (color == 6 || color == 18)
			{
				white.R = 0;
				white.G = byte.MaxValue;
				white.B = 127;
			}
			if (color == 7 || color == 19)
			{
				white.R = 0;
				white.G = byte.MaxValue;
				white.B = byte.MaxValue;
			}
			if (color == 8 || color == 20)
			{
				white.R = 0;
				white.G = 127;
				white.B = byte.MaxValue;
			}
			if (color == 9 || color == 21)
			{
				white.R = 0;
				white.G = 0;
				white.B = byte.MaxValue;
			}
			if (color == 10 || color == 22)
			{
				white.R = 127;
				white.G = 0;
				white.B = byte.MaxValue;
			}
			if (color == 11 || color == 23)
			{
				white.R = byte.MaxValue;
				white.G = 0;
				white.B = byte.MaxValue;
			}
			if (color == 12 || color == 24)
			{
				white.R = byte.MaxValue;
				white.G = 0;
				white.B = 127;
			}
			if (color == 25)
			{
				white.R = 75;
				white.G = 75;
				white.B = 75;
			}
			if (color == 26)
			{
				white.R = byte.MaxValue;
				white.G = byte.MaxValue;
				white.B = byte.MaxValue;
			}
			if (color == 27)
			{
				white.R = 175;
				white.G = 175;
				white.B = 175;
			}
			if (color == 28)
			{
				white.R = byte.MaxValue;
				white.G = 178;
				white.B = 125;
			}
			if (color == 29)
			{
				white.R = 25;
				white.G = 25;
				white.B = 25;
			}
			if (color == 30)
			{
				white.R = 200;
				white.G = 200;
				white.B = 200;
				white.A = 150;
			}
			return white;
		}

		// Token: 0x06000EF7 RID: 3831 RVA: 0x0042C7E0 File Offset: 0x0042A9E0
		public static Color coatingColor(int coating)
		{
			switch (coating)
			{
			default:
				return Color.Transparent;
			case 1:
				return new Color(235, 170, 255, 255);
			case 2:
				return new Color(180, 245, 255, 255);
			}
		}

		// Token: 0x06000EF8 RID: 3832 RVA: 0x0042C838 File Offset: 0x0042AA38
		public static List<Color> coatingColors(Tile tile, bool block)
		{
			WorldGen._coatingColors.Clear();
			if (tile == null)
			{
				return WorldGen._coatingColors;
			}
			if ((block && tile.fullbrightBlock()) || (!block && tile.fullbrightWall()))
			{
				WorldGen._coatingColors.Add(WorldGen.coatingColor(1));
			}
			if ((block && tile.invisibleBlock()) || (!block && tile.invisibleWall()))
			{
				WorldGen._coatingColors.Add(WorldGen.coatingColor(2));
			}
			return WorldGen._coatingColors;
		}

		// Token: 0x06000EF9 RID: 3833 RVA: 0x0042C8AC File Offset: 0x0042AAAC
		public static void paintEffect(int x, int y, byte color, byte oldColor)
		{
			int color2 = (int)(color ?? oldColor);
			Color newColor = WorldGen.paintColor(color2);
			for (int i = 0; i < 10; i++)
			{
				int num = Dust.NewDust(new Vector2((float)(x * 16), (float)(y * 16)), 16, 16, 143, 0f, 0f, 50, newColor, 1f);
				if (WorldGen.genRand.Next(2) == 0)
				{
					Main.dust[num].noGravity = true;
					Main.dust[num].scale *= 1.2f;
				}
				else
				{
					Main.dust[num].scale *= 0.5f;
				}
			}
		}

		// Token: 0x06000EFA RID: 3834 RVA: 0x0042C958 File Offset: 0x0042AB58
		public static void paintCoatEffect(int x, int y, byte paintCoatId, List<Color> oldColors)
		{
			Color color = WorldGen.coatingColor((int)paintCoatId);
			for (int i = 0; i < 10; i++)
			{
				Color newColor = color;
				if (paintCoatId == 0 && oldColors.Count > 0)
				{
					newColor = oldColors[Main.rand.Next(oldColors.Count)];
				}
				int num = Dust.NewDust(new Vector2((float)(x * 16), (float)(y * 16)), 16, 16, 143, 0f, 0f, 50, newColor, 1f);
				if (WorldGen.genRand.Next(2) == 0)
				{
					Main.dust[num].noGravity = true;
					Main.dust[num].scale *= 1.2f;
				}
				else
				{
					Main.dust[num].scale *= 0.5f;
				}
			}
		}

		// Token: 0x06000EFB RID: 3835 RVA: 0x0042CA20 File Offset: 0x0042AC20
		public static bool paintTile(int x, int y, byte color, bool broadCast = false)
		{
			Tile tile = Main.tile[x, y];
			if (tile == null || !tile.active())
			{
				return false;
			}
			byte b = tile.color();
			if (b == color)
			{
				return false;
			}
			WorldGen.paintEffect(x, y, color, b);
			tile.color(color);
			if (broadCast)
			{
				NetMessage.SendData(63, -1, -1, null, x, (float)y, (float)color, 0f, 0, 0, 0);
			}
			return true;
		}

		// Token: 0x06000EFC RID: 3836 RVA: 0x0042CA80 File Offset: 0x0042AC80
		public static bool paintCoatTile(int x, int y, byte paintCoatId, bool broadcast = false)
		{
			Tile tile = Main.tile[x, y];
			if (tile == null || !tile.active())
			{
				return false;
			}
			List<Color> oldColors = WorldGen.coatingColors(tile, true);
			switch (paintCoatId)
			{
			case 0:
				if (!tile.fullbrightBlock() && !tile.invisibleBlock())
				{
					return false;
				}
				tile.fullbrightBlock(false);
				tile.invisibleBlock(false);
				WorldGen.SquareTileFrame(x, y, false);
				break;
			case 1:
				if (tile.fullbrightBlock())
				{
					return false;
				}
				tile.fullbrightBlock(true);
				break;
			case 2:
				if (tile.invisibleBlock())
				{
					return false;
				}
				tile.invisibleBlock(true);
				WorldGen.SquareTileFrame(x, y, false);
				break;
			default:
				return false;
			}
			if (broadcast)
			{
				NetMessage.SendData(63, -1, -1, null, x, (float)y, (float)paintCoatId, 1f, 0, 0, 0);
			}
			WorldGen.paintCoatEffect(x, y, paintCoatId, oldColors);
			return true;
		}

		// Token: 0x06000EFD RID: 3837 RVA: 0x0042CB40 File Offset: 0x0042AD40
		public static bool paintCoatWall(int x, int y, byte paintCoatId, bool broadcast = false)
		{
			Tile tile = Main.tile[x, y];
			if (tile == null || tile.wall == 0)
			{
				return false;
			}
			List<Color> oldColors = WorldGen.coatingColors(tile, false);
			switch (paintCoatId)
			{
			case 0:
				if (!tile.fullbrightWall() && !tile.invisibleWall())
				{
					return false;
				}
				tile.fullbrightWall(false);
				tile.invisibleWall(false);
				WorldGen.SquareWallFrame(x, y, false);
				break;
			case 1:
				if (tile.fullbrightWall())
				{
					return false;
				}
				tile.fullbrightWall(true);
				break;
			case 2:
				if (tile.invisibleWall())
				{
					return false;
				}
				tile.invisibleWall(true);
				WorldGen.SquareWallFrame(x, y, false);
				break;
			default:
				return false;
			}
			if (broadcast)
			{
				NetMessage.SendData(64, -1, -1, null, x, (float)y, (float)paintCoatId, 1f, 0, 0, 0);
			}
			WorldGen.paintCoatEffect(x, y, paintCoatId, oldColors);
			return true;
		}

		// Token: 0x06000EFE RID: 3838 RVA: 0x0042CC00 File Offset: 0x0042AE00
		public static bool paintWall(int x, int y, byte color, bool broadCast = false)
		{
			Tile tile = Main.tile[x, y];
			if (tile == null || tile.wall == 0)
			{
				return false;
			}
			byte b = tile.wallColor();
			if (b == color)
			{
				return false;
			}
			tile.wallColor(color);
			if (broadCast)
			{
				NetMessage.SendData(64, -1, -1, null, x, (float)y, (float)color, 0f, 0, 0, 0);
			}
			WorldGen.paintEffect(x, y, color, b);
			return true;
		}

		// Token: 0x06000EFF RID: 3839 RVA: 0x0042CC60 File Offset: 0x0042AE60
		public static void Place3x3Wall(int x, int y, ushort type, int style)
		{
			int num = x - 1;
			int num2 = y - 1;
			bool flag = true;
			for (int i = num; i < num + 3; i++)
			{
				for (int j = num2; j < num2 + 3; j++)
				{
					if (Main.tile[i, j].active() || Main.tile[i, j].wall == 0)
					{
						flag = false;
						break;
					}
				}
			}
			if (flag)
			{
				int num3 = 0;
				while (style > 35)
				{
					num3++;
					style -= 36;
				}
				int num4 = style * 54;
				int num5 = num3 * 54;
				for (int k = num; k < num + 3; k++)
				{
					for (int l = num2; l < num2 + 3; l++)
					{
						Main.tile[k, l].active(true);
						Main.tile[k, l].type = type;
						Main.tile[k, l].frameX = (short)(num4 + 18 * (k - num));
						Main.tile[k, l].frameY = (short)(num5 + 18 * (l - num2));
					}
				}
			}
		}

		// Token: 0x06000F00 RID: 3840 RVA: 0x0042CD78 File Offset: 0x0042AF78
		public static void Check3x3Wall(int x, int y)
		{
			if (WorldGen.destroyObject)
			{
				return;
			}
			bool flag = false;
			Tile tile = Main.tile[x, y];
			if (tile == null)
			{
				return;
			}
			int type = (int)tile.type;
			int num = 0;
			int num2 = 0;
			int i = (int)(tile.frameX / 18);
			while (i >= 3)
			{
				i -= 3;
				num++;
			}
			int num3 = x - i;
			int j = (int)(tile.frameY / 18);
			while (j >= 3)
			{
				j -= 3;
				num2++;
			}
			int num4 = y - j;
			j = num2 * 54;
			i = num * 54;
			for (int k = num3; k < num3 + 3; k++)
			{
				for (int l = num4; l < num4 + 3; l++)
				{
					Tile tile2 = Main.tile[k, l];
					if (tile2 != null && ((int)tile2.type != type || !tile2.active() || tile2.wall <= 0 || (int)tile2.frameX != i + (k - num3) * 18 || (int)tile2.frameY != j + (l - num4) * 18))
					{
						flag = true;
						break;
					}
				}
			}
			if (flag)
			{
				WorldGen.destroyObject = true;
				for (int m = num3; m < num3 + 3; m++)
				{
					for (int n = num4; n < num4 + 3; n++)
					{
						if (Main.tile[m, n] != null && (int)Main.tile[m, n].type == type && Main.tile[m, n].active())
						{
							WorldGen.KillTile(m, n, false, false, false);
						}
					}
				}
				if (type == 240)
				{
					num += num2 * 36;
					if (num == 37)
					{
						Item.NewItem(WorldGen.GetItemSource_FromTileBreak(x, y), x * 16, y * 16, 32, 32, 1856, 1, false, 0, false, false);
					}
					else if (num == 36)
					{
						Item.NewItem(WorldGen.GetItemSource_FromTileBreak(x, y), x * 16, y * 16, 32, 32, 1855, 1, false, 0, false, false);
					}
					else if (num == 38)
					{
						Item.NewItem(WorldGen.GetItemSource_FromTileBreak(x, y), x * 16, y * 16, 32, 32, 1960, 1, false, 0, false, false);
					}
					else if (num == 39)
					{
						Item.NewItem(WorldGen.GetItemSource_FromTileBreak(x, y), x * 16, y * 16, 32, 32, 1961, 1, false, 0, false, false);
					}
					else if (num == 40)
					{
						Item.NewItem(WorldGen.GetItemSource_FromTileBreak(x, y), x * 16, y * 16, 32, 32, 1962, 1, false, 0, false, false);
					}
					else if (num == 33)
					{
						Item.NewItem(WorldGen.GetItemSource_FromTileBreak(x, y), x * 16, y * 16, 32, 32, 1574, 1, false, 0, false, false);
					}
					else if (num == 34)
					{
						Item.NewItem(WorldGen.GetItemSource_FromTileBreak(x, y), x * 16, y * 16, 32, 32, 1575, 1, false, 0, false, false);
					}
					else if (num == 35)
					{
						Item.NewItem(WorldGen.GetItemSource_FromTileBreak(x, y), x * 16, y * 16, 32, 32, 1576, 1, false, 0, false, false);
					}
					else if (num == 18)
					{
						Item.NewItem(WorldGen.GetItemSource_FromTileBreak(x, y), x * 16, y * 16, 32, 32, 1419, 1, false, 0, false, false);
					}
					else if (num == 19)
					{
						Item.NewItem(WorldGen.GetItemSource_FromTileBreak(x, y), x * 16, y * 16, 32, 32, 1420, 1, false, 0, false, false);
					}
					else if (num == 20)
					{
						Item.NewItem(WorldGen.GetItemSource_FromTileBreak(x, y), x * 16, y * 16, 32, 32, 1427, 1, false, 0, false, false);
					}
					else if (num == 21)
					{
						Item.NewItem(WorldGen.GetItemSource_FromTileBreak(x, y), x * 16, y * 16, 32, 32, 1428, 1, false, 0, false, false);
					}
					else if (num == 54)
					{
						Item.NewItem(WorldGen.GetItemSource_FromTileBreak(x, y), x * 16, y * 16, 32, 32, 2489, 1, false, 0, false, false);
					}
					else if (num == 55)
					{
						Item.NewItem(WorldGen.GetItemSource_FromTileBreak(x, y), x * 16, y * 16, 32, 32, 2589, 1, false, 0, false, false);
					}
					else if (num == 56)
					{
						Item.NewItem(WorldGen.GetItemSource_FromTileBreak(x, y), x * 16, y * 16, 32, 32, 3357, 1, false, 0, false, false);
					}
					else if (num == 57)
					{
						Item.NewItem(WorldGen.GetItemSource_FromTileBreak(x, y), x * 16, y * 16, 32, 32, 3358, 1, false, 0, false, false);
					}
					else if (num == 58)
					{
						Item.NewItem(WorldGen.GetItemSource_FromTileBreak(x, y), x * 16, y * 16, 32, 32, 3359, 1, false, 0, false, false);
					}
					else if (num == 59)
					{
						Item.NewItem(WorldGen.GetItemSource_FromTileBreak(x, y), x * 16, y * 16, 32, 32, 3595, 1, false, 0, false, false);
					}
					else if (num == 60)
					{
						Item.NewItem(WorldGen.GetItemSource_FromTileBreak(x, y), x * 16, y * 16, 32, 32, 3867, 1, false, 0, false, false);
					}
					else if (num == 61)
					{
						Item.NewItem(WorldGen.GetItemSource_FromTileBreak(x, y), x * 16, y * 16, 32, 32, 3866, 1, false, 0, false, false);
					}
					else if (num == 62)
					{
						Item.NewItem(WorldGen.GetItemSource_FromTileBreak(x, y), x * 16, y * 16, 32, 32, 3868, 1, false, 0, false, false);
					}
					else if (num == 69)
					{
						Item.NewItem(WorldGen.GetItemSource_FromTileBreak(x, y), x * 16, y * 16, 32, 32, 4660, 1, false, 0, false, false);
					}
					else if (num == 70)
					{
						Item.NewItem(WorldGen.GetItemSource_FromTileBreak(x, y), x * 16, y * 16, 32, 32, 4723, 1, false, 0, false, false);
					}
					else if (num == 71)
					{
						Item.NewItem(WorldGen.GetItemSource_FromTileBreak(x, y), x * 16, y * 16, 32, 32, 4724, 1, false, 0, false, false);
					}
					else if (num == 72)
					{
						Item.NewItem(WorldGen.GetItemSource_FromTileBreak(x, y), x * 16, y * 16, 32, 32, 4783, 1, false, 0, false, false);
					}
					else if (num == 73)
					{
						Item.NewItem(WorldGen.GetItemSource_FromTileBreak(x, y), x * 16, y * 16, 32, 32, 4958, 1, false, 0, false, false);
					}
					else if (num == 74)
					{
						Item.NewItem(WorldGen.GetItemSource_FromTileBreak(x, y), x * 16, y * 16, 32, 32, 5087, 1, false, 0, false, false);
					}
					else if (num == 75)
					{
						Item.NewItem(WorldGen.GetItemSource_FromTileBreak(x, y), x * 16, y * 16, 32, 32, 5108, 1, false, 0, false, false);
					}
					else if (num == 92)
					{
						Item.NewItem(WorldGen.GetItemSource_FromTileBreak(x, y), x * 16, y * 16, 32, 32, 5388, 1, false, 0, false, false);
					}
					else if (num >= 76 && num <= 91)
					{
						Item.NewItem(WorldGen.GetItemSource_FromTileBreak(x, y), x * 16, y * 16, 32, 32, 5218 + num - 76, 1, false, 0, false, false);
					}
					else if (num >= 63 && num <= 68)
					{
						Item.NewItem(WorldGen.GetItemSource_FromTileBreak(x, y), x * 16, y * 16, 32, 32, 4626 + num - 63, 1, false, 0, false, false);
					}
					else if (num >= 41 && num <= 45)
					{
						Item.NewItem(WorldGen.GetItemSource_FromTileBreak(x, y), x * 16, y * 16, 32, 32, 2114 + num - 41, 1, false, 0, false, false);
					}
					else if (num >= 46 && num <= 53)
					{
						Item.NewItem(WorldGen.GetItemSource_FromTileBreak(x, y), x * 16, y * 16, 32, 32, 2442 + num - 46, 1, false, 0, false, false);
					}
					else if (num >= 22 && num <= 25)
					{
						Item.NewItem(WorldGen.GetItemSource_FromTileBreak(x, y), x * 16, y * 16, 32, 32, 1440 + num - 22, 1, false, 0, false, false);
					}
					else if (num >= 26 && num <= 29)
					{
						Item.NewItem(WorldGen.GetItemSource_FromTileBreak(x, y), x * 16, y * 16, 32, 32, 1496 + num - 26, 1, false, 0, false, false);
					}
					else if (num >= 30 && num <= 32)
					{
						Item.NewItem(WorldGen.GetItemSource_FromTileBreak(x, y), x * 16, y * 16, 32, 32, 1538 + num - 30, 1, false, 0, false, false);
					}
					else
					{
						Item.NewItem(WorldGen.GetItemSource_FromTileBreak(x, y), x * 16, y * 16, 32, 32, 1360 + num, 1, false, 0, false, false);
					}
				}
				else if (type == 440)
				{
					int num5 = -1;
					int num6 = -1;
					switch (num)
					{
					case 0:
						num5 = 3644;
						num6 = 1526;
						break;
					case 1:
						num5 = 3645;
						num6 = 1524;
						break;
					case 2:
						num5 = 3646;
						num6 = 1525;
						break;
					case 3:
						num5 = 3647;
						num6 = 1523;
						break;
					case 4:
						num5 = 3648;
						num6 = 1522;
						break;
					case 5:
						num5 = 3649;
						num6 = 1527;
						break;
					case 6:
						num5 = 3650;
						num6 = 3643;
						break;
					}
					if (num5 != -1)
					{
						Item.NewItem(WorldGen.GetItemSource_FromTileBreak(x, y), x * 16, y * 16, 32, 32, num5, 1, false, 0, false, false);
					}
					if (num6 != -1 && num2 == 1)
					{
						Item.NewItem(WorldGen.GetItemSource_FromTileBreak(x, y), x * 16, y * 16, 32, 32, num6, 1, false, 0, false, false);
					}
				}
				WorldGen.destroyObject = false;
			}
		}

		// Token: 0x06000F01 RID: 3841 RVA: 0x0042D6D0 File Offset: 0x0042B8D0
		public static void Place2x3Wall(int x, int y, ushort type, int style)
		{
			int num = y - 1;
			bool flag = true;
			for (int i = x; i < x + 2; i++)
			{
				for (int j = num; j < num + 3; j++)
				{
					if (Main.tile[i, j].active() || Main.tile[i, j].wall == 0)
					{
						flag = false;
						break;
					}
				}
			}
			if (flag)
			{
				int num2 = style * 36;
				int num3 = 0;
				for (int k = x; k < x + 2; k++)
				{
					for (int l = num; l < num + 3; l++)
					{
						Main.tile[k, l].active(true);
						Main.tile[k, l].type = type;
						Main.tile[k, l].frameX = (short)(num2 + 18 * (k - x));
						Main.tile[k, l].frameY = (short)(num3 + 18 * (l - num));
					}
				}
			}
		}

		// Token: 0x06000F02 RID: 3842 RVA: 0x0042D7CC File Offset: 0x0042B9CC
		public static void Check2x3Wall(int x, int y)
		{
			if (WorldGen.destroyObject)
			{
				return;
			}
			bool flag = false;
			int type = (int)Main.tile[x, y].type;
			int num = 0;
			int i = (int)(Main.tile[x, y].frameX / 18);
			while (i >= 2)
			{
				i -= 2;
				num++;
			}
			int num2 = x - i;
			int num3 = y - (int)(Main.tile[x, y].frameY / 18);
			i = num * 36;
			for (int j = num2; j < num2 + 2; j++)
			{
				for (int k = num3; k < num3 + 3; k++)
				{
					if ((int)Main.tile[j, k].type != type || !Main.tile[j, k].active() || Main.tile[j, k].wall <= 0 || (int)Main.tile[j, k].frameX != i + (j - num2) * 18 || (int)Main.tile[j, k].frameY != (k - num3) * 18)
					{
						flag = true;
						break;
					}
				}
			}
			if (flag)
			{
				WorldGen.destroyObject = true;
				for (int l = num2; l < num2 + 2; l++)
				{
					for (int m = num3; m < num3 + 3; m++)
					{
						if ((int)Main.tile[l, m].type == type && Main.tile[l, m].active())
						{
							WorldGen.KillTile(l, m, false, false, false);
						}
					}
				}
				if (type == 245)
				{
					if (num >= 19 && num <= 28)
					{
						Item.NewItem(WorldGen.GetItemSource_FromTileBreak(x, y), x * 16, y * 16, 32, 32, 5248 + num - 19, 1, false, 0, false, false);
					}
					else if (num >= 15 && num <= 18)
					{
						Item.NewItem(WorldGen.GetItemSource_FromTileBreak(x, y), x * 16, y * 16, 32, 32, 5247, 1, false, 0, false, false);
					}
					else if (num == 14)
					{
						Item.NewItem(WorldGen.GetItemSource_FromTileBreak(x, y), x * 16, y * 16, 32, 32, 5246, 1, false, 0, false, false);
					}
					else if (num == 13)
					{
						Item.NewItem(WorldGen.GetItemSource_FromTileBreak(x, y), x * 16, y * 16, 32, 32, 5086, 1, false, 0, false, false);
					}
					else if (num == 12)
					{
						Item.NewItem(WorldGen.GetItemSource_FromTileBreak(x, y), x * 16, y * 16, 32, 32, 4728, 1, false, 0, false, false);
					}
					else if (num == 11)
					{
						Item.NewItem(WorldGen.GetItemSource_FromTileBreak(x, y), x * 16, y * 16, 32, 32, 4727, 1, false, 0, false, false);
					}
					else if (num == 10)
					{
						Item.NewItem(WorldGen.GetItemSource_FromTileBreak(x, y), x * 16, y * 16, 32, 32, 4726, 1, false, 0, false, false);
					}
					else if (num == 9)
					{
						Item.NewItem(WorldGen.GetItemSource_FromTileBreak(x, y), x * 16, y * 16, 32, 32, 4659, 1, false, 0, false, false);
					}
					else if (num == 8)
					{
						Item.NewItem(WorldGen.GetItemSource_FromTileBreak(x, y), x * 16, y * 16, 32, 32, 4639, 1, false, 0, false, false);
					}
					else if (num == 7)
					{
						Item.NewItem(WorldGen.GetItemSource_FromTileBreak(x, y), x * 16, y * 16, 32, 32, 4638, 1, false, 0, false, false);
					}
					else if (num == 6)
					{
						Item.NewItem(WorldGen.GetItemSource_FromTileBreak(x, y), x * 16, y * 16, 32, 32, 1577, 1, false, 0, false, false);
					}
					else if (num == 5)
					{
						Item.NewItem(WorldGen.GetItemSource_FromTileBreak(x, y), x * 16, y * 16, 32, 32, 1495, 1, false, 0, false, false);
					}
					else
					{
						Item.NewItem(WorldGen.GetItemSource_FromTileBreak(x, y), x * 16, y * 16, 32, 32, 1474 + num, 1, false, 0, false, false);
					}
				}
				WorldGen.destroyObject = false;
			}
		}

		// Token: 0x06000F03 RID: 3843 RVA: 0x0042DBB0 File Offset: 0x0042BDB0
		public static void Place3x2Wall(int x, int y, ushort type, int style)
		{
			int num = x - 1;
			bool flag = true;
			for (int i = num; i < num + 3; i++)
			{
				for (int j = y; j < y + 2; j++)
				{
					if (Main.tile[i, j].active() || Main.tile[i, j].wall == 0)
					{
						flag = false;
						break;
					}
				}
			}
			if (flag)
			{
				int num2 = 0;
				int num3 = style * 36;
				for (int k = num; k < num + 3; k++)
				{
					for (int l = y; l < y + 2; l++)
					{
						Main.tile[k, l].active(true);
						Main.tile[k, l].type = type;
						Main.tile[k, l].frameX = (short)(num2 + 18 * (k - num));
						Main.tile[k, l].frameY = (short)(num3 + 18 * (l - y));
					}
				}
			}
		}

		// Token: 0x06000F04 RID: 3844 RVA: 0x0042DCAC File Offset: 0x0042BEAC
		public static void Check3x2Wall(int x, int y)
		{
			if (WorldGen.destroyObject)
			{
				return;
			}
			bool flag = false;
			int type = (int)Main.tile[x, y].type;
			int num = 0;
			int i = (int)(Main.tile[x, y].frameY / 18);
			while (i >= 2)
			{
				i -= 2;
				num++;
			}
			int num2 = y - i;
			int num3 = x - (int)(Main.tile[x, y].frameX / 18);
			i = num * 36;
			for (int j = num3; j < num3 + 3; j++)
			{
				for (int k = num2; k < num2 + 2; k++)
				{
					if ((int)Main.tile[j, k].type != type || !Main.tile[j, k].active() || Main.tile[j, k].wall <= 0 || (int)Main.tile[j, k].frameY != i + (k - num2) * 18 || (int)Main.tile[j, k].frameX != (j - num3) * 18)
					{
						flag = true;
						break;
					}
				}
			}
			if (flag)
			{
				WorldGen.destroyObject = true;
				for (int l = num3; l < num3 + 3; l++)
				{
					for (int m = num2; m < num2 + 2; m++)
					{
						if ((int)Main.tile[l, m].type == type && Main.tile[l, m].active())
						{
							WorldGen.KillTile(l, m, false, false, false);
						}
					}
				}
				if (type == 246)
				{
					if (num == 16)
					{
						Item.NewItem(WorldGen.GetItemSource_FromTileBreak(x, y), x * 16, y * 16, 32, 32, 1541, 1, false, 0, false, false);
					}
					else if (num == 17)
					{
						Item.NewItem(WorldGen.GetItemSource_FromTileBreak(x, y), x * 16, y * 16, 32, 32, 1542, 1, false, 0, false, false);
					}
					else if (num == 18)
					{
						Item.NewItem(WorldGen.GetItemSource_FromTileBreak(x, y), x * 16, y * 16, 32, 32, 1908, 1, false, 0, false, false);
					}
					else if (num == 19)
					{
						Item.NewItem(WorldGen.GetItemSource_FromTileBreak(x, y), x * 16, y * 16, 32, 32, 4661, 1, false, 0, false, false);
					}
					else if (num == 20)
					{
						Item.NewItem(WorldGen.GetItemSource_FromTileBreak(x, y), x * 16, y * 16, 32, 32, 4729, 1, false, 0, false, false);
					}
					else if (num >= 21 && num <= 36)
					{
						Item.NewItem(WorldGen.GetItemSource_FromTileBreak(x, y), x * 16, y * 16, 32, 32, 5258 + num - 21, 1, false, 0, false, false);
					}
					else
					{
						Item.NewItem(WorldGen.GetItemSource_FromTileBreak(x, y), x * 16, y * 16, 32, 32, 1479 + num, 1, false, 0, false, false);
					}
				}
				WorldGen.destroyObject = false;
			}
		}

		// Token: 0x06000F05 RID: 3845 RVA: 0x0042DF84 File Offset: 0x0042C184
		public static void Place4x3Wall(int x, int y, ushort type, int style)
		{
			int num = x - 1;
			int num2 = y - 1;
			bool flag = true;
			for (int i = num; i < num + 4; i++)
			{
				for (int j = num2; j < num2 + 3; j++)
				{
					if (Main.tile[i, j].active() || Main.tile[i, j].wall == 0)
					{
						flag = false;
						break;
					}
				}
			}
			if (flag)
			{
				int num3 = 0;
				int num4 = style * 54;
				for (int k = num; k < num + 4; k++)
				{
					for (int l = num2; l < num2 + 3; l++)
					{
						Main.tile[k, l].active(true);
						Main.tile[k, l].type = type;
						Main.tile[k, l].frameX = (short)(num3 + 18 * (k - num));
						Main.tile[k, l].frameY = (short)(num4 + 18 * (l - num2));
					}
				}
			}
		}

		// Token: 0x06000F06 RID: 3846 RVA: 0x0042E084 File Offset: 0x0042C284
		public static void Check4x3Wall(int x, int y)
		{
			if (WorldGen.destroyObject)
			{
				return;
			}
			bool flag = false;
			int type = (int)Main.tile[x, y].type;
			int num = 0;
			int i = (int)(Main.tile[x, y].frameY / 18);
			while (i >= 3)
			{
				i -= 3;
				num++;
			}
			int num2 = y - i;
			int num3 = x - (int)(Main.tile[x, y].frameX / 18);
			i = num * 54;
			for (int j = num3; j < num3 + 4; j++)
			{
				for (int k = num2; k < num2 + 3; k++)
				{
					if ((int)Main.tile[j, k].type != type || !Main.tile[j, k].active() || Main.tile[j, k].wall <= 0 || (int)Main.tile[j, k].frameY != i + (k - num2) * 18 || (int)Main.tile[j, k].frameX != (j - num3) * 18)
					{
						flag = true;
						break;
					}
				}
			}
			if (flag)
			{
				WorldGen.destroyObject = true;
				for (int l = num3; l < num3 + 4; l++)
				{
					for (int m = num2; m < num2 + 3; m++)
					{
						if ((int)Main.tile[l, m].type == type && Main.tile[l, m].active())
						{
							WorldGen.KillTile(l, m, false, false, false);
						}
					}
				}
				if (type == 241)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(x, y), x * 16, y * 16, 32, 32, 1417, 1, false, 0, false, false);
				}
				WorldGen.destroyObject = false;
			}
		}

		// Token: 0x06000F07 RID: 3847 RVA: 0x0042E248 File Offset: 0x0042C448
		public static void Place6x4Wall(int x, int y, ushort type, int style)
		{
			int num = x - 2;
			int num2 = y - 2;
			bool flag = true;
			for (int i = num; i < num + 6; i++)
			{
				for (int j = num2; j < num2 + 4; j++)
				{
					if (Main.tile[i, j].active() || Main.tile[i, j].wall == 0)
					{
						flag = false;
						break;
					}
				}
			}
			if (flag)
			{
				int num3 = 27;
				int num4 = style / num3 * 108;
				int num5 = style % num3 * 72;
				for (int k = num; k < num + 6; k++)
				{
					for (int l = num2; l < num2 + 4; l++)
					{
						Main.tile[k, l].active(true);
						Main.tile[k, l].type = type;
						Main.tile[k, l].frameX = (short)(num4 + 18 * (k - num));
						Main.tile[k, l].frameY = (short)(num5 + 18 * (l - num2));
					}
				}
			}
		}

		// Token: 0x06000F08 RID: 3848 RVA: 0x0042E354 File Offset: 0x0042C554
		public static void Check6x4Wall(int x, int y)
		{
			if (WorldGen.destroyObject)
			{
				return;
			}
			bool flag = false;
			int type = (int)Main.tile[x, y].type;
			int num = (int)(Main.tile[x, y].frameY / 18);
			int num2 = (int)(Main.tile[x, y].frameX / 18);
			int num3 = 27 * (num2 / 6) + (num >> 2);
			num %= 4;
			num2 %= 6;
			int num4 = y - num;
			int num5 = x - (int)(Main.tile[x, y].frameX / 18 % 6);
			num = num3 % 27 * 72;
			num2 = num3 / 27 * 108;
			for (int i = num5; i < num5 + 6; i++)
			{
				for (int j = num4; j < num4 + 4; j++)
				{
					if ((int)Main.tile[i, j].type != type || !Main.tile[i, j].active() || Main.tile[i, j].wall <= 0 || (int)Main.tile[i, j].frameY != num + (j - num4) * 18 || (int)Main.tile[i, j].frameX != num2 + (i - num5) * 18)
					{
						flag = true;
						break;
					}
				}
			}
			if (flag)
			{
				WorldGen.destroyObject = true;
				for (int k = num5; k < num5 + 6; k++)
				{
					for (int l = num4; l < num4 + 4; l++)
					{
						if ((int)Main.tile[k, l].type == type && Main.tile[k, l].active())
						{
							WorldGen.KillTile(k, l, false, false, false);
						}
					}
				}
				if (type == 242)
				{
					if (num3 == 30)
					{
						Item.NewItem(WorldGen.GetItemSource_FromTileBreak(x, y), x * 16, y * 16, 32, 32, 2995, 1, false, 0, false, false);
					}
					else if (num3 == 65)
					{
						Item.NewItem(WorldGen.GetItemSource_FromTileBreak(x, y), x * 16, y * 16, 32, 32, 5389, 1, false, 0, false, false);
					}
					else if (num3 == 64)
					{
						Item.NewItem(WorldGen.GetItemSource_FromTileBreak(x, y), x * 16, y * 16, 32, 32, 5310, 1, false, 0, false, false);
					}
					else if (num3 == 63)
					{
						Item.NewItem(WorldGen.GetItemSource_FromTileBreak(x, y), x * 16, y * 16, 32, 32, 5308, 1, false, 0, false, false);
					}
					else if (num3 == 62)
					{
						Item.NewItem(WorldGen.GetItemSource_FromTileBreak(x, y), x * 16, y * 16, 32, 32, 5274, 1, false, 0, false, false);
					}
					else if (num3 >= 50 && num3 <= 61)
					{
						Item.NewItem(WorldGen.GetItemSource_FromTileBreak(x, y), x * 16, y * 16, 32, 32, 5234 + num3 - 50, 1, false, 0, false, false);
					}
					else if (num3 >= 46 && num3 <= 49)
					{
						Item.NewItem(WorldGen.GetItemSource_FromTileBreak(x, y), x * 16, y * 16, 32, 32, 5121 + num3 - 46, 1, false, 0, false, false);
					}
					else if (num3 == 45)
					{
						Item.NewItem(WorldGen.GetItemSource_FromTileBreak(x, y), x * 16, y * 16, 32, 32, 5085, 1, false, 0, false, false);
					}
					else if (num3 == 44)
					{
						Item.NewItem(WorldGen.GetItemSource_FromTileBreak(x, y), x * 16, y * 16, 32, 32, 4725, 1, false, 0, false, false);
					}
					else if (num3 == 43)
					{
						Item.NewItem(WorldGen.GetItemSource_FromTileBreak(x, y), x * 16, y * 16, 32, 32, 4658, 1, false, 0, false, false);
					}
					else if (num3 >= 37 && num3 <= 42)
					{
						Item.NewItem(WorldGen.GetItemSource_FromTileBreak(x, y), x * 16, y * 16, 32, 32, 4632 + num3 - 37, 1, false, 0, false, false);
					}
					else if (num3 >= 31 && num3 <= 35)
					{
						Item.NewItem(WorldGen.GetItemSource_FromTileBreak(x, y), x * 16, y * 16, 32, 32, 3055 + num3 - 31, 1, false, 0, false, false);
					}
					else if (num3 >= 27 && num3 <= 29)
					{
						Item.NewItem(WorldGen.GetItemSource_FromTileBreak(x, y), x * 16, y * 16, 32, 32, 2865 + num3 - 27, 1, false, 0, false, false);
					}
					else if (num3 == 36)
					{
						Item.NewItem(WorldGen.GetItemSource_FromTileBreak(x, y), x * 16, y * 16, 32, 32, 3596, 1, false, 0, false, false);
					}
					else if (num3 == 26)
					{
						Item.NewItem(WorldGen.GetItemSource_FromTileBreak(x, y), x * 16, y * 16, 32, 32, 2497, 1, false, 0, false, false);
					}
					else if (num3 == 25)
					{
						Item.NewItem(WorldGen.GetItemSource_FromTileBreak(x, y), x * 16, y * 16, 32, 32, 2495, 1, false, 0, false, false);
					}
					else if (num3 >= 22)
					{
						Item.NewItem(WorldGen.GetItemSource_FromTileBreak(x, y), x * 16, y * 16, 32, 32, 2281 + num3 - 22, 1, false, 0, false, false);
					}
					else if (num3 >= 17)
					{
						Item.NewItem(WorldGen.GetItemSource_FromTileBreak(x, y), x * 16, y * 16, 32, 32, 1846 + num3 - 17, 1, false, 0, false, false);
					}
					else if (num3 == 16)
					{
						Item.NewItem(WorldGen.GetItemSource_FromTileBreak(x, y), x * 16, y * 16, 32, 32, 1573, 1, false, 0, false, false);
					}
					else if (num3 >= 13)
					{
						Item.NewItem(WorldGen.GetItemSource_FromTileBreak(x, y), x * 16, y * 16, 32, 32, 1500 + num3 - 13, 1, false, 0, false, false);
					}
					else if (num3 >= 6)
					{
						Item.NewItem(WorldGen.GetItemSource_FromTileBreak(x, y), x * 16, y * 16, 32, 32, 1433 + num3 - 6, 1, false, 0, false, false);
					}
					else
					{
						Item.NewItem(WorldGen.GetItemSource_FromTileBreak(x, y), x * 16, y * 16, 32, 32, 1421 + num3, 1, false, 0, false, false);
					}
				}
				WorldGen.destroyObject = false;
			}
		}

		// Token: 0x06000F09 RID: 3849 RVA: 0x0042E938 File Offset: 0x0042CB38
		private static int RollRandomSeaShellStyle()
		{
			int result = WorldGen.genRand.Next(2);
			if (WorldGen.genRand.Next(10) == 0)
			{
				result = 2;
			}
			if (WorldGen.genRand.Next(10) == 0)
			{
				result = 3;
			}
			if (WorldGen.genRand.Next(50) == 0)
			{
				result = 4;
			}
			return result;
		}

		// Token: 0x06000F0A RID: 3850 RVA: 0x0042E984 File Offset: 0x0042CB84
		public static void Place1x1(int x, int y, int type, int style = 0)
		{
			Tile tile = Main.tile[x, y];
			if (Main.tile[x, y] == null)
			{
				tile = new Tile();
				Main.tile[x, y] = tile;
			}
			if (Main.tile[x, y + 1] == null)
			{
				Main.tile[x, y + 1] = new Tile();
			}
			if (type == 324)
			{
				if (WorldGen.SolidTile2(x, y + 1) || (Main.tile[x, y + 1].nactive() && Main.tileTable[(int)Main.tile[x, y + 1].type]))
				{
					tile.active(true);
					tile.type = (ushort)type;
					tile.frameX = (short)(22 * WorldGen.genRand.Next(3));
					tile.frameY = (short)(22 * style);
				}
				return;
			}
			if (WorldGen.SolidTile2(x, y + 1) && !tile.active())
			{
				tile.active(true);
				tile.type = (ushort)type;
				if (type == 324)
				{
					tile.frameX = (short)(22 * WorldGen.RollRandomSeaShellStyle());
					tile.frameY = (short)(22 * style);
					return;
				}
				if (type == 144 || type == 239 || type == 36)
				{
					tile.frameX = (short)(style * 18);
					tile.frameY = 0;
					return;
				}
				tile.frameY = (short)(style * 18);
			}
		}

		// Token: 0x06000F0B RID: 3851 RVA: 0x0042EAD0 File Offset: 0x0042CCD0
		public static void Check1x1(int x, int y, int type)
		{
			if (Main.tile[x, y + 1] != null)
			{
				if (!WorldGen.SolidTileAllowBottomSlope(x, y + 1))
				{
					WorldGen.KillTile(x, y, false, false, false);
				}
				if (type == 624 && !WorldGen.HasValidGroundForAbigailsFlowerBelowSpot(x, y))
				{
					WorldGen.KillTile(x, y, false, false, false);
				}
			}
		}

		// Token: 0x06000F0C RID: 3852 RVA: 0x0042EB20 File Offset: 0x0042CD20
		public static void CheckGolf1x1(int x, int y, int type)
		{
			Tile tile = Main.tile[x, y];
			bool flag = false;
			if (tile.frameX % 18 != 0)
			{
				flag = true;
			}
			if (tile.frameY % 18 != 0)
			{
				flag = true;
			}
			if (!WorldGen.SolidTileAllowBottomSlope(x, y + 1))
			{
				flag = true;
			}
			if (flag)
			{
				WorldGen.KillTile(x, y, false, false, false);
			}
		}

		// Token: 0x06000F0D RID: 3853 RVA: 0x0042EB70 File Offset: 0x0042CD70
		public static void CheckLogicTiles(int x, int y, int type)
		{
			if (type == 419)
			{
				Tile tile = Main.tile[x, y + 1];
				if (tile != null && (!tile.active() || (tile.type != 420 && tile.type != 419)))
				{
					WorldGen.KillTile(x, y, false, false, false);
					return;
				}
			}
			Tile tile2 = Main.tile[x, y];
			bool flag = false;
			if (tile2.frameX % 18 != 0)
			{
				flag = true;
			}
			if (tile2.frameY % 18 != 0)
			{
				flag = true;
			}
			if (flag)
			{
				WorldGen.KillTile(x, y, false, false, false);
			}
		}

		// Token: 0x06000F0E RID: 3854 RVA: 0x0042EBF8 File Offset: 0x0042CDF8
		public static void PlaceLogicTiles(int x, int y, int type, int style = 0)
		{
			Tile tile = Main.tile[x, y];
			if (Main.tile[x, y] == null)
			{
				tile = new Tile();
				Main.tile[x, y] = tile;
			}
			if (Main.tile[x, y + 1] == null)
			{
				Main.tile[x, y + 1] = new Tile();
			}
			if (type == 419)
			{
				if (Main.tile[x, y + 1].active() && (Main.tile[x, y + 1].type == 419 || Main.tile[x, y + 1].type == 420))
				{
					tile.active(true);
					tile.type = (ushort)type;
					tile.frameX = (short)(style * 18);
					tile.frameY = 0;
				}
				return;
			}
			if (!tile.active())
			{
				tile.active(true);
				tile.type = (ushort)type;
				tile.frameX = 0;
				tile.frameY = (short)(18 * style);
			}
		}

		// Token: 0x06000F0F RID: 3855 RVA: 0x0042ECF4 File Offset: 0x0042CEF4
		public static void PlaceOnTable1x1(int x, int y, int type, int style = 0)
		{
			bool flag = false;
			if (Main.tile[x, y] == null)
			{
				Main.tile[x, y] = new Tile();
			}
			if (Main.tile[x, y + 1] == null)
			{
				Main.tile[x, y + 1] = new Tile();
			}
			if (!Main.tile[x, y].active() && Main.tile[x, y + 1].nactive() && Main.tileTable[(int)Main.tile[x, y + 1].type])
			{
				flag = true;
			}
			if (type == 78 && !Main.tile[x, y].active() && Main.tile[x, y + 1].nactive() && Main.tileSolid[(int)Main.tile[x, y + 1].type] && !Main.tile[x, y + 1].halfBrick() && Main.tile[x, y + 1].slope() == 0)
			{
				flag = true;
			}
			if (flag)
			{
				Main.tile[x, y].active(true);
				Main.tile[x, y].type = (ushort)type;
				if (type == 33)
				{
					Main.tile[x, y].frameX = 0;
					Main.tile[x, y].frameY = (short)(style * 22);
				}
				else
				{
					Main.tile[x, y].frameX = (short)(style * 18);
					Main.tile[x, y].frameY = 0;
				}
				if (type == 50)
				{
					Main.tile[x, y].frameX = (short)(18 * WorldGen.genRand.Next(5));
				}
			}
		}

		// Token: 0x06000F10 RID: 3856 RVA: 0x0042EEA8 File Offset: 0x0042D0A8
		public static bool PlaceAlch(int x, int y, int style)
		{
			if (Main.tile[x, y] == null)
			{
				Main.tile[x, y] = new Tile();
			}
			if (Main.tile[x, y + 1] == null)
			{
				Main.tile[x, y + 1] = new Tile();
			}
			if (!Main.tile[x, y].active() && Main.tile[x, y + 1].nactive() && !Main.tile[x, y + 1].halfBrick() && Main.tile[x, y + 1].slope() == 0)
			{
				bool flag = false;
				if (style == 0)
				{
					if (Main.tile[x, y + 1].type != 2 && Main.tile[x, y + 1].type != 477 && Main.tile[x, y + 1].type != 492 && Main.tile[x, y + 1].type != 78 && Main.tile[x, y + 1].type != 380 && Main.tile[x, y + 1].type != 109)
					{
						flag = true;
					}
					if (Main.tile[x, y].liquid > 0)
					{
						flag = true;
					}
				}
				else if (style == 1)
				{
					if (Main.tile[x, y + 1].type != 60 && Main.tile[x, y + 1].type != 78 && Main.tile[x, y + 1].type != 380)
					{
						flag = true;
					}
					if (Main.tile[x, y].liquid > 0)
					{
						flag = true;
					}
				}
				else if (style == 2)
				{
					if (Main.tile[x, y + 1].type != 0 && Main.tile[x, y + 1].type != 59 && Main.tile[x, y + 1].type != 78 && Main.tile[x, y + 1].type != 380)
					{
						flag = true;
					}
					if (Main.tile[x, y].liquid > 0)
					{
						flag = true;
					}
				}
				else if (style == 3)
				{
					if (Main.tile[x, y + 1].type != 661 && Main.tile[x, y + 1].type != 662 && Main.tile[x, y + 1].type != 203 && Main.tile[x, y + 1].type != 199 && Main.tile[x, y + 1].type != 23 && Main.tile[x, y + 1].type != 25 && Main.tile[x, y + 1].type != 78 && Main.tile[x, y + 1].type != 380)
					{
						flag = true;
					}
					if (Main.tile[x, y].liquid > 0)
					{
						flag = true;
					}
				}
				else if (style == 4)
				{
					if (Main.tile[x, y + 1].type != 53 && Main.tile[x, y + 1].type != 78 && Main.tile[x, y + 1].type != 380 && Main.tile[x, y + 1].type != 116)
					{
						flag = true;
					}
					if (Main.tile[x, y].liquid > 0 && Main.tile[x, y].lava())
					{
						flag = true;
					}
				}
				else if (style == 5)
				{
					if (Main.tile[x, y + 1].type != 57 && Main.tile[x, y + 1].type != 633 && Main.tile[x, y + 1].type != 78 && Main.tile[x, y + 1].type != 380)
					{
						flag = true;
					}
					if (Main.tile[x, y].liquid > 0 && !Main.tile[x, y].lava())
					{
						flag = true;
					}
				}
				else if (style == 6)
				{
					if (Main.tile[x, y + 1].type != 78 && Main.tile[x, y + 1].type != 380 && Main.tile[x, y + 1].type != 147 && Main.tile[x, y + 1].type != 161 && Main.tile[x, y + 1].type != 163 && Main.tile[x, y + 1].type != 164 && Main.tile[x, y + 1].type != 200)
					{
						flag = true;
					}
					if (Main.tile[x, y].liquid > 0 && Main.tile[x, y].lava())
					{
						flag = true;
					}
				}
				if (!flag)
				{
					Main.tile[x, y].active(true);
					Main.tile[x, y].type = 82;
					Main.tile[x, y].frameX = (short)(18 * style);
					Main.tile[x, y].frameY = 0;
					return true;
				}
			}
			return false;
		}

		// Token: 0x06000F11 RID: 3857 RVA: 0x0042F46C File Offset: 0x0042D66C
		public static void GrowSpike(int i, int j, ushort spikeType, ushort landType)
		{
			int num = -1;
			if (landType != 23)
			{
				if (landType == 199)
				{
					num = 662;
				}
			}
			else
			{
				num = 661;
			}
			int num2 = i;
			int num3 = j;
			int num4 = 0;
			if (Main.tile[num2 + 1, num3].active() && Main.tile[num2 + 1, num3].type == spikeType)
			{
				num4++;
			}
			if (Main.tile[num2 - 1, num3].active() && Main.tile[num2 - 1, num3].type == spikeType)
			{
				num4++;
			}
			if (Main.tile[num2, num3 + 1].active() && Main.tile[num2, num3 + 1].type == spikeType)
			{
				num4++;
			}
			if (Main.tile[num2, num3 - 1].active() && Main.tile[num2, num3 - 1].type == spikeType)
			{
				num4++;
			}
			if (num4 < 3 || Main.tile[i, j].type == landType || (int)Main.tile[i, j].type == num)
			{
				int num5 = WorldGen.genRand.Next(4);
				if (num5 == 0)
				{
					num3--;
				}
				else if (num5 == 1)
				{
					num3++;
				}
				else if (num5 == 2)
				{
					num2--;
				}
				else if (num5 == 3)
				{
					num2++;
				}
				if (!Main.tile[num2, num3].active())
				{
					num4 = 0;
					if (Main.tile[num2 + 1, num3].active() && Main.tile[num2 + 1, num3].type == spikeType)
					{
						num4++;
					}
					if (Main.tile[num2 - 1, num3].active() && Main.tile[num2 - 1, num3].type == spikeType)
					{
						num4++;
					}
					if (Main.tile[num2, num3 + 1].active() && Main.tile[num2, num3 + 1].type == spikeType)
					{
						num4++;
					}
					if (Main.tile[num2, num3 - 1].active() && Main.tile[num2, num3 - 1].type == spikeType)
					{
						num4++;
					}
					if (num4 < 2)
					{
						int num6 = 7;
						int num7 = num2 - num6;
						int num8 = num2 + num6;
						int num9 = num3 - num6;
						int num10 = num3 + num6;
						bool flag = false;
						for (int k = num7; k < num8; k++)
						{
							for (int l = num9; l < num10; l++)
							{
								if (Math.Abs(k - num2) * 2 + Math.Abs(l - num3) < 9 && Main.tile[k, l].active() && (Main.tile[k, l].type == landType || (int)Main.tile[k, l].type == num) && Main.tile[k, l - 1].active() && Main.tile[k, l - 1].type == spikeType && Main.tile[k, l - 1].liquid == 0)
								{
									flag = true;
									break;
								}
							}
						}
						if (flag)
						{
							Main.tile[num2, num3].type = spikeType;
							Main.tile[num2, num3].active(true);
							Main.tile[num2, num3].CopyPaintAndCoating(Main.tile[i, j]);
							WorldGen.SquareTileFrame(num2, num3, true);
							if (Main.netMode == 2)
							{
								NetMessage.SendTileSquare(-1, num2, num3, 1, TileChangeType.None);
							}
						}
					}
				}
			}
		}

		// Token: 0x06000F12 RID: 3858 RVA: 0x0042F7EC File Offset: 0x0042D9EC
		private static bool GrowMoreVines(int x, int y)
		{
			if (!WorldGen.InWorld(x, y, 30))
			{
				return false;
			}
			int num = 4;
			int num2 = 6;
			int num3 = 10;
			int num4 = 60;
			int num5 = 0;
			if (Main.tile[x, y].type == 528)
			{
				num4 /= 5;
			}
			for (int i = x - num; i <= x + num; i++)
			{
				for (int j = y - num2; j <= y + num3; j++)
				{
					if (TileID.Sets.IsVine[(int)Main.tile[i, j].type])
					{
						num5++;
						if (j > y && Collision.CanHitLine(new Vector2((float)(x * 16), (float)(y * 16)), 1, 1, new Vector2((float)(i * 16), (float)(j * 16)), 1, 1))
						{
							if (Main.tile[i, j].type == 528)
							{
								num5 += (j - y) * 20;
							}
							else
							{
								num5 += (j - y) * 2;
							}
						}
						if (num5 > num4)
						{
							return false;
						}
					}
				}
			}
			return true;
		}

		// Token: 0x06000F13 RID: 3859 RVA: 0x0042F8F4 File Offset: 0x0042DAF4
		private static void GrowGlowTulips()
		{
			int num = (Main.maxTilesX <= 4200) ? 0 : ((Main.maxTilesX <= 6400) ? 1 : 2);
			int num2 = 100;
			int num3 = 300;
			int num4;
			switch (num)
			{
			default:
				num4 = 2;
				break;
			case 1:
				num4 = 4;
				break;
			case 2:
				num4 = 6;
				break;
			}
			int i = 0;
			int num5 = 10000;
			int num6 = (int)((double)num5 * 0.75);
			while (i < num4)
			{
				num5--;
				if (num5 <= 0)
				{
					break;
				}
				int i2;
				if (i < num4 / 2 || (num5 > num6 && WorldGen.genRand.Next(2) == 0))
				{
					i2 = WorldGen.genRand.Next(num2, num3);
				}
				else
				{
					i2 = WorldGen.genRand.Next(Main.maxTilesX - num3, Main.maxTilesX - num2);
				}
				int j;
				if (WorldGen.remixWorldGen)
				{
					j = WorldGen.genRand.Next((int)Main.worldSurface, Main.maxTilesY - 350);
				}
				else
				{
					j = WorldGen.genRand.Next((int)Main.worldSurface, Main.maxTilesY - 200);
				}
				if (WorldGen.TryGrowingGlowTulip(i2, j))
				{
					i++;
				}
			}
		}

		// Token: 0x06000F14 RID: 3860 RVA: 0x0042FA18 File Offset: 0x0042DC18
		private static void MatureTheHerbPlants()
		{
			for (int i = 10; i < Main.maxTilesX - 10; i++)
			{
				for (int j = 10; j < Main.maxTilesY - 10; j++)
				{
					if ((double)j > Main.rockLayer && (Main.tile[i, j + 1].type == 59 || Main.tile[i, j + 1].type == 0) && WorldGen.SolidTile(i, j + 1, false) && !Main.tile[i, j].active() && Main.tile[i, j].liquid == 0 && WorldGen.genRand.Next(25) == 0)
					{
						Main.tile[i, j].active(true);
						Main.tile[i, j].type = 82;
						Main.tile[i, j].frameX = 36;
						Main.tile[i, j].frameY = 0;
					}
					if (Main.tile[i, j].type == 82 && WorldGen.genRand.Next(3) == 0)
					{
						Main.tile[i, j].type = 83;
						if (Main.tile[i, j].frameX == 36 && WorldGen.genRand.Next(2) == 0)
						{
							Main.tile[i, j].type = 84;
						}
						if (Main.tile[i, j].frameX == 108 && WorldGen.genRand.Next(3) == 0)
						{
							Main.tile[i, j].type = 84;
						}
					}
				}
			}
		}

		// Token: 0x06000F15 RID: 3861 RVA: 0x0042FBC0 File Offset: 0x0042DDC0
		public static void GrowAlch(int x, int y)
		{
			if (Main.tile[x, y].active())
			{
				if (Main.tile[x, y].liquid > 0)
				{
					int num = (int)(Main.tile[x, y].frameX / 18);
					if ((!Main.tile[x, y].lava() || num != 5) && (Main.tile[x, y].liquidType() != 0 || (num != 1 && num != 4)))
					{
						WorldGen.KillTile(x, y, false, false, false);
						if (Main.netMode == 2)
						{
							NetMessage.SendTileSquare(-1, x, y, TileChangeType.None);
						}
						WorldGen.SquareTileFrame(x, y, true);
					}
				}
				if (Main.tile[x, y].type == 82)
				{
					if (WorldGen.genRand.Next(50) == 0)
					{
						bool flag = false;
						if (Main.tile[x, y].frameX == 108)
						{
							if (WorldGen.genRand.Next(2) == 0)
							{
								flag = true;
							}
						}
						else
						{
							flag = true;
						}
						if (flag)
						{
							Main.tile[x, y].type = 83;
							if (Main.netMode == 2)
							{
								NetMessage.SendTileSquare(-1, x, y, TileChangeType.None);
							}
							WorldGen.SquareTileFrame(x, y, true);
							return;
						}
					}
					else
					{
						if (Main.dayTime && Main.tile[x, y].type == 82 && Main.tile[x, y].frameX == 0 && WorldGen.genRand.Next(50) == 0)
						{
							Main.tile[x, y].type = 83;
							if (Main.netMode == 2)
							{
								NetMessage.SendTileSquare(-1, x, y, TileChangeType.None);
							}
							WorldGen.SquareTileFrame(x, y, true);
							return;
						}
						if (!Main.dayTime && Main.tile[x, y].type == 82 && Main.tile[x, y].frameX == 18 && WorldGen.genRand.Next(50) == 0)
						{
							Main.tile[x, y].type = 83;
							if (Main.netMode == 2)
							{
								NetMessage.SendTileSquare(-1, x, y, TileChangeType.None);
							}
							WorldGen.SquareTileFrame(x, y, true);
							return;
						}
						if (Main.raining && Main.tile[x, y].type == 82 && Main.tile[x, y].frameX == 72 && WorldGen.genRand.Next(50) == 0)
						{
							Main.tile[x, y].type = 83;
							if (Main.netMode == 2)
							{
								NetMessage.SendTileSquare(-1, x, y, TileChangeType.None);
							}
							WorldGen.SquareTileFrame(x, y, true);
							return;
						}
						if ((double)y > Main.worldSurface && Main.tile[x, y].type == 82 && Main.tile[x, y].frameX == 36 && WorldGen.genRand.Next(50) == 0)
						{
							Main.tile[x, y].type = 83;
							if (Main.netMode == 2)
							{
								NetMessage.SendTileSquare(-1, x, y, TileChangeType.None);
							}
							WorldGen.SquareTileFrame(x, y, true);
							return;
						}
						if (y > Main.maxTilesY - 200 && Main.tile[x, y].type == 82 && Main.tile[x, y].frameX == 90 && WorldGen.genRand.Next(50) == 0)
						{
							Main.tile[x, y].type = 83;
							if (Main.netMode == 2)
							{
								NetMessage.SendTileSquare(-1, x, y, TileChangeType.None);
							}
							WorldGen.SquareTileFrame(x, y, true);
							return;
						}
					}
				}
				else if (Main.tile[x, y].frameX == 36 && WorldGen.genRand.Next(3) != 0)
				{
					if (Main.tile[x, y].type == 83)
					{
						if (WorldGen.genRand.Next(2) == 0)
						{
							Main.tile[x, y].type = 84;
							if (Main.netMode == 2)
							{
								NetMessage.SendTileSquare(-1, x, y, TileChangeType.None);
								return;
							}
						}
					}
					else if (Main.tile[x, y].type == 84 || WorldGen.genRand.Next(5) == 0)
					{
						Main.tile[x, y].type = 83;
						if (Main.netMode == 2)
						{
							NetMessage.SendTileSquare(-1, x, y, TileChangeType.None);
							return;
						}
					}
				}
				else if (Main.tile[x, y].frameX == 108 && Main.tile[x, y].type == 83 && WorldGen.genRand.Next(30) == 0)
				{
					Main.tile[x, y].type = 84;
					if (Main.netMode == 2)
					{
						NetMessage.SendTileSquare(-1, x, y, TileChangeType.None);
					}
					WorldGen.SquareTileFrame(x, y, true);
				}
			}
		}

		// Token: 0x06000F16 RID: 3862 RVA: 0x00430038 File Offset: 0x0042E238
		public static void PlantAlch()
		{
			int num = WorldGen.genRand.Next(20, Main.maxTilesX - 20);
			int num2;
			if (Main.remixWorld)
			{
				num2 = WorldGen.genRand.Next(20, Main.maxTilesY - 20);
			}
			else if (WorldGen.genRand.Next(40) == 0)
			{
				num2 = WorldGen.genRand.Next((int)(Main.rockLayer + (double)Main.maxTilesY) / 2, Main.maxTilesY - 20);
			}
			else if (WorldGen.genRand.Next(10) == 0)
			{
				num2 = WorldGen.genRand.Next(20, Main.maxTilesY - 20);
			}
			else
			{
				num2 = WorldGen.genRand.Next((int)Main.worldSurface, Main.maxTilesY - 20);
			}
			while (num2 < Main.maxTilesY - 20 && !Main.tile[num, num2].active())
			{
				num2++;
			}
			if (Main.tile[num, num2].nactive() && !Main.tile[num, num2 - 1].active() && Main.tile[num, num2 - 1].liquid == 0)
			{
				int num3 = 15;
				int num4 = 5;
				int num5 = 0;
				num3 = (int)((double)num3 * ((double)Main.maxTilesX / 4200.0));
				int num6 = Utils.Clamp<int>(num - num3, 4, Main.maxTilesX - 4);
				int num7 = Utils.Clamp<int>(num + num3, 4, Main.maxTilesX - 4);
				int num8 = Utils.Clamp<int>(num2 - num3, 4, Main.maxTilesY - 4);
				int num9 = Utils.Clamp<int>(num2 + num3, 4, Main.maxTilesY - 4);
				for (int i = num6; i <= num7; i++)
				{
					for (int j = num8; j <= num9; j++)
					{
						if (Main.tileAlch[(int)Main.tile[i, j].type])
						{
							num5++;
						}
					}
				}
				if (num5 < num4)
				{
					if (Main.tile[num, num2].type == 2 || Main.tile[num, num2].type == 109)
					{
						WorldGen.PlaceAlch(num, num2 - 1, 0);
					}
					if (Main.tile[num, num2].type == 60)
					{
						WorldGen.PlaceAlch(num, num2 - 1, 1);
					}
					if (Main.tile[num, num2].type == 0 || Main.tile[num, num2].type == 59)
					{
						WorldGen.PlaceAlch(num, num2 - 1, 2);
					}
					if (Main.tile[num, num2].type == 23 || Main.tile[num, num2].type == 661 || Main.tile[num, num2].type == 25 || Main.tile[num, num2].type == 203 || Main.tile[num, num2].type == 199 || Main.tile[num, num2].type == 662)
					{
						WorldGen.PlaceAlch(num, num2 - 1, 3);
					}
					if ((Main.tile[num, num2].type == 53 || Main.tile[num, num2].type == 116) && num >= WorldGen.beachDistance && num <= Main.maxTilesX - WorldGen.beachDistance)
					{
						WorldGen.PlaceAlch(num, num2 - 1, 4);
					}
					if (Main.tile[num, num2].type == 57 || Main.tile[num, num2].type == 633)
					{
						WorldGen.PlaceAlch(num, num2 - 1, 5);
					}
					if (Main.tile[num, num2].type == 147 || Main.tile[num, num2].type == 163 || Main.tile[num, num2].type == 164 || Main.tile[num, num2].type == 161 || Main.tile[num, num2].type == 200)
					{
						WorldGen.PlaceAlch(num, num2 - 1, 6);
					}
					if (Main.tile[num, num2 - 1].active() && Main.netMode == 2)
					{
						NetMessage.SendTileSquare(-1, num, num2 - 1, TileChangeType.None);
					}
				}
			}
		}

		// Token: 0x06000F17 RID: 3863 RVA: 0x0043044C File Offset: 0x0042E64C
		public static void CheckAlch(int x, int y)
		{
			if (Main.tile[x, y] == null)
			{
				Main.tile[x, y] = new Tile();
			}
			if (Main.tile[x, y + 1] == null)
			{
				Main.tile[x, y + 1] = new Tile();
			}
			bool flag = false;
			if (!Main.tile[x, y + 1].nactive())
			{
				flag = true;
			}
			if (Main.tile[x, y + 1].halfBrick())
			{
				flag = true;
			}
			int num = (int)(Main.tile[x, y].frameX / 18);
			Main.tile[x, y].frameY = 0;
			if (!flag)
			{
				if (num == 0)
				{
					if (Main.tile[x, y + 1].type != 109 && Main.tile[x, y + 1].type != 2 && Main.tile[x, y + 1].type != 477 && Main.tile[x, y + 1].type != 492 && Main.tile[x, y + 1].type != 78 && Main.tile[x, y + 1].type != 380)
					{
						flag = true;
					}
					if (Main.tile[x, y].liquid > 0 && Main.tile[x, y].lava())
					{
						flag = true;
					}
				}
				else if (num == 1)
				{
					if (Main.tile[x, y + 1].type != 60 && Main.tile[x, y + 1].type != 78 && Main.tile[x, y + 1].type != 380)
					{
						flag = true;
					}
					if (Main.tile[x, y].liquid > 0 && Main.tile[x, y].lava())
					{
						flag = true;
					}
				}
				else if (num == 2)
				{
					if (Main.tile[x, y + 1].type != 0 && Main.tile[x, y + 1].type != 59 && Main.tile[x, y + 1].type != 78 && Main.tile[x, y + 1].type != 380)
					{
						flag = true;
					}
					if (Main.tile[x, y].liquid > 0 && Main.tile[x, y].lava())
					{
						flag = true;
					}
				}
				else if (num == 3)
				{
					if (Main.tile[x, y + 1].type != 661 && Main.tile[x, y + 1].type != 662 && Main.tile[x, y + 1].type != 199 && Main.tile[x, y + 1].type != 203 && Main.tile[x, y + 1].type != 23 && Main.tile[x, y + 1].type != 25 && Main.tile[x, y + 1].type != 78 && Main.tile[x, y + 1].type != 380)
					{
						flag = true;
					}
					if (Main.tile[x, y].liquid > 0 && Main.tile[x, y].lava())
					{
						flag = true;
					}
				}
				else if (num == 4)
				{
					if (Main.tile[x, y + 1].type != 53 && Main.tile[x, y + 1].type != 78 && Main.tile[x, y + 1].type != 380 && Main.tile[x, y + 1].type != 116)
					{
						flag = true;
					}
					if (Main.tile[x, y].liquid > 0 && Main.tile[x, y].lava())
					{
						flag = true;
					}
				}
				else if (num == 5)
				{
					if (Main.tile[x, y + 1].type != 57 && Main.tile[x, y + 1].type != 633 && Main.tile[x, y + 1].type != 78 && Main.tile[x, y + 1].type != 380)
					{
						flag = true;
					}
					if (Main.tile[x, y].type != 82 && Main.tile[x, y].lava() && Main.netMode != 1)
					{
						if (Main.tile[x, y].liquid > 16)
						{
							if (Main.tile[x, y].type == 83)
							{
								Main.tile[x, y].type = 84;
								if (Main.netMode == 2)
								{
									NetMessage.SendTileSquare(-1, x, y, TileChangeType.None);
								}
							}
						}
						else if (Main.tile[x, y].type == 84)
						{
							Main.tile[x, y].type = 83;
							if (Main.netMode == 2)
							{
								NetMessage.SendTileSquare(-1, x, y, TileChangeType.None);
							}
						}
					}
				}
				else if (num == 6)
				{
					if (Main.tile[x, y + 1].type != 78 && Main.tile[x, y + 1].type != 380 && Main.tile[x, y + 1].type != 147 && Main.tile[x, y + 1].type != 161 && Main.tile[x, y + 1].type != 163 && Main.tile[x, y + 1].type != 164 && Main.tile[x, y + 1].type != 200)
					{
						flag = true;
					}
					if (Main.tile[x, y].liquid > 0 && Main.tile[x, y].lava())
					{
						flag = true;
					}
				}
			}
			if (flag)
			{
				WorldGen.KillTile(x, y, false, false, false);
			}
		}

		// Token: 0x06000F18 RID: 3864 RVA: 0x00430AC4 File Offset: 0x0042ECC4
		public static void CheckBanner(int x, int j, byte type)
		{
			if (WorldGen.destroyObject)
			{
				return;
			}
			int i = (int)(Main.tile[x, j].frameY / 18);
			int num = 0;
			while (i >= 3)
			{
				i -= 3;
				num++;
			}
			i = j - i;
			int frameX = (int)Main.tile[x, j].frameX;
			bool flag = false;
			for (int k = 0; k < 3; k++)
			{
				if (Main.tile[x, i + k] == null)
				{
					Main.tile[x, i + k] = new Tile();
				}
				if (!Main.tile[x, i + k].active())
				{
					flag = true;
				}
				else if (Main.tile[x, i + k].type != (ushort)type)
				{
					flag = true;
				}
				else if ((int)Main.tile[x, i + k].frameY != k * 18 + num * 18 * 3)
				{
					flag = true;
				}
				else if ((int)Main.tile[x, i + k].frameX != frameX)
				{
					flag = true;
				}
			}
			if (Main.tile[x, i - 1] == null)
			{
				Main.tile[x, i - 1] = new Tile();
			}
			Tile tile = Main.tile[x, i - 1];
			if (!tile.nactive())
			{
				flag = true;
			}
			bool flag2 = tile.topSlope() || tile.halfBrick() || Main.tileSolid[(int)tile.type];
			bool flag3 = !Main.tileSolidTop[(int)tile.type] || (TileID.Sets.Platforms[(int)tile.type] && (tile.halfBrick() || tile.topSlope()));
			bool flag4 = flag2 && flag3 && !TileID.Sets.NotReallySolid[(int)tile.type] && !tile.bottomSlope();
			if (TileID.Sets.Platforms[(int)tile.type] || tile.type == 380)
			{
				flag4 = true;
			}
			if (!flag4)
			{
				flag = true;
			}
			if (flag)
			{
				WorldGen.destroyObject = true;
				for (int l = 0; l < 3; l++)
				{
					if (Main.tile[x, i + l].type == (ushort)type)
					{
						WorldGen.KillTile(x, i + l, false, false, false);
					}
				}
				if (type == 91)
				{
					int num2 = frameX / 18;
					num2 += num * 111;
					if (num2 == 310)
					{
						Item.NewItem(WorldGen.GetItemSource_FromTileBreak(x, i + 1), x * 16, (i + 1) * 16, 32, 32, 5352, 1, false, 0, false, false);
					}
					else if (num2 >= 297)
					{
						Item.NewItem(WorldGen.GetItemSource_FromTileBreak(x, i + 1), x * 16, (i + 1) * 16, 32, 32, 4668 + num2, 1, false, 0, false, false);
					}
					else if (num2 >= 295)
					{
						Item.NewItem(WorldGen.GetItemSource_FromTileBreak(x, i + 1), x * 16, (i + 1) * 16, 32, 32, 4392 + num2, 1, false, 0, false, false);
					}
					else if (num2 >= 294)
					{
						Item.NewItem(WorldGen.GetItemSource_FromTileBreak(x, i + 1), x * 16, (i + 1) * 16, 32, 32, 4602, 1, false, 0, false, false);
					}
					else if (num2 >= 288)
					{
						Item.NewItem(WorldGen.GetItemSource_FromTileBreak(x, i + 1), x * 16, (i + 1) * 16, 32, 32, 4253 + num2, 1, false, 0, false, false);
					}
					else if (num2 >= 278)
					{
						Item.NewItem(WorldGen.GetItemSource_FromTileBreak(x, i + 1), x * 16, (i + 1) * 16, 32, 32, 3559 + num2, 1, false, 0, false, false);
					}
					else if (num2 >= 273)
					{
						Item.NewItem(WorldGen.GetItemSource_FromTileBreak(x, i + 1), x * 16, (i + 1) * 16, 32, 32, 3516 + num2, 1, false, 0, false, false);
					}
					else if (num2 >= 272)
					{
						Item.NewItem(WorldGen.GetItemSource_FromTileBreak(x, i + 1), x * 16, (i + 1) * 16, 32, 32, 3780, 1, false, 0, false, false);
					}
					else if (num2 >= 270)
					{
						Item.NewItem(WorldGen.GetItemSource_FromTileBreak(x, i + 1), x * 16, (i + 1) * 16, 32, 32, 3323 + num2, 1, false, 0, false, false);
					}
					else if (num2 >= 207)
					{
						Item.NewItem(WorldGen.GetItemSource_FromTileBreak(x, i + 1), x * 16, (i + 1) * 16, 32, 32, 3183 + num2, 1, false, 0, false, false);
					}
					else if (num2 >= 109)
					{
						Item.NewItem(WorldGen.GetItemSource_FromTileBreak(x, i + 1), x * 16, (i + 1) * 16, 32, 32, 2788 + num2, 1, false, 0, false, false);
					}
					else if (num2 >= 22)
					{
						Item.NewItem(WorldGen.GetItemSource_FromTileBreak(x, i + 1), x * 16, (i + 1) * 16, 32, 32, 1593 + num2, 1, false, 0, false, false);
					}
					else if (num2 >= 10 && num2 <= 15)
					{
						Item.NewItem(WorldGen.GetItemSource_FromTileBreak(x, i + 1), x * 16, (i + 1) * 16, 32, 32, 1441 + num2, 1, false, 0, false, false);
					}
					else if (num2 >= 16 && num2 <= 21)
					{
						Item.NewItem(WorldGen.GetItemSource_FromTileBreak(x, i + 1), x * 16, (i + 1) * 16, 32, 32, 1448 + num2, 1, false, 0, false, false);
					}
					else if (num2 >= 7 && num2 <= 9)
					{
						Item.NewItem(WorldGen.GetItemSource_FromTileBreak(x, i + 1), x * 16, (i + 1) * 16, 32, 32, 838 + num2, 1, false, 0, false, false);
					}
					else if (num2 >= 4 && num2 <= 6)
					{
						Item.NewItem(WorldGen.GetItemSource_FromTileBreak(x, i + 1), x * 16, (i + 1) * 16, 32, 32, 785 + num2, 1, false, 0, false, false);
					}
					else
					{
						Item.NewItem(WorldGen.GetItemSource_FromTileBreak(x, i + 1), x * 16, (i + 1) * 16, 32, 32, 337 + num2, 1, false, 0, false, false);
					}
				}
				WorldGen.destroyObject = false;
			}
		}

		// Token: 0x06000F19 RID: 3865 RVA: 0x004310A4 File Offset: 0x0042F2A4
		public static void PlaceBanner(int x, int y, ushort type, int style = 0)
		{
			int num = style * 18;
			int num2 = 0;
			if (style >= 90)
			{
				num -= 1620;
				num2 += 54;
			}
			if (Main.tile[x, y - 1] == null)
			{
				Main.tile[x, y - 1] = new Tile();
			}
			if (Main.tile[x, y] == null)
			{
				Main.tile[x, y] = new Tile();
			}
			if (Main.tile[x, y + 1] == null)
			{
				Main.tile[x, y + 1] = new Tile();
			}
			if (Main.tile[x, y + 2] == null)
			{
				Main.tile[x, y + 2] = new Tile();
			}
			if (Main.tile[x, y - 1].nactive() && Main.tileSolid[(int)Main.tile[x, y - 1].type] && !Main.tileSolidTop[(int)Main.tile[x, y - 1].type] && !Main.tile[x, y].active() && !Main.tile[x, y + 1].active() && !Main.tile[x, y + 2].active())
			{
				Main.tile[x, y].active(true);
				Main.tile[x, y].frameY = (short)num2;
				Main.tile[x, y].frameX = (short)num;
				Main.tile[x, y].type = type;
				Main.tile[x, y + 1].active(true);
				Main.tile[x, y + 1].frameY = (short)(num2 + 18);
				Main.tile[x, y + 1].frameX = (short)num;
				Main.tile[x, y + 1].type = type;
				Main.tile[x, y + 2].active(true);
				Main.tile[x, y + 2].frameY = (short)(num2 + 36);
				Main.tile[x, y + 2].frameX = (short)num;
				Main.tile[x, y + 2].type = type;
			}
		}

		// Token: 0x06000F1A RID: 3866 RVA: 0x004312E0 File Offset: 0x0042F4E0
		public static void PlaceMan(int i, int j, int dir)
		{
			for (int k = i; k <= i + 1; k++)
			{
				for (int l = j - 2; l <= j; l++)
				{
					if (Main.tile[k, l].active())
					{
						return;
					}
				}
			}
			if (!WorldGen.SolidTile2(i, j + 1) || !WorldGen.SolidTile2(i + 1, j + 1))
			{
				return;
			}
			byte b = 0;
			if (dir == 1)
			{
				b = 36;
			}
			Main.tile[i, j - 2].active(true);
			Main.tile[i, j - 2].frameY = 0;
			Main.tile[i, j - 2].frameX = (short)b;
			Main.tile[i, j - 2].type = 128;
			Main.tile[i, j - 1].active(true);
			Main.tile[i, j - 1].frameY = 18;
			Main.tile[i, j - 1].frameX = (short)b;
			Main.tile[i, j - 1].type = 128;
			Main.tile[i, j].active(true);
			Main.tile[i, j].frameY = 36;
			Main.tile[i, j].frameX = (short)b;
			Main.tile[i, j].type = 128;
			Main.tile[i + 1, j - 2].active(true);
			Main.tile[i + 1, j - 2].frameY = 0;
			Main.tile[i + 1, j - 2].frameX = (short)(18 + b);
			Main.tile[i + 1, j - 2].type = 128;
			Main.tile[i + 1, j - 1].active(true);
			Main.tile[i + 1, j - 1].frameY = 18;
			Main.tile[i + 1, j - 1].frameX = (short)(18 + b);
			Main.tile[i + 1, j - 1].type = 128;
			Main.tile[i + 1, j].active(true);
			Main.tile[i + 1, j].frameY = 36;
			Main.tile[i + 1, j].frameX = (short)(18 + b);
			Main.tile[i + 1, j].type = 128;
		}

		// Token: 0x06000F1B RID: 3867 RVA: 0x00431550 File Offset: 0x0042F750
		public static void PlaceWoman(int i, int j, int dir)
		{
			for (int k = i; k <= i + 1; k++)
			{
				for (int l = j - 2; l <= j; l++)
				{
					if (Main.tile[k, l].active())
					{
						return;
					}
				}
			}
			if (!WorldGen.SolidTile2(i, j + 1) || !WorldGen.SolidTile2(i + 1, j + 1))
			{
				return;
			}
			byte b = 0;
			if (dir == 1)
			{
				b = 36;
			}
			Main.tile[i, j - 2].active(true);
			Main.tile[i, j - 2].frameY = 0;
			Main.tile[i, j - 2].frameX = (short)b;
			Main.tile[i, j - 2].type = 269;
			Main.tile[i, j - 1].active(true);
			Main.tile[i, j - 1].frameY = 18;
			Main.tile[i, j - 1].frameX = (short)b;
			Main.tile[i, j - 1].type = 269;
			Main.tile[i, j].active(true);
			Main.tile[i, j].frameY = 36;
			Main.tile[i, j].frameX = (short)b;
			Main.tile[i, j].type = 269;
			Main.tile[i + 1, j - 2].active(true);
			Main.tile[i + 1, j - 2].frameY = 0;
			Main.tile[i + 1, j - 2].frameX = (short)(18 + b);
			Main.tile[i + 1, j - 2].type = 269;
			Main.tile[i + 1, j - 1].active(true);
			Main.tile[i + 1, j - 1].frameY = 18;
			Main.tile[i + 1, j - 1].frameX = (short)(18 + b);
			Main.tile[i + 1, j - 1].type = 269;
			Main.tile[i + 1, j].active(true);
			Main.tile[i + 1, j].frameY = 36;
			Main.tile[i + 1, j].frameX = (short)(18 + b);
			Main.tile[i + 1, j].type = 269;
		}

		// Token: 0x06000F1C RID: 3868 RVA: 0x004317C0 File Offset: 0x0042F9C0
		public static void CheckWeaponsRack(int i, int j)
		{
			if (WorldGen.destroyObject)
			{
				return;
			}
			int num = j - (int)(Main.tile[i, j].frameY / 18);
			int k = (int)Main.tile[i, j].frameX;
			int num2 = 0;
			while (k >= 5000)
			{
				k -= 5000;
				num2++;
			}
			if (num2 != 0)
			{
				k = (num2 - 1) * 18;
			}
			k %= 54;
			int num3 = i - k / 18;
			bool flag = false;
			for (int l = 0; l < 3; l++)
			{
				for (int m = 0; m < 3; m++)
				{
					int num4 = num3 + l;
					int num5 = num + m;
					int n = (int)Main.tile[num4, num5].frameX;
					int num6 = 0;
					while (n >= 5000)
					{
						n -= 5000;
						num6++;
					}
					if (num6 != 0)
					{
						n = (num6 - 1) * 18;
					}
					n %= 54;
					if (!Main.tile[num4, num5].active() || Main.tile[num4, num5].type != 334 || Main.tile[num4, num5].wall <= 0 || (int)Main.tile[num4, num5].frameY != m * 18 || n != l * 18)
					{
						flag = true;
					}
				}
			}
			if (flag)
			{
				int num7 = TEWeaponsRack.Find(num3, num);
				if (num7 != -1 && ((TEWeaponsRack)TileEntity.ByID[num7]).item.stack > 0)
				{
					((TEWeaponsRack)TileEntity.ByID[num7]).DropItem();
					if (Main.netMode != 2)
					{
						Main.LocalPlayer.InterruptItemUsageIfOverTile(471);
					}
				}
				WorldGen.destroyObject = true;
				Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 48, 48, 2699, 1, false, 0, false, false);
				TEWeaponsRack.Kill(num3, num);
				for (int num8 = 0; num8 < 3; num8++)
				{
					for (int num9 = 0; num9 < 3; num9++)
					{
						int num10 = num3 + num8;
						int num11 = num + num9;
						if (Main.tile[num10, num11].active() && Main.tile[num10, num11].type == 334)
						{
							WorldGen.KillTile(num10, num11, false, false, false);
						}
					}
				}
				WorldGen.destroyObject = false;
			}
		}

		// Token: 0x06000F1D RID: 3869 RVA: 0x00431A18 File Offset: 0x0042FC18
		public static void ToggleGemLock(int i, int j, bool on)
		{
			Tile tileSafely = Framing.GetTileSafely(i, j);
			if (!tileSafely.active() || tileSafely.type != 440)
			{
				return;
			}
			if (tileSafely.frameY < 54 && !on)
			{
				return;
			}
			bool flag = false;
			int num = -1;
			if (tileSafely.frameY >= 54)
			{
				flag = true;
			}
			int num2 = (int)(Main.tile[i, j].frameX / 54);
			int num3 = (int)(Main.tile[i, j].frameX % 54 / 18);
			int num4 = (int)(Main.tile[i, j].frameY % 54 / 18);
			switch (num2)
			{
			case 0:
				num = 1526;
				break;
			case 1:
				num = 1524;
				break;
			case 2:
				num = 1525;
				break;
			case 3:
				num = 1523;
				break;
			case 4:
				num = 1522;
				break;
			case 5:
				num = 1527;
				break;
			case 6:
				num = 3643;
				break;
			}
			for (int k = i - num3; k < i - num3 + 3; k++)
			{
				for (int l = j - num4; l < j - num4 + 3; l++)
				{
					Main.tile[k, l].frameY = (short)((on ? 54 : 0) + (l - j + num4) * 18);
				}
			}
			if (num != -1 && flag)
			{
				Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, num, 1, false, 0, false, false);
			}
			WorldGen.SquareTileFrame(i, j, true);
			NetMessage.SendTileSquare(-1, i - num3, j - num4, 3, 3, TileChangeType.None);
			Wiring.HitSwitch(i - num3, j - num4);
			NetMessage.SendData(59, -1, -1, null, i - num3, (float)(j - num4), 0f, 0f, 0, 0, 0);
		}

		// Token: 0x06000F1E RID: 3870 RVA: 0x00431BCC File Offset: 0x0042FDCC
		public static void CheckMan(int i, int j)
		{
			if (WorldGen.destroyObject)
			{
				return;
			}
			int num = j - (int)(Main.tile[i, j].frameY / 18);
			int k;
			for (k = (int)Main.tile[i, j].frameX; k >= 100; k -= 100)
			{
			}
			while (k >= 36)
			{
				k -= 36;
			}
			int num2 = i - k / 18;
			bool flag = false;
			for (int l = 0; l <= 1; l++)
			{
				for (int m = 0; m <= 2; m++)
				{
					int num3 = num2 + l;
					int num4 = num + m;
					int n;
					for (n = (int)Main.tile[num3, num4].frameX; n >= 100; n -= 100)
					{
					}
					if (n >= 36)
					{
						n -= 36;
					}
					if (!Main.tile[num3, num4].active() || Main.tile[num3, num4].type != 128 || (int)Main.tile[num3, num4].frameY != m * 18 || n != l * 18)
					{
						flag = true;
					}
				}
			}
			if (!WorldGen.SolidTileAllowBottomSlope(num2, num + 3) || !WorldGen.SolidTileAllowBottomSlope(num2 + 1, num + 3))
			{
				flag = true;
			}
			if (flag)
			{
				WorldGen.destroyObject = true;
				Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 498, 1, false, 0, false, false);
				for (int num5 = 0; num5 <= 1; num5++)
				{
					for (int num6 = 0; num6 <= 2; num6++)
					{
						int num7 = num2 + num5;
						int num8 = num + num6;
						if (Main.tile[num7, num8].active() && Main.tile[num7, num8].type == 128)
						{
							WorldGen.KillTile(num7, num8, false, false, false);
						}
					}
				}
				WorldGen.destroyObject = false;
			}
		}

		// Token: 0x06000F1F RID: 3871 RVA: 0x00431DA0 File Offset: 0x0042FFA0
		public static void CheckWoman(int i, int j)
		{
			if (WorldGen.destroyObject)
			{
				return;
			}
			int num = j - (int)(Main.tile[i, j].frameY / 18);
			int k;
			for (k = (int)Main.tile[i, j].frameX; k >= 100; k -= 100)
			{
			}
			while (k >= 36)
			{
				k -= 36;
			}
			int num2 = i - k / 18;
			bool flag = false;
			for (int l = 0; l <= 1; l++)
			{
				for (int m = 0; m <= 2; m++)
				{
					int num3 = num2 + l;
					int num4 = num + m;
					int n;
					for (n = (int)Main.tile[num3, num4].frameX; n >= 100; n -= 100)
					{
					}
					if (n >= 36)
					{
						n -= 36;
					}
					if (!Main.tile[num3, num4].active() || Main.tile[num3, num4].type != 269 || (int)Main.tile[num3, num4].frameY != m * 18 || n != l * 18)
					{
						flag = true;
					}
				}
			}
			if (!WorldGen.SolidTileAllowBottomSlope(num2, num + 3) || !WorldGen.SolidTileAllowBottomSlope(num2 + 1, num + 3))
			{
				flag = true;
			}
			if (flag)
			{
				WorldGen.destroyObject = true;
				Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 1989, 1, false, 0, false, false);
				for (int num5 = 0; num5 <= 1; num5++)
				{
					for (int num6 = 0; num6 <= 2; num6++)
					{
						int num7 = num2 + num5;
						int num8 = num + num6;
						if (Main.tile[num7, num8].active() && Main.tile[num7, num8].type == 269)
						{
							WorldGen.KillTile(num7, num8, false, false, false);
						}
					}
				}
				WorldGen.destroyObject = false;
			}
		}

		// Token: 0x06000F20 RID: 3872 RVA: 0x00431F74 File Offset: 0x00430174
		public static void Place1x2(int x, int y, ushort type, int style)
		{
			short frameX = 0;
			if (type == 20)
			{
				frameX = (short)(WorldGen.genRand.Next(3) * 18);
			}
			if (Main.tile[x, y - 1] == null)
			{
				Main.tile[x, y - 1] = new Tile();
			}
			if (Main.tile[x, y + 1] == null)
			{
				Main.tile[x, y + 1] = new Tile();
			}
			if (WorldGen.SolidTile2(x, y + 1) & !Main.tile[x, y - 1].active())
			{
				short num = (short)(style * 40);
				Main.tile[x, y - 1].active(true);
				Main.tile[x, y - 1].frameY = num;
				Main.tile[x, y - 1].frameX = frameX;
				Main.tile[x, y - 1].type = type;
				Main.tile[x, y].active(true);
				Main.tile[x, y].frameY = num + 18;
				Main.tile[x, y].frameX = frameX;
				Main.tile[x, y].type = type;
			}
		}

		// Token: 0x06000F21 RID: 3873 RVA: 0x004320A8 File Offset: 0x004302A8
		public static void Place1x2Top(int x, int y, ushort type, int style)
		{
			short frameX = 0;
			if (Main.tile[x, y - 1] == null)
			{
				Main.tile[x, y - 1] = new Tile();
			}
			if (Main.tile[x, y + 1] == null)
			{
				Main.tile[x, y + 1] = new Tile();
			}
			if (Main.tile[x, y - 1].nactive() && Main.tileSolid[(int)Main.tile[x, y - 1].type] && !Main.tileSolidTop[(int)Main.tile[x, y - 1].type] && !Main.tile[x, y + 1].active())
			{
				short num = (short)(style * 36);
				Main.tile[x, y].active(true);
				Main.tile[x, y].frameY = num;
				Main.tile[x, y].frameX = frameX;
				Main.tile[x, y].type = type;
				Main.tile[x, y + 1].active(true);
				Main.tile[x, y + 1].frameY = num + 18;
				Main.tile[x, y + 1].frameX = frameX;
				Main.tile[x, y + 1].type = type;
			}
		}

		// Token: 0x06000F22 RID: 3874 RVA: 0x0043220C File Offset: 0x0043040C
		public static void Check1x2Top(int x, int j, ushort type)
		{
			if (WorldGen.destroyObject)
			{
				return;
			}
			bool flag = true;
			int i = (int)(Main.tile[x, j].frameY / 18);
			int num = 0;
			while (i >= 2)
			{
				i -= 2;
				num++;
			}
			int num2 = j - i;
			i = num * 36;
			if (Main.tile[x, num2] == null)
			{
				Main.tile[x, num2] = new Tile();
			}
			if (Main.tile[x, num2 + 1] == null)
			{
				Main.tile[x, num2 + 1] = new Tile();
			}
			if (Main.tile[x, num2] == null)
			{
				Main.tile[x, num2] = new Tile();
			}
			if ((int)Main.tile[x, num2].frameY == i && (int)Main.tile[x, num2 + 1].frameY == i + 18 && Main.tile[x, num2].type == type && Main.tile[x, num2 + 1].type == type)
			{
				flag = false;
			}
			if (Main.tile[x, num2 - 1] == null)
			{
				Main.tile[x, num2 - 1] = new Tile();
			}
			bool flag2 = false;
			if (type <= 271)
			{
				if (type != 42 && type - 270 > 1)
				{
					goto IL_14E;
				}
			}
			else if (type != 572 && type != 581 && type != 660)
			{
				goto IL_14E;
			}
			flag2 = true;
			IL_14E:
			bool flag3 = Main.tile[x, num2 - 1].active() && (TileID.Sets.Platforms[(int)Main.tile[x, num2 - 1].type] || Main.tile[x, num2 - 1].type == 380);
			if ((!flag2 || !flag3) && (!Main.tile[x, num2 - 1].nactive() || !Main.tileSolid[(int)Main.tile[x, num2 - 1].type] || Main.tileSolidTop[(int)Main.tile[x, num2 - 1].type]))
			{
				flag = true;
			}
			if (flag)
			{
				WorldGen.destroyObject = true;
				if (Main.tile[x, num2].type == type)
				{
					WorldGen.KillTile(x, num2, false, false, false);
				}
				if (Main.tile[x, num2 + 1].type == type)
				{
					WorldGen.KillTile(x, num2 + 1, false, false, false);
				}
				if (type == 42)
				{
					int type2 = 0;
					if (num == 0)
					{
						type2 = 136;
					}
					else if (num == 7)
					{
						type2 = 1431;
					}
					else if (num == 8)
					{
						type2 = 1808;
					}
					else if (num == 9)
					{
						type2 = 1859;
					}
					else if (num < 10)
					{
						type2 = 1389 + num;
					}
					else if (num == 10)
					{
						type2 = 2032;
					}
					else if (num == 11)
					{
						type2 = 2033;
					}
					else if (num == 12)
					{
						type2 = 2034;
					}
					else if (num == 13)
					{
						type2 = 2035;
					}
					else if (num == 14)
					{
						type2 = 2036;
					}
					else if (num == 15)
					{
						type2 = 2037;
					}
					else if (num == 16)
					{
						type2 = 2038;
					}
					else if (num == 17)
					{
						type2 = 2039;
					}
					else if (num == 18)
					{
						type2 = 2040;
					}
					else if (num == 19)
					{
						type2 = 2041;
					}
					else if (num == 20)
					{
						type2 = 2042;
					}
					else if (num == 21)
					{
						type2 = 2043;
					}
					else if (num >= 22 && num <= 25)
					{
						type2 = 2145 + num - 22;
					}
					else if (num == 26)
					{
						type2 = 2226;
					}
					else if (num == 27)
					{
						type2 = 2530;
					}
					else if (num == 28)
					{
						type2 = 2546;
					}
					else if (num == 29)
					{
						type2 = 2564;
					}
					else if (num == 30)
					{
						type2 = 2579;
					}
					else if (num == 31)
					{
						type2 = 2641;
					}
					else if (num == 32)
					{
						type2 = 2642;
					}
					else if (num == 33)
					{
						type2 = 2820;
					}
					else if (num == 34)
					{
						type2 = 3138;
					}
					else if (num == 35)
					{
						type2 = 3140;
					}
					else if (num == 36)
					{
						type2 = 3139;
					}
					else if (num == 37)
					{
						type2 = 3891;
					}
					else if (num == 38)
					{
						type2 = 3943;
					}
					else if (num == 39)
					{
						type2 = 3970;
					}
					else if (num == 40)
					{
						type2 = 4157;
					}
					else if (num == 41)
					{
						type2 = 4178;
					}
					else if (num == 42)
					{
						type2 = 4199;
					}
					else if (num == 43)
					{
						type2 = 4220;
					}
					else if (num == 44)
					{
						type2 = 4309;
					}
					else if (num == 45)
					{
						type2 = 4578;
					}
					else if (num == 46)
					{
						type2 = 5160;
					}
					else if (num == 47)
					{
						type2 = 5181;
					}
					else if (num == 48)
					{
						type2 = 5202;
					}
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(x, num2), x * 16, num2 * 16, 32, 32, type2, 1, false, 0, false, false);
				}
				else if (type == 270)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(x, num2), x * 16, num2 * 16, 32, 32, 1993, 1, false, 0, false, false);
				}
				else if (type == 271)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(x, num2), x * 16, num2 * 16, 32, 32, 2005, 1, false, 0, false, false);
				}
				else if (type == 581)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(x, num2), x * 16, num2 * 16, 32, 32, 4848, 1, false, 0, false, false);
				}
				else if (type == 660)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(x, num2), x * 16, num2 * 16, 32, 32, 5351, 1, false, 0, false, false);
				}
				else if (type == 572)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(x, num2), x * 16, num2 * 16, 32, 32, 4695 + num, 1, false, 0, false, false);
				}
				WorldGen.destroyObject = false;
			}
		}

		// Token: 0x06000F23 RID: 3875 RVA: 0x00432818 File Offset: 0x00430A18
		public static bool PlaceSmallPile(int i, int j, int X, int Y, ushort type = 185)
		{
			short frameY = (short)(Y * 18);
			short num = (short)(X * 18);
			if (Main.tile[i, j] == null)
			{
				Main.tile[i, j] = new Tile();
			}
			if (Main.tile[i + 1, j] == null)
			{
				Main.tile[i + 1, j] = new Tile();
			}
			if (Main.tile[i, j + 1] == null)
			{
				Main.tile[i, j + 1] = new Tile();
			}
			if (Main.tile[i + 1, j + 1] == null)
			{
				Main.tile[i + 1, j + 1] = new Tile();
			}
			if (Main.tile[i, j].lava())
			{
				return false;
			}
			if (Y == 1)
			{
				num = (short)(X * 36);
				bool flag = false;
				if (WorldGen.SolidTile2(i, j + 1) && WorldGen.SolidTile2(i + 1, j + 1) && !Main.tile[i, j].active() && !Main.tile[i + 1, j].active())
				{
					flag = true;
				}
				if (flag)
				{
					Main.tile[i, j].active(true);
					Main.tile[i, j].frameY = frameY;
					Main.tile[i, j].frameX = num;
					Main.tile[i, j].type = type;
					Main.tile[i + 1, j].active(true);
					Main.tile[i + 1, j].frameY = frameY;
					Main.tile[i + 1, j].frameX = num + 18;
					Main.tile[i + 1, j].type = type;
					return true;
				}
			}
			else if (WorldGen.SolidTile2(i, j + 1) && !Main.tile[i, j].active())
			{
				Main.tile[i, j].active(true);
				Main.tile[i, j].frameY = frameY;
				Main.tile[i, j].frameX = num;
				Main.tile[i, j].type = type;
				return true;
			}
			return false;
		}

		// Token: 0x06000F24 RID: 3876 RVA: 0x00432A3C File Offset: 0x00430C3C
		public static void CheckPile(int i, int y)
		{
			if (Main.tile[i, y] == null)
			{
				Main.tile[i, y] = new Tile();
			}
			if (Main.tile[i + 1, y] == null)
			{
				Main.tile[i + 1, y] = new Tile();
			}
			if (Main.tile[i, y + 1] == null)
			{
				Main.tile[i, y + 1] = new Tile();
			}
			if (Main.tile[i + 1, y + 1] == null)
			{
				Main.tile[i + 1, y + 1] = new Tile();
			}
			Tile tile = Main.tile[i, y];
			if (tile.frameY == 18 || tile.type == 649)
			{
				WorldGen.Check2x1(i, y, tile.type);
				return;
			}
			if (!WorldGen.SolidTileAllowBottomSlope(i, y + 1))
			{
				WorldGen.KillTile(i, y, false, false, false);
				return;
			}
			if (tile.type == 185)
			{
				int num = (int)(tile.frameX / 18);
				Tile tile2 = Main.tile[i, y + 1];
				if (tile2 != null && tile2.active() && tile2.type >= 0 && tile2.type < TileID.Count)
				{
					ushort type = tile2.type;
					switch (num)
					{
					case 36:
					case 37:
					case 38:
					case 39:
					case 40:
					case 41:
					case 42:
					case 43:
					case 44:
					case 45:
					case 46:
					case 47:
						if (!TileID.Sets.Snow[(int)type] && !TileID.Sets.Conversion.Ice[(int)type] && type != 162 && type != 224)
						{
							WorldGen.KillTile(i, y, false, false, false);
							return;
						}
						break;
					case 48:
					case 49:
					case 50:
					case 51:
					case 52:
					case 53:
					case 60:
					case 61:
					case 62:
					case 63:
					case 64:
					case 65:
					case 66:
					case 67:
					case 68:
					case 69:
					case 70:
					case 71:
					case 72:
						break;
					case 54:
					case 55:
					case 56:
					case 57:
					case 58:
					case 59:
					case 73:
					case 74:
					case 75:
					case 76:
						if (!TileID.Sets.Conversion.Sand[(int)type] && !TileID.Sets.Conversion.HardenedSand[(int)type] && !TileID.Sets.Conversion.Sandstone[(int)type])
						{
							WorldGen.KillTile(i, y, false, false, false);
						}
						break;
					default:
						return;
					}
				}
			}
		}

		// Token: 0x06000F25 RID: 3877 RVA: 0x00432C84 File Offset: 0x00430E84
		public static void Check2x1(int i, int y, ushort type)
		{
			if (WorldGen.destroyObject)
			{
				return;
			}
			bool flag = true;
			if (Main.tile[i, y] == null)
			{
				Main.tile[i, y] = new Tile();
			}
			int num = (int)(Main.tile[i, y].frameX / 18);
			int num2 = num >> 1;
			int num3 = (int)(Main.tile[i, y].frameY / 18);
			num %= 2;
			int num4 = i - num;
			if (Main.tile[num4, y] == null)
			{
				Main.tile[num4, y] = new Tile();
			}
			if (Main.tile[num4 + 1, y] == null)
			{
				Main.tile[num4 + 1, y] = new Tile();
			}
			if (Main.tile[num4, y + 1] == null)
			{
				Main.tile[num4, y + 1] = new Tile();
			}
			if (Main.tile[num4 + 1, y + 1] == null)
			{
				Main.tile[num4 + 1, y + 1] = new Tile();
			}
			if (Main.tile[num4 + 1, y].frameX == Main.tile[num4, y].frameX + 18 && Main.tile[num4, y].type == type && Main.tile[num4 + 1, y].type == type)
			{
				flag = false;
			}
			if (type == 29 || type == 103 || type == 462)
			{
				if (!Main.tile[num4, y + 1].active() || !Main.tileTable[(int)Main.tile[num4, y + 1].type] || Main.tile[num4, y + 1].halfBrick() || Main.tile[num4, y + 1].topSlope())
				{
					flag = true;
				}
				if (!Main.tile[num4 + 1, y + 1].active() || !Main.tileTable[(int)Main.tile[num4 + 1, y + 1].type] || Main.tile[num4 + 1, y + 1].halfBrick() || Main.tile[num4 + 1, y + 1].topSlope())
				{
					flag = true;
				}
			}
			else
			{
				if (!WorldGen.SolidTileAllowBottomSlope(num4, y + 1))
				{
					flag = true;
				}
				if (!WorldGen.SolidTileAllowBottomSlope(num4 + 1, y + 1))
				{
					flag = true;
				}
			}
			if (type == 185)
			{
				if (Main.tile[num4, y].frameX >= 1368 && Main.tile[num4, y].frameX <= 1458 && Main.tile[num4, y + 1].type != 2 && Main.tile[num4 + 1, y + 1].type != 2 && Main.tile[num4, y + 1].type != 477 && Main.tile[num4 + 1, y + 1].type != 477 && Main.tile[num4, y + 1].type != 492 && Main.tile[num4 + 1, y + 1].type != 492)
				{
					Tile tile = Main.tile[num4, y];
					tile.frameX -= 1368;
					Tile tile2 = Main.tile[num4 + 1, y];
					tile2.frameX -= 1368;
				}
				Tile tile3 = Main.tile[num4, y];
				int num5 = (int)(tile3.frameX / 36);
				num5 += (int)((tile3.frameY / 18 - 1) * 52);
				for (int j = num4; j < num4 + 2; j++)
				{
					Tile tile4 = Main.tile[j, y + 1];
					if (tile4 != null && tile4.active() && tile4.type >= 0 && tile4.type < TileID.Count)
					{
						ushort type2 = tile4.type;
						if (num5 - 25 > 5)
						{
							if (num5 - 41 <= 5 || num5 - 62 <= 2)
							{
								if (!TileID.Sets.Conversion.Sand[(int)type2] && !TileID.Sets.Conversion.HardenedSand[(int)type2] && !TileID.Sets.Conversion.Sandstone[(int)type2])
								{
									flag = true;
								}
							}
						}
						else if (!TileID.Sets.Snow[(int)type2] && !TileID.Sets.Conversion.Ice[(int)type2] && type2 != 162 && type2 != 224)
						{
							flag = true;
						}
					}
				}
			}
			if (flag)
			{
				int frameX = (int)Main.tile[num4, y].frameX;
				if (!Main.tile[num4, y].active())
				{
					frameX = (int)Main.tile[num4 + 1, y].frameX;
				}
				WorldGen.destroyObject = true;
				if (Main.tile[num4, y].type == type)
				{
					WorldGen.KillTile(num4, y, false, false, false);
				}
				if (Main.tile[num4 + 1, y].type == type)
				{
					WorldGen.KillTile(num4 + 1, y, false, false, false);
				}
				if (type == 16)
				{
					if (num2 == 1)
					{
						Item.NewItem(WorldGen.GetItemSource_FromTileBreak(num4, y), num4 * 16, y * 16, 32, 32, 716, 1, false, 0, false, false);
					}
					else
					{
						Item.NewItem(WorldGen.GetItemSource_FromTileBreak(num4, y), num4 * 16, y * 16, 32, 32, 35, 1, false, 0, false, false);
					}
				}
				if (type == 18)
				{
					int type3 = 36;
					if (num2 >= 1 && num2 <= 3)
					{
						type3 = 634 + num2;
					}
					else if (num2 >= 4 && num2 <= 8)
					{
						type3 = 807 + num2;
					}
					else if (num2 == 9)
					{
						type3 = 916;
					}
					else if (num2 == 10)
					{
						type3 = 1145;
					}
					else if (num2 == 11)
					{
						type3 = 1398;
					}
					else if (num2 == 12)
					{
						type3 = 1401;
					}
					else if (num2 == 13)
					{
						type3 = 1404;
					}
					else if (num2 == 14)
					{
						type3 = 1461;
					}
					else if (num2 == 15)
					{
						type3 = 1511;
					}
					else if (num2 == 16)
					{
						type3 = 1795;
					}
					else if (num2 == 17)
					{
						type3 = 1817;
					}
					else if (num2 == 18)
					{
						type3 = 2229;
					}
					else if (num2 == 19)
					{
						type3 = 2251;
					}
					else if (num2 == 20)
					{
						type3 = 2252;
					}
					else if (num2 == 21)
					{
						type3 = 2253;
					}
					else if (num2 == 22)
					{
						type3 = 2534;
					}
					else if (num2 == 23)
					{
						type3 = 673;
					}
					else if (num2 == 24)
					{
						type3 = 2631;
					}
					else if (num2 == 25)
					{
						type3 = 2632;
					}
					else if (num2 == 26)
					{
						type3 = 2633;
					}
					else if (num2 == 27)
					{
						type3 = 2826;
					}
					else if (num2 == 28)
					{
						type3 = 3156;
					}
					else if (num2 == 29)
					{
						type3 = 3158;
					}
					else if (num2 == 30)
					{
						type3 = 3157;
					}
					else if (num2 == 31)
					{
						type3 = 3909;
					}
					else if (num2 == 32)
					{
						type3 = 3910;
					}
					else if (num2 == 33)
					{
						type3 = 3949;
					}
					else if (num2 == 34)
					{
						type3 = 3975;
					}
					else if (num2 == 35)
					{
						type3 = 4163;
					}
					else if (num2 == 36)
					{
						type3 = 4184;
					}
					else if (num2 == 37)
					{
						type3 = 4205;
					}
					else if (num2 == 38)
					{
						type3 = 4226;
					}
					else if (num2 == 39)
					{
						type3 = 4315;
					}
					else if (num2 == 40)
					{
						type3 = 4584;
					}
					else if (num2 == 41)
					{
						type3 = 5166;
					}
					else if (num2 == 42)
					{
						type3 = 5187;
					}
					else if (num2 == 43)
					{
						type3 = 5208;
					}
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(num4, y), num4 * 16, y * 16, 32, 32, type3, 1, false, 0, false, false);
				}
				if (type == 185)
				{
					if (frameX >= 576 && frameX <= 610)
					{
						Item.NewItem(WorldGen.GetItemSource_FromTileBreak(num4, y), num4 * 16, y * 16, 32, 32, 71, WorldGen.genRand.Next(10, 100), false, 0, false, false);
						Item.NewItem(WorldGen.GetItemSource_FromTileBreak(num4, y), num4 * 16, y * 16, 32, 32, 71, WorldGen.genRand.Next(20, 100), false, 0, false, false);
						if (WorldGen.genRand.Next(3) != 0)
						{
							Item.NewItem(WorldGen.GetItemSource_FromTileBreak(num4, y), num4 * 16, y * 16, 32, 32, 71, WorldGen.genRand.Next(10, 100), false, 0, false, false);
						}
						if (WorldGen.genRand.Next(3) != 0)
						{
							Item.NewItem(WorldGen.GetItemSource_FromTileBreak(num4, y), num4 * 16, y * 16, 32, 32, 71, WorldGen.genRand.Next(20, 100), false, 0, false, false);
						}
						if (WorldGen.genRand.Next(2) == 0)
						{
							Item.NewItem(WorldGen.GetItemSource_FromTileBreak(num4, y), num4 * 16, y * 16, 32, 32, 71, WorldGen.genRand.Next(10, 100), false, 0, false, false);
						}
						if (WorldGen.genRand.Next(2) == 0)
						{
							Item.NewItem(WorldGen.GetItemSource_FromTileBreak(num4, y), num4 * 16, y * 16, 32, 32, 71, WorldGen.genRand.Next(20, 100), false, 0, false, false);
						}
						if (WorldGen.genRand.Next(3) == 0)
						{
							Item.NewItem(WorldGen.GetItemSource_FromTileBreak(num4, y), num4 * 16, y * 16, 32, 32, 71, WorldGen.genRand.Next(10, 100), false, 0, false, false);
						}
						if (WorldGen.genRand.Next(3) == 0)
						{
							Item.NewItem(WorldGen.GetItemSource_FromTileBreak(num4, y), num4 * 16, y * 16, 32, 32, 71, WorldGen.genRand.Next(20, 100), false, 0, false, false);
						}
						if (WorldGen.genRand.Next(4) == 0)
						{
							Item.NewItem(WorldGen.GetItemSource_FromTileBreak(num4, y), num4 * 16, y * 16, 32, 32, 71, WorldGen.genRand.Next(10, 100), false, 0, false, false);
						}
						if (WorldGen.genRand.Next(4) == 0)
						{
							Item.NewItem(WorldGen.GetItemSource_FromTileBreak(num4, y), num4 * 16, y * 16, 32, 32, 71, WorldGen.genRand.Next(20, 100), false, 0, false, false);
						}
						if (WorldGen.genRand.Next(5) == 0)
						{
							Item.NewItem(WorldGen.GetItemSource_FromTileBreak(num4, y), num4 * 16, y * 16, 32, 32, 71, WorldGen.genRand.Next(10, 100), false, 0, false, false);
						}
						if (WorldGen.genRand.Next(5) == 0)
						{
							Item.NewItem(WorldGen.GetItemSource_FromTileBreak(num4, y), num4 * 16, y * 16, 32, 32, 71, WorldGen.genRand.Next(20, 100), false, 0, false, false);
						}
					}
					if (frameX >= 612 && frameX <= 646)
					{
						Item.NewItem(WorldGen.GetItemSource_FromTileBreak(num4, y), num4 * 16, y * 16, 32, 32, 72, WorldGen.genRand.Next(10, 100), false, 0, false, false);
						if (WorldGen.genRand.Next(2) == 0)
						{
							Item.NewItem(WorldGen.GetItemSource_FromTileBreak(num4, y), num4 * 16, y * 16, 32, 32, 72, WorldGen.genRand.Next(20, 100), false, 0, false, false);
						}
						if (WorldGen.genRand.Next(3) == 0)
						{
							Item.NewItem(WorldGen.GetItemSource_FromTileBreak(num4, y), num4 * 16, y * 16, 32, 32, 72, WorldGen.genRand.Next(30, 100), false, 0, false, false);
						}
					}
					if (frameX >= 648 && frameX <= 682)
					{
						Item.NewItem(WorldGen.GetItemSource_FromTileBreak(num4, y), num4 * 16, y * 16, 32, 32, 73, WorldGen.genRand.Next(1, 6), false, 0, false, false);
						if (WorldGen.genRand.Next(2) == 0)
						{
							Item.NewItem(WorldGen.GetItemSource_FromTileBreak(num4, y), num4 * 16, y * 16, 32, 32, 73, WorldGen.genRand.Next(2, 6), false, 0, false, false);
						}
						if (WorldGen.genRand.Next(3) == 0)
						{
							Item.NewItem(WorldGen.GetItemSource_FromTileBreak(num4, y), num4 * 16, y * 16, 32, 32, 73, WorldGen.genRand.Next(3, 6), false, 0, false, false);
						}
					}
					if (frameX >= 684 && frameX <= 718)
					{
						Item.NewItem(WorldGen.GetItemSource_FromTileBreak(num4, y), num4 * 16, y * 16, 32, 32, 181, WorldGen.genRand.Next(1, 4), false, 0, false, false);
					}
					if (frameX >= 720 && frameX <= 754)
					{
						Item.NewItem(WorldGen.GetItemSource_FromTileBreak(num4, y), num4 * 16, y * 16, 32, 32, 180, WorldGen.genRand.Next(1, 4), false, 0, false, false);
					}
					if (frameX >= 756 && frameX <= 790)
					{
						Item.NewItem(WorldGen.GetItemSource_FromTileBreak(num4, y), num4 * 16, y * 16, 32, 32, 177, WorldGen.genRand.Next(1, 4), false, 0, false, false);
					}
					if (frameX >= 792 && frameX <= 826)
					{
						Item.NewItem(WorldGen.GetItemSource_FromTileBreak(num4, y), num4 * 16, y * 16, 32, 32, 179, WorldGen.genRand.Next(1, 4), false, 0, false, false);
					}
					if (frameX >= 828 && frameX <= 862)
					{
						Item.NewItem(WorldGen.GetItemSource_FromTileBreak(num4, y), num4 * 16, y * 16, 32, 32, 178, WorldGen.genRand.Next(1, 4), false, 0, false, false);
					}
					if (frameX >= 864 && frameX <= 898)
					{
						Item.NewItem(WorldGen.GetItemSource_FromTileBreak(num4, y), num4 * 16, y * 16, 32, 32, 182, WorldGen.genRand.Next(1, 4), false, 0, false, false);
					}
				}
				if (type == 462)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(num4, y), num4 * 16, y * 16, 32, 32, 3795, 1, false, 0, false, false);
				}
				if (type == 29)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(num4, y), num4 * 16, y * 16, 32, 32, 87, 1, false, 0, false, false);
					SoundEngine.PlaySound(13, i * 16, y * 16, 1, 1f, 0f);
				}
				if (type == 103)
				{
					int type4 = 356;
					if (num2 == 1)
					{
						type4 = 2235;
					}
					if (num2 == 2)
					{
						type4 = 2242;
					}
					if (num2 == 3)
					{
						type4 = 2243;
					}
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(num4, y), num4 * 16, y * 16, 32, 32, type4, 1, false, 0, false, false);
					SoundEngine.PlaySound(13, i * 16, y * 16, 1, 1f, 0f);
				}
				else if (type == 134)
				{
					if (num2 == 1)
					{
						Item.NewItem(WorldGen.GetItemSource_FromTileBreak(num4, y), num4 * 16, y * 16, 32, 32, 1220, 1, false, 0, false, false);
					}
					else
					{
						Item.NewItem(WorldGen.GetItemSource_FromTileBreak(num4, y), num4 * 16, y * 16, 32, 32, 525, 1, false, 0, false, false);
					}
				}
				else if (type == 649)
				{
					num2 += num3 * 53;
					int num6 = 0;
					if (num2 < 6)
					{
						num6 = 3;
					}
					else if (num2 < 16)
					{
						num6 = 154;
					}
					else if (num2 < 17)
					{
						num6 = 71;
					}
					else if (num2 < 18)
					{
						num6 = 72;
					}
					else if (num2 < 19)
					{
						num6 = 73;
					}
					else if (num2 < 20)
					{
						num6 = 181;
					}
					else if (num2 < 21)
					{
						num6 = 180;
					}
					else if (num2 < 22)
					{
						num6 = 177;
					}
					else if (num2 < 23)
					{
						num6 = 179;
					}
					else if (num2 < 24)
					{
						num6 = 178;
					}
					else if (num2 < 25)
					{
						num6 = 182;
					}
					else if (num2 < 31)
					{
						num6 = 593;
					}
					else if (num2 < 34)
					{
						num6 = 9;
					}
					else if (num2 < 38)
					{
						num6 = 150;
					}
					else if (num2 < 41)
					{
						num6 = 3;
					}
					else if (num2 < 47)
					{
						num6 = 3271;
					}
					else if (num2 < 53)
					{
						num6 = 3086;
					}
					else if (num2 < 59)
					{
						num6 = 3081;
					}
					else if (num2 < 62)
					{
						num6 = 62;
					}
					else if (num2 < 65)
					{
						num6 = 169;
					}
					if (num6 != 0)
					{
						Item.NewItem(WorldGen.GetItemSource_FromTileBreak(num4, y), num4 * 16, y * 16, 32, 32, num6, 1, false, 0, false, false);
					}
				}
				WorldGen.destroyObject = false;
				WorldGen.SquareTileFrame(num4, y, true);
				WorldGen.SquareTileFrame(num4 + 1, y, true);
			}
		}

		// Token: 0x06000F26 RID: 3878 RVA: 0x00433C88 File Offset: 0x00431E88
		public static void Place2x1(int x, int y, ushort type, int style = 0)
		{
			if (Main.tile[x, y] == null)
			{
				Main.tile[x, y] = new Tile();
			}
			if (Main.tile[x + 1, y] == null)
			{
				Main.tile[x + 1, y] = new Tile();
			}
			if (Main.tile[x, y + 1] == null)
			{
				Main.tile[x, y + 1] = new Tile();
			}
			if (Main.tile[x + 1, y + 1] == null)
			{
				Main.tile[x + 1, y + 1] = new Tile();
			}
			bool flag = false;
			if (type != 29 && type != 103 && WorldGen.SolidTile2(x, y + 1) && WorldGen.SolidTile2(x + 1, y + 1) && !Main.tile[x, y].active() && !Main.tile[x + 1, y].active())
			{
				flag = true;
			}
			else if ((type == 29 || type == 103) && Main.tile[x, y + 1].active() && Main.tile[x + 1, y + 1].active() && Main.tileTable[(int)Main.tile[x, y + 1].type] && Main.tileTable[(int)Main.tile[x + 1, y + 1].type] && !Main.tile[x, y].active() && !Main.tile[x + 1, y].active())
			{
				flag = true;
			}
			if (flag)
			{
				Main.tile[x, y].active(true);
				Main.tile[x, y].frameY = 0;
				Main.tile[x, y].frameX = (short)(36 * style);
				Main.tile[x, y].type = type;
				Main.tile[x + 1, y].active(true);
				Main.tile[x + 1, y].frameY = 0;
				Main.tile[x + 1, y].frameX = (short)(36 * style + 18);
				Main.tile[x + 1, y].type = type;
			}
		}

		// Token: 0x06000F27 RID: 3879 RVA: 0x00433EB8 File Offset: 0x004320B8
		public static void Check4x2(int i, int j, int type)
		{
			if (WorldGen.destroyObject)
			{
				return;
			}
			bool flag = false;
			int num;
			if (type == 487)
			{
				num = i + (int)(Main.tile[i, j].frameX / 18 % 4 * -1);
			}
			else
			{
				num = i + (int)(Main.tile[i, j].frameX / 18 * -1);
			}
			if ((type == 79 || type == 90) && Main.tile[i, j].frameX >= 72)
			{
				num += 4;
			}
			int k = (int)(Main.tile[i, j].frameY / 18);
			int num2 = 0;
			while (k > 1)
			{
				k -= 2;
				num2++;
			}
			k = j - k;
			if (type == 487)
			{
				num2 = (int)(Main.tile[i, j].frameX / 72);
			}
			for (int l = num; l < num + 4; l++)
			{
				for (int m = k; m < k + 2; m++)
				{
					int num3 = (l - num) * 18;
					int num4 = (m - k) * 18;
					if ((type == 79 || type == 90) && Main.tile[i, j].frameX >= 72)
					{
						num3 = (l - num + 4) * 18;
					}
					if (type == 487)
					{
						num3 += num2 * 72;
					}
					else
					{
						num4 += num2 * 36;
					}
					if (Main.tile[l, m] == null)
					{
						Main.tile[l, m] = new Tile();
					}
					if (!Main.tile[l, m].active() || (int)Main.tile[l, m].type != type || (int)Main.tile[l, m].frameX != num3 || (int)Main.tile[l, m].frameY != num4)
					{
						flag = true;
					}
				}
				if (Main.tile[l, k + 2] == null)
				{
					Main.tile[l, k + 2] = new Tile();
				}
				if (!WorldGen.SolidTileAllowBottomSlope(l, k + 2) && (!Main.tile[l, k + 2].active() || !TileID.Sets.Platforms[(int)Main.tile[l, k + 2].type]))
				{
					flag = true;
				}
			}
			if (flag)
			{
				WorldGen.destroyObject = true;
				for (int n = num; n < num + 4; n++)
				{
					for (int num5 = k; num5 < k + 3; num5++)
					{
						if ((int)Main.tile[n, num5].type == type && Main.tile[n, num5].active())
						{
							WorldGen.KillTile(n, num5, false, false, false);
						}
					}
				}
				if (type == 79)
				{
					int type2;
					if (num2 == 0)
					{
						type2 = 224;
					}
					else if (num2 == 4)
					{
						type2 = 920;
					}
					else if (num2 >= 9 && num2 <= 12)
					{
						type2 = 1710 + num2;
					}
					else if (num2 >= 5 && num2 <= 8)
					{
						type2 = 1465 + num2;
					}
					else if (num2 >= 13 && num2 <= 18)
					{
						type2 = 2066 + num2 - 13;
					}
					else if (num2 == 19)
					{
						type2 = 2139;
					}
					else if (num2 == 20)
					{
						type2 = 2140;
					}
					else if (num2 == 21)
					{
						type2 = 2231;
					}
					else if (num2 == 22)
					{
						type2 = 2520;
					}
					else if (num2 == 23)
					{
						type2 = 2538;
					}
					else if (num2 == 24)
					{
						type2 = 2553;
					}
					else if (num2 == 25)
					{
						type2 = 2568;
					}
					else if (num2 == 26)
					{
						type2 = 2669;
					}
					else if (num2 == 27)
					{
						type2 = 2811;
					}
					else if (num2 == 28)
					{
						type2 = 3162;
					}
					else if (num2 == 29)
					{
						type2 = 3164;
					}
					else if (num2 == 30)
					{
						type2 = 3163;
					}
					else if (num2 == 31)
					{
						type2 = 3897;
					}
					else if (num2 == 32)
					{
						type2 = 3932;
					}
					else if (num2 == 33)
					{
						type2 = 3959;
					}
					else if (num2 == 34)
					{
						type2 = 4146;
					}
					else if (num2 == 35)
					{
						type2 = 4167;
					}
					else if (num2 == 36)
					{
						type2 = 4188;
					}
					else if (num2 == 37)
					{
						type2 = 4209;
					}
					else if (num2 == 38)
					{
						type2 = 4299;
					}
					else if (num2 == 39)
					{
						type2 = 4567;
					}
					else if (num2 == 40)
					{
						type2 = 5149;
					}
					else if (num2 == 41)
					{
						type2 = 5170;
					}
					else if (num2 == 42)
					{
						type2 = 5191;
					}
					else
					{
						type2 = num2 + 643;
					}
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, type2, 1, false, 0, false, false);
				}
				if (type == 487)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, WorldGen.GetItemDrop_PicnicTables(num2), 1, false, 0, false, false);
				}
				if (type == 90)
				{
					int type3 = 0;
					if (num2 == 0)
					{
						type3 = 336;
					}
					else if (num2 >= 1 && num2 <= 10)
					{
						type3 = 2072 + num2 - 1;
					}
					else if (num2 >= 11 && num2 <= 15)
					{
						type3 = 2124 + num2 - 11;
					}
					else if (num2 == 16)
					{
						type3 = 2232;
					}
					else if (num2 == 17)
					{
						type3 = 2519;
					}
					else if (num2 == 18)
					{
						type3 = 2537;
					}
					else if (num2 == 19)
					{
						type3 = 2552;
					}
					else if (num2 == 20)
					{
						type3 = 2567;
					}
					else if (num2 == 21)
					{
						type3 = 2658;
					}
					else if (num2 == 22)
					{
						type3 = 2659;
					}
					else if (num2 == 23)
					{
						type3 = 2660;
					}
					else if (num2 == 24)
					{
						type3 = 2661;
					}
					else if (num2 == 25)
					{
						type3 = 2662;
					}
					else if (num2 == 26)
					{
						type3 = 2663;
					}
					else if (num2 == 27)
					{
						type3 = 2810;
					}
					else if (num2 == 28)
					{
						type3 = 3159;
					}
					else if (num2 == 29)
					{
						type3 = 3161;
					}
					else if (num2 == 30)
					{
						type3 = 3160;
					}
					else if (num2 == 31)
					{
						type3 = 3895;
					}
					else if (num2 == 32)
					{
						type3 = 3931;
					}
					else if (num2 == 33)
					{
						type3 = 3958;
					}
					else if (num2 == 34)
					{
						type3 = 4145;
					}
					else if (num2 == 35)
					{
						type3 = 4166;
					}
					else if (num2 == 36)
					{
						type3 = 4187;
					}
					else if (num2 == 37)
					{
						type3 = 4208;
					}
					else if (num2 == 38)
					{
						type3 = 4298;
					}
					else if (num2 == 39)
					{
						type3 = 4566;
					}
					else if (num2 == 40)
					{
						type3 = 5148;
					}
					else if (num2 == 41)
					{
						type3 = 5169;
					}
					else if (num2 == 42)
					{
						type3 = 5190;
					}
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, type3, 1, false, 0, false, false);
				}
				WorldGen.destroyObject = false;
				for (int num6 = num - 1; num6 < num + 4; num6++)
				{
					for (int num7 = k - 1; num7 < k + 4; num7++)
					{
						WorldGen.TileFrame(num6, num7, false, false);
					}
				}
			}
		}

		// Token: 0x06000F28 RID: 3880 RVA: 0x004345E4 File Offset: 0x004327E4
		private static bool OasisPlantWaterCheck(int x, int y, bool boost = false)
		{
			int num = 45;
			int num2 = 20;
			if (boost)
			{
				num += 4;
				num2 += 3;
			}
			int num3 = 20;
			int num4 = 0;
			for (int i = x - num; i <= x + num; i++)
			{
				if (x > WorldGen.beachDistance && x < Main.maxTilesX - WorldGen.beachDistance)
				{
					for (int j = y - num2; j <= y + num2; j++)
					{
						if (WorldGen.InWorld(i, j, 0) && !WorldGen.SolidTile(i, j, false))
						{
							num4 += (int)Main.tile[i, j].liquid;
						}
					}
				}
			}
			return num4 / 255 >= num3;
		}

		// Token: 0x06000F29 RID: 3881 RVA: 0x00434680 File Offset: 0x00432880
		public static void PlaceOasisPlant(int X, int Y, ushort type = 530)
		{
			int num = WorldGen.genRand.Next(9);
			int num2 = 0;
			if (X < WorldGen.beachDistance || X > Main.maxTilesX - WorldGen.beachDistance || Y < 5 || Y > Main.maxTilesY - 5)
			{
				return;
			}
			bool flag = true;
			for (int i = X - 1; i < X + 2; i++)
			{
				for (int j = Y - 1; j < Y + 1; j++)
				{
					if (Main.tile[i, j] == null)
					{
						Main.tile[i, j] = new Tile();
					}
					if (Main.tile[i, j].active() && Main.tile[i, j].type != 529)
					{
						flag = false;
					}
					if (Main.tile[i, j].liquid > 0)
					{
						flag = false;
					}
				}
				if (Main.tile[i, Y + 1] == null)
				{
					Main.tile[i, Y + 1] = new Tile();
				}
				if (!WorldGen.SolidTile(i, Y + 1, false) || !TileID.Sets.Conversion.Sand[(int)Main.tile[i, Y + 1].type])
				{
					flag = false;
				}
			}
			if (flag)
			{
				if (!WorldGen.OasisPlantWaterCheck(X, Y, false))
				{
					return;
				}
				short num3 = (short)(54 * num);
				short num4 = (short)(36 * num2);
				Main.tile[X - 1, Y - 1].active(true);
				Main.tile[X - 1, Y - 1].frameY = num4;
				Main.tile[X - 1, Y - 1].frameX = num3;
				Main.tile[X - 1, Y - 1].type = type;
				Main.tile[X, Y - 1].active(true);
				Main.tile[X, Y - 1].frameY = num4;
				Main.tile[X, Y - 1].frameX = num3 + 18;
				Main.tile[X, Y - 1].type = type;
				Main.tile[X + 1, Y - 1].active(true);
				Main.tile[X + 1, Y - 1].frameY = num4;
				Main.tile[X + 1, Y - 1].frameX = num3 + 36;
				Main.tile[X + 1, Y - 1].type = type;
				Main.tile[X - 1, Y].active(true);
				Main.tile[X - 1, Y].frameY = num4 + 18;
				Main.tile[X - 1, Y].frameX = num3;
				Main.tile[X - 1, Y].type = type;
				Main.tile[X, Y].active(true);
				Main.tile[X, Y].frameY = num4 + 18;
				Main.tile[X, Y].frameX = num3 + 18;
				Main.tile[X, Y].type = type;
				Main.tile[X + 1, Y].active(true);
				Main.tile[X + 1, Y].frameY = num4 + 18;
				Main.tile[X + 1, Y].frameX = num3 + 36;
				Main.tile[X + 1, Y].type = type;
			}
		}

		// Token: 0x06000F2A RID: 3882 RVA: 0x004349E8 File Offset: 0x00432BE8
		public static void CheckOasisPlant(int i, int j, int type = 530)
		{
			if (WorldGen.destroyObject)
			{
				return;
			}
			bool flag = false;
			Tile tileSafely = Framing.GetTileSafely(i, j);
			int num = (int)(tileSafely.frameY % 36);
			int num2 = j + num / 18 * -1;
			int k = (int)(tileSafely.frameX / 18);
			int num3 = 0;
			short num4 = Framing.GetTileSafely(k, num2).frameY / 36;
			while (k > 2)
			{
				k -= 3;
				num3++;
			}
			k = i - k;
			int num5 = num3 * 54;
			for (int l = k; l < k + 3; l++)
			{
				for (int m = num2; m < num2 + 2; m++)
				{
					if (Main.tile[l, m] == null)
					{
						Main.tile[l, m] = new Tile();
					}
					if (!Main.tile[l, m].active() || (int)Main.tile[l, m].type != type || (int)Main.tile[l, m].frameX != (l - k) * 18 + num5 || (int)Main.tile[l, m].frameY != (m - num2) * 18)
					{
						flag = true;
					}
				}
				if (Main.tile[l, num2 + 2] == null)
				{
					Main.tile[l, num2 + 2] = new Tile();
				}
				if (!WorldGen.SolidTile(l, num2 + 2, false) || !TileID.Sets.Conversion.Sand[(int)Main.tile[l, num2 + 2].type])
				{
					flag = true;
				}
			}
			if (flag)
			{
				short frameX = Main.tile[i, j].frameX;
				WorldGen.destroyObject = true;
				for (int n = k; n < k + 3; n++)
				{
					for (int num6 = num2; num6 < num2 + 2; num6++)
					{
						if (Main.tile[n, num6] == null)
						{
							Main.tile[n, num6] = new Tile();
						}
						if ((int)Main.tile[n, num6].type == type && Main.tile[n, num6].active())
						{
							WorldGen.KillTile(n, num6, false, false, false);
						}
					}
				}
				WorldGen.destroyObject = false;
				for (int num7 = k - 1; num7 < k + 4; num7++)
				{
					for (int num8 = num2 - 1; num8 < num2 + 3; num8++)
					{
						WorldGen.TileFrame(num7, num8, false, false);
					}
				}
			}
		}

		// Token: 0x06000F2B RID: 3883 RVA: 0x00434C34 File Offset: 0x00432E34
		public static void GetCactusType(int tileX, int tileY, int frameX, int frameY, out bool evil, out bool good, out bool crimson)
		{
			evil = false;
			good = false;
			crimson = false;
			int num = tileX;
			if (frameX == 36)
			{
				num--;
			}
			if (frameX == 54)
			{
				num++;
			}
			if (frameX == 108)
			{
				if (frameY == 18)
				{
					num--;
				}
				else
				{
					num++;
				}
			}
			int num2 = tileY;
			bool flag = false;
			Tile tile = Main.tile[num, num2];
			if (tile == null)
			{
				return;
			}
			if (tile.type == 80 && tile.active())
			{
				flag = true;
			}
			while (tile != null && (!tile.active() || !Main.tileSolid[(int)tile.type] || !flag))
			{
				if (tile.type == 80 && tile.active())
				{
					flag = true;
				}
				num2++;
				if (num2 > tileY + 20)
				{
					break;
				}
				tile = Main.tile[num, num2];
			}
			if (tile.type == 112)
			{
				evil = true;
			}
			if (tile.type == 116)
			{
				good = true;
			}
			if (tile.type == 234)
			{
				crimson = true;
			}
		}

		// Token: 0x06000F2C RID: 3884 RVA: 0x00434D18 File Offset: 0x00432F18
		public static void GetBiomeInfluence(int startX, int endX, int startY, int endY, out int corruptCount, out int crimsonCount, out int hallowedCount)
		{
			corruptCount = 0;
			crimsonCount = 0;
			hallowedCount = 0;
			for (int i = startX; i <= endX; i++)
			{
				for (int j = startY; j <= endY; j++)
				{
					Tile tile = Main.tile[i, j];
					if (tile != null)
					{
						if (TileID.Sets.Corrupt[(int)tile.type])
						{
							corruptCount++;
						}
						if (TileID.Sets.Crimson[(int)tile.type])
						{
							crimsonCount++;
						}
						if (TileID.Sets.Hallow[(int)tile.type])
						{
							hallowedCount++;
						}
					}
				}
			}
		}

		// Token: 0x06000F2D RID: 3885 RVA: 0x00434D9C File Offset: 0x00432F9C
		public static void PlaceJunglePlant(int X2, int Y2, ushort type, int styleX, int styleY)
		{
			if (styleY > 0 || type == 236 || type == 238)
			{
				int num = Y2;
				if (type == 95 || type == 126)
				{
					num++;
				}
				if (X2 < 5 || X2 > Main.maxTilesX - 5 || num < 5 || num > Main.maxTilesY - 5)
				{
					return;
				}
				bool flag = true;
				for (int i = X2 - 1; i < X2 + 1; i++)
				{
					for (int j = num - 1; j < num + 1; j++)
					{
						if (Main.tile[i, j] == null)
						{
							Main.tile[i, j] = new Tile();
						}
						Tile tile = Main.tile[i, j];
						if (tile.active() && tile.type != 61 && tile.type != 62 && tile.type != 655 && tile.type != 69 && tile.type != 74 && (type != 236 || tile.type != 233) && (type != 238 || tile.type != 233) && (tile.type != 185 || tile.frameY != 0))
						{
							flag = false;
						}
						if (type == 98 && tile.liquid > 0)
						{
							flag = false;
						}
					}
					if (Main.tile[i, num + 1] == null)
					{
						Main.tile[i, num + 1] = new Tile();
					}
					if (!WorldGen.SolidTile(i, num + 1, false) || Main.tile[i, num + 1].type != 60)
					{
						flag = false;
					}
				}
				if (flag)
				{
					for (int k = X2 - 1; k < X2 + 1; k++)
					{
						for (int l = num - 1; l < num + 1; l++)
						{
							if (Main.tile[k, l] != null && Main.tile[k, l].active())
							{
								WorldGen.KillTile(k, l, false, false, true);
							}
						}
					}
					short num2 = 36;
					if (type == 236 || type == 238)
					{
						num2 = 0;
					}
					short num3 = (short)(36 * styleX);
					Main.tile[X2 - 1, num - 1].active(true);
					Main.tile[X2 - 1, num - 1].frameY = num2;
					Main.tile[X2 - 1, num - 1].frameX = num3;
					Main.tile[X2 - 1, num - 1].type = type;
					Main.tile[X2, num - 1].active(true);
					Main.tile[X2, num - 1].frameY = num2;
					Main.tile[X2, num - 1].frameX = 18 + num3;
					Main.tile[X2, num - 1].type = type;
					Main.tile[X2 - 1, num].active(true);
					Main.tile[X2 - 1, num].frameY = num2 + 18;
					Main.tile[X2 - 1, num].frameX = num3;
					Main.tile[X2 - 1, num].type = type;
					Main.tile[X2, num].active(true);
					Main.tile[X2, num].frameY = num2 + 18;
					Main.tile[X2, num].frameX = 18 + num3;
					Main.tile[X2, num].type = type;
					return;
				}
			}
			else
			{
				if (X2 < 5 || X2 > Main.maxTilesX - 5 || Y2 < 5 || Y2 > Main.maxTilesY - 5)
				{
					return;
				}
				bool flag2 = true;
				for (int m = X2 - 1; m < X2 + 2; m++)
				{
					for (int n = Y2 - 1; n < Y2 + 1; n++)
					{
						if (Main.tile[m, n] == null)
						{
							Main.tile[m, n] = new Tile();
						}
						if (Main.tile[m, n].active() && Main.tile[m, n].type != 61 && Main.tile[m, n].type != 62 && Main.tile[m, n].type != 69 && Main.tile[m, n].type != 655 && Main.tile[m, n].type != 74 && (Main.tile[m, n].type != 185 || Main.tile[m, n].frameY != 0))
						{
							flag2 = false;
						}
					}
					if (Main.tile[m, Y2 + 1] == null)
					{
						Main.tile[m, Y2 + 1] = new Tile();
					}
					if (!WorldGen.SolidTile(m, Y2 + 1, false) || Main.tile[m, Y2 + 1].type != 60)
					{
						flag2 = false;
					}
				}
				if (flag2)
				{
					for (int num4 = X2 - 1; num4 < X2 + 2; num4++)
					{
						for (int num5 = Y2 - 1; num5 < Y2 + 1; num5++)
						{
							if (Main.tile[num4, num5] != null && Main.tile[num4, num5].active())
							{
								WorldGen.KillTile(num4, num5, false, false, true);
							}
						}
					}
					short num6 = (short)(54 * styleX);
					Main.tile[X2 - 1, Y2 - 1].active(true);
					Main.tile[X2 - 1, Y2 - 1].frameY = 0;
					Main.tile[X2 - 1, Y2 - 1].frameX = num6;
					Main.tile[X2 - 1, Y2 - 1].type = type;
					Main.tile[X2, Y2 - 1].active(true);
					Main.tile[X2, Y2 - 1].frameY = 0;
					Main.tile[X2, Y2 - 1].frameX = num6 + 18;
					Main.tile[X2, Y2 - 1].type = type;
					Main.tile[X2 + 1, Y2 - 1].active(true);
					Main.tile[X2 + 1, Y2 - 1].frameY = 0;
					Main.tile[X2 + 1, Y2 - 1].frameX = num6 + 36;
					Main.tile[X2 + 1, Y2 - 1].type = type;
					Main.tile[X2 - 1, Y2].active(true);
					Main.tile[X2 - 1, Y2].frameY = 18;
					Main.tile[X2 - 1, Y2].frameX = num6;
					Main.tile[X2 - 1, Y2].type = type;
					Main.tile[X2, Y2].active(true);
					Main.tile[X2, Y2].frameY = 18;
					Main.tile[X2, Y2].frameX = num6 + 18;
					Main.tile[X2, Y2].type = type;
					Main.tile[X2 + 1, Y2].active(true);
					Main.tile[X2 + 1, Y2].frameY = 18;
					Main.tile[X2 + 1, Y2].frameX = num6 + 36;
					Main.tile[X2 + 1, Y2].type = type;
				}
			}
		}

		// Token: 0x06000F2E RID: 3886 RVA: 0x00435548 File Offset: 0x00433748
		public static void CheckJunglePlant(int i, int j, int type)
		{
			if (WorldGen.destroyObject)
			{
				return;
			}
			if (Main.tile[i, j].frameY >= 36 || Main.tile[i, j].type == 236 || Main.tile[i, j].type == 238)
			{
				bool flag = false;
				int k = (int)(Main.tile[i, j].frameX / 18);
				int num = 0;
				while (k > 1)
				{
					k -= 2;
					num++;
				}
				k = i - k;
				int num2 = 36;
				if (type == 236 || type == 238)
				{
					num2 = 0;
				}
				int l;
				for (l = (int)(Main.tile[i, j].frameY / 18); l > 1; l -= 2)
				{
				}
				l = j - l;
				int num3 = num * 36;
				for (int m = k; m < k + 2; m++)
				{
					for (int n = l; n < l + 2; n++)
					{
						if (Main.tile[m, n] == null)
						{
							Main.tile[m, n] = new Tile();
						}
						if (!Main.tile[m, n].active() || (int)Main.tile[m, n].type != type || (int)Main.tile[m, n].frameX != (m - k) * 18 + num3 || (int)Main.tile[m, n].frameY != (n - l) * 18 + num2)
						{
							flag = true;
						}
					}
					if (Main.tile[m, l + 2] == null)
					{
						Main.tile[m, l + 2] = new Tile();
					}
					if (!WorldGen.SolidTile(m, l + 2, false) || Main.tile[m, l + 2].type != 60)
					{
						flag = true;
					}
				}
				if (flag)
				{
					if (type == 238)
					{
						float num4 = (float)(i * 16);
						float num5 = (float)(j * 16);
						float num6 = -1f;
						int plr = 0;
						for (int num7 = 0; num7 < 255; num7++)
						{
							float num8 = Math.Abs(Main.player[num7].position.X - num4) + Math.Abs(Main.player[num7].position.Y - num5);
							if (num8 < num6 || num6 == -1f)
							{
								plr = num7;
								num6 = num8;
							}
						}
						if (num6 / 16f < 50f)
						{
							NPC.SpawnOnPlayer(plr, 262);
						}
					}
					if (type == 236)
					{
						Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 1291, 1, false, 0, false, false);
					}
					short frameX = Main.tile[i, j].frameX;
					WorldGen.destroyObject = true;
					for (int num9 = k; num9 < k + 2; num9++)
					{
						for (int num10 = l; num10 < l + 2; num10++)
						{
							if (Main.tile[num9, num10] == null)
							{
								Main.tile[num9, num10] = new Tile();
							}
							if ((int)Main.tile[num9, num10].type == type && Main.tile[num9, num10].active())
							{
								WorldGen.KillTile(num9, num10, false, false, false);
							}
						}
					}
					WorldGen.destroyObject = false;
					return;
				}
			}
			else
			{
				bool flag2 = false;
				int num11 = j + (int)(Main.tile[i, j].frameY / 18 * -1);
				int num12 = (int)(Main.tile[i, j].frameX / 18);
				int num13 = 0;
				while (num12 > 2)
				{
					num12 -= 3;
					num13++;
				}
				num12 = i - num12;
				int num14 = num13 * 54;
				for (int num15 = num12; num15 < num12 + 3; num15++)
				{
					for (int num16 = num11; num16 < num11 + 2; num16++)
					{
						if (Main.tile[num15, num16] == null)
						{
							Main.tile[num15, num16] = new Tile();
						}
						if (!Main.tile[num15, num16].active() || (int)Main.tile[num15, num16].type != type || (int)Main.tile[num15, num16].frameX != (num15 - num12) * 18 + num14 || (int)Main.tile[num15, num16].frameY != (num16 - num11) * 18)
						{
							flag2 = true;
						}
					}
					if (Main.tile[num15, num11 + 2] == null)
					{
						Main.tile[num15, num11 + 2] = new Tile();
					}
					if (!WorldGen.SolidTile(num15, num11 + 2, false) || Main.tile[num15, num11 + 2].type != 60)
					{
						flag2 = true;
					}
				}
				if (flag2)
				{
					short frameX2 = Main.tile[i, j].frameX;
					WorldGen.destroyObject = true;
					for (int num17 = num12; num17 < num12 + 3; num17++)
					{
						for (int num18 = num11; num18 < num11 + 3; num18++)
						{
							if (Main.tile[num17, num18] == null)
							{
								Main.tile[num17, num18] = new Tile();
							}
							if ((int)Main.tile[num17, num18].type == type && Main.tile[num17, num18].active())
							{
								WorldGen.KillTile(num17, num18, false, false, false);
							}
						}
					}
					WorldGen.destroyObject = false;
				}
			}
		}

		// Token: 0x06000F2F RID: 3887 RVA: 0x00435AA8 File Offset: 0x00433CA8
		public static void CheckSuper(int x, int y, int type)
		{
			if (WorldGen.destroyObject)
			{
				return;
			}
			Tile tile = Main.tile[x, y];
			int num = 0;
			if (type == 376)
			{
				num = (int)(tile.frameX / 36);
			}
			if (type == 443)
			{
				num = (int)(tile.frameX / 36);
			}
			if (type == 485)
			{
				num = (int)(tile.frameX / 36);
			}
			bool flag = type == 376;
			bool flag2 = type == 443;
			bool flag3 = type == 444;
			bool flag4 = type == 485;
			TileObjectData tileData = TileObjectData.GetTileData(type, num, 0);
			bool styleHorizontal = tileData.StyleHorizontal;
			int width = tileData.Width;
			int height = tileData.Height;
			int num2 = x - (int)(tile.frameX / 18) % width;
			int num3 = y - (int)(tile.frameY / 18) % height;
			int num4 = 0;
			int num5 = 0;
			if (styleHorizontal)
			{
				num4 = (int)tile.frameX / tileData.CoordinateFullWidth;
			}
			else
			{
				num5 = (int)tile.frameY / tileData.CoordinateFullHeight;
			}
			bool flag5 = false;
			bool flag6 = false;
			for (int i = 0; i < width; i++)
			{
				for (int j = 0; j < height; j++)
				{
					Tile tileSafely = Framing.GetTileSafely(num2 + i, num3 + j);
					if (!tileSafely.active() || (int)tileSafely.type != type || (int)tileSafely.frameX != num4 * tileData.CoordinateFullWidth + i * (tileData.CoordinateWidth + 2) || (int)tileSafely.frameY != num5 * tileData.CoordinateFullHeight + j * (tileData.CoordinateHeights[0] + 2))
					{
						flag5 = true;
					}
				}
			}
			if (flag)
			{
				for (int k = 0; k < width; k++)
				{
					Tile tileSafely = Framing.GetTileSafely(num2 + k, num3 + height);
					if (!tileSafely.active() || (!Main.tileSolid[(int)tileSafely.type] && !Main.tileTable[(int)tileSafely.type]))
					{
						flag5 = true;
					}
					if (tileSafely.halfBrick())
					{
						flag5 = true;
					}
				}
			}
			if (flag2)
			{
				bool flag7 = true;
				bool flag8 = true;
				for (int l = 0; l < width; l++)
				{
					if (!WorldGen.AnchorValid(Framing.GetTileSafely(num2 + l, num3 + height), AnchorType.SolidTile | AnchorType.SolidWithTop | AnchorType.SolidSide))
					{
						flag8 = false;
					}
					if (!WorldGen.AnchorValid(Framing.GetTileSafely(num2 + l, num3 - 1), AnchorType.SolidBottom))
					{
						flag7 = false;
					}
				}
				if (!flag7 && !flag8)
				{
					flag5 = true;
				}
				if (!flag5)
				{
					int num6 = 0;
					if (flag8)
					{
						for (int m = 0; m < width; m++)
						{
							Framing.GetTileSafely(num2 + m, num3).frameX = (short)(m * 18 + num / 2 * 36 + num6 * 36);
						}
					}
					else
					{
						for (int n = 0; n < width; n++)
						{
							Framing.GetTileSafely(num2 + n, num3).frameX = (short)(n * 18 + (num - 2) / 2 * 36 + 72 + num6 * 36);
						}
					}
				}
			}
			if (flag3)
			{
				bool flag9 = true;
				for (int num7 = 0; num7 < width; num7++)
				{
					if (!WorldGen.AnchorValid(Framing.GetTileSafely(num2 + num7, num3 - 1), AnchorType.SolidTile))
					{
						flag9 = false;
					}
				}
				if (!flag9)
				{
					flag5 = true;
				}
				for (int num8 = 0; num8 < width; num8++)
				{
					for (int num9 = 0; num9 < height; num9++)
					{
						Tile tileSafely = Framing.GetTileSafely(num2 + num8, num3 + num9);
						if (tileSafely.liquid > 0)
						{
							flag5 = true;
							flag6 = true;
						}
					}
				}
			}
			if (flag4)
			{
				bool flag10 = true;
				for (int num10 = 0; num10 < width; num10++)
				{
					if (!WorldGen.AnchorValid(Framing.GetTileSafely(num2 + num10, num3 + height), AnchorType.SolidTile))
					{
						flag10 = false;
					}
				}
				if (!flag10)
				{
					flag5 = true;
				}
			}
			if (!flag5)
			{
				return;
			}
			WorldGen.destroyObject = true;
			for (int num11 = 0; num11 < width; num11++)
			{
				for (int num12 = 0; num12 < height; num12++)
				{
					if ((int)Main.tile[num2 + num11, num3 + num12].type == type && Main.tile[num2 + num11, num3 + num12].active())
					{
						WorldGen.KillTile(num2 + num11, num3 + num12, false, false, false);
					}
				}
			}
			int num13 = 0;
			if (type == 376)
			{
				switch (num)
				{
				case 0:
					num13 = 2334;
					break;
				case 1:
					num13 = 2335;
					break;
				case 2:
					num13 = 2336;
					break;
				case 3:
					num13 = 3203;
					break;
				case 4:
					num13 = 3204;
					break;
				case 5:
					num13 = 3205;
					break;
				case 6:
					num13 = 3206;
					break;
				case 7:
					num13 = 3207;
					break;
				case 8:
					num13 = 3208;
					break;
				case 9:
					num13 = 3979;
					break;
				case 10:
					num13 = 3980;
					break;
				case 11:
					num13 = 3981;
					break;
				case 12:
					num13 = 3982;
					break;
				case 13:
					num13 = 3983;
					break;
				case 14:
					num13 = 3984;
					break;
				case 15:
					num13 = 3985;
					break;
				case 16:
					num13 = 3986;
					break;
				case 17:
					num13 = 3987;
					break;
				case 18:
					num13 = 4405;
					break;
				case 19:
					num13 = 4406;
					break;
				case 20:
					num13 = 4407;
					break;
				case 21:
					num13 = 4408;
					break;
				case 22:
					num13 = 4877;
					break;
				case 23:
					num13 = 4878;
					break;
				case 24:
					num13 = 5002;
					break;
				case 25:
					num13 = 5003;
					break;
				}
			}
			if (type == 443)
			{
				num13 = 3722;
			}
			if (type == 485 && !WorldGen.gen && Main.netMode != 1)
			{
				int availableAmountOfNPCsToSpawnUpToSlot = NPC.GetAvailableAmountOfNPCsToSpawnUpToSlot(1, 100);
				for (int num14 = 0; num14 < availableAmountOfNPCsToSpawnUpToSlot; num14++)
				{
					int num15 = NPC.NewNPC(WorldGen.GetNPCSource_TileBreak(num2, num3), num2 * 16, num3 * 16 + 32, 582, 0, 0f, 0f, 0f, 0f, 255);
					Main.npc[num15].TargetClosest(true);
					Main.npc[num15].velocity = new Vector2((float)Main.npc[num15].direction * 1.5f, -5f);
					NetMessage.SendData(23, -1, -1, null, num15, 0f, 0f, 0f, 0, 0, 0);
					int num16 = 20;
					int num17 = -1;
					Main.npc[num15].GetImmuneTime(num17, num16);
					NetMessage.SendData(131, -1, -1, null, num15, 1f, (float)num17, (float)num16, 0, 0, 0);
				}
			}
			if (type == 444 && Main.netMode != 1 && !flag6)
			{
				Projectile.NewProjectile(WorldGen.GetProjectileSource_TileBreak(num2, num3), (float)(num2 * 16 + 16), (float)(num3 * 16 + 16), 0f, 0f, 655, 0, 0f, Main.myPlayer, 0f, 0f, 0f);
			}
			if (num13 != 0)
			{
				Item.NewItem(WorldGen.GetItemSource_FromTileBreak(num2, num3), num2 * 16, num3 * 16, tileData.CoordinateFullWidth, tileData.CoordinateFullHeight, num13, 1, false, 0, false, false);
			}
			WorldGen.destroyObject = false;
			for (int num18 = -1; num18 < width + 1; num18++)
			{
				for (int num19 = -1; num19 < height + 1; num19++)
				{
					WorldGen.TileFrame(num2 + num18, num3 + num19, false, false);
				}
			}
		}

		// Token: 0x06000F30 RID: 3888 RVA: 0x00436208 File Offset: 0x00434408
		public static void Check2x2(int i, int j, int type)
		{
			if (WorldGen.destroyObject)
			{
				return;
			}
			bool flag = false;
			int num = 0;
			int k = (int)(Main.tile[i, j].frameX / 18 * -1);
			if (k < -1)
			{
				k += 2;
				num = 36;
			}
			k += i;
			int num2 = (type == 172) ? 38 : 36;
			int l = (int)Main.tile[i, j].frameY;
			int num3 = 0;
			while (l >= num2)
			{
				l -= num2;
				num3++;
			}
			int num4 = j - l / 18;
			int num5 = 0;
			if (type == 652)
			{
				num5 = (int)(Main.tile[i, j].frameX / 36);
				k = (int)(Main.tile[i, j].frameX % 36 / 18 * -1) + i;
				num = num5 * 36;
			}
			for (int m = k; m < k + 2; m++)
			{
				for (int n = num4; n < num4 + 2; n++)
				{
					Tile tileSafely = Framing.GetTileSafely(m, n);
					if (!tileSafely.active() || (int)tileSafely.type != type || (int)tileSafely.frameX != (m - k) * 18 + num || (int)tileSafely.frameY != (n - num4) * 18 + num3 * num2)
					{
						flag = true;
						break;
					}
				}
				if (type == 95 || type == 126)
				{
					Framing.GetTileSafely(m, num4 - 1);
					if (!Main.tile[m, num4 - 1].active() || !Main.tileSolid[(int)Main.tile[m, num4 - 1].type] || Main.tileSolidTop[(int)Main.tile[m, num4 - 1].type])
					{
						flag = true;
					}
				}
				else if (!TileID.Sets.Boulders[type] && type != 132)
				{
					Tile tileSafely2 = Framing.GetTileSafely(m, num4 + 2);
					if (!tileSafely2.active() || (!Main.tileSolid[(int)tileSafely2.type] && !Main.tileTable[(int)tileSafely2.type]))
					{
						flag = true;
					}
					if (tileSafely2.halfBrick())
					{
						flag = true;
					}
				}
			}
			if (TileID.Sets.Boulders[type])
			{
				if (Main.tile[k, num4 - 1] == null)
				{
					Main.tile[k, num4 - 1] = new Tile();
				}
				if (Main.tile[k + 1, num4 - 1] == null)
				{
					Main.tile[k + 1, num4 - 1] = new Tile();
				}
				ushort type2 = Main.tile[k, num4 - 1].type;
				ushort type3 = Main.tile[k + 1, num4 - 1].type;
				if (!TileID.Sets.BasicChest[(int)type2] && !TileID.Sets.BasicChest[(int)type3] && type2 != 88 && type3 != 88 && !TileID.Sets.BasicChestFake[(int)type2] && !TileID.Sets.BasicChestFake[(int)type3] && type2 != 470 && type3 != 470 && type2 != 475 && type3 != 475 && !WorldGen.SolidTileAllowBottomSlope(k, num4 + 2) && !WorldGen.SolidTileAllowBottomSlope(k + 1, num4 + 2))
				{
					flag = true;
				}
			}
			else if (type == 132)
			{
				flag = false;
				num4 = (int)(Main.tile[i, j].frameY / 18 * -1);
				num4 += j;
				num = 0;
				k = (int)(Main.tile[i, j].frameX / 18 * -1);
				while (k < -1)
				{
					k += 2;
					num += 36;
				}
				k += i;
				for (int num6 = k; num6 < k + 2; num6++)
				{
					for (int num7 = num4; num7 < num4 + 2; num7++)
					{
						if (Main.tile[num6, num7] == null)
						{
							Main.tile[num6, num7] = new Tile();
						}
						if (!Main.tile[num6, num7].active() || (int)Main.tile[num6, num7].type != type || (int)Main.tile[num6, num7].frameX != (num6 - k) * 18 + num || (int)Main.tile[num6, num7].frameY != (num7 - num4) * 18)
						{
							flag = true;
						}
					}
				}
				if (Main.tile[k, num4 + 2] == null)
				{
					Main.tile[k, num4 + 2] = new Tile();
				}
				if (Main.tile[k + 1, num4 + 2] == null)
				{
					Main.tile[k + 1, num4 + 2] = new Tile();
				}
				bool flag2 = false;
				ushort type4 = Main.tile[k, num4 + 2].type;
				ushort type5 = Main.tile[k + 1, num4 + 2].type;
				if (!Main.tile[k, num4 + 2].active() || (!Main.tileSolid[(int)type4] && !Main.tileSolidTop[(int)type4]) || Main.tile[k, num4 + 2].halfBrick() || (Main.tile[k, num4 + 2].slope() != 0 && !Main.tile[k, num4 + 2].bottomSlope()))
				{
					flag2 = true;
				}
				if (!Main.tile[k + 1, num4 + 2].active() || (!Main.tileSolid[(int)type5] && !Main.tileSolidTop[(int)type5]) || Main.tile[k + 1, num4 + 2].halfBrick() || (Main.tile[k + 1, num4 + 2].slope() != 0 && !Main.tile[k + 1, num4 + 2].bottomSlope()))
				{
					flag2 = true;
				}
				if (flag2)
				{
					if (Main.tile[k, num4].wall < 1 || Main.tile[k + 1, num4].wall < 1 || Main.tile[k, num4 + 1].wall < 1 || Main.tile[k + 1, num4 + 1].wall < 1)
					{
						flag = true;
					}
					else if (num < 72)
					{
						for (int num8 = k; num8 < k + 2; num8++)
						{
							for (int num9 = num4; num9 < num4 + 2; num9++)
							{
								Tile tile = Main.tile[num8, num9];
								tile.frameX += 72;
							}
						}
					}
				}
				else if (num >= 72)
				{
					for (int num10 = k; num10 < k + 2; num10++)
					{
						for (int num11 = num4; num11 < num4 + 2; num11++)
						{
							Tile tile2 = Main.tile[num10, num11];
							tile2.frameX -= 72;
						}
					}
				}
			}
			if (!flag)
			{
				return;
			}
			WorldGen.destroyObject = true;
			for (int num12 = k; num12 < k + 2; num12++)
			{
				for (int num13 = num4; num13 < num4 + 2; num13++)
				{
					if ((int)Main.tile[num12, num13].type == type && Main.tile[num12, num13].active())
					{
						WorldGen.KillTile(num12, num13, false, false, false);
					}
				}
			}
			int num14 = 0;
			if (type <= 565)
			{
				switch (type)
				{
				case 521:
					num14 = 4327;
					break;
				case 522:
					num14 = 4328;
					break;
				case 523:
					num14 = 4329;
					break;
				case 524:
					num14 = 4330;
					break;
				case 525:
					num14 = 4331;
					break;
				case 526:
					num14 = 4332;
					break;
				case 527:
					num14 = 4333;
					break;
				default:
					if (type != 564)
					{
						if (type == 565)
						{
							num14 = 4552;
						}
					}
					else
					{
						num14 = 4553;
					}
					break;
				}
			}
			else if (type != 594)
			{
				if (type != 621)
				{
					if (type == 622)
					{
						num14 = 5008;
					}
				}
				else
				{
					num14 = 3750;
				}
			}
			else
			{
				num14 = 4869;
			}
			if (type == 598)
			{
				num14 = 4880;
			}
			if (type == 360)
			{
				num14 = 3072;
			}
			if (type == 580)
			{
				num14 = 4846;
			}
			if (type == 620)
			{
				num14 = 4964;
			}
			if (type == 505)
			{
				num14 = 4275;
			}
			if (type == 543)
			{
				num14 = 4398;
			}
			if (type == 568)
			{
				num14 = 4655;
			}
			if (type == 569)
			{
				num14 = 4656;
			}
			if (type == 570)
			{
				num14 = 4657;
			}
			if (type >= 288 && type <= 295)
			{
				num14 = 2178 + type - 288;
			}
			if (type >= 316 && type <= 318)
			{
				num14 = 2439 + type - 316;
			}
			if (type == 85)
			{
				num14 = 321;
			}
			if (type == 94)
			{
				num14 = 352;
			}
			if (type == 95)
			{
				num14 = 344;
			}
			if (type == 96)
			{
				num14 = 345;
			}
			if (type == 97)
			{
				num14 = 346;
			}
			if (type == 98)
			{
				num14 = 347;
			}
			if (type == 99)
			{
				num14 = 348;
			}
			if (type == 335)
			{
				num14 = 2700;
			}
			if (type == 411)
			{
				num14 = 3545;
			}
			if (type == 652)
			{
				if (num5 < 3)
				{
					num14 = 195;
				}
				else if (num5 < 6)
				{
					num14 = 62;
				}
				else
				{
					num14 = 331;
				}
			}
			if (type == 100)
			{
				if (num3 == 0)
				{
					num14 = 349;
				}
				else if (num3 >= 1 && num3 <= 12)
				{
					num14 = 2092 + num3 - 1;
				}
				else if (num3 >= 13 && num3 <= 16)
				{
					num14 = 2149 + num3 - 13;
				}
				else if (num3 == 17)
				{
					num14 = 2227;
				}
				else if (num3 == 18)
				{
					num14 = 2522;
				}
				else if (num3 == 19)
				{
					num14 = 2541;
				}
				else if (num3 == 20)
				{
					num14 = 2555;
				}
				else if (num3 == 21)
				{
					num14 = 2570;
				}
				else if (num3 == 22)
				{
					num14 = 2664;
				}
				else if (num3 == 23)
				{
					num14 = 2665;
				}
				else if (num3 == 24)
				{
					num14 = 2666;
				}
				else if (num3 == 25)
				{
					num14 = 2667;
				}
				else if (num3 == 26)
				{
					num14 = 2668;
				}
				else if (num3 == 27)
				{
					num14 = 2825;
				}
				else if (num3 == 28)
				{
					num14 = 3168;
				}
				else if (num3 == 29)
				{
					num14 = 3170;
				}
				else if (num3 == 30)
				{
					num14 = 3169;
				}
				else if (num3 == 31)
				{
					num14 = 3893;
				}
				else if (num3 == 32)
				{
					num14 = 3935;
				}
				else if (num3 == 33)
				{
					num14 = 3961;
				}
				else if (num3 == 34)
				{
					num14 = 4149;
				}
				else if (num3 == 35)
				{
					num14 = 4170;
				}
				else if (num3 == 36)
				{
					num14 = 4191;
				}
				else if (num3 == 37)
				{
					num14 = 4212;
				}
				else if (num3 == 38)
				{
					num14 = 4302;
				}
				else if (num3 == 39)
				{
					num14 = 4570;
				}
				else if (num3 == 40)
				{
					num14 = 5152;
				}
				else if (num3 == 41)
				{
					num14 = 5173;
				}
				else if (num3 == 42)
				{
					num14 = 5194;
				}
			}
			if (type == 173)
			{
				num14 = 714;
			}
			if (type == 125)
			{
				num14 = 487;
			}
			if (type == 287)
			{
				num14 = 2177;
			}
			if (type == 126)
			{
				num14 = 488;
			}
			if (type == 132)
			{
				num14 = 513;
			}
			if (type == 142)
			{
				num14 = 581;
			}
			if (type == 143)
			{
				num14 = 582;
			}
			if (type == 282)
			{
				num14 = 250;
			}
			if (type == 319)
			{
				num14 = 2490;
			}
			if (type == 490)
			{
				num14 = 4075;
			}
			if (type == 172)
			{
				num14 = 2827 + num3;
				if (num3 == 29)
				{
					num14 = 3147;
				}
				else if (num3 == 30)
				{
					num14 = 3149;
				}
				else if (num3 == 31)
				{
					num14 = 3148;
				}
				else if (num3 == 32)
				{
					num14 = 3896;
				}
				else if (num3 == 33)
				{
					num14 = 3946;
				}
				else if (num3 == 34)
				{
					num14 = 3972;
				}
				else if (num3 == 35)
				{
					num14 = 4160;
				}
				else if (num3 == 36)
				{
					num14 = 4181;
				}
				else if (num3 == 37)
				{
					num14 = 4202;
				}
				else if (num3 == 38)
				{
					num14 = 4223;
				}
				else if (num3 == 39)
				{
					num14 = 4312;
				}
				else if (num3 == 40)
				{
					num14 = 4581;
				}
				else if (num3 == 41)
				{
					num14 = 5163;
				}
				else if (num3 == 42)
				{
					num14 = 5184;
				}
				else if (num3 == 43)
				{
					num14 = 5205;
				}
			}
			if (num14 != 0)
			{
				Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, num14, 1, false, 0, false, false);
			}
			if (!WorldGen.gen && Main.netMode != 1)
			{
				if (type <= 484)
				{
					if (type != 138)
					{
						if (type == 484)
						{
							Projectile.NewProjectile(WorldGen.GetProjectileSource_TileBreak(k, num4), (float)(k * 16) + 15.5f, (float)(num4 * 16 + 16), 0f, 0f, 727, 35, 10f, Main.myPlayer, 0f, 0f, 0f);
						}
					}
					else
					{
						Projectile.NewProjectile(WorldGen.GetProjectileSource_TileBreak(k, num4), (float)(k * 16) + 15.5f, (float)(num4 * 16 + 16), 0f, 0f, 99, 70, 10f, Main.myPlayer, 0f, 0f, 0f);
					}
				}
				else if (type != 654)
				{
					if (type != 664)
					{
						if (type == 665)
						{
							Projectile.NewProjectile(WorldGen.GetProjectileSource_TileBreak(k, num4), (float)(k * 16) + 15.5f, (float)(num4 * 16 + 16), 0f, 0f, 1014, 70, 10f, Main.myPlayer, 0f, 0f, 0f);
						}
					}
					else
					{
						Projectile.NewProjectile(WorldGen.GetProjectileSource_TileBreak(k, num4), (float)(k * 16) + 15.5f, (float)(num4 * 16 + 16), 0f, 0f, 1013, 70, 10f, Main.myPlayer, 0f, 0f, 0f);
					}
				}
				else
				{
					Projectile.NewProjectile(WorldGen.GetProjectileSource_TileBreak(k, num4), (float)(k * 16 + 8), (float)(num4 * 16 + 8), 0f, 0f, 1002, 400, 10f, Main.myPlayer, 0f, 0f, 0f);
				}
			}
			WorldGen.destroyObject = false;
			for (int num15 = k - 1; num15 < k + 3; num15++)
			{
				for (int num16 = num4 - 1; num16 < num4 + 3; num16++)
				{
					WorldGen.TileFrame(num15, num16, false, false);
				}
			}
		}

		// Token: 0x06000F31 RID: 3889 RVA: 0x004370F8 File Offset: 0x004352F8
		public static bool CheckBoulderChest(int i, int j)
		{
			int num = (int)(Main.tile[i, j].frameX / 18 * -1);
			if (num < -1)
			{
				num += 2;
			}
			num += i;
			int k;
			for (k = (int)Main.tile[i, j].frameY; k >= 36; k -= 36)
			{
			}
			k = j - k / 18;
			return WorldGen.IsAContainer(Main.tile[num, k - 1]) || WorldGen.IsAContainer(Main.tile[num + 1, k - 1]);
		}

		// Token: 0x06000F32 RID: 3890 RVA: 0x0043717C File Offset: 0x0043537C
		public static bool IsAContainer(Tile t)
		{
			return TileID.Sets.BasicDresser[(int)t.type] || t.type == 470 || t.type == 475 || TileID.Sets.BasicChest[(int)t.type] || TileID.Sets.BasicChestFake[(int)t.type];
		}

		// Token: 0x06000F33 RID: 3891 RVA: 0x004371D0 File Offset: 0x004353D0
		public static void OreRunner(int i, int j, double strength, int steps, ushort type)
		{
			double num = strength;
			double num2 = (double)steps;
			Vector2D vector2D;
			vector2D.X = (double)i;
			vector2D.Y = (double)j;
			Vector2D vector2D2;
			vector2D2.X = (double)WorldGen.genRand.Next(-10, 11) * 0.1;
			vector2D2.Y = (double)WorldGen.genRand.Next(-10, 11) * 0.1;
			while (num > 0.0 && num2 > 0.0)
			{
				if (vector2D.Y < 0.0 && num2 > 0.0 && type == 59)
				{
					num2 = 0.0;
				}
				num = strength * (num2 / (double)steps);
				num2 -= 1.0;
				int num3 = (int)(vector2D.X - num * 0.5);
				int num4 = (int)(vector2D.X + num * 0.5);
				int num5 = (int)(vector2D.Y - num * 0.5);
				int num6 = (int)(vector2D.Y + num * 0.5);
				if (num3 < 0)
				{
					num3 = 0;
				}
				if (num4 > Main.maxTilesX)
				{
					num4 = Main.maxTilesX;
				}
				if (num5 < 0)
				{
					num5 = 0;
				}
				if (num6 > Main.maxTilesY)
				{
					num6 = Main.maxTilesY;
				}
				for (int k = num3; k < num4; k++)
				{
					for (int l = num5; l < num6; l++)
					{
						if (Math.Abs((double)k - vector2D.X) + Math.Abs((double)l - vector2D.Y) < strength * 0.5 * (1.0 + (double)WorldGen.genRand.Next(-10, 11) * 0.015) && Main.tile[k, l].active() && (Main.tile[k, l].type == 0 || Main.tile[k, l].type == 1 || Main.tile[k, l].type == 23 || Main.tile[k, l].type == 25 || Main.tile[k, l].type == 40 || Main.tile[k, l].type == 53 || Main.tile[k, l].type == 57 || Main.tile[k, l].type == 59 || Main.tile[k, l].type == 60 || Main.tile[k, l].type == 70 || Main.tile[k, l].type == 109 || Main.tile[k, l].type == 112 || Main.tile[k, l].type == 116 || Main.tile[k, l].type == 117 || Main.tile[k, l].type == 147 || Main.tile[k, l].type == 161 || Main.tile[k, l].type == 163 || Main.tile[k, l].type == 164 || Main.tileMoss[(int)Main.tile[k, l].type] || Main.tile[k, l].type == 199 || Main.tile[k, l].type == 200 || Main.tile[k, l].type == 203 || Main.tile[k, l].type == 234 || Main.tile[k, l].type == 396 || Main.tile[k, l].type == 397 || Main.tile[k, l].type == 401 || Main.tile[k, l].type == 403 || Main.tile[k, l].type == 400 || Main.tile[k, l].type == 398 || Main.tile[k, l].type == 399 || Main.tile[k, l].type == 402 || (Main.remixWorld && Main.tile[k, l].type == 230) || (Main.tile[k, l].type == 225 && Main.tile[k, l].wall != 108)))
						{
							Main.tile[k, l].type = type;
							Main.tile[k, l].ClearBlockPaintAndCoating();
							WorldGen.SquareTileFrame(k, l, true);
							if (Main.netMode == 2)
							{
								NetMessage.SendTileSquare(-1, k, l, TileChangeType.None);
							}
						}
					}
				}
				vector2D += vector2D2;
				vector2D2.X += (double)WorldGen.genRand.Next(-10, 11) * 0.05;
				if (vector2D2.X > 1.0)
				{
					vector2D2.X = 1.0;
				}
				if (vector2D2.X < -1.0)
				{
					vector2D2.X = -1.0;
				}
			}
		}

		// Token: 0x06000F34 RID: 3892 RVA: 0x00437810 File Offset: 0x00435A10
		public static void SmashAltar(int i, int j)
		{
			if (Main.netMode == 1)
			{
				return;
			}
			if (!Main.hardMode)
			{
				return;
			}
			if (WorldGen.noTileActions)
			{
				return;
			}
			if (WorldGen.gen)
			{
				return;
			}
			int num = WorldGen.altarCount % 3;
			int num2 = WorldGen.altarCount / 3 + 1;
			double num3 = (double)Main.maxTilesX / 4200.0;
			int num4 = 1 - num;
			num3 = num3 * 310.0 - (double)(85 * num);
			num3 *= 0.85;
			num3 /= (double)num2;
			bool flag = false;
			if (Main.drunkWorld)
			{
				if (WorldGen.SavedOreTiers.Adamantite == 111)
				{
					WorldGen.SavedOreTiers.Adamantite = 223;
				}
				else if (WorldGen.SavedOreTiers.Adamantite == 223)
				{
					WorldGen.SavedOreTiers.Adamantite = 111;
				}
			}
			if (num == 0)
			{
				if (WorldGen.SavedOreTiers.Cobalt == -1)
				{
					flag = true;
					WorldGen.SavedOreTiers.Cobalt = 107;
					if (WorldGen.genRand.Next(2) == 0)
					{
						WorldGen.SavedOreTiers.Cobalt = 221;
					}
				}
				int num5 = 12;
				if (WorldGen.SavedOreTiers.Cobalt == 221)
				{
					num5 += 9;
					num3 *= 0.8999999761581421;
				}
				if (Main.netMode == 0)
				{
					Main.NewText(Lang.misc[num5].Value, 50, byte.MaxValue, 130);
				}
				else if (Main.netMode == 2)
				{
					ChatHelper.BroadcastChatMessage(NetworkText.FromKey(Lang.misc[num5].Key, new object[0]), new Color(50, 255, 130), -1);
				}
				num = WorldGen.SavedOreTiers.Cobalt;
				num3 *= 1.0499999523162842;
			}
			else if (num == 1)
			{
				if (Main.drunkWorld)
				{
					if (WorldGen.SavedOreTiers.Mythril == 108)
					{
						WorldGen.SavedOreTiers.Mythril = 222;
					}
					else if (WorldGen.SavedOreTiers.Mythril == 222)
					{
						WorldGen.SavedOreTiers.Mythril = 108;
					}
				}
				if (WorldGen.SavedOreTiers.Mythril == -1)
				{
					flag = true;
					WorldGen.SavedOreTiers.Mythril = 108;
					if (WorldGen.genRand.Next(2) == 0)
					{
						WorldGen.SavedOreTiers.Mythril = 222;
					}
				}
				int num6 = 13;
				if (WorldGen.SavedOreTiers.Mythril == 222)
				{
					num6 += 9;
					num3 *= 0.8999999761581421;
				}
				if (Main.netMode == 0)
				{
					Main.NewText(Lang.misc[num6].Value, 50, byte.MaxValue, 130);
				}
				else if (Main.netMode == 2)
				{
					ChatHelper.BroadcastChatMessage(NetworkText.FromKey(Lang.misc[num6].Key, new object[0]), new Color(50, 255, 130), -1);
				}
				num = WorldGen.SavedOreTiers.Mythril;
			}
			else
			{
				if (Main.drunkWorld)
				{
					if (WorldGen.SavedOreTiers.Cobalt == 107)
					{
						WorldGen.SavedOreTiers.Cobalt = 221;
					}
					else if (WorldGen.SavedOreTiers.Cobalt == 221)
					{
						WorldGen.SavedOreTiers.Cobalt = 107;
					}
				}
				if (WorldGen.SavedOreTiers.Adamantite == -1)
				{
					flag = true;
					WorldGen.SavedOreTiers.Adamantite = 111;
					if (WorldGen.genRand.Next(2) == 0)
					{
						WorldGen.SavedOreTiers.Adamantite = 223;
					}
				}
				int num7 = 14;
				if (WorldGen.SavedOreTiers.Adamantite == 223)
				{
					num7 += 9;
					num3 *= 0.8999999761581421;
				}
				if (Main.netMode == 0)
				{
					Main.NewText(Lang.misc[num7].Value, 50, byte.MaxValue, 130);
				}
				else if (Main.netMode == 2)
				{
					ChatHelper.BroadcastChatMessage(NetworkText.FromKey(Lang.misc[num7].Key, new object[0]), new Color(50, 255, 130), -1);
				}
				num = WorldGen.SavedOreTiers.Adamantite;
			}
			if (flag)
			{
				NetMessage.SendData(7, -1, -1, null, 0, 0f, 0f, 0f, 0, 0, 0);
			}
			int num8 = 0;
			while ((double)num8 < num3)
			{
				int i2 = WorldGen.genRand.Next(100, Main.maxTilesX - 100);
				double num9 = Main.worldSurface;
				if (num == 108 || num == 222)
				{
					num9 = Main.rockLayer;
				}
				if (num == 111 || num == 223)
				{
					num9 = (Main.rockLayer + Main.rockLayer + (double)Main.maxTilesY) / 3.0;
				}
				int j2 = WorldGen.genRand.Next((int)num9, Main.maxTilesY - 150);
				if (Main.remixWorld)
				{
					double num10 = (double)(Main.maxTilesX - 350);
					if (num == 108 || num == 222)
					{
						num10 = (Main.rockLayer + Main.rockLayer + (double)Main.maxTilesY - 350.0) / 3.0;
					}
					if (num == 111 || num == 223)
					{
						num10 = Main.rockLayer - 25.0;
					}
					j2 = WorldGen.genRand.Next((int)Main.worldSurface + 15, (int)num10);
				}
				if (Main.tenthAnniversaryWorld)
				{
					WorldGen.OreRunner(i2, j2, (double)WorldGen.genRand.Next(5, 11 + num4), WorldGen.genRand.Next(5, 11 + num4), (ushort)num);
				}
				else
				{
					WorldGen.OreRunner(i2, j2, (double)WorldGen.genRand.Next(5, 9 + num4), WorldGen.genRand.Next(5, 9 + num4), (ushort)num);
				}
				num8++;
			}
			if (Main.netMode != 1)
			{
				int num11 = Main.rand.Next(2) + 1;
				for (int k = 0; k < num11; k++)
				{
					NPC.SpawnOnPlayer((int)Player.FindClosest(new Vector2((float)(i * 16), (float)(j * 16)), 16, 16), 82);
				}
			}
			WorldGen.altarCount++;
			AchievementsHelper.NotifyProgressionEvent(6);
		}

		// Token: 0x06000F35 RID: 3893 RVA: 0x00437D30 File Offset: 0x00435F30
		public static void Check3x1(int i, int j, int type)
		{
			if (WorldGen.destroyObject)
			{
				return;
			}
			bool flag = false;
			if (Main.tile[i, j] == null)
			{
				Main.tile[i, j] = new Tile();
			}
			int k = (int)(Main.tile[i, j].frameX / 18);
			int num = 0;
			while (k > 2)
			{
				k -= 3;
				num++;
			}
			k = i - k;
			int num2 = num * 54;
			for (int l = k; l < k + 3; l++)
			{
				if (Main.tile[l, j] == null)
				{
					Main.tile[l, j] = new Tile();
				}
				if (!Main.tile[l, j].active() || (int)Main.tile[l, j].type != type || (int)Main.tile[l, j].frameX != (l - k) * 18 + num2 || Main.tile[l, j].frameY != 0)
				{
					flag = true;
				}
				if (Main.tile[l, j - 1] == null)
				{
					Main.tile[l, j - 1] = new Tile();
				}
				if (Main.tile[l, j - 1].active() && (TileID.Sets.BasicChest[(int)Main.tile[l, j - 1].type] || TileID.Sets.BasicChestFake[(int)Main.tile[l, j - 1].type] || Main.tile[l, j - 1].type == 88 || Main.tile[l, j - 1].type == 470 || Main.tile[l, j - 1].type == 475 || Main.tile[l, j - 1].type == 597))
				{
					return;
				}
				if (!WorldGen.SolidTileAllowBottomSlope(l, j + 1))
				{
					flag = true;
				}
			}
			if (flag)
			{
				short frameX = Main.tile[i, j].frameX;
				WorldGen.destroyObject = true;
				if (type == 235)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 1263, 1, false, 0, false, false);
				}
				for (int m = k; m < k + 3; m++)
				{
					if (Main.tile[m, j] == null)
					{
						Main.tile[m, j] = new Tile();
					}
					if ((int)Main.tile[m, j].type == type && Main.tile[m, j].active())
					{
						WorldGen.KillTile(m, j, false, false, false);
					}
				}
				WorldGen.destroyObject = false;
				for (int n = k - 1; n < k + 4; n++)
				{
					WorldGen.TileFrame(n, j, false, false);
				}
			}
		}

		// Token: 0x06000F36 RID: 3894 RVA: 0x00438010 File Offset: 0x00436210
		public static void Check3x2(int i, int j, int type)
		{
			if (WorldGen.destroyObject)
			{
				return;
			}
			bool flag = false;
			bool flag2 = false;
			if (Main.tile[i, j] == null)
			{
				Main.tile[i, j] = new Tile();
			}
			int num = 36;
			int num2 = (int)Main.tile[i, j].frameY / num;
			int num3 = (int)Main.tile[i, j].frameY % num;
			int num4 = j - num3 / 18;
			int k = (int)(Main.tile[i, j].frameX / 18);
			int num5 = 0;
			while (k > 2)
			{
				k -= 3;
				num5++;
			}
			k = i - k;
			int num6 = num5 * 54;
			if (type == 14 && num5 == 25)
			{
				flag2 = true;
			}
			int num7 = num4 + 2;
			if (flag2)
			{
				num7--;
			}
			for (int l = k; l < k + 3; l++)
			{
				for (int m = num4; m < num7; m++)
				{
					if (Main.tile[l, m] == null)
					{
						Main.tile[l, m] = new Tile();
					}
					if (!Main.tile[l, m].active() || (int)Main.tile[l, m].type != type || (int)Main.tile[l, m].frameX != (l - k) * 18 + num6 || (int)Main.tile[l, m].frameY != (m - num4) * 18 + num2 * 36)
					{
						flag = true;
					}
				}
				if (type == 285 || type == 286 || type == 298 || type == 299 || type == 310 || type == 339 || type == 538 || (type >= 361 && type <= 364) || type == 532 || type == 544 || type == 533 || type == 555 || type == 556 || type == 582 || type == 619 || type == 629)
				{
					if (!WorldGen.SolidTileAllowBottomSlope(l, num7) && (Main.tile[l, num7] == null || !Main.tile[l, num7].nactive() || !Main.tileSolidTop[(int)Main.tile[l, num7].type] || Main.tile[l, num7].frameY != 0) && (Main.tile[l, num7] == null || !Main.tile[l, num7].active() || !TileID.Sets.Platforms[(int)Main.tile[l, num7].type]))
					{
						flag = true;
					}
				}
				else if (type == 488)
				{
					int num8 = 0;
					if (Main.tile[l, num7] != null && Main.tile[l, num7].active())
					{
						num8 = (int)Main.tile[l, num7].type;
					}
					if (num8 != 2 && num8 != 477 && num8 != 109 && num8 != 492)
					{
						flag = true;
					}
				}
				else if (type == 26)
				{
					Tile tile = Main.tile[l, num7];
					if (!WorldGen.SolidTileAllowBottomSlope(l, num7) || (tile != null && tile.active() && TileID.Sets.Boulders[(int)tile.type]))
					{
						flag = true;
					}
				}
				else if (type == 186)
				{
					if (!WorldGen.SolidTileAllowBottomSlope(l, num7))
					{
						flag = true;
					}
					else
					{
						Tile tile2 = Main.tile[l, num7];
						if (tile2 != null && tile2.active())
						{
							if (num5 - 26 > 5)
							{
								if (num5 - 32 <= 2)
								{
									if (!TileID.Sets.Mud[(int)tile2.type] && tile2.type != 70)
									{
										flag = true;
									}
								}
							}
							else if (!TileID.Sets.Snow[(int)tile2.type] && !TileID.Sets.Conversion.Ice[(int)tile2.type] && tile2.type != 162 && tile2.type != 224)
							{
								flag = true;
							}
						}
					}
				}
				if (type == 187)
				{
					if (!WorldGen.SolidTileAllowBottomSlope(l, num7))
					{
						flag = true;
					}
					else
					{
						Tile tile3 = Main.tile[l, num7];
						if (tile3 != null && tile3.active())
						{
							if (num5 > 5)
							{
								if (num5 - 6 > 2)
								{
									if (num5 - 29 <= 5)
									{
										if (!TileID.Sets.Conversion.Sand[(int)tile3.type] && !TileID.Sets.Conversion.HardenedSand[(int)tile3.type] && !TileID.Sets.Conversion.Sandstone[(int)tile3.type])
										{
											flag = true;
										}
									}
								}
								else if (tile3.type != 57 && tile3.type != 58 && tile3.type != 75 && tile3.type != 76)
								{
									flag = true;
								}
							}
							else if (!TileID.Sets.Mud[(int)tile3.type] && tile3.type != 60 && tile3.type != 226)
							{
								flag = true;
							}
						}
					}
				}
				else if (!WorldGen.SolidTileAllowBottomSlope(l, num7))
				{
					flag = true;
				}
			}
			if (type == 187 && Main.tile[k, num4] != null && Main.tile[k, num4].frameX >= 756 && Main.tile[k, num4].frameX <= 900 && Main.tile[k, num4 + 2].type != 2 && Main.tile[k + 1, num4 + 2].type != 2 && Main.tile[k + 2, num4 + 2].type != 2 && Main.tile[k, num4 + 2].type != 477 && Main.tile[k + 1, num4 + 2].type != 477 && Main.tile[k + 2, num4 + 2].type != 477 && Main.tile[k, num4 + 2].type != 492 && Main.tile[k + 1, num4 + 2].type != 492 && Main.tile[k + 2, num4 + 2].type != 492)
			{
				Tile tile4 = Main.tile[k, num4];
				tile4.frameX -= 378;
				Tile tile5 = Main.tile[k + 1, num4];
				tile5.frameX -= 378;
				Tile tile6 = Main.tile[k + 2, num4];
				tile6.frameX -= 378;
				Tile tile7 = Main.tile[k, num4 + 1];
				tile7.frameX -= 378;
				Tile tile8 = Main.tile[k + 1, num4 + 1];
				tile8.frameX -= 378;
				Tile tile9 = Main.tile[k + 2, num4 + 1];
				tile9.frameX -= 378;
				Main.tile[k, num4].type = 186;
				Main.tile[k + 1, num4].type = 186;
				Main.tile[k + 2, num4].type = 186;
				Main.tile[k, num4 + 1].type = 186;
				Main.tile[k + 1, num4 + 1].type = 186;
				Main.tile[k + 2, num4 + 1].type = 186;
			}
			if (flag && type == 488 && WorldGen.gen)
			{
				for (int n = k; n < k + 3; n++)
				{
					for (int num9 = num4; num9 < num4 + 2; num9++)
					{
						Main.tile[n, num9].active(true);
						Main.tile[n, num9].type = 488;
						Main.tile[n, num9].frameX = (short)((n - k) * 18);
						Main.tile[n, num9].frameY = (short)((num9 - num4) * 18);
					}
					Main.tile[n, num4 + 2].active(true);
					Main.tile[n, num4 + 2].type = 2;
					Main.tile[n, num4 + 2].slope(0);
					Main.tile[n, num4 + 2].halfBrick(false);
				}
				flag = false;
			}
			if (flag)
			{
				int frameX = (int)Main.tile[i, j].frameX;
				WorldGen.destroyObject = true;
				num7 = num4 + 3;
				if (flag2)
				{
					num7--;
				}
				for (int num10 = k; num10 < k + 3; num10++)
				{
					for (int num11 = num4; num11 < num4 + 3; num11++)
					{
						if (Main.tile[num10, num11] == null)
						{
							Main.tile[num10, num11] = new Tile();
						}
						if ((int)Main.tile[num10, num11].type == type && Main.tile[num10, num11].active())
						{
							WorldGen.KillTile(num10, num11, false, false, false);
						}
					}
				}
				if (type == 14)
				{
					int type2;
					if (num5 >= 1 && num5 <= 3)
					{
						type2 = 637 + num5;
					}
					else if (num5 >= 15 && num5 <= 20)
					{
						type2 = 1698 + num5;
					}
					else if (num5 >= 4 && num5 <= 7)
					{
						type2 = 823 + num5;
					}
					else if (num5 == 8)
					{
						type2 = 917;
					}
					else if (num5 == 9)
					{
						type2 = 1144;
					}
					else if (num5 == 10)
					{
						type2 = 1397;
					}
					else if (num5 == 11)
					{
						type2 = 1400;
					}
					else if (num5 == 12)
					{
						type2 = 1403;
					}
					else if (num5 == 13)
					{
						type2 = 1460;
					}
					else if (num5 == 14)
					{
						type2 = 1510;
					}
					else if (num5 == 23)
					{
						type2 = 1926;
					}
					else if (num5 == 21)
					{
						type2 = 1794;
					}
					else if (num5 == 22)
					{
						type2 = 1816;
					}
					else if (num5 == 24)
					{
						type2 = 2248;
					}
					else if (num5 == 25)
					{
						type2 = 2259;
					}
					else if (num5 == 26)
					{
						type2 = 2532;
					}
					else if (num5 == 27)
					{
						type2 = 2550;
					}
					else if (num5 == 28)
					{
						type2 = 677;
					}
					else if (num5 == 29)
					{
						type2 = 2583;
					}
					else if (num5 == 30)
					{
						type2 = 2743;
					}
					else if (num5 == 31)
					{
						type2 = 2824;
					}
					else if (num5 == 32)
					{
						type2 = 3153;
					}
					else if (num5 == 33)
					{
						type2 = 3155;
					}
					else if (num5 == 34)
					{
						type2 = 3154;
					}
					else
					{
						type2 = 32;
					}
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, type2, 1, false, 0, false, false);
				}
				if (type == 469)
				{
					int type3 = 3920;
					if (num5 == 1)
					{
						type3 = 3948;
					}
					if (num5 == 2)
					{
						type3 = 3974;
					}
					if (num5 == 3)
					{
						type3 = 4162;
					}
					if (num5 == 4)
					{
						type3 = 4183;
					}
					if (num5 == 5)
					{
						type3 = 4204;
					}
					if (num5 == 6)
					{
						type3 = 4225;
					}
					if (num5 == 7)
					{
						type3 = 4314;
					}
					if (num5 == 8)
					{
						type3 = 4583;
					}
					if (num5 == 9)
					{
						type3 = 5165;
					}
					if (num5 == 10)
					{
						type3 = 5186;
					}
					if (num5 == 11)
					{
						type3 = 5207;
					}
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, type3, 1, false, 0, false, false);
				}
				else if (type == 114)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 398, 1, false, 0, false, false);
				}
				else if (type == 26)
				{
					if (!WorldGen.noTileActions && !WorldGen.IsGeneratingHardMode)
					{
						WorldGen.SmashAltar(i, j);
					}
				}
				else if (type == 298)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 2190, 1, false, 0, false, false);
				}
				else if (type == 299)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 2191, 1, false, 0, false, false);
				}
				else if (type >= 361 && type <= 364)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 3073 + type - 361, 1, false, 0, false, false);
				}
				else if (type >= 391 && type <= 394)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 48, 32, 3254 + type - 391, 1, false, 0, false, false);
				}
				else if (type == 285)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 2174, 1, false, 0, false, false);
				}
				else if (type == 286)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 2175, 1, false, 0, false, false);
				}
				else if (type == 582)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 4850, 1, false, 0, false, false);
				}
				else if (type == 619)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 4963, 1, false, 0, false, false);
				}
				else if (type == 310)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 2207, 1, false, 0, false, false);
				}
				else if (type == 339)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 2741, 1, false, 0, false, false);
				}
				else if (type == 538)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 4380, 1, false, 0, false, false);
				}
				else if (type == 544)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 4399, 1, false, 0, false, false);
				}
				else if (type == 532)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 4364, 1, false, 0, false, false);
				}
				else if (type == 533)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 4376, 1, false, 0, false, false);
				}
				else if (type == 555)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 4475, 1, false, 0, false, false);
				}
				else if (type == 556)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 4476, 1, false, 0, false, false);
				}
				else if (type == 629)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 5133, 1, false, 0, false, false);
				}
				else if (type == 217)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 995, 1, false, 0, false, false);
				}
				else if (type == 218)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 996, 1, false, 0, false, false);
				}
				else if (type == 219)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 997, 1, false, 0, false, false);
				}
				else if (type == 642)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 5296, 1, false, 0, false, false);
				}
				else if (type == 220)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 998, 1, false, 0, false, false);
				}
				else if (type == 377)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 3198, 1, false, 0, false, false);
				}
				else if (type == 228)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 1120, 1, false, 0, false, false);
				}
				else if (type == 405)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 3364, 1, false, 0, false, false);
				}
				else if (type == 486)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 4063, 1, false, 0, false, false);
				}
				else if (type == 488)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 9, WorldGen.genRand.Next(10, 21), false, 0, false, false);
				}
				else if (type == 215)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, WorldGen.GetCampfireItemDrop(num5), 1, false, 0, false, false);
				}
				else if (type == 244)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 1449, 1, false, 0, false, false);
				}
				else if (type == 647)
				{
					int num12 = 0;
					if (num5 < 7)
					{
						num12 = 154;
					}
					else if (num5 < 13)
					{
						num12 = 3;
					}
					else if (num5 < 16)
					{
						num12 = 3;
					}
					else if (num5 < 18)
					{
						num12 = 71;
					}
					else if (num5 < 20)
					{
						num12 = 72;
					}
					else if (num5 < 22)
					{
						num12 = 73;
					}
					else if (num5 < 26)
					{
						num12 = 9;
					}
					else if (num5 < 32)
					{
						num12 = 593;
					}
					else if (num5 < 35)
					{
						num12 = 183;
					}
					if (num12 != 0)
					{
						Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, num12, 1, false, 0, false, false);
					}
				}
				else if (type == 648)
				{
					num5 += num2 * 35;
					int num13 = 0;
					if (num5 < 6)
					{
						num13 = 195;
					}
					else if (num5 < 9)
					{
						num13 = 174;
					}
					else if (num5 < 14)
					{
						num13 = 150;
					}
					else if (num5 < 17)
					{
						num13 = 3;
					}
					else if (num5 < 18)
					{
						num13 = 989;
					}
					else if (num5 < 21)
					{
						num13 = 1101;
					}
					else if (num5 < 29)
					{
						num13 = 9;
					}
					else if (num5 < 35)
					{
						num13 = 3271;
					}
					else if (num5 < 41)
					{
						num13 = 3086;
					}
					else if (num5 < 47)
					{
						num13 = 3081;
					}
					else if (num5 < 52)
					{
						num13 = 62;
					}
					else if (num5 < 55)
					{
						num13 = 154;
					}
					if (num13 != 0)
					{
						Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, num13, 1, false, 0, false, false);
					}
				}
				else if (type == 651)
				{
					int num14;
					if (num5 < 3)
					{
						num14 = 195;
					}
					else if (num5 < 6)
					{
						num14 = 62;
					}
					else
					{
						num14 = 331;
					}
					if (num14 != 0)
					{
						Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, num14, 1, false, 0, false, false);
					}
				}
				else if (type == 17)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 33, 1, false, 0, false, false);
				}
				else if (type == 77)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 221, 1, false, 0, false, false);
				}
				else if (type == 86)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 332, 1, false, 0, false, false);
				}
				else if (type == 237)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 1292, 1, false, 0, false, false);
				}
				else if (type == 87)
				{
					int type4;
					if (num5 >= 1 && num5 <= 3)
					{
						type4 = 640 + num5;
					}
					else if (num5 == 4)
					{
						type4 = 919;
					}
					else if (num5 >= 5 && num5 <= 7)
					{
						type4 = 2245 + num5 - 5;
					}
					else if (num5 >= 8 && num5 <= 10)
					{
						type4 = 2254 + num5 - 8;
					}
					else if (num5 >= 11 && num5 <= 20)
					{
						type4 = 2376 + num5 - 11;
					}
					else if (num5 == 21)
					{
						type4 = 2531;
					}
					else if (num5 == 22)
					{
						type4 = 2548;
					}
					else if (num5 == 23)
					{
						type4 = 2565;
					}
					else if (num5 == 24)
					{
						type4 = 2580;
					}
					else if (num5 == 25)
					{
						type4 = 2671;
					}
					else if (num5 == 26)
					{
						type4 = 2821;
					}
					else if (num5 == 27)
					{
						type4 = 3141;
					}
					else if (num5 == 28)
					{
						type4 = 3143;
					}
					else if (num5 == 29)
					{
						type4 = 3142;
					}
					else if (num5 == 30)
					{
						type4 = 3915;
					}
					else if (num5 == 31)
					{
						type4 = 3916;
					}
					else if (num5 == 32)
					{
						type4 = 3944;
					}
					else if (num5 == 33)
					{
						type4 = 3971;
					}
					else if (num5 == 34)
					{
						type4 = 4158;
					}
					else if (num5 == 35)
					{
						type4 = 4179;
					}
					else if (num5 == 36)
					{
						type4 = 4200;
					}
					else if (num5 == 37)
					{
						type4 = 4221;
					}
					else if (num5 == 38)
					{
						type4 = 4310;
					}
					else if (num5 == 39)
					{
						type4 = 4579;
					}
					else if (num5 == 40)
					{
						type4 = 5161;
					}
					else if (num5 == 41)
					{
						type4 = 5182;
					}
					else if (num5 == 42)
					{
						type4 = 5203;
					}
					else
					{
						type4 = 333;
					}
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, type4, 1, false, 0, false, false);
				}
				else if (type == 88)
				{
					int dresserItemDrop = WorldGen.GetDresserItemDrop(num5);
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, dresserItemDrop, 1, false, 0, false, false);
				}
				else if (type == 89)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, WorldGen.GetItemDrop_Benches(num5), 1, false, 0, false, false);
				}
				else if (type == 133)
				{
					if (frameX >= 54)
					{
						Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 1221, 1, false, 0, false, false);
					}
					else
					{
						Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 524, 1, false, 0, false, false);
					}
				}
				else if (type == 186)
				{
					if (frameX >= 864)
					{
						if (frameX <= 954)
						{
							Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 71, WorldGen.genRand.Next(20, 100), false, 0, false, false);
							Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 71, WorldGen.genRand.Next(30, 100), false, 0, false, false);
							Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 71, WorldGen.genRand.Next(40, 100), false, 0, false, false);
							if (WorldGen.genRand.Next(3) != 0)
							{
								Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 71, WorldGen.genRand.Next(20, 100), false, 0, false, false);
							}
							if (WorldGen.genRand.Next(3) != 0)
							{
								Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 71, WorldGen.genRand.Next(30, 100), false, 0, false, false);
							}
							if (WorldGen.genRand.Next(3) != 0)
							{
								Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 71, WorldGen.genRand.Next(40, 100), false, 0, false, false);
							}
							if (WorldGen.genRand.Next(2) == 0)
							{
								Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 71, WorldGen.genRand.Next(20, 100), false, 0, false, false);
							}
							if (WorldGen.genRand.Next(2) == 0)
							{
								Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 71, WorldGen.genRand.Next(30, 100), false, 0, false, false);
							}
							if (WorldGen.genRand.Next(2) == 0)
							{
								Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 71, WorldGen.genRand.Next(40, 100), false, 0, false, false);
							}
							if (WorldGen.genRand.Next(3) == 0)
							{
								Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 71, WorldGen.genRand.Next(20, 100), false, 0, false, false);
							}
							if (WorldGen.genRand.Next(3) == 0)
							{
								Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 71, WorldGen.genRand.Next(30, 100), false, 0, false, false);
							}
							if (WorldGen.genRand.Next(3) == 0)
							{
								Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 71, WorldGen.genRand.Next(40, 100), false, 0, false, false);
							}
							if (WorldGen.genRand.Next(4) == 0)
							{
								Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 71, WorldGen.genRand.Next(20, 100), false, 0, false, false);
							}
							if (WorldGen.genRand.Next(4) == 0)
							{
								Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 71, WorldGen.genRand.Next(30, 100), false, 0, false, false);
							}
							if (WorldGen.genRand.Next(4) == 0)
							{
								Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 71, WorldGen.genRand.Next(40, 100), false, 0, false, false);
							}
							if (WorldGen.genRand.Next(5) == 0)
							{
								Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 71, WorldGen.genRand.Next(20, 100), false, 0, false, false);
							}
							if (WorldGen.genRand.Next(5) == 0)
							{
								Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 71, WorldGen.genRand.Next(30, 100), false, 0, false, false);
							}
							if (WorldGen.genRand.Next(5) == 0)
							{
								Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 71, WorldGen.genRand.Next(40, 100), false, 0, false, false);
							}
						}
						else if (frameX <= 1062)
						{
							Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 72, WorldGen.genRand.Next(10, 100), false, 0, false, false);
							if (WorldGen.genRand.Next(2) == 0)
							{
								Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 72, WorldGen.genRand.Next(20, 100), false, 0, false, false);
							}
							if (WorldGen.genRand.Next(3) == 0)
							{
								Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 72, WorldGen.genRand.Next(30, 100), false, 0, false, false);
							}
							if (WorldGen.genRand.Next(4) == 0)
							{
								Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 72, WorldGen.genRand.Next(40, 100), false, 0, false, false);
							}
							if (WorldGen.genRand.Next(5) == 0)
							{
								Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 72, WorldGen.genRand.Next(50, 100), false, 0, false, false);
							}
						}
						else if (frameX <= 1170)
						{
							Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 73, WorldGen.genRand.Next(1, 7), false, 0, false, false);
							if (WorldGen.genRand.Next(2) == 0)
							{
								Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 73, WorldGen.genRand.Next(2, 7), false, 0, false, false);
							}
							if (WorldGen.genRand.Next(3) == 0)
							{
								Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 73, WorldGen.genRand.Next(3, 7), false, 0, false, false);
							}
							if (WorldGen.genRand.Next(4) == 0)
							{
								Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 73, WorldGen.genRand.Next(4, 7), false, 0, false, false);
							}
							if (WorldGen.genRand.Next(5) == 0)
							{
								Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 73, WorldGen.genRand.Next(5, 7), false, 0, false, false);
							}
						}
					}
				}
				else if (type == 187 && frameX >= 918 && frameX <= 970)
				{
					if (Main.rand.Next(50) == 0)
					{
						Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 4144, 1, false, 0, false, false);
					}
					else
					{
						Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 989, 1, false, 0, false, false);
					}
				}
				WorldGen.destroyObject = false;
				for (int num15 = k - 1; num15 < k + 4; num15++)
				{
					for (int num16 = num4 - 1; num16 < num4 + 4; num16++)
					{
						WorldGen.TileFrame(num15, num16, false, false);
					}
				}
				if (type == 488)
				{
					WorldGen.mysticLogsEvent.FallenLogDestroyed();
				}
			}
		}

		// Token: 0x06000F37 RID: 3895 RVA: 0x00439ECC File Offset: 0x004380CC
		private static int GetDresserItemDrop(int style)
		{
			int result;
			if (style >= 1 && style <= 3)
			{
				result = 646 + style;
			}
			else if (style == 4)
			{
				result = 918;
			}
			else if (style >= 5 && style <= 15)
			{
				result = 2386 + style - 5;
			}
			else if (style == 16)
			{
				result = 2529;
			}
			else if (style == 17)
			{
				result = 2545;
			}
			else if (style == 18)
			{
				result = 2562;
			}
			else if (style == 19)
			{
				result = 2577;
			}
			else if (style == 20)
			{
				result = 2637;
			}
			else if (style == 21)
			{
				result = 2638;
			}
			else if (style == 22)
			{
				result = 2639;
			}
			else if (style == 23)
			{
				result = 2640;
			}
			else if (style == 24)
			{
				result = 2816;
			}
			else if (style == 25)
			{
				result = 3132;
			}
			else if (style == 26)
			{
				result = 3134;
			}
			else if (style == 27)
			{
				result = 3133;
			}
			else if (style == 28)
			{
				result = 3911;
			}
			else if (style == 29)
			{
				result = 3912;
			}
			else if (style == 30)
			{
				result = 3913;
			}
			else if (style == 31)
			{
				result = 3914;
			}
			else if (style == 32)
			{
				result = 3934;
			}
			else if (style == 33)
			{
				result = 3968;
			}
			else if (style == 34)
			{
				result = 4148;
			}
			else if (style == 35)
			{
				result = 4169;
			}
			else if (style == 36)
			{
				result = 4190;
			}
			else if (style == 37)
			{
				result = 4211;
			}
			else if (style == 38)
			{
				result = 4301;
			}
			else if (style == 39)
			{
				result = 4569;
			}
			else if (style == 40)
			{
				result = 5151;
			}
			else if (style == 41)
			{
				result = 5172;
			}
			else if (style == 42)
			{
				result = 5193;
			}
			else
			{
				result = 334;
			}
			return result;
		}

		// Token: 0x06000F38 RID: 3896 RVA: 0x0043A0B0 File Offset: 0x004382B0
		private static int GetCampfireItemDrop(int style)
		{
			if (style == 0)
			{
				return 966;
			}
			if (style >= 1 && style <= 5)
			{
				return 3046 + style - 1;
			}
			if (style == 6)
			{
				return 3723;
			}
			if (style == 7)
			{
				return 3724;
			}
			if (style >= 8 && style <= 13)
			{
				return 4689 + style - 8;
			}
			if (style == 14)
			{
				return 5299;
			}
			if (style == 15)
			{
				return 5357;
			}
			return 966;
		}

		// Token: 0x06000F39 RID: 3897 RVA: 0x0043A11C File Offset: 0x0043831C
		public static void Check3x4(int i, int j, int type)
		{
			if (WorldGen.destroyObject)
			{
				return;
			}
			bool flag = false;
			int num = 0;
			int num2 = 0;
			int k = (int)(Main.tile[i, j].frameX / 18);
			int l = (int)(Main.tile[i, j].frameY / 18);
			while (k >= 3)
			{
				num++;
				k -= 3;
			}
			while (l >= 4)
			{
				num2++;
				l -= 4;
			}
			int num3 = i - k;
			int num4 = j - l;
			for (int m = num3; m < num3 + 3; m++)
			{
				for (int n = num4; n < num4 + 4; n++)
				{
					if (Main.tile[m, n] == null)
					{
						Main.tile[m, n] = new Tile();
					}
					if (!Main.tile[m, n].active() || (int)Main.tile[m, n].type != type || (int)Main.tile[m, n].frameX != num * 54 + (m - num3) * 18 || (int)Main.tile[m, n].frameY != num2 * 72 + (n - num4) * 18)
					{
						flag = true;
					}
				}
				if (Main.tile[m, num4 + 4] == null)
				{
					Main.tile[m, num4 + 4] = new Tile();
				}
				if (!WorldGen.SolidTileAllowBottomSlope(m, num4 + 4))
				{
					flag = true;
				}
			}
			if (flag)
			{
				WorldGen.destroyObject = true;
				for (int num5 = num3; num5 < num3 + 3; num5++)
				{
					for (int num6 = num4; num6 < num4 + 4; num6++)
					{
						if ((int)Main.tile[num5, num6].type == type && Main.tile[num5, num6].active())
						{
							WorldGen.KillTile(num5, num6, false, false, false);
						}
					}
				}
				if (type == 101)
				{
					int type2;
					if (num == 1)
					{
						type2 = 1414;
					}
					else if (num == 2)
					{
						type2 = 1415;
					}
					else if (num == 3)
					{
						type2 = 1416;
					}
					else if (num == 4)
					{
						type2 = 1463;
					}
					else if (num == 5)
					{
						type2 = 1512;
					}
					else if (num == 6)
					{
						type2 = 2020;
					}
					else if (num == 7)
					{
						type2 = 2021;
					}
					else if (num == 8)
					{
						type2 = 2022;
					}
					else if (num == 9)
					{
						type2 = 2023;
					}
					else if (num == 10)
					{
						type2 = 2024;
					}
					else if (num == 11)
					{
						type2 = 2025;
					}
					else if (num == 12)
					{
						type2 = 2026;
					}
					else if (num == 13)
					{
						type2 = 2027;
					}
					else if (num == 14)
					{
						type2 = 2028;
					}
					else if (num == 15)
					{
						type2 = 2029;
					}
					else if (num == 16)
					{
						type2 = 2030;
					}
					else if (num == 17)
					{
						type2 = 2031;
					}
					else if (num >= 18 && num <= 21)
					{
						type2 = 2135 + num - 18;
					}
					else if (num == 22)
					{
						type2 = 2233;
					}
					else if (num == 23)
					{
						type2 = 2536;
					}
					else if (num == 24)
					{
						type2 = 2540;
					}
					else if (num == 25)
					{
						type2 = 2554;
					}
					else if (num == 26)
					{
						type2 = 2569;
					}
					else if (num == 27)
					{
						type2 = 2670;
					}
					else if (num == 28)
					{
						type2 = 2817;
					}
					else if (num == 29)
					{
						type2 = 3165;
					}
					else if (num == 30)
					{
						type2 = 3167;
					}
					else if (num == 31)
					{
						type2 = 3166;
					}
					else if (num == 32)
					{
						type2 = 3917;
					}
					else if (num == 33)
					{
						type2 = 3933;
					}
					else if (num == 34)
					{
						type2 = 3960;
					}
					else if (num == 35)
					{
						type2 = 4147;
					}
					else if (num == 36)
					{
						type2 = 4168;
					}
					else if (num == 37)
					{
						type2 = 4189;
					}
					else if (num == 38)
					{
						type2 = 4210;
					}
					else if (num == 39)
					{
						type2 = 4300;
					}
					else if (num == 40)
					{
						type2 = 4568;
					}
					else if (num == 41)
					{
						type2 = 5150;
					}
					else if (num == 42)
					{
						type2 = 5171;
					}
					else if (num == 43)
					{
						type2 = 5192;
					}
					else
					{
						type2 = 354;
					}
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, type2, 1, false, 0, false, false);
				}
				else if (type == 102)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 355, 1, false, 0, false, false);
				}
				else if (type == 463)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 3813, 1, false, 0, false, false);
				}
				else if (type == 617)
				{
					if (num == 27)
					{
						short type3 = 5110;
						Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, (int)type3, 1, false, 0, false, false);
					}
					else
					{
						int type4 = 4924 + num;
						Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, type4, 1, false, 0, false, false);
					}
				}
				WorldGen.destroyObject = false;
				for (int num7 = num3 - 1; num7 < num3 + 4; num7++)
				{
					for (int num8 = num4 - 1; num8 < num4 + 4; num8++)
					{
						WorldGen.TileFrame(num7, num8, false, false);
					}
				}
			}
		}

		// Token: 0x06000F3A RID: 3898 RVA: 0x0043A6A8 File Offset: 0x004388A8
		public static void Check5x4(int i, int j, int type)
		{
			if (WorldGen.destroyObject)
			{
				return;
			}
			bool flag = false;
			int num = 0;
			int k;
			for (k = (int)(Main.tile[i, j].frameX / 18); k >= 5; k -= 5)
			{
				num++;
			}
			int num2 = i - k;
			int num3 = j + (int)(Main.tile[i, j].frameY / 18 * -1);
			for (int l = num2; l < num2 + 5; l++)
			{
				for (int m = num3; m < num3 + 4; m++)
				{
					if (Main.tile[l, m] == null)
					{
						Main.tile[l, m] = new Tile();
					}
					if (!Main.tile[l, m].active() || (int)Main.tile[l, m].type != type || (int)Main.tile[l, m].frameX != num * 90 + (l - num2) * 18 || (int)Main.tile[l, m].frameY != (m - num3) * 18)
					{
						flag = true;
					}
				}
				if (Main.tile[l, num3 + 4] == null)
				{
					Main.tile[l, num3 + 4] = new Tile();
				}
				if (!WorldGen.SolidTileAllowBottomSlope(l, num3 + 4))
				{
					flag = true;
				}
			}
			if (flag)
			{
				WorldGen.destroyObject = true;
				for (int n = num2; n < num2 + 5; n++)
				{
					for (int num4 = num3; num4 < num3 + 4; num4++)
					{
						if ((int)Main.tile[n, num4].type == type && Main.tile[n, num4].active())
						{
							WorldGen.KillTile(n, num4, false, false, false);
						}
					}
				}
				if (type == 464)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 3814, 1, false, 0, false, false);
				}
				if (type == 466)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 3816, 1, false, 0, false, false);
				}
				WorldGen.destroyObject = false;
				for (int num5 = num2 - 1; num5 < num2 + 6; num5++)
				{
					for (int num6 = num3 - 1; num6 < num3 + 5; num6++)
					{
						WorldGen.TileFrame(num5, num6, false, false);
					}
				}
			}
		}

		// Token: 0x06000F3B RID: 3899 RVA: 0x0043A8F0 File Offset: 0x00438AF0
		public static void Check6x3(int i, int j, int type)
		{
			if (WorldGen.destroyObject)
			{
				return;
			}
			bool flag = false;
			int num = i + (int)(Main.tile[i, j].frameX / 18 * -1);
			int num2 = j + (int)(Main.tile[i, j].frameY / 18 * -1);
			for (int k = num; k < num + 6; k++)
			{
				for (int l = num2; l < num2 + 3; l++)
				{
					int num3 = (k - num) * 18;
					if (Main.tile[k, l] == null)
					{
						Main.tile[k, l] = new Tile();
					}
					if (!Main.tile[k, l].active() || (int)Main.tile[k, l].type != type || (int)Main.tile[k, l].frameX != num3 || (int)Main.tile[k, l].frameY != (l - num2) * 18)
					{
						flag = true;
					}
				}
				if (Main.tile[k, num2 + 3] == null)
				{
					Main.tile[k, num2 + 3] = new Tile();
				}
				if (!WorldGen.SolidTileAllowBottomSlope(k, num2 + 3) && (!Main.tile[k, num2 + 3].nactive() || !Main.tileSolidTop[(int)Main.tile[k, num2 + 3].type] || Main.tile[k, num2 + 3].frameY != 0))
				{
					flag = true;
				}
			}
			if (flag)
			{
				WorldGen.destroyObject = true;
				for (int m = num; m < num + 6; m++)
				{
					for (int n = num2; n < num2 + 3; n++)
					{
						if ((int)Main.tile[m, n].type == type && Main.tile[m, n].active())
						{
							WorldGen.KillTile(m, n, false, false, false);
						}
					}
				}
				if (type == 275)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 2162, 1, false, 0, false, false);
				}
				if (type == 413)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 3565, 1, false, 0, false, false);
				}
				if (type == 414)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 3566, 1, false, 0, false, false);
				}
				if (type == 276)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 2163, 1, false, 0, false, false);
				}
				if (type == 277)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 2164, 1, false, 0, false, false);
				}
				if (type == 278)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 2165, 1, false, 0, false, false);
				}
				if (type == 279)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 2166, 1, false, 0, false, false);
				}
				if (type == 280)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 2167, 1, false, 0, false, false);
				}
				if (type == 281)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 2168, 1, false, 0, false, false);
				}
				if (type == 296)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 2186, 1, false, 0, false, false);
				}
				if (type == 297)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 2187, 1, false, 0, false, false);
				}
				if (type == 309)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 2206, 1, false, 0, false, false);
				}
				if (type == 358)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 3070, 1, false, 0, false, false);
				}
				if (type == 359)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 3071, 1, false, 0, false, false);
				}
				if (type == 542)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 4396, 1, false, 0, false, false);
				}
				if (type == 550)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 4461, 1, false, 0, false, false);
				}
				if (type == 551)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 4462, 1, false, 0, false, false);
				}
				if (type == 553)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 4473, 1, false, 0, false, false);
				}
				if (type == 554)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 4474, 1, false, 0, false, false);
				}
				if (type == 558)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 4481, 1, false, 0, false, false);
				}
				if (type == 559)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 4483, 1, false, 0, false, false);
				}
				if (type == 599)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 4882, 1, false, 0, false, false);
				}
				if (type == 600)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 4883, 1, false, 0, false, false);
				}
				if (type == 601)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 4884, 1, false, 0, false, false);
				}
				if (type == 602)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 4885, 1, false, 0, false, false);
				}
				if (type == 603)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 4886, 1, false, 0, false, false);
				}
				if (type == 604)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 4887, 1, false, 0, false, false);
				}
				if (type == 605)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 4888, 1, false, 0, false, false);
				}
				if (type == 606)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 4889, 1, false, 0, false, false);
				}
				if (type == 607)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 4890, 1, false, 0, false, false);
				}
				if (type == 608)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 4891, 1, false, 0, false, false);
				}
				if (type == 609)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 4892, 1, false, 0, false, false);
				}
				if (type == 610)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 4893, 1, false, 0, false, false);
				}
				if (type == 611)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 4894, 1, false, 0, false, false);
				}
				if (type == 612)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 4895, 1, false, 0, false, false);
				}
				if (type == 632)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 5213, 1, false, 0, false, false);
				}
				if (type == 640)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 5301, 1, false, 0, false, false);
				}
				if (type == 643)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 5314, 1, false, 0, false, false);
				}
				if (type == 644)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 5315, 1, false, 0, false, false);
				}
				if (type == 645)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 5316, 1, false, 0, false, false);
				}
				WorldGen.destroyObject = false;
				for (int num4 = num - 1; num4 < num + 7; num4++)
				{
					for (int num5 = num2 - 1; num5 < num2 + 4; num5++)
					{
						WorldGen.TileFrame(num4, num5, false, false);
					}
				}
			}
		}

		// Token: 0x06000F3C RID: 3900 RVA: 0x0043B1BC File Offset: 0x004393BC
		public static void Place6x3(int x, int y, ushort type, int direction = -1, int style = 0)
		{
			if (x < 5 || x > Main.maxTilesX - 5 || y < 5 || y > Main.maxTilesY - 5)
			{
				return;
			}
			bool flag = true;
			for (int i = x - 3; i < x + 3; i++)
			{
				for (int j = y - 2; j <= y; j++)
				{
					if (Main.tile[i, j] == null)
					{
						Main.tile[i, j] = new Tile();
					}
					if (Main.tile[i, j].active())
					{
						flag = false;
					}
				}
				if (Main.tile[i, y + 1] == null)
				{
					Main.tile[i, y + 1] = new Tile();
				}
				if (!WorldGen.SolidTile2(i, y + 1) && (!Main.tile[i, y + 1].nactive() || !Main.tileSolidTop[(int)Main.tile[i, y + 1].type] || Main.tile[i, y + 1].frameY != 0))
				{
					flag = false;
				}
			}
			if (flag)
			{
				int num = 0;
				for (int k = x - 3; k < x + 3; k++)
				{
					int num2 = 0;
					for (int l = y - 2; l <= y; l++)
					{
						Main.tile[k, l].active(true);
						Main.tile[k, l].frameY = (short)num2;
						Main.tile[k, l].frameX = (short)num;
						Main.tile[k, l].type = type;
						num2 += 18;
					}
					num += 18;
				}
			}
		}

		// Token: 0x06000F3D RID: 3901 RVA: 0x0043B348 File Offset: 0x00439548
		public static void Place4x2(int x, int y, ushort type, int direction = -1, int style = 0)
		{
			if (x < 5 || x > Main.maxTilesX - 5 || y < 5 || y > Main.maxTilesY - 5)
			{
				return;
			}
			bool flag = true;
			for (int i = x - 1; i < x + 3; i++)
			{
				for (int j = y - 1; j < y + 1; j++)
				{
					if (Main.tile[i, j] == null)
					{
						Main.tile[i, j] = new Tile();
					}
					if (Main.tile[i, j].active())
					{
						flag = false;
					}
				}
				if (Main.tile[i, y + 1] == null)
				{
					Main.tile[i, y + 1] = new Tile();
				}
				if (!WorldGen.SolidTile2(i, y + 1))
				{
					flag = false;
				}
			}
			short num = 0;
			if (direction == 1)
			{
				num = 72;
			}
			int num2 = 36 * style;
			if (flag)
			{
				Main.tile[x - 1, y - 1].active(true);
				Main.tile[x - 1, y - 1].frameY = (short)num2;
				Main.tile[x - 1, y - 1].frameX = num;
				Main.tile[x - 1, y - 1].type = type;
				Main.tile[x, y - 1].active(true);
				Main.tile[x, y - 1].frameY = (short)num2;
				Main.tile[x, y - 1].frameX = 18 + num;
				Main.tile[x, y - 1].type = type;
				Main.tile[x + 1, y - 1].active(true);
				Main.tile[x + 1, y - 1].frameY = (short)num2;
				Main.tile[x + 1, y - 1].frameX = 36 + num;
				Main.tile[x + 1, y - 1].type = type;
				Main.tile[x + 2, y - 1].active(true);
				Main.tile[x + 2, y - 1].frameY = (short)num2;
				Main.tile[x + 2, y - 1].frameX = 54 + num;
				Main.tile[x + 2, y - 1].type = type;
				Main.tile[x - 1, y].active(true);
				Main.tile[x - 1, y].frameY = (short)(num2 + 18);
				Main.tile[x - 1, y].frameX = num;
				Main.tile[x - 1, y].type = type;
				Main.tile[x, y].active(true);
				Main.tile[x, y].frameY = (short)(num2 + 18);
				Main.tile[x, y].frameX = 18 + num;
				Main.tile[x, y].type = type;
				Main.tile[x + 1, y].active(true);
				Main.tile[x + 1, y].frameY = (short)(num2 + 18);
				Main.tile[x + 1, y].frameX = 36 + num;
				Main.tile[x + 1, y].type = type;
				Main.tile[x + 2, y].active(true);
				Main.tile[x + 2, y].frameY = (short)(num2 + 18);
				Main.tile[x + 2, y].frameX = 54 + num;
				Main.tile[x + 2, y].type = type;
			}
		}

		// Token: 0x06000F3E RID: 3902 RVA: 0x0043B6D8 File Offset: 0x004398D8
		public static void ShootFromCannon(int x, int y, int angle, int ammo, int Damage, float KnockBack, int owner, bool fromWire)
		{
			float num = 14f;
			float num2 = 0f;
			float num3 = 0f;
			int type = 162;
			if (ammo == 2)
			{
				type = 281;
			}
			if (ammo == 3)
			{
				type = 178;
			}
			if (ammo == 4)
			{
				type = 601;
				num = 3f;
			}
			if (ammo == 5)
			{
				type = 601;
				num = 3f;
			}
			int num4 = 0;
			int num5 = 0;
			if (ammo == 5)
			{
				num4 = 1;
			}
			if (ammo == 2)
			{
				num5 = owner + 1;
			}
			if (angle == 0)
			{
				num2 = 10f;
				num3 = 0f;
			}
			if (angle == 1)
			{
				num2 = 7.5f;
				num3 = -2.5f;
			}
			if (angle == 2)
			{
				num2 = 5f;
				num3 = -5f;
			}
			if (angle == 3)
			{
				num2 = 2.75f;
				num3 = -6f;
			}
			if (angle == 4)
			{
				num2 = 0f;
				num3 = -10f;
			}
			if (angle == 5)
			{
				num2 = -2.75f;
				num3 = -6f;
			}
			if (angle == 6)
			{
				num2 = -5f;
				num3 = -5f;
			}
			if (angle == 7)
			{
				num2 = -7.5f;
				num3 = -2.5f;
			}
			if (angle == 8)
			{
				num2 = -10f;
				num3 = 0f;
			}
			Vector2 vector = new Vector2((float)((x + 2) * 16), (float)((y + 2) * 16));
			float num6 = num2;
			float num7 = num3;
			float num8 = (float)Math.Sqrt((double)(num6 * num6 + num7 * num7));
			if (ammo == 4 || ammo == 5)
			{
				if (angle == 4)
				{
					vector.X += 5f;
				}
				vector.Y += 5f;
			}
			bool flag = true;
			if (ammo == 2 && !WorldGen.BunnyCannonCanFire())
			{
				flag = false;
			}
			if (flag)
			{
				num8 = num / num8;
				num6 *= num8;
				num7 *= num8;
				if (Main.myPlayer != owner && Main.netMode == 2 && (ammo == 4 || ammo == 5))
				{
					NetMessage.SendData(108, owner, -1, null, Damage, KnockBack, (float)x, (float)y, angle, ammo, owner);
					return;
				}
				if (Main.netMode == 2)
				{
					owner = Main.myPlayer;
				}
				int num9 = Projectile.NewProjectile(WorldGen.GetProjectileSource_PlayerOrWires(x, y, fromWire, Main.player[owner]), vector.X, vector.Y, num6, num7, type, Damage, KnockBack, owner, (float)num4, (float)num5, 0f);
				Main.projectile[num9].originatedFromActivableTile = true;
			}
		}

		// Token: 0x06000F3F RID: 3903 RVA: 0x0043B8E8 File Offset: 0x00439AE8
		public static bool BunnyCannonCanFire()
		{
			int num = 1;
			int num2 = 0;
			int num3 = 100;
			for (int i = 0; i < num3; i++)
			{
				NPC npc = Main.npc[i];
				if (npc == null || !npc.active)
				{
					num2++;
				}
			}
			for (int j = 0; j < Main.projectile.Length; j++)
			{
				Projectile projectile = Main.projectile[j];
				if (projectile != null && projectile.active && projectile.type == 281)
				{
					num2--;
					if (num2 <= 0)
					{
						return false;
					}
				}
			}
			return num2 >= num;
		}

		// Token: 0x06000F40 RID: 3904 RVA: 0x0043B970 File Offset: 0x00439B70
		public static void SwitchCannon(int i, int j)
		{
			int k;
			for (k = (int)(Main.tile[i, j].frameX / 18); k >= 4; k -= 4)
			{
			}
			int l;
			for (l = (int)(Main.tile[i, j].frameY / 18); l >= 3; l -= 3)
			{
			}
			int num = 1;
			if (k < 2)
			{
				num = -1;
			}
			k = i - k;
			l = j - l;
			if (num == 1 && Main.tile[k, l].frameY <= 52)
			{
				return;
			}
			if (num == -1 && Main.tile[k, l].frameY >= 432)
			{
				return;
			}
			num *= -54;
			for (int m = k; m < k + 4; m++)
			{
				for (int n = l; n < l + 3; n++)
				{
					if (Main.tile[m, n] == null)
					{
						Main.tile[m, n] = new Tile();
					}
					if (Main.tile[m, n].active() && Main.tile[m, n].type == 209)
					{
						Main.tile[m, n].frameY = (short)((int)Main.tile[m, n].frameY + num);
					}
				}
			}
			NetMessage.SendTileSquare(-1, k, l, 4, 3, TileChangeType.None);
		}

		// Token: 0x06000F41 RID: 3905 RVA: 0x0043BAB0 File Offset: 0x00439CB0
		public static void CheckCannon(int i, int j, int type)
		{
			if (WorldGen.destroyObject)
			{
				return;
			}
			bool flag = false;
			int k = (int)(Main.tile[i, j].frameX / 18);
			int num = 0;
			while (k >= 4)
			{
				num++;
				k -= 4;
			}
			k = i - k;
			int l = (int)(Main.tile[i, j].frameY / 18);
			int num2 = 0;
			while (l >= 3)
			{
				num2 += 54;
				l -= 3;
			}
			l = j - l;
			int num3 = 72 * num;
			for (int m = k; m < k + 4; m++)
			{
				int num4 = num2;
				for (int n = l; n < l + 3; n++)
				{
					if (Main.tile[m, n] == null)
					{
						Main.tile[m, n] = new Tile();
					}
					if (!Main.tile[m, n].active() || (int)Main.tile[m, n].type != type || (int)Main.tile[m, n].frameX != num3 || (int)Main.tile[m, n].frameY != num4)
					{
						flag = true;
					}
					num4 += 18;
				}
				if (Main.tile[m, l + 3] == null)
				{
					Main.tile[m, l + 3] = new Tile();
				}
				if (!WorldGen.SolidTileAllowBottomSlope(m, l + 3) && m != k && m != k + 3)
				{
					flag = true;
				}
				num3 += 18;
			}
			if (flag)
			{
				WorldGen.destroyObject = true;
				for (int num5 = k; num5 < k + 4; num5++)
				{
					for (int num6 = l; num6 < l + 3; num6++)
					{
						if ((int)Main.tile[num5, num6].type == type && Main.tile[num5, num6].active())
						{
							WorldGen.KillTile(num5, num6, false, false, false);
						}
					}
				}
				int type2 = 928;
				switch (num)
				{
				case 1:
					type2 = 1337;
					break;
				case 2:
					type2 = 3369;
					break;
				case 3:
				case 4:
					type2 = 3664;
					break;
				}
				Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, type2, 1, false, 0, false, false);
				WorldGen.destroyObject = false;
				for (int num7 = k; num7 < k + 4; num7++)
				{
					for (int num8 = l; num8 < l + 3; num8++)
					{
						WorldGen.TileFrame(num7, num8, false, false);
					}
				}
			}
		}

		// Token: 0x06000F42 RID: 3906 RVA: 0x0043BD18 File Offset: 0x00439F18
		public static void PlaceCannon(int x, int y, ushort type, int style = 0)
		{
			if (x < 5 || x > Main.maxTilesX - 5 || y < 5 || y > Main.maxTilesY - 5)
			{
				return;
			}
			bool flag = true;
			for (int i = x - 1; i < x + 3; i++)
			{
				for (int j = y - 2; j < y + 1; j++)
				{
					if (Main.tile[i, j] == null)
					{
						Main.tile[i, j] = new Tile();
					}
					if (Main.tile[i, j].active())
					{
						flag = false;
					}
				}
				if (Main.tile[i, y + 1] == null)
				{
					Main.tile[i, y + 1] = new Tile();
				}
				if (!WorldGen.SolidTile2(i, y + 1) && i != x - 1 && i != x + 2)
				{
					flag = false;
				}
			}
			int num = 72 * style;
			int num2 = 0;
			if (flag)
			{
				Main.tile[x - 1, y - 2].active(true);
				Main.tile[x - 1, y - 2].frameY = (short)num2;
				Main.tile[x - 1, y - 2].frameX = (short)num;
				Main.tile[x - 1, y - 2].type = type;
				Main.tile[x, y - 2].active(true);
				Main.tile[x, y - 2].frameY = (short)num2;
				Main.tile[x, y - 2].frameX = (short)(18 + num);
				Main.tile[x, y - 2].type = type;
				Main.tile[x + 1, y - 2].active(true);
				Main.tile[x + 1, y - 2].frameY = (short)num2;
				Main.tile[x + 1, y - 2].frameX = (short)(36 + num);
				Main.tile[x + 1, y - 2].type = type;
				Main.tile[x + 2, y - 2].active(true);
				Main.tile[x + 2, y - 2].frameY = (short)num2;
				Main.tile[x + 2, y - 2].frameX = (short)(54 + num);
				Main.tile[x + 2, y - 2].type = type;
				Main.tile[x - 1, y - 1].active(true);
				Main.tile[x - 1, y - 1].frameY = (short)(num2 + 18);
				Main.tile[x - 1, y - 1].frameX = (short)num;
				Main.tile[x - 1, y - 1].type = type;
				Main.tile[x, y - 1].active(true);
				Main.tile[x, y - 1].frameY = (short)(num2 + 18);
				Main.tile[x, y - 1].frameX = (short)(18 + num);
				Main.tile[x, y - 1].type = type;
				Main.tile[x + 1, y - 1].active(true);
				Main.tile[x + 1, y - 1].frameY = (short)(num2 + 18);
				Main.tile[x + 1, y - 1].frameX = (short)(36 + num);
				Main.tile[x + 1, y - 1].type = type;
				Main.tile[x + 2, y - 1].active(true);
				Main.tile[x + 2, y - 1].frameY = (short)(num2 + 18);
				Main.tile[x + 2, y - 1].frameX = (short)(54 + num);
				Main.tile[x + 2, y - 1].type = type;
				Main.tile[x - 1, y].active(true);
				Main.tile[x - 1, y].frameY = (short)(num2 + 36);
				Main.tile[x - 1, y].frameX = (short)num;
				Main.tile[x - 1, y].type = type;
				Main.tile[x, y].active(true);
				Main.tile[x, y].frameY = (short)(num2 + 36);
				Main.tile[x, y].frameX = (short)(18 + num);
				Main.tile[x, y].type = type;
				Main.tile[x + 1, y].active(true);
				Main.tile[x + 1, y].frameY = (short)(num2 + 36);
				Main.tile[x + 1, y].frameX = (short)(36 + num);
				Main.tile[x + 1, y].type = type;
				Main.tile[x + 2, y].active(true);
				Main.tile[x + 2, y].frameY = (short)(num2 + 36);
				Main.tile[x + 2, y].frameX = (short)(54 + num);
				Main.tile[x + 2, y].type = type;
			}
		}

		// Token: 0x06000F43 RID: 3907 RVA: 0x0043C224 File Offset: 0x0043A424
		public static void SwitchMB(int i, int j)
		{
			int k;
			for (k = (int)(Main.tile[i, j].frameY / 18); k >= 2; k -= 2)
			{
			}
			int num = (int)(Main.tile[i, j].frameX / 18);
			if (num >= 2)
			{
				num -= 2;
			}
			int num2 = i - num;
			int num3 = j - k;
			for (int l = num2; l < num2 + 2; l++)
			{
				for (int m = num3; m < num3 + 2; m++)
				{
					if (Main.tile[l, m] == null)
					{
						Main.tile[l, m] = new Tile();
					}
					if (Main.tile[l, m].active() && (Main.tile[l, m].type == 139 || Main.tile[l, m].type == 35))
					{
						if (Main.tile[l, m].frameX < 36)
						{
							Tile tile = Main.tile[l, m];
							tile.frameX += 36;
						}
						else
						{
							Tile tile2 = Main.tile[l, m];
							tile2.frameX -= 36;
						}
					}
				}
			}
			if (Wiring.running)
			{
				Wiring.SkipWire(num2, num3);
				Wiring.SkipWire(num2 + 1, num3);
				Wiring.SkipWire(num2, num3 + 1);
				Wiring.SkipWire(num2 + 1, num3 + 1);
			}
			NetMessage.SendTileSquare(-1, num2, num3, 2, 2, TileChangeType.None);
		}

		// Token: 0x06000F44 RID: 3908 RVA: 0x0043C3A0 File Offset: 0x0043A5A0
		public static void SwitchMonolith(int i, int j)
		{
			int k;
			for (k = (int)(Main.tile[i, j].frameX / 18); k >= 2; k -= 2)
			{
			}
			int l;
			for (l = (int)(Main.tile[i, j].frameY / 18); l >= 3; l -= 3)
			{
			}
			int num = i - k;
			int num2 = j - l;
			for (int m = num; m < num + 2; m++)
			{
				for (int n = num2; n < num2 + 3; n++)
				{
					if (Main.tile[m, n] == null)
					{
						Main.tile[m, n] = new Tile();
					}
					Tile tile = Main.tile[m, n];
					if (tile.active())
					{
						if (tile.type == 410)
						{
							if (tile.frameY < 56)
							{
								Tile tile2 = tile;
								tile2.frameY += 56;
							}
							else
							{
								Tile tile3 = tile;
								tile3.frameY -= 56;
							}
						}
						else if (tile.type == 480)
						{
							if (tile.frameY < 54)
							{
								Tile tile4 = tile;
								tile4.frameY += 54;
							}
							else
							{
								Tile tile5 = tile;
								tile5.frameY -= 54;
							}
						}
						else if (tile.type == 509)
						{
							if (tile.frameY < 54)
							{
								Tile tile6 = tile;
								tile6.frameY += 54;
							}
							else
							{
								Tile tile7 = tile;
								tile7.frameY -= 54;
							}
						}
						else if (tile.type == 657)
						{
							if (tile.frameY < 54)
							{
								Tile tile8 = tile;
								tile8.frameY += 54;
							}
							else
							{
								Tile tile9 = tile;
								tile9.frameY -= 54;
							}
						}
						else if (tile.type == 658)
						{
							short num3 = 54;
							short num4 = 3;
							short num5 = num3 * num4;
							Tile tile10 = tile;
							tile10.frameY += num3;
							if (tile.frameY >= num5)
							{
								Tile tile11 = tile;
								tile11.frameY -= num5;
							}
						}
					}
				}
			}
			if (Wiring.running)
			{
				Wiring.SkipWire(num, num2);
				Wiring.SkipWire(num, num2 + 1);
				Wiring.SkipWire(num, num2 + 2);
				Wiring.SkipWire(num + 1, num2);
				Wiring.SkipWire(num + 1, num2 + 1);
				Wiring.SkipWire(num + 1, num2 + 2);
			}
			NetMessage.SendTileSquare(-1, num, num2, 2, 3, TileChangeType.None);
		}

		// Token: 0x06000F45 RID: 3909 RVA: 0x0043C608 File Offset: 0x0043A808
		public static void SwitchFountain(int i, int j)
		{
			int k;
			for (k = (int)(Main.tile[i, j].frameX / 18); k >= 2; k -= 2)
			{
			}
			int num = (int)(Main.tile[i, j].frameY / 18);
			if (num >= 4)
			{
				num -= 4;
			}
			int num2 = i - k;
			int num3 = j - num;
			for (int l = num2; l < num2 + 2; l++)
			{
				for (int m = num3; m < num3 + 4; m++)
				{
					if (Main.tile[l, m] == null)
					{
						Main.tile[l, m] = new Tile();
					}
					if (Main.tile[l, m].active() && Main.tile[l, m].type == 207)
					{
						if (Main.tile[l, m].frameY < 72)
						{
							Tile tile = Main.tile[l, m];
							tile.frameY += 72;
						}
						else
						{
							Tile tile2 = Main.tile[l, m];
							tile2.frameY -= 72;
						}
					}
				}
			}
			if (Wiring.running)
			{
				Wiring.SkipWire(num2, num3);
				Wiring.SkipWire(num2, num3 + 1);
				Wiring.SkipWire(num2, num3 + 2);
				Wiring.SkipWire(num2, num3 + 3);
				Wiring.SkipWire(num2 + 1, num3);
				Wiring.SkipWire(num2 + 1, num3 + 1);
				Wiring.SkipWire(num2 + 1, num3 + 2);
				Wiring.SkipWire(num2 + 1, num3 + 3);
			}
			NetMessage.SendTileSquare(-1, num2, num3, 2, 4, TileChangeType.None);
		}

		// Token: 0x06000F46 RID: 3910 RVA: 0x0043C790 File Offset: 0x0043A990
		public static void CheckMB(int i, int j, int type)
		{
			if (WorldGen.destroyObject)
			{
				return;
			}
			bool flag = false;
			int num = 0;
			int k;
			for (k = (int)(Main.tile[i, j].frameY / 18); k >= 2; k -= 2)
			{
				num++;
			}
			int num2 = (int)(Main.tile[i, j].frameX / 18);
			int num3 = 0;
			if (num2 >= 2)
			{
				num2 -= 2;
				num3++;
			}
			int num4 = i - num2;
			int num5 = j - k;
			for (int l = num4; l < num4 + 2; l++)
			{
				for (int m = num5; m < num5 + 2; m++)
				{
					if (Main.tile[l, m] == null)
					{
						Main.tile[l, m] = new Tile();
					}
					if (!Main.tile[l, m].active() || (int)Main.tile[l, m].type != type || (int)Main.tile[l, m].frameX != (l - num4) * 18 + num3 * 36 || (int)Main.tile[l, m].frameY != (m - num5) * 18 + num * 36)
					{
						flag = true;
					}
				}
				if (!Main.tile[l, num5 + 2].nactive())
				{
					flag = true;
				}
				else if (!Main.tileSolid[(int)Main.tile[l, num5 + 2].type] && !Main.tileTable[(int)Main.tile[l, num5 + 2].type])
				{
					flag = true;
				}
			}
			if (flag)
			{
				WorldGen.destroyObject = true;
				for (int n = num4; n < num4 + 2; n++)
				{
					for (int num6 = num5; num6 < num5 + 3; num6++)
					{
						if ((int)Main.tile[n, num6].type == type && Main.tile[n, num6].active())
						{
							WorldGen.KillTile(n, num6, false, false, false);
						}
					}
				}
				if (type == 35)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 1813, 1, false, 0, false, false);
				}
				else if (num == 28)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 1963, 1, false, 0, false, false);
				}
				else if (num == 29)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 1964, 1, false, 0, false, false);
				}
				else if (num == 30)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 1965, 1, false, 0, false, false);
				}
				else if (num == 31)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 2742, 1, false, 0, false, false);
				}
				else if (num == 32)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 3044, 1, false, 0, false, false);
				}
				else if (num == 33)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 3235, 1, false, 0, false, false);
				}
				else if (num == 34)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 3236, 1, false, 0, false, false);
				}
				else if (num == 35)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 3237, 1, false, 0, false, false);
				}
				else if (num == 36)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 3370, 1, false, 0, false, false);
				}
				else if (num == 37)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 3371, 1, false, 0, false, false);
				}
				else if (num == 38)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 3796, 1, false, 0, false, false);
				}
				else if (num == 39)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 3869, 1, false, 0, false, false);
				}
				else if (num == 43)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 4077, 1, false, 0, false, false);
				}
				else if (num == 41)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 4078, 1, false, 0, false, false);
				}
				else if (num == 42)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 4079, 1, false, 0, false, false);
				}
				else if (num == 44)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 4080, 1, false, 0, false, false);
				}
				else if (num == 45)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 4081, 1, false, 0, false, false);
				}
				else if (num == 40)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 4082, 1, false, 0, false, false);
				}
				else if (num == 46)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 4237, 1, false, 0, false, false);
				}
				else if (num == 47)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 4356, 1, false, 0, false, false);
				}
				else if (num == 48)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 4357, 1, false, 0, false, false);
				}
				else if (num == 49)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 4358, 1, false, 0, false, false);
				}
				else if (num == 50)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 4421, 1, false, 0, false, false);
				}
				else if (num == 51)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 4606, 1, false, 0, false, false);
				}
				else if (num == 52)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 4979, 1, false, 0, false, false);
				}
				else if (num == 53)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 4985, 1, false, 0, false, false);
				}
				else if (num == 54)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 4990, 1, false, 0, false, false);
				}
				else if (num == 55)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 4991, 1, false, 0, false, false);
				}
				else if (num == 56)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 4992, 1, false, 0, false, false);
				}
				else if (num == 57)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 5006, 1, false, 0, false, false);
				}
				else if (num == 58)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 5014, 1, false, 0, false, false);
				}
				else if (num == 59)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 5015, 1, false, 0, false, false);
				}
				else if (num == 60)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 5016, 1, false, 0, false, false);
				}
				else if (num == 61)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 5017, 1, false, 0, false, false);
				}
				else if (num == 62)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 5018, 1, false, 0, false, false);
				}
				else if (num == 63)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 5019, 1, false, 0, false, false);
				}
				else if (num == 64)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 5020, 1, false, 0, false, false);
				}
				else if (num == 65)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 5021, 1, false, 0, false, false);
				}
				else if (num == 66)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 5022, 1, false, 0, false, false);
				}
				else if (num == 67)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 5023, 1, false, 0, false, false);
				}
				else if (num == 68)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 5024, 1, false, 0, false, false);
				}
				else if (num == 69)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 5025, 1, false, 0, false, false);
				}
				else if (num == 70)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 5026, 1, false, 0, false, false);
				}
				else if (num == 71)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 5027, 1, false, 0, false, false);
				}
				else if (num == 72)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 5028, 1, false, 0, false, false);
				}
				else if (num == 73)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 5029, 1, false, 0, false, false);
				}
				else if (num == 74)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 5030, 1, false, 0, false, false);
				}
				else if (num == 75)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 5031, 1, false, 0, false, false);
				}
				else if (num == 76)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 5032, 1, false, 0, false, false);
				}
				else if (num == 77)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 5033, 1, false, 0, false, false);
				}
				else if (num == 78)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 5034, 1, false, 0, false, false);
				}
				else if (num == 79)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 5035, 1, false, 0, false, false);
				}
				else if (num == 80)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 5036, 1, false, 0, false, false);
				}
				else if (num == 81)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 5037, 1, false, 0, false, false);
				}
				else if (num == 82)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 5038, 1, false, 0, false, false);
				}
				else if (num == 83)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 5039, 1, false, 0, false, false);
				}
				else if (num == 84)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 5040, 1, false, 0, false, false);
				}
				else if (num == 85)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 5044, 1, false, 0, false, false);
				}
				else if (num == 86)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 5112, 1, false, 0, false, false);
				}
				else if (num == 87)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 5362, 1, false, 0, false, false);
				}
				else if (num >= 13)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 1596 + num - 13, 1, false, 0, false, false);
				}
				else
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 562 + num, 1, false, 0, false, false);
				}
				for (int num7 = num4 - 1; num7 < num4 + 3; num7++)
				{
					for (int num8 = num5 - 1; num8 < num5 + 3; num8++)
					{
						WorldGen.TileFrame(num7, num8, false, false);
					}
				}
				WorldGen.destroyObject = false;
			}
		}

		// Token: 0x06000F47 RID: 3911 RVA: 0x0043D4C8 File Offset: 0x0043B6C8
		public static void PlaceMB(int X, int y, ushort type, int style)
		{
			int num = X + 1;
			if (num < 5 || num > Main.maxTilesX - 5 || y < 5 || y > Main.maxTilesY - 5)
			{
				return;
			}
			bool flag = true;
			for (int i = num - 1; i < num + 1; i++)
			{
				for (int j = y - 1; j < y + 1; j++)
				{
					if (Main.tile[i, j] == null)
					{
						Main.tile[i, j] = new Tile();
					}
					if (Main.tile[i, j].active())
					{
						flag = false;
					}
				}
				if (Main.tile[i, y + 1] == null)
				{
					Main.tile[i, y + 1] = new Tile();
				}
				if (!Main.tile[i, y + 1].active() || Main.tile[i, y + 1].halfBrick() || (!Main.tileSolid[(int)Main.tile[i, y + 1].type] && !Main.tileTable[(int)Main.tile[i, y + 1].type]))
				{
					flag = false;
				}
			}
			if (flag)
			{
				Main.tile[num - 1, y - 1].active(true);
				Main.tile[num - 1, y - 1].frameY = (short)(style * 36);
				Main.tile[num - 1, y - 1].frameX = 0;
				Main.tile[num - 1, y - 1].type = type;
				Main.tile[num, y - 1].active(true);
				Main.tile[num, y - 1].frameY = (short)(style * 36);
				Main.tile[num, y - 1].frameX = 18;
				Main.tile[num, y - 1].type = type;
				Main.tile[num - 1, y].active(true);
				Main.tile[num - 1, y].frameY = (short)(style * 36 + 18);
				Main.tile[num - 1, y].frameX = 0;
				Main.tile[num - 1, y].type = type;
				Main.tile[num, y].active(true);
				Main.tile[num, y].frameY = (short)(style * 36 + 18);
				Main.tile[num, y].frameX = 18;
				Main.tile[num, y].type = type;
			}
		}

		// Token: 0x06000F48 RID: 3912 RVA: 0x0043D738 File Offset: 0x0043B938
		public static void Place2x2(int x, int y, ushort type, int style)
		{
			if (type == 95 || type == 126)
			{
				y++;
			}
			if (x < 5 || x > Main.maxTilesX - 5 || y < 5 || y > Main.maxTilesY - 5)
			{
				return;
			}
			if (type == 172)
			{
				if (!WorldGen.CanPlaceSink(x, y, type, style))
				{
					return;
				}
			}
			else
			{
				for (int i = x - 1; i < x + 1; i++)
				{
					for (int j = y - 1; j < y + 1; j++)
					{
						Tile tile = Framing.GetTileSafely(i, j);
						if (tile.active())
						{
							return;
						}
						if (type == 98 && tile.liquid > 0)
						{
							return;
						}
					}
					if (type == 95 || type == 126)
					{
						Tile tile = Framing.GetTileSafely(i, y - 2);
						if (!tile.nactive() || !Main.tileSolid[(int)tile.type] || Main.tileSolidTop[(int)tile.type])
						{
							return;
						}
					}
					else if (type != 132)
					{
						Tile tile = Framing.GetTileSafely(i, y + 1);
						if (!tile.nactive() || (!WorldGen.SolidTile2(tile) && !Main.tileTable[(int)tile.type]))
						{
							return;
						}
					}
				}
			}
			if (type == 132)
			{
				bool flag = true;
				if (Main.tile[x - 1, y + 1] == null)
				{
					Main.tile[x - 1, y + 1] = new Tile();
				}
				if (Main.tile[x, y + 1] == null)
				{
					Main.tile[x, y + 1] = new Tile();
				}
				if (!Main.tile[x - 1, y + 1].nactive() || (!WorldGen.SolidTile2(x - 1, y + 1) && !Main.tileTable[(int)Main.tile[x - 1, y + 1].type]))
				{
					flag = false;
				}
				if (!Main.tile[x, y + 1].nactive() || (!WorldGen.SolidTile2(x, y + 1) && !Main.tileTable[(int)Main.tile[x, y + 1].type]))
				{
					flag = false;
				}
				if (!flag && (Main.tile[x - 1, y - 1].wall < 1 || Main.tile[x, y - 1].wall < 1 || Main.tile[x - 1, y].wall < 1 || Main.tile[x - 1, y].wall < 1))
				{
					return;
				}
			}
			x--;
			y--;
			int num = (type == 172) ? 38 : 36;
			for (int k = 0; k < 2; k++)
			{
				for (int l = 0; l < 2; l++)
				{
					Tile tile = Main.tile[x + k, y + l];
					tile.active(true);
					tile.frameX = (short)(k * 18);
					tile.frameY = (short)(style * num + l * 18);
					tile.type = type;
				}
			}
		}

		// Token: 0x06000F49 RID: 3913 RVA: 0x0043D9E8 File Offset: 0x0043BBE8
		public static bool PlaceObject(int x, int y, int type, bool mute = false, int style = 0, int alternate = 0, int random = -1, int direction = -1)
		{
			if (type >= (int)TileID.Count)
			{
				return false;
			}
			TileObject toBePlaced;
			if (!TileObject.CanPlace(x, y, type, style, direction, out toBePlaced, false, null))
			{
				return false;
			}
			toBePlaced.random = random;
			if (TileObject.Place(toBePlaced))
			{
				WorldGen.SquareTileFrame(x, y, true);
				if (!mute)
				{
					SoundEngine.PlaySound(0, x * 16, y * 16, 1, 1f, 0f);
				}
			}
			return true;
		}

		// Token: 0x06000F4A RID: 3914 RVA: 0x0043DA54 File Offset: 0x0043BC54
		public static bool ShiftTrapdoor(int x, int y, bool playerAbove, int onlyCloseOrOpen = -1)
		{
			Tile tileSafely = Framing.GetTileSafely(x, y);
			if (tileSafely.type == 386 && onlyCloseOrOpen != 1)
			{
				Point topLeftAndStyles = WorldGen.GetTopLeftAndStyles(ref x, ref y, 2, 2, 18, 18);
				if (topLeftAndStyles.X == 0)
				{
					if (Main.netMode != 1 && Wiring.running)
					{
						Wiring.SkipWire(x, y);
						Wiring.SkipWire(x, y + 1);
						Wiring.SkipWire(x + 1, y);
						Wiring.SkipWire(x + 1, y + 1);
					}
					if (!Collision.EmptyTile(x, y + 1, true) || !Collision.EmptyTile(x + 1, y + 1, true))
					{
						return false;
					}
					SoundEngine.PlaySound(8, x * 16 + 16, y * 16 + 16, 1, 1f, 0f);
					for (int i = 0; i < 2; i++)
					{
						tileSafely = Framing.GetTileSafely(x + i, y);
						tileSafely.ClearTile();
					}
					for (int j = 0; j < 2; j++)
					{
						tileSafely = Framing.GetTileSafely(x + j, y + 1);
						tileSafely.type = 387;
						tileSafely.frameX = (short)(j * 18);
						tileSafely.frameY = (short)(topLeftAndStyles.Y * 18);
					}
					for (int k = -1; k < 3; k++)
					{
						for (int l = 0; l < 3; l++)
						{
							WorldGen.TileFrame(x + k, y + l, false, false);
						}
					}
					return true;
				}
				else if (topLeftAndStyles.X == 1)
				{
					if (Main.netMode != 1 && Wiring.running)
					{
						Wiring.SkipWire(x, y - 1);
						Wiring.SkipWire(x, y);
						Wiring.SkipWire(x + 1, y - 1);
						Wiring.SkipWire(x + 1, y);
					}
					if (!Collision.EmptyTile(x, y, true) || !Collision.EmptyTile(x + 1, y, true))
					{
						return false;
					}
					SoundEngine.PlaySound(8, x * 16 + 16, y * 16, 1, 1f, 0f);
					for (int m = 0; m < 2; m++)
					{
						tileSafely = Framing.GetTileSafely(x + m, y + 1);
						tileSafely.ClearTile();
					}
					for (int n = 0; n < 2; n++)
					{
						tileSafely = Framing.GetTileSafely(x + n, y);
						tileSafely.type = 387;
						tileSafely.frameX = (short)(n * 18);
						tileSafely.frameY = (short)(topLeftAndStyles.Y * 18);
					}
					for (int num = -1; num < 3; num++)
					{
						for (int num2 = -1; num2 < 2; num2++)
						{
							WorldGen.TileFrame(x + num, y + num2, false, false);
						}
					}
					return true;
				}
			}
			if (tileSafely.type == 387 && onlyCloseOrOpen != 0)
			{
				WorldGen.GetTopLeftAndStyles(ref x, ref y, 2, 1, 18, 18);
				int num3 = playerAbove.ToDirectionInt();
				for (int num4 = 0; num4 < 2; num4++)
				{
					tileSafely = Framing.GetTileSafely(x + num4, y + num3);
					if (tileSafely.active() && !Main.tileCut[(int)tileSafely.type])
					{
						return false;
					}
				}
				if (Main.netMode != 1 && Wiring.running)
				{
					Wiring.SkipWire(x, y);
					Wiring.SkipWire(x, y + num3);
					Wiring.SkipWire(x + 1, y);
					Wiring.SkipWire(x + 1, y + num3);
				}
				SoundEngine.PlaySound(8, x * 16 + 16, y * 16, 1, 1f, 0f);
				for (int num5 = 0; num5 < 2; num5++)
				{
					tileSafely = Framing.GetTileSafely(x + num5, y + num3);
					if (tileSafely.active() && Main.tileCut[(int)tileSafely.type])
					{
						WorldGen.KillTile(x + num5, y + num3, false, false, false);
					}
				}
				for (int num6 = 0; num6 < 2; num6++)
				{
					tileSafely = Framing.GetTileSafely(x + num6, y);
					TileColorCache cache = tileSafely.BlockColorAndCoating();
					for (int num7 = 0; num7 < 2; num7++)
					{
						tileSafely = Framing.GetTileSafely(x + num6, y + num7 - (!playerAbove).ToInt());
						tileSafely.type = 386;
						tileSafely.frameX = (short)(num6 * 18 + playerAbove.ToInt() * 36);
						tileSafely.frameY = (short)(num7 * 18);
						tileSafely.UseBlockColors(cache);
						tileSafely.active(true);
					}
				}
				for (int num8 = -1; num8 < 3; num8++)
				{
					for (int num9 = -1; num9 < 3; num9++)
					{
						WorldGen.TileFrame(x + num8, y + num9 - (!playerAbove).ToInt() * 2, false, false);
					}
				}
				return true;
			}
			SoundEngine.PlaySound(9, x * 16, y * 16, 1, 1f, 0f);
			return false;
		}

		// Token: 0x06000F4B RID: 3915 RVA: 0x0043DE7C File Offset: 0x0043C07C
		public static void CheckTrapDoor(int x, int y, int type)
		{
			if (WorldGen.destroyObject)
			{
				return;
			}
			bool flag = false;
			int num = 0;
			int num2 = 0;
			Point point = default(Point);
			if (type == 387)
			{
				num = 2;
				num2 = 1;
				point = WorldGen.GetTopLeftAndStyles(ref x, ref y, num, num2, 18, 18);
				flag = (flag || !WorldGen.CheckTileFrames(type, x, y, num, num2, point.X, 18, point.Y, 18) || !WorldGen.CheckTileAnchors(x, y, num, num2, 1, AnchorType.SolidTile));
			}
			if (type == 386)
			{
				num = 2;
				num2 = 2;
				point = WorldGen.GetTopLeftAndStyles(ref x, ref y, num, num2, 18, 18);
				flag = (flag || !WorldGen.CheckTileFrames(type, x, y, num, num2, point.X, 18, point.Y, 18));
				if (point.X == 0)
				{
					flag = (flag || !WorldGen.CheckTileAnchors(x, y + 1, num, 1, 1, AnchorType.SolidTile));
				}
				else if (point.X == 1)
				{
					flag = (flag || !WorldGen.CheckTileAnchors(x, y, num, 1, 1, AnchorType.SolidTile));
				}
			}
			if (!flag)
			{
				return;
			}
			WorldGen.destroyObject = true;
			for (int i = x; i < x + num; i++)
			{
				for (int j = y; j < y + num2; j++)
				{
					WorldGen.KillTile(i, j, false, false, false);
				}
			}
			int type2 = 3239;
			if (point.Y == 0)
			{
				type2 = 3239;
			}
			Item.NewItem(WorldGen.GetItemSource_FromTileBreak(x, y), x * 16, y * 16, num * 16, num2 * 16, type2, 1, false, 0, false, false);
			for (int k = x - 1; k < x + num + 1; k++)
			{
				for (int l = y - 1; l < y + num2 + 1; l++)
				{
					WorldGen.TileFrame(k, l, false, false);
				}
			}
			WorldGen.destroyObject = false;
		}

		// Token: 0x06000F4C RID: 3916 RVA: 0x0043E024 File Offset: 0x0043C224
		public static void CheckTallGate(int x, int y, int type)
		{
			if (WorldGen.destroyObject)
			{
				return;
			}
			bool flag = false;
			Tile tileSafely = Framing.GetTileSafely(x, y);
			Point point = new Point((int)(tileSafely.frameX / 18), 0);
			TileObjectData tileData = TileObjectData.GetTileData(type, point.X, 0);
			point.Y = (int)tileSafely.frameY / tileData.CoordinateFullHeight;
			int width = tileData.Width;
			int height = tileData.Height;
			int num = 0;
			int num2 = (int)tileSafely.frameY % tileData.CoordinateFullHeight;
			while (num < height && num2 - tileData.CoordinateHeights[num] >= 0)
			{
				num2 -= tileData.CoordinateHeights[num];
				num++;
			}
			int coordinateFullHeight = tileData.CoordinateFullHeight;
			y -= num;
			int num3 = point.Y * tileData.CoordinateFullHeight;
			for (int i = 0; i < height; i++)
			{
				tileSafely = Framing.GetTileSafely(x, y + i);
				if ((int)tileSafely.frameX != point.X * tileData.CoordinateFullWidth || (int)tileSafely.frameY != num3)
				{
					flag = true;
					break;
				}
				num3 += tileData.CoordinateHeights[i] + tileData.CoordinatePadding;
			}
			if (!flag && WorldGen.CheckTileAnchors(x, y, width, height, 2, AnchorType.SolidTile))
			{
				return;
			}
			WorldGen.destroyObject = true;
			for (int j = x; j < x + width; j++)
			{
				for (int k = y; k < y + height; k++)
				{
					WorldGen.KillTile(j, k, false, false, false);
				}
			}
			int type2 = 3240;
			if (point.Y == 0)
			{
				type2 = 3240;
			}
			Item.NewItem(WorldGen.GetItemSource_FromTileBreak(x, y), x * 16, y * 16, width * 16, height * 16, type2, 1, false, 0, false, false);
			for (int l = x - 1; l < x + width + 1; l++)
			{
				for (int m = y - 1; m < y + height + 1; m++)
				{
					WorldGen.TileFrame(l, m, false, false);
				}
			}
			WorldGen.destroyObject = false;
		}

		// Token: 0x06000F4D RID: 3917 RVA: 0x0043E204 File Offset: 0x0043C404
		public static bool ShiftTallGate(int x, int y, bool closing, bool forced = false)
		{
			ushort type = closing ? 388 : 389;
			ushort num = closing ? 389 : 388;
			Tile tileSafely = Framing.GetTileSafely(x, y);
			if (tileSafely.type != num)
			{
				return false;
			}
			Point point = new Point((int)(tileSafely.frameX / 18), 0);
			TileObjectData tileData = TileObjectData.GetTileData(388, point.X, 0);
			point.Y = (int)tileSafely.frameY / tileData.CoordinateFullHeight;
			int width = tileData.Width;
			int height = tileData.Height;
			int num2 = 0;
			int num3 = (int)tileSafely.frameY % tileData.CoordinateFullHeight;
			while (num2 < height && num3 - tileData.CoordinateHeights[num2] >= 0)
			{
				num3 -= tileData.CoordinateHeights[num2];
				num2++;
			}
			int coordinateFullHeight = tileData.CoordinateFullHeight;
			y -= num2;
			if (Main.netMode != 1 && Wiring.running)
			{
				for (int i = 0; i < height; i++)
				{
					Wiring.SkipWire(x, y + i);
				}
			}
			for (int j = 0; j < height; j++)
			{
				if (!forced && !Collision.EmptyTile(x, y + j, true))
				{
					return false;
				}
			}
			SoundEngine.PlaySound(8, x * 16 + 16, y * 16 + 16, 1, 1f, 0f);
			for (int k = 0; k < height; k++)
			{
				tileSafely = Framing.GetTileSafely(x, y + k);
				tileSafely.type = type;
			}
			for (int l = -1; l < 2; l++)
			{
				for (int m = -1; m < height + 1; m++)
				{
					WorldGen.TileFrame(x + l, y + m, false, false);
				}
			}
			return true;
		}

		// Token: 0x06000F4E RID: 3918 RVA: 0x0043E3A0 File Offset: 0x0043C5A0
		public static Point GetTopLeftAndStyles(ref int x, ref int y, int w, int h, int frameXinc, int frameYinc)
		{
			Tile tileSafely = Framing.GetTileSafely(x, y);
			Point result = new Point((int)tileSafely.frameX / (w * frameXinc), (int)tileSafely.frameY / (h * frameYinc));
			if (frameXinc != 0)
			{
				x -= (int)tileSafely.frameX / frameXinc % w;
			}
			if (frameYinc != 0)
			{
				y -= (int)tileSafely.frameY / frameYinc % h;
			}
			return result;
		}

		// Token: 0x06000F4F RID: 3919 RVA: 0x0043E3FC File Offset: 0x0043C5FC
		public static bool CheckTileFrames(int type, int sx, int sy, int w, int h, int styleX, int frameXinc, int styleY, int frameYinc)
		{
			for (int i = 0; i < w; i++)
			{
				for (int j = 0; j < h; j++)
				{
					Tile tileSafely = Framing.GetTileSafely(sx + i, sy + j);
					if (!tileSafely.active() || (int)tileSafely.type != type || (int)tileSafely.frameX != styleX * w * frameXinc + i * frameXinc || (int)tileSafely.frameY != styleY * h * frameYinc + j * frameYinc)
					{
						return false;
					}
				}
			}
			return true;
		}

		// Token: 0x06000F50 RID: 3920 RVA: 0x0043E46C File Offset: 0x0043C66C
		public static bool CheckTileAnchors(int sx, int sy, int w, int h, int mode, AnchorType anchor)
		{
			if ((mode & 1) == 1)
			{
				for (int i = sy; i < sy + h; i++)
				{
					if (!WorldGen.AnchorValid(Framing.GetTileSafely(sx - 1, i), anchor))
					{
						return false;
					}
					if (!WorldGen.AnchorValid(Framing.GetTileSafely(sx + w, i), anchor))
					{
						return false;
					}
				}
			}
			if ((mode & 2) == 2)
			{
				for (int j = sx; j < sx + w; j++)
				{
					if (!WorldGen.AnchorValid(Framing.GetTileSafely(j, sy - 1), anchor))
					{
						return false;
					}
					if (!WorldGen.AnchorValid(Framing.GetTileSafely(j, sy + h), anchor))
					{
						return false;
					}
				}
			}
			return true;
		}

		// Token: 0x06000F51 RID: 3921 RVA: 0x0043E4F4 File Offset: 0x0043C6F4
		public static bool AnchorValid(Tile tileCache, AnchorType anchor)
		{
			bool flag = false;
			if (tileCache.nactive())
			{
				if ((anchor & AnchorType.SolidTile) == AnchorType.SolidTile && Main.tileSolid[(int)tileCache.type] && !Main.tileSolidTop[(int)tileCache.type] && !Main.tileNoAttach[(int)tileCache.type] && tileCache.blockType() == 0)
				{
					flag = true;
				}
				if ((anchor & AnchorType.SolidBottom) == AnchorType.SolidBottom && ((Main.tileSolid[(int)tileCache.type] && (!Main.tileSolidTop[(int)tileCache.type] || (TileID.Sets.Platforms[(int)tileCache.type] && (tileCache.halfBrick() || tileCache.topSlope())))) || tileCache.topSlope() || tileCache.halfBrick()) && !TileID.Sets.NotReallySolid[(int)tileCache.type] && !tileCache.bottomSlope())
				{
					flag = true;
				}
				if (!flag && ((anchor & AnchorType.SolidWithTop) == AnchorType.SolidWithTop || (anchor & AnchorType.Table) == AnchorType.Table))
				{
					if (TileID.Sets.Platforms[(int)tileCache.type])
					{
						int num = (int)tileCache.frameX / TileObjectData.PlatformFrameWidth();
						if ((!tileCache.halfBrick() && num >= 0 && num <= 7) || (num >= 12 && num <= 16) || (num >= 25 && num <= 26))
						{
							flag = true;
						}
					}
					else if (Main.tileSolid[(int)tileCache.type] && Main.tileSolidTop[(int)tileCache.type])
					{
						flag = true;
					}
				}
				if (!flag && (anchor & AnchorType.Table) == AnchorType.Table && !TileID.Sets.Platforms[(int)tileCache.type] && Main.tileTable[(int)tileCache.type] && tileCache.blockType() == 0)
				{
					flag = true;
				}
				if (!flag && (anchor & AnchorType.SolidSide) == AnchorType.SolidSide && Main.tileSolid[(int)tileCache.type] && !Main.tileSolidTop[(int)tileCache.type])
				{
					int num2 = tileCache.blockType();
					if (num2 - 4 <= 1)
					{
						flag = true;
					}
				}
			}
			else if (!flag && (anchor & AnchorType.EmptyTile) == AnchorType.EmptyTile)
			{
				flag = true;
			}
			return flag;
		}

		// Token: 0x06000F52 RID: 3922 RVA: 0x0043E69C File Offset: 0x0043C89C
		public static bool CanPlaceSink(int x, int y, ushort type, int style)
		{
			if (x < 5 || x > Main.maxTilesX - 5 || y < 5 || y > Main.maxTilesY - 5)
			{
				return false;
			}
			bool result = true;
			x--;
			y--;
			for (int i = 0; i < 2; i++)
			{
				Tile tileSafely;
				for (int j = 0; j < 2; j++)
				{
					tileSafely = Framing.GetTileSafely(x + i, y + j);
					if (tileSafely.active())
					{
						result = false;
					}
				}
				tileSafely = Framing.GetTileSafely(x + i, y + 2);
				if (!tileSafely.nactive() || !WorldGen.SolidTile(tileSafely))
				{
					result = false;
				}
			}
			return result;
		}

		// Token: 0x06000F53 RID: 3923 RVA: 0x0043E720 File Offset: 0x0043C920
		public static void Place3x4(int x, int y, ushort type, int style)
		{
			if (x < 5 || x > Main.maxTilesX - 5 || y < 5 || y > Main.maxTilesY - 5)
			{
				return;
			}
			bool flag = true;
			for (int i = x - 1; i < x + 2; i++)
			{
				for (int j = y - 3; j < y + 1; j++)
				{
					if (Main.tile[i, j] == null)
					{
						Main.tile[i, j] = new Tile();
					}
					if (Main.tile[i, j].active())
					{
						flag = false;
					}
				}
				if (Main.tile[i, y + 1] == null)
				{
					Main.tile[i, y + 1] = new Tile();
				}
				if (!WorldGen.SolidTile2(i, y + 1))
				{
					flag = false;
				}
			}
			if (flag)
			{
				int num = style * 54;
				for (int k = -3; k <= 0; k++)
				{
					short frameY = (short)((3 + k) * 18);
					Main.tile[x - 1, y + k].active(true);
					Main.tile[x - 1, y + k].frameY = frameY;
					Main.tile[x - 1, y + k].frameX = (short)num;
					Main.tile[x - 1, y + k].type = type;
					Main.tile[x, y + k].active(true);
					Main.tile[x, y + k].frameY = frameY;
					Main.tile[x, y + k].frameX = (short)(num + 18);
					Main.tile[x, y + k].type = type;
					Main.tile[x + 1, y + k].active(true);
					Main.tile[x + 1, y + k].frameY = frameY;
					Main.tile[x + 1, y + k].frameX = (short)(num + 36);
					Main.tile[x + 1, y + k].type = type;
				}
			}
		}

		// Token: 0x06000F54 RID: 3924 RVA: 0x0043E914 File Offset: 0x0043CB14
		public static void Place5x4(int x, int y, ushort type, int style)
		{
			if (x < 5 || x > Main.maxTilesX - 5 || y < 5 || y > Main.maxTilesY - 5)
			{
				return;
			}
			bool flag = true;
			for (int i = x - 2; i < x + 3; i++)
			{
				for (int j = y - 3; j < y + 1; j++)
				{
					if (Main.tile[i, j] == null)
					{
						Main.tile[i, j] = new Tile();
					}
					if (Main.tile[i, j].active())
					{
						flag = false;
					}
				}
				if (Main.tile[i, y + 1] == null)
				{
					Main.tile[i, y + 1] = new Tile();
				}
				if (!WorldGen.SolidTile2(i, y + 1))
				{
					flag = false;
				}
			}
			if (flag)
			{
				int num = style * 54;
				for (int k = -3; k <= 0; k++)
				{
					short frameY = (short)((3 + k) * 18);
					Main.tile[x - 2, y + k].active(true);
					Main.tile[x - 2, y + k].frameY = frameY;
					Main.tile[x - 2, y + k].frameX = (short)(num - 36);
					Main.tile[x - 2, y + k].type = type;
					Main.tile[x - 1, y + k].active(true);
					Main.tile[x - 1, y + k].frameY = frameY;
					Main.tile[x - 1, y + k].frameX = (short)(num - 18);
					Main.tile[x - 1, y + k].type = type;
					Main.tile[x, y + k].active(true);
					Main.tile[x, y + k].frameY = frameY;
					Main.tile[x, y + k].frameX = (short)num;
					Main.tile[x, y + k].type = type;
					Main.tile[x + 1, y + k].active(true);
					Main.tile[x + 1, y + k].frameY = frameY;
					Main.tile[x + 1, y + k].frameX = (short)(num + 18);
					Main.tile[x + 1, y + k].type = type;
					Main.tile[x + 1, y + k].active(true);
					Main.tile[x + 1, y + k].frameY = frameY;
					Main.tile[x + 1, y + k].frameX = (short)(num + 36);
					Main.tile[x + 1, y + k].type = type;
				}
			}
		}

		// Token: 0x06000F55 RID: 3925 RVA: 0x0043EBCC File Offset: 0x0043CDCC
		public static void Place3x1(int x, int y, ushort type, int style = 0)
		{
			if (x < 5 || x > Main.maxTilesX - 5 || y < 5 || y > Main.maxTilesY - 5)
			{
				return;
			}
			bool flag = true;
			for (int i = x - 1; i < x + 2; i++)
			{
				if (Main.tile[i, y] == null)
				{
					Main.tile[i, y] = new Tile();
				}
				if (Main.tile[i, y].active())
				{
					flag = false;
				}
				if (Main.tile[i, y + 1] == null)
				{
					Main.tile[i, y + 1] = new Tile();
				}
				if (!WorldGen.SolidTile2(i, y + 1))
				{
					flag = false;
				}
			}
			if (flag)
			{
				short num = (short)(54 * style);
				Main.tile[x - 1, y].active(true);
				Main.tile[x - 1, y].frameY = 0;
				Main.tile[x - 1, y].frameX = num;
				Main.tile[x - 1, y].type = type;
				Main.tile[x, y].active(true);
				Main.tile[x, y].frameY = 0;
				Main.tile[x, y].frameX = num + 18;
				Main.tile[x, y].type = type;
				Main.tile[x + 1, y].active(true);
				Main.tile[x + 1, y].frameY = 0;
				Main.tile[x + 1, y].frameX = num + 36;
				Main.tile[x + 1, y].type = type;
			}
		}

		// Token: 0x06000F56 RID: 3926 RVA: 0x0043ED6C File Offset: 0x0043CF6C
		public static void Place3x2(int x, int y, ushort type, int style = 0)
		{
			if (x < 5 || x > Main.maxTilesX - 5 || y < 5 || y > Main.maxTilesY - 5)
			{
				return;
			}
			bool flag = false;
			bool flag2 = true;
			if (type == 14 && style == 25)
			{
				flag = true;
			}
			int num = y - 1;
			if (flag)
			{
				num = y;
			}
			for (int i = x - 1; i < x + 2; i++)
			{
				for (int j = num; j < y + 1; j++)
				{
					if (Main.tile[i, j] == null)
					{
						Main.tile[i, j] = new Tile();
					}
					if (Main.tile[i, j].active())
					{
						flag2 = false;
					}
					if (type == 215 && Main.tile[i, j].liquid > 0)
					{
						flag2 = false;
					}
				}
				if (Main.tile[i, y + 1] == null)
				{
					Main.tile[i, y + 1] = new Tile();
				}
				if (type == 285 || type == 286 || type == 298 || type == 299 || type == 310 || (type >= 361 && type <= 364) || type == 582 || type == 619)
				{
					if (!WorldGen.SolidTile2(i, y + 1) && (!Main.tile[i, y + 1].nactive() || !Main.tileSolidTop[(int)Main.tile[i, y + 1].type] || Main.tile[i, y + 1].frameY != 0))
					{
						flag2 = false;
					}
				}
				else
				{
					if (type == 26 && TileID.Sets.Boulders[(int)Main.tile[i, y + 1].type])
					{
						flag2 = false;
					}
					if (!WorldGen.SolidTile2(i, y + 1))
					{
						flag2 = false;
					}
				}
			}
			if (type == 88)
			{
				if (Chest.CreateChest(x - 1, y - 1, -1) == -1)
				{
					flag2 = false;
				}
				else if (Main.netMode == 1)
				{
					NetMessage.SendData(34, -1, -1, null, 2, (float)x, (float)y, (float)style, 0, 0, 0);
				}
			}
			if (flag2)
			{
				short num2 = (short)(54 * style);
				if (flag)
				{
					Main.tile[x - 1, y].active(true);
					Main.tile[x - 1, y].frameY = 0;
					Main.tile[x - 1, y].frameX = num2;
					Main.tile[x - 1, y].type = type;
					Main.tile[x, y].active(true);
					Main.tile[x, y].frameY = 0;
					Main.tile[x, y].frameX = num2 + 18;
					Main.tile[x, y].type = type;
					Main.tile[x + 1, y].active(true);
					Main.tile[x + 1, y].frameY = 0;
					Main.tile[x + 1, y].frameX = num2 + 36;
					Main.tile[x + 1, y].type = type;
					return;
				}
				Main.tile[x - 1, y - 1].active(true);
				Main.tile[x - 1, y - 1].frameY = 0;
				Main.tile[x - 1, y - 1].frameX = num2;
				Main.tile[x - 1, y - 1].type = type;
				Main.tile[x, y - 1].active(true);
				Main.tile[x, y - 1].frameY = 0;
				Main.tile[x, y - 1].frameX = num2 + 18;
				Main.tile[x, y - 1].type = type;
				Main.tile[x + 1, y - 1].active(true);
				Main.tile[x + 1, y - 1].frameY = 0;
				Main.tile[x + 1, y - 1].frameX = num2 + 36;
				Main.tile[x + 1, y - 1].type = type;
				Main.tile[x - 1, y].active(true);
				Main.tile[x - 1, y].frameY = 18;
				Main.tile[x - 1, y].frameX = num2;
				Main.tile[x - 1, y].type = type;
				Main.tile[x, y].active(true);
				Main.tile[x, y].frameY = 18;
				Main.tile[x, y].frameX = num2 + 18;
				Main.tile[x, y].type = type;
				Main.tile[x + 1, y].active(true);
				Main.tile[x + 1, y].frameY = 18;
				Main.tile[x + 1, y].frameX = num2 + 36;
				Main.tile[x + 1, y].type = type;
			}
		}

		// Token: 0x06000F57 RID: 3927 RVA: 0x0043F258 File Offset: 0x0043D458
		public static void Place2x2Style(int x, int y, ushort type, int style = 0)
		{
			if (x < 5 || x > Main.maxTilesX - 5 || y < 5 || y > Main.maxTilesY - 5)
			{
				return;
			}
			short num = 0;
			if (type == 254)
			{
				num = (short)(x % 12 / 2);
				num *= 36;
			}
			bool flag = true;
			for (int i = x - 1; i < x + 1; i++)
			{
				for (int j = y - 1; j < y + 1; j++)
				{
					if (Main.tile[i, j] == null)
					{
						Main.tile[i, j] = new Tile();
					}
					if (Main.tile[i, j].active())
					{
						flag = false;
					}
				}
				if (Main.tile[i, y + 1] == null)
				{
					Main.tile[i, y + 1] = new Tile();
				}
				if (!WorldGen.SolidTile(i, y + 1, false))
				{
					flag = false;
				}
				if (type == 254 && Main.tile[i, y + 1].type != 2 && Main.tile[i, y + 1].type != 477 && Main.tile[i, y + 1].type != 492 && Main.tile[i, y + 1].type != 109)
				{
					flag = false;
				}
			}
			if (flag)
			{
				short num2 = (short)(36 * style);
				Main.tile[x - 1, y - 1].active(true);
				Main.tile[x - 1, y - 1].frameY = num;
				Main.tile[x - 1, y - 1].frameX = num2;
				Main.tile[x - 1, y - 1].type = type;
				Main.tile[x, y - 1].active(true);
				Main.tile[x, y - 1].frameY = num;
				Main.tile[x, y - 1].frameX = num2 + 18;
				Main.tile[x, y - 1].type = type;
				Main.tile[x - 1, y].active(true);
				Main.tile[x - 1, y].frameY = num + 18;
				Main.tile[x - 1, y].frameX = num2;
				Main.tile[x - 1, y].type = type;
				Main.tile[x, y].active(true);
				Main.tile[x, y].frameY = num + 18;
				Main.tile[x, y].frameX = num2 + 18;
				Main.tile[x, y].type = type;
			}
		}

		// Token: 0x06000F58 RID: 3928 RVA: 0x0043F4F4 File Offset: 0x0043D6F4
		public static bool NearFriendlyWall(int x, int y)
		{
			try
			{
				if (x < 2 || x >= Main.maxTilesX - 2 || y < 2 || y >= Main.maxTilesY - 2)
				{
					return true;
				}
				if (Main.tile[x, y].wall == 0 || Main.wallHouse[(int)Main.tile[x, y].wall])
				{
					return true;
				}
				if (Main.tile[x - 1, y].wall == 0 || Main.wallHouse[(int)Main.tile[x - 1, y].wall])
				{
					return true;
				}
				if (Main.tile[x + 1, y].wall == 0 || Main.wallHouse[(int)Main.tile[x + 1, y].wall])
				{
					return true;
				}
				if (Main.tile[x, y - 1].wall == 0 || Main.wallHouse[(int)Main.tile[x, y - 1].wall])
				{
					return true;
				}
				if (Main.tile[x, y + 1].wall == 0 || Main.wallHouse[(int)Main.tile[x, y + 1].wall])
				{
					return true;
				}
			}
			catch
			{
			}
			return false;
		}

		// Token: 0x06000F59 RID: 3929 RVA: 0x0043F650 File Offset: 0x0043D850
		public static void Check2x2Style(int i, int j, int type)
		{
			if (WorldGen.destroyObject)
			{
				return;
			}
			bool flag = false;
			int k;
			for (k = (int)(Main.tile[i, j].frameY / 18); k > 1; k -= 2)
			{
			}
			int num = j - k;
			int l = (int)(Main.tile[i, j].frameX / 18);
			int num2 = 0;
			while (l > 1)
			{
				l -= 2;
				num2++;
			}
			l = i - l;
			int num3 = num2 * 36;
			for (int m = l; m < l + 2; m++)
			{
				for (int n = num; n < num + 2; n++)
				{
					if (Main.tile[m, n] == null)
					{
						Main.tile[m, n] = new Tile();
					}
					if (!Main.tile[m, n].active() || (int)Main.tile[m, n].type != type || (int)Main.tile[m, n].frameX != (m - l) * 18 + num3)
					{
						flag = true;
					}
				}
				if (!WorldGen.SolidTileAllowBottomSlope(m, num + 2))
				{
					flag = true;
				}
				else if (type == 254)
				{
					Tile tile = Main.tile[m, num + 2];
					if (tile != null && tile.active() && tile.type >= 0 && tile.type < TileID.Count)
					{
						ushort type2 = tile.type;
						if (type2 != 2 && type2 != 109 && type2 != 477 && type2 != 492)
						{
							flag = true;
						}
					}
				}
			}
			if (flag)
			{
				int frameX = (int)Main.tile[i, j].frameX;
				WorldGen.destroyObject = true;
				for (int num4 = l; num4 < l + 2; num4++)
				{
					for (int num5 = num; num5 < num + 2; num5++)
					{
						if (Main.tile[num4, num5] == null)
						{
							Main.tile[num4, num5] = new Tile();
						}
						if ((int)Main.tile[num4, num5].type == type && Main.tile[num4, num5].active())
						{
							WorldGen.KillTile(num4, num5, false, false, false);
						}
					}
				}
				if (type == 254)
				{
					if (frameX >= 72)
					{
						if (frameX < 108)
						{
							if (WorldGen.genRand.Next(2) == 0)
							{
								Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 1725, WorldGen.genRand.Next(1, 3), false, 0, false, false);
							}
						}
						else if (frameX < 144)
						{
							Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 1725, WorldGen.genRand.Next(2, 6), false, 0, false, false);
						}
						else
						{
							Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 1725, WorldGen.genRand.Next(5, 11), false, 0, false, false);
							if (Main.halloween && WorldGen.genRand.Next(200) == 0)
							{
								Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 1799, 1, false, 0, false, false);
							}
						}
					}
				}
				else if (type == 457)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 3749, 1, false, 0, false, false);
				}
				else if (type == 96)
				{
					if (num2 == 0)
					{
						Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 345, 1, false, 0, false, false);
					}
					if (num2 == 1)
					{
						Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 1791, 1, false, 0, false, false);
					}
				}
				else if (type == 441)
				{
					int num6 = -1;
					switch (num2)
					{
					case 0:
						num6 = 3665;
						break;
					case 1:
						num6 = 3666;
						break;
					case 3:
						num6 = 3667;
						break;
					case 7:
						num6 = 3668;
						break;
					case 8:
						num6 = 3669;
						break;
					case 9:
						num6 = 3670;
						break;
					case 10:
						num6 = 3671;
						break;
					case 11:
						num6 = 3672;
						break;
					case 12:
						num6 = 3673;
						break;
					case 13:
						num6 = 3674;
						break;
					case 14:
						num6 = 3675;
						break;
					case 15:
						num6 = 3676;
						break;
					case 16:
						num6 = 3677;
						break;
					case 17:
						num6 = 3678;
						break;
					case 18:
						num6 = 3679;
						break;
					case 19:
						num6 = 3680;
						break;
					case 20:
						num6 = 3681;
						break;
					case 21:
						num6 = 3682;
						break;
					case 22:
						num6 = 3683;
						break;
					case 28:
						num6 = 3684;
						break;
					case 29:
						num6 = 3685;
						break;
					case 30:
						num6 = 3686;
						break;
					case 31:
						num6 = 3687;
						break;
					case 32:
						num6 = 3688;
						break;
					case 33:
						num6 = 3689;
						break;
					case 34:
						num6 = 3690;
						break;
					case 35:
						num6 = 3691;
						break;
					case 37:
						num6 = 3692;
						break;
					case 39:
						num6 = 3693;
						break;
					case 41:
						num6 = 3694;
						break;
					case 42:
						num6 = 3695;
						break;
					case 43:
						num6 = 3696;
						break;
					case 44:
						num6 = 3697;
						break;
					case 45:
						num6 = 3698;
						break;
					case 46:
						num6 = 3699;
						break;
					case 47:
						num6 = 3700;
						break;
					case 48:
						num6 = 3701;
						break;
					case 49:
						num6 = 3702;
						break;
					case 50:
						num6 = 3703;
						break;
					case 51:
						num6 = 3704;
						break;
					}
					if (num6 != -1)
					{
						Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, num6, 1, false, 0, false, false);
					}
				}
				else if (type == 468)
				{
					int num7 = -1;
					switch (num2)
					{
					case 0:
						num7 = 3886;
						break;
					case 1:
						num7 = 3887;
						break;
					case 2:
						num7 = 3950;
						break;
					case 3:
						num7 = 3976;
						break;
					case 4:
						num7 = -1;
						break;
					case 5:
						num7 = 4164;
						break;
					case 6:
						num7 = 4185;
						break;
					case 7:
						num7 = 4206;
						break;
					case 8:
						num7 = 4227;
						break;
					case 9:
						num7 = 4266;
						break;
					case 10:
						num7 = 4268;
						break;
					case 11:
						num7 = 4585;
						break;
					case 12:
						num7 = 4713;
						break;
					case 13:
						num7 = -1;
						break;
					case 14:
						num7 = 5167;
						break;
					case 15:
						num7 = 5188;
						break;
					case 16:
						num7 = 5209;
						break;
					}
					if (num7 != -1)
					{
						Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, num7, 1, false, 0, false, false);
					}
				}
				WorldGen.destroyObject = false;
				for (int num8 = l - 1; num8 < l + 3; num8++)
				{
					for (int num9 = num - 1; num9 < num + 3; num9++)
					{
						WorldGen.TileFrame(num8, num9, false, false);
					}
				}
			}
		}

		// Token: 0x06000F5A RID: 3930 RVA: 0x0043FE1C File Offset: 0x0043E01C
		public static void PlacePumpkin(int x, int superY)
		{
			ushort type = 254;
			int num = WorldGen.genRand.Next(6) * 36;
			if (x < 5 || x > Main.maxTilesX - 5 || superY < 5 || superY > Main.maxTilesY - 5)
			{
				return;
			}
			bool flag = true;
			for (int i = x - 1; i < x + 1; i++)
			{
				for (int j = superY - 1; j < superY + 1; j++)
				{
					if (Main.tile[i, j] == null)
					{
						Main.tile[i, j] = new Tile();
					}
					if (Main.tile[i, j].active() && Main.tile[i, j].type != 3 && Main.tile[i, j].type != 73 && Main.tile[i, j].type != 113 && Main.tile[i, j].type != 110 && (Main.tile[i, j].type != 185 || Main.tile[i, j].frameY != 0))
					{
						flag = false;
					}
					if (Main.tile[i, j].liquid > 0)
					{
						flag = false;
					}
				}
				if (!WorldGen.SolidTile(i, superY + 1, false) || (Main.tile[i, superY + 1].type != 2 && Main.tile[i, superY + 1].type != 109))
				{
					flag = false;
				}
			}
			if (flag)
			{
				Main.tile[x - 1, superY - 1].active(true);
				Main.tile[x - 1, superY - 1].frameY = (short)num;
				Main.tile[x - 1, superY - 1].frameX = 0;
				Main.tile[x - 1, superY - 1].type = type;
				Main.tile[x, superY - 1].active(true);
				Main.tile[x, superY - 1].frameY = (short)num;
				Main.tile[x, superY - 1].frameX = 18;
				Main.tile[x, superY - 1].type = type;
				Main.tile[x - 1, superY].active(true);
				Main.tile[x - 1, superY].frameY = (short)(num + 18);
				Main.tile[x - 1, superY].frameX = 0;
				Main.tile[x - 1, superY].type = type;
				Main.tile[x, superY].active(true);
				Main.tile[x, superY].frameY = (short)(num + 18);
				Main.tile[x, superY].frameX = 18;
				Main.tile[x, superY].type = type;
			}
		}

		// Token: 0x06000F5B RID: 3931 RVA: 0x00440104 File Offset: 0x0043E304
		public static void GrowPumpkin(int i, int j, int type)
		{
			if (WorldGen.destroyObject)
			{
				return;
			}
			bool flag = false;
			int k;
			for (k = (int)(Main.tile[i, j].frameY / 18); k > 1; k -= 2)
			{
			}
			int num = j - k;
			int l = (int)(Main.tile[i, j].frameX / 18);
			int num2 = 0;
			while (l > 1)
			{
				l -= 2;
				num2++;
			}
			l = i - l;
			int num3 = num2 * 36;
			if (num2 >= 4)
			{
				return;
			}
			for (int m = l; m < l + 2; m++)
			{
				for (int n = num; n < num + 2; n++)
				{
					if (Main.tile[m, n] == null)
					{
						Main.tile[m, n] = new Tile();
					}
					if (!Main.tile[m, n].active() || (int)Main.tile[m, n].type != type || (int)Main.tile[m, n].frameX != (m - l) * 18 + num3)
					{
						flag = true;
					}
				}
				if (!WorldGen.SolidTile(m, num + 2, false) || (Main.tile[m, num + 2].type != 2 && Main.tile[m, num + 2].type != 477 && Main.tile[m, num + 2].type != 492 && Main.tile[m, num + 2].type != 109))
				{
					flag = true;
				}
			}
			if (!flag)
			{
				for (int num4 = l; num4 < l + 2; num4++)
				{
					for (int num5 = num; num5 < num + 2; num5++)
					{
						if (Main.tile[num4, num5] == null)
						{
							Main.tile[num4, num5] = new Tile();
						}
						if ((int)Main.tile[num4, num5].type == type && Main.tile[num4, num5].active())
						{
							Tile tile = Main.tile[num4, num5];
							tile.frameX += 36;
						}
					}
				}
			}
			if (Main.netMode == 2)
			{
				NetMessage.SendTileSquare(-1, l, num, 2, 2, TileChangeType.None);
			}
		}

		// Token: 0x06000F5C RID: 3932 RVA: 0x00440334 File Offset: 0x0043E534
		public static void FixHearts()
		{
			for (int i = 0; i < Main.maxTilesX; i++)
			{
				for (int j = 0; j < Main.maxTilesY; j++)
				{
					Tile tile = Main.tile[i, j];
					if (tile.active() && tile.type == 12 && tile.frameX == 0 && tile.frameY == 0)
					{
						WorldGen.FixHeart(i, j);
					}
				}
			}
		}

		// Token: 0x06000F5D RID: 3933 RVA: 0x00440398 File Offset: 0x0043E598
		public static void DestroyHeart(int i, int j)
		{
			WorldGen.destroyObject = true;
			for (int k = i; k < i + 2; k++)
			{
				for (int l = j; l < j + 2; l++)
				{
					if (k < Main.maxTilesX && l < Main.maxTilesY)
					{
						Tile tile = Main.tile[k, l];
						if (tile.active() && tile.type == 12)
						{
							WorldGen.KillTile(k, l, false, false, false);
						}
					}
				}
			}
			WorldGen.destroyObject = false;
		}

		// Token: 0x06000F5E RID: 3934 RVA: 0x00440408 File Offset: 0x0043E608
		public static void FixHeart(int i, int j)
		{
			if (i < Main.offLimitBorderTiles || i >= Main.maxTilesX - Main.offLimitBorderTiles || j < Main.offLimitBorderTiles || j >= Main.maxTilesY - Main.offLimitBorderTiles)
			{
				WorldGen.DestroyHeart(i, j);
				return;
			}
			Tile tile = Main.tile[i, j + 2];
			Tile tile2 = Main.tile[i + 1, j + 2];
			if (tile.active() && !Main.tileSolid[(int)tile.type] && Main.tileCut[(int)tile.type])
			{
				WorldGen.KillTile(i, j + 2, false, false, false);
			}
			if (tile2.active() && !Main.tileSolid[(int)tile2.type] && Main.tileCut[(int)tile2.type])
			{
				WorldGen.KillTile(i + 1, j + 2, false, false, false);
			}
			if (!tile.active())
			{
				if (!tile2.active())
				{
					WorldGen.DestroyHeart(i, j);
					return;
				}
				if (Main.tileSolid[(int)tile2.type])
				{
					tile.type = tile2.type;
					tile.active(true);
				}
			}
			if (!tile2.active() && Main.tileSolid[(int)tile.type])
			{
				tile2.type = tile.type;
				tile2.active(true);
			}
			if (!tile.nactive() || !Main.tileSolid[(int)tile.type] || !tile2.nactive() || !Main.tileSolid[(int)tile2.type])
			{
				WorldGen.DestroyHeart(i, j);
				return;
			}
			if (tile.blockType() != 0)
			{
				tile.slope(0);
				tile.halfBrick(false);
			}
			if (tile2.blockType() != 0)
			{
				tile2.slope(0);
				tile2.halfBrick(false);
			}
		}

		// Token: 0x06000F5F RID: 3935 RVA: 0x00440590 File Offset: 0x0043E790
		public static void FixChands()
		{
			for (int i = 5; i < Main.maxTilesX - 5; i++)
			{
				for (int j = 5; j < Main.maxTilesY - 5; j++)
				{
					if (Main.tile[i, j].active())
					{
						int type = (int)Main.tile[i, j].type;
						if (Main.tile[i, j].active() && (type == 35 || type == 36 || type == 170 || type == 171 || type == 172))
						{
							WorldGen.FixChand(i, j);
						}
					}
				}
			}
		}

		// Token: 0x06000F60 RID: 3936 RVA: 0x00440628 File Offset: 0x0043E828
		public static void FixChand(int i, int j)
		{
			int num = 0;
			int type = (int)Main.tile[i, j].type;
			if (Main.tile[i, j].active())
			{
				if (type == 35)
				{
					num = 1;
				}
				if (type == 36)
				{
					num = 2;
				}
				if (type == 170)
				{
					num = 3;
				}
				if (type == 171)
				{
					num = 4;
				}
				if (type == 172)
				{
					num = 5;
				}
			}
			if (num > 0)
			{
				int k;
				for (k = (int)(Main.tile[i, j].frameX / 18); k >= 3; k -= 3)
				{
				}
				if (k >= 3)
				{
					k -= 3;
				}
				k = i - k;
				int num2 = j + (int)(Main.tile[i, j].frameY / 18 * -1);
				for (int l = k; l < k + 3; l++)
				{
					for (int m = num2; m < num2 + 3; m++)
					{
						if (Main.tile[l, m] == null)
						{
							Main.tile[l, m] = new Tile();
						}
						if (Main.tile[l, m].active() && (int)Main.tile[l, m].type == type)
						{
							Main.tile[l, m].type = 34;
							Main.tile[l, m].frameY = (short)((int)Main.tile[l, m].frameY + num * 54);
						}
					}
				}
			}
		}

		// Token: 0x06000F61 RID: 3937 RVA: 0x00440798 File Offset: 0x0043E998
		public static void PlaceChand(int x, int y, ushort type, int style = 0)
		{
			bool flag = true;
			int num = 0;
			for (int i = x - 1; i < x + 2; i++)
			{
				for (int j = y; j < y + 3; j++)
				{
					if (Main.tile[i, j] == null)
					{
						Main.tile[i, j] = new Tile();
					}
					if (Main.tile[i, j].active())
					{
						flag = false;
					}
				}
			}
			if (Main.tile[x, y - 1] == null)
			{
				Main.tile[x, y - 1] = new Tile();
			}
			if (!Main.tile[x, y - 1].nactive() || !Main.tileSolid[(int)Main.tile[x, y - 1].type] || Main.tileSolidTop[(int)Main.tile[x, y - 1].type])
			{
				flag = false;
			}
			if (flag)
			{
				int num2 = style / 36 * 18 * 6;
				int num3 = style * 18 * 3;
				Main.tile[x - 1, y + num].active(true);
				Main.tile[x - 1, y + num].frameY = (short)num3;
				Main.tile[x - 1, y + num].frameX = (short)num2;
				Main.tile[x - 1, y + num].type = type;
				Main.tile[x, y + num].active(true);
				Main.tile[x, y + num].frameY = (short)num3;
				Main.tile[x, y + num].frameX = (short)(num2 + 18);
				Main.tile[x, y + num].type = type;
				Main.tile[x + 1, y + num].active(true);
				Main.tile[x + 1, y + num].frameY = (short)num3;
				Main.tile[x + 1, y + num].frameX = (short)(num2 + 36);
				Main.tile[x + 1, y + num].type = type;
				Main.tile[x - 1, y + 1 + num].active(true);
				Main.tile[x - 1, y + 1 + num].frameY = (short)(num3 + 18);
				Main.tile[x - 1, y + 1 + num].frameX = (short)num2;
				Main.tile[x - 1, y + 1 + num].type = type;
				Main.tile[x, y + 1 + num].active(true);
				Main.tile[x, y + 1 + num].frameY = (short)(num3 + 18);
				Main.tile[x, y + 1 + num].frameX = (short)(num2 + 18);
				Main.tile[x, y + 1 + num].type = type;
				Main.tile[x + 1, y + 1 + num].active(true);
				Main.tile[x + 1, y + 1 + num].frameY = (short)(num3 + 18);
				Main.tile[x + 1, y + 1 + num].frameX = (short)(num2 + 36);
				Main.tile[x + 1, y + 1 + num].type = type;
				Main.tile[x - 1, y + 2 + num].active(true);
				Main.tile[x - 1, y + 2 + num].frameY = (short)(num3 + 36);
				Main.tile[x - 1, y + 2 + num].frameX = (short)num2;
				Main.tile[x - 1, y + 2 + num].type = type;
				Main.tile[x, y + 2 + num].active(true);
				Main.tile[x, y + 2 + num].frameY = (short)(num3 + 36);
				Main.tile[x, y + 2 + num].frameX = (short)(num2 + 18);
				Main.tile[x, y + 2 + num].type = type;
				Main.tile[x + 1, y + 2 + num].active(true);
				Main.tile[x + 1, y + 2 + num].frameY = (short)(num3 + 36);
				Main.tile[x + 1, y + 2 + num].frameX = (short)(num2 + 36);
				Main.tile[x + 1, y + 2 + num].type = type;
			}
		}

		// Token: 0x06000F62 RID: 3938 RVA: 0x00440BFC File Offset: 0x0043EDFC
		public static void CheckChand(int i, int j, int type)
		{
			if (WorldGen.destroyObject)
			{
				return;
			}
			bool flag = false;
			int num = 3;
			if (type == 454)
			{
				num = 4;
			}
			int k = (int)(Main.tile[i, j].frameX / 18);
			int num2 = 0;
			while (k >= num)
			{
				num2++;
				k -= num;
			}
			int num3 = i - k;
			int num4 = 18 * num * num2;
			if (k >= num)
			{
				k -= num;
			}
			k = i - k;
			int l = (int)(Main.tile[i, j].frameY / 18);
			int num5 = 0;
			while (l >= 3)
			{
				num5++;
				l -= 3;
			}
			if (num4 >= 108)
			{
				num5 += 37 * (num4 / 108);
			}
			int num6 = 54 * num5;
			if (num4 >= 108)
			{
				num6 -= 54 * (num4 / 108) * 37;
			}
			if (l >= 3)
			{
				l -= 3;
			}
			l = j - l;
			for (int m = k; m < k + num; m++)
			{
				for (int n = l; n < l + 3; n++)
				{
					if (Main.tile[m, n] == null)
					{
						Main.tile[m, n] = new Tile();
					}
					if (!Main.tile[m, n].active() || (int)Main.tile[m, n].type != type || (int)Main.tile[m, n].frameX != (m - num3) * 18 + num4 || (int)Main.tile[m, n].frameY != (n - l) * 18 + num6)
					{
						flag = true;
					}
				}
			}
			if (Main.tile[k + 1, l - 1] == null)
			{
				Main.tile[k + 1, l - 1] = new Tile();
			}
			if (!Main.tile[k + 1, l - 1].nactive() || !Main.tileSolid[(int)Main.tile[k + 1, l - 1].type] || Main.tileSolidTop[(int)Main.tile[k + 1, l - 1].type])
			{
				flag = true;
			}
			if (flag)
			{
				WorldGen.destroyObject = true;
				for (int num7 = k; num7 < k + num; num7++)
				{
					for (int num8 = l; num8 < l + 3; num8++)
					{
						if ((int)Main.tile[num7, num8].type == type && Main.tile[num7, num8].active())
						{
							WorldGen.KillTile(num7, num8, false, false, false);
						}
					}
				}
				if (type == 454)
				{
					switch (Main.rand.Next(9))
					{
					case 2:
					case 3:
					case 4:
					{
						int num9 = Main.rand.Next(10, 31);
						while (num9 > 0)
						{
							int num10 = Main.rand.Next(2, 11);
							if (num10 > num9)
							{
								num10 = num9;
							}
							num9 -= num10;
							Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 72, num10, false, 0, false, false);
						}
						break;
					}
					case 5:
					case 6:
					{
						int num11 = Main.rand.Next(60, 80);
						while (num11 > 0)
						{
							int num12 = Main.rand.Next(3, 16);
							if (num12 > num11)
							{
								num12 = num11;
							}
							num11 -= num12;
							Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16 - 10, j * 16 - 10, 52, 52, 72, num12, false, 0, false, false);
						}
						Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 1358, 1, false, 0, false, false);
						break;
					}
					case 7:
					{
						int num13 = Main.rand.Next(10, 31);
						while (num13 > 0)
						{
							int num14 = Main.rand.Next(2, 9);
							if (num14 > num13)
							{
								num14 = num13;
							}
							num13 -= num14;
							Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16 - 10, j * 16 - 10, 52, 52, 72, num14, false, 0, false, false);
						}
						if (Main.rand.Next(8) == 0)
						{
							Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 3532, 1, false, 0, false, false);
						}
						if (Main.rand.Next(8) == 0)
						{
							Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 3532, 1, false, 0, false, false);
						}
						Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 73, 1, false, 0, false, false);
						break;
					}
					case 8:
					{
						int num15 = 100;
						while (num15 > 0)
						{
							int num16 = Main.rand.Next(3, 16);
							if (num16 > num15)
							{
								num16 = num15;
							}
							num15 -= num16;
							Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16 - 10, j * 16 - 10, 52, 52, 72, num16, false, 0, false, false);
						}
						int num17 = Main.rand.Next(30, 91);
						while (num17 > 0)
						{
							int num18 = Main.rand.Next(7, 14);
							if (num18 > num17)
							{
								num18 = num17;
							}
							num17 -= num18;
							Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16 - 10, j * 16 - 10, 52, 52, 1349, num18, false, 0, false, false);
						}
						Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 1358, 1, false, 0, false, false);
						Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 73, 1, false, 0, false, false);
						break;
					}
					}
				}
				if (type == 34)
				{
					int type2;
					if (num5 == 1)
					{
						type2 = 107;
					}
					else if (num5 == 2)
					{
						type2 = 108;
					}
					else if (num5 == 3)
					{
						type2 = 710;
					}
					else if (num5 == 4)
					{
						type2 = 711;
					}
					else if (num5 == 5)
					{
						type2 = 712;
					}
					else if (num5 == 6)
					{
						type2 = 1812;
					}
					else if (num5 >= 7 && num5 <= 17)
					{
						type2 = 2055 + num5 - 7;
					}
					else if (num5 >= 18 && num5 <= 21)
					{
						type2 = 2141 + num5 - 18;
					}
					else if (num5 == 22)
					{
						type2 = 2224;
					}
					else if (num5 == 23)
					{
						type2 = 2525;
					}
					else if (num5 == 24)
					{
						type2 = 2543;
					}
					else if (num5 == 25)
					{
						type2 = 2558;
					}
					else if (num5 == 26)
					{
						type2 = 2573;
					}
					else if (num5 == 27)
					{
						type2 = 2652;
					}
					else if (num5 == 28)
					{
						type2 = 2653;
					}
					else if (num5 == 29)
					{
						type2 = 2654;
					}
					else if (num5 == 30)
					{
						type2 = 2655;
					}
					else if (num5 == 31)
					{
						type2 = 2656;
					}
					else if (num5 == 32)
					{
						type2 = 2657;
					}
					else if (num5 == 33)
					{
						type2 = 2813;
					}
					else if (num5 == 34)
					{
						type2 = 3177;
					}
					else if (num5 == 35)
					{
						type2 = 3179;
					}
					else if (num5 == 36)
					{
						type2 = 3178;
					}
					else if (num5 == 37)
					{
						type2 = 3894;
					}
					else if (num5 == 38)
					{
						type2 = 3938;
					}
					else if (num5 == 39)
					{
						type2 = 3964;
					}
					else if (num5 == 40)
					{
						type2 = 4152;
					}
					else if (num5 == 41)
					{
						type2 = 4173;
					}
					else if (num5 == 42)
					{
						type2 = 4194;
					}
					else if (num5 == 43)
					{
						type2 = 4215;
					}
					else if (num5 == 44)
					{
						type2 = 4305;
					}
					else if (num5 == 45)
					{
						type2 = 4573;
					}
					else if (num5 == 46)
					{
						type2 = 5155;
					}
					else if (num5 == 47)
					{
						type2 = 5176;
					}
					else if (num5 == 48)
					{
						type2 = 5197;
					}
					else
					{
						type2 = 106;
					}
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, type2, 1, false, 0, false, false);
				}
				WorldGen.destroyObject = false;
				for (int num19 = k - 1; num19 < k + num + 1; num19++)
				{
					for (int num20 = l - 1; num20 < l + 4; num20++)
					{
						WorldGen.TileFrame(num19, num20, false, false);
					}
				}
			}
		}

		// Token: 0x06000F63 RID: 3939 RVA: 0x0044143C File Offset: 0x0043F63C
		public static void Check3x3(int i, int j, int type)
		{
			if (WorldGen.destroyObject)
			{
				return;
			}
			bool flag = false;
			int k = (int)(Main.tile[i, j].frameX / 18);
			int num = 0;
			while (k >= 3)
			{
				num++;
				k -= 3;
			}
			int num2 = i - k;
			int num3 = 54 * num;
			int num4 = (int)(Main.tile[i, j].frameY / 54);
			int num5 = (int)(Main.tile[i, j].frameY % 54 / 18);
			if (k >= 3)
			{
				k -= 3;
			}
			k = i - k;
			int num6 = j - num5;
			for (int l = k; l < k + 3; l++)
			{
				for (int m = num6; m < num6 + 3; m++)
				{
					if (Main.tile[l, m] == null)
					{
						Main.tile[l, m] = new Tile();
					}
					if (!Main.tile[l, m].active() || (int)Main.tile[l, m].type != type || (int)Main.tile[l, m].frameX != (l - num2) * 18 + num3 || (int)Main.tile[l, m].frameY != (m - num6) * 18 + num4 * 54)
					{
						flag = true;
					}
				}
			}
			if (type == 106 || type == 212 || type == 219 || type == 220 || type == 228 || type == 231 || type == 243 || type == 247 || type == 283 || (type >= 300 && type <= 308) || type == 354 || type == 355 || type == 499 || type == 406 || type == 412 || type == 452 || type == 455 || type == 491 || type == 642)
			{
				for (int n = k; n < k + 3; n++)
				{
					if (Main.tile[n, num6 + 3] == null)
					{
						Main.tile[n, num6 + 3] = new Tile();
					}
					if (!WorldGen.SolidTileAllowBottomSlope(n, num6 + 3))
					{
						flag = true;
						break;
					}
				}
			}
			else
			{
				if (Main.tile[k + 1, num6 - 1] == null)
				{
					Main.tile[k + 1, num6 - 1] = new Tile();
				}
				if (!Main.tile[k + 1, num6 - 1].nactive() || !Main.tileSolid[(int)Main.tile[k + 1, num6 - 1].type] || Main.tileSolidTop[(int)Main.tile[k + 1, num6 - 1].type])
				{
					flag = true;
				}
			}
			if (flag)
			{
				WorldGen.destroyObject = true;
				for (int num7 = k; num7 < k + 3; num7++)
				{
					for (int num8 = num6; num8 < num6 + 3; num8++)
					{
						if ((int)Main.tile[num7, num8].type == type && Main.tile[num7, num8].active())
						{
							WorldGen.KillTile(num7, num8, false, false, false);
						}
					}
				}
				if (type == 106)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 363, 1, false, 0, false, false);
				}
				else if (type == 243)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 1430, 1, false, 0, false, false);
				}
				else if (type == 212)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 951, 1, false, 0, false, false);
				}
				else if (type == 219)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 997, 1, false, 0, false, false);
				}
				else if (type == 642)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 5296, 1, false, 0, false, false);
				}
				else if (type == 220)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 998, 1, false, 0, false, false);
				}
				else if (type == 228)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 1120, 1, false, 0, false, false);
				}
				else if (type == 247)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 1551, 1, false, 0, false, false);
				}
				else if (type == 283)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 2172, 1, false, 0, false, false);
				}
				else if (type >= 300 && type <= 306)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 2192 + type - 300, 1, false, 0, false, false);
				}
				else if (type == 307)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 2203, 1, false, 0, false, false);
				}
				else if (type == 308)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 2204, 1, false, 0, false, false);
				}
				else if (type == 406)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 3365, 1, false, 0, false, false);
				}
				else if (type == 452)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 3742, 1, false, 0, false, false);
				}
				else if (type == 354)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 2999, 1, false, 0, false, false);
				}
				else if (type == 355)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 3000, 1, false, 0, false, false);
				}
				else if (type == 499)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 4142, 1, false, 0, false, false);
				}
				else if (type == 412)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 3549, 1, false, 0, false, false);
				}
				else if (type == 455)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 3747, 1, false, 0, false, false);
				}
				else if (type == 491)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 4076, 1, false, 0, false, false);
				}
				else if (type == 231)
				{
					int num9 = (i + 1) * 16 + 8;
					int num10 = j * 16;
					Gore.NewGore(new Vector2((float)num9, (float)num10), default(Vector2), 300, 1f);
					Gore.NewGore(new Vector2((float)num9, (float)(num10 + 8)), default(Vector2), 301, 1f);
					Gore.NewGore(new Vector2((float)num9, (float)(num10 + 16)), default(Vector2), 302, 1f);
					float num11 = (float)(i * 16);
					float num12 = (float)(j * 16);
					float num13 = -1f;
					int plr = 0;
					for (int num14 = 0; num14 < 255; num14++)
					{
						if (Main.player[num14].active && !Main.player[num14].dead)
						{
							float num15 = Math.Abs(Main.player[num14].position.X - num11) + Math.Abs(Main.player[num14].position.Y - num12);
							if (num15 < num13 || num13 == -1f)
							{
								plr = num14;
								num13 = num15;
							}
						}
					}
					if (num13 < 4800f && !Main.gameMenu)
					{
						NPC.SpawnOnPlayer(plr, 222);
					}
				}
				WorldGen.destroyObject = false;
				for (int num16 = k - 1; num16 < k + 4; num16++)
				{
					for (int num17 = num6 - 1; num17 < num6 + 4; num17++)
					{
						WorldGen.TileFrame(num16, num17, false, false);
					}
				}
			}
		}

		// Token: 0x06000F64 RID: 3940 RVA: 0x00441CA4 File Offset: 0x0043FEA4
		public static void Check2x5(int i, int j, int type)
		{
			if (WorldGen.destroyObject)
			{
				return;
			}
			bool flag = false;
			int k = (int)(Main.tile[i, j].frameX / 18);
			int num = 0;
			while (k >= 2)
			{
				num++;
				k -= 2;
			}
			int num2 = i - k;
			int num3 = 36 * num;
			int num4 = (int)(Main.tile[i, j].frameY % 80 / 18);
			if (k >= 3)
			{
				k -= 2;
			}
			k = i - k;
			int num5 = j - num4;
			for (int l = k; l < k + 2; l++)
			{
				for (int m = num5; m < num5 + 5; m++)
				{
					if (Main.tile[l, m] == null)
					{
						Main.tile[l, m] = new Tile();
					}
					if (!Main.tile[l, m].active() || (int)Main.tile[l, m].type != type || (int)Main.tile[l, m].frameX != (l - num2) * 18 + num3 || (int)Main.tile[l, m].frameY != (m - num5) * 18)
					{
						flag = true;
					}
				}
			}
			for (int n = k; n < k + 2; n++)
			{
				if (Main.tile[n, num5 + 5] == null)
				{
					Main.tile[n, num5 + 5] = new Tile();
				}
				if (!WorldGen.SolidTileAllowBottomSlope(n, num5 + 5))
				{
					flag = true;
					break;
				}
			}
			if (flag)
			{
				WorldGen.destroyObject = true;
				for (int num6 = k; num6 < k + 2; num6++)
				{
					for (int num7 = num5; num7 < num5 + 5; num7++)
					{
						if ((int)Main.tile[num6, num7].type == type && Main.tile[num6, num7].active())
						{
							WorldGen.KillTile(num6, num7, false, false, false);
						}
					}
				}
				if (type != 547)
				{
					if (type == 623)
					{
						Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 5081 + num, 1, false, 0, false, false);
					}
				}
				else
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 4430 + num, 1, false, 0, false, false);
				}
				WorldGen.destroyObject = false;
				for (int num8 = k - 1; num8 < k + 3; num8++)
				{
					for (int num9 = num5 - 1; num9 < num5 + 6; num9++)
					{
						WorldGen.TileFrame(num8, num9, false, false);
					}
				}
			}
		}

		// Token: 0x06000F65 RID: 3941 RVA: 0x00441F1C File Offset: 0x0044011C
		public static void Check3x5(int i, int j, int type)
		{
			if (WorldGen.destroyObject)
			{
				return;
			}
			bool flag = false;
			int k = (int)(Main.tile[i, j].frameX / 18);
			int num = 0;
			while (k >= 3)
			{
				num++;
				k -= 3;
			}
			int num2 = i - k;
			int num3 = 54 * num;
			int num4 = (int)(Main.tile[i, j].frameY % 90 / 18);
			if (k >= 4)
			{
				k -= 3;
			}
			k = i - k;
			int num5 = j - num4;
			for (int l = k; l < k + 3; l++)
			{
				for (int m = num5; m < num5 + 5; m++)
				{
					if (Main.tile[l, m] == null)
					{
						Main.tile[l, m] = new Tile();
					}
					if (!Main.tile[l, m].active() || (int)Main.tile[l, m].type != type || (int)Main.tile[l, m].frameX != (l - num2) * 18 + num3 || (int)Main.tile[l, m].frameY != (m - num5) * 18)
					{
						flag = true;
					}
				}
			}
			for (int n = k; n < k + 3; n++)
			{
				if (Main.tile[n, num5 + 5] == null)
				{
					Main.tile[n, num5 + 5] = new Tile();
				}
				if (!WorldGen.SolidTileAllowBottomSlope(n, num5 + 5))
				{
					flag = true;
					break;
				}
			}
			if (flag)
			{
				WorldGen.destroyObject = true;
				for (int num6 = k; num6 < k + 3; num6++)
				{
					for (int num7 = num5; num7 < num5 + 5; num7++)
					{
						if ((int)Main.tile[num6, num7].type == type && Main.tile[num6, num7].active())
						{
							WorldGen.KillTile(num6, num7, false, false, false);
						}
					}
				}
				if (type == 613)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 4904 + num, 1, false, 0, false, false);
				}
				WorldGen.destroyObject = false;
				for (int num8 = k - 1; num8 < k + 4; num8++)
				{
					for (int num9 = num5 - 1; num9 < num5 + 6; num9++)
					{
						WorldGen.TileFrame(num8, num9, false, false);
					}
				}
			}
		}

		// Token: 0x06000F66 RID: 3942 RVA: 0x00442164 File Offset: 0x00440364
		public static void Check3x6(int i, int j, int type)
		{
			if (WorldGen.destroyObject)
			{
				return;
			}
			bool flag = false;
			int k = (int)(Main.tile[i, j].frameX / 18);
			int num = 0;
			while (k >= 3)
			{
				num++;
				k -= 3;
			}
			int num2 = i - k;
			int num3 = 54 * num;
			int num4 = (int)(Main.tile[i, j].frameY % 96 / 18);
			if (k >= 4)
			{
				k -= 3;
			}
			k = i - k;
			int num5 = j - num4;
			for (int l = k; l < k + 3; l++)
			{
				for (int m = num5; m < num5 + 6; m++)
				{
					if (Main.tile[l, m] == null)
					{
						Main.tile[l, m] = new Tile();
					}
					if (!Main.tile[l, m].active() || (int)Main.tile[l, m].type != type || (int)Main.tile[l, m].frameX != (l - num2) * 18 + num3 || (int)Main.tile[l, m].frameY != (m - num5) * 18)
					{
						flag = true;
					}
				}
			}
			for (int n = k; n < k + 3; n++)
			{
				if (Main.tile[n, num5 + 6] == null)
				{
					Main.tile[n, num5 + 6] = new Tile();
				}
				if (!WorldGen.SolidTileAllowBottomSlope(n, num5 + 6))
				{
					flag = true;
					break;
				}
			}
			if (flag)
			{
				WorldGen.destroyObject = true;
				for (int num6 = k; num6 < k + 3; num6++)
				{
					for (int num7 = num5; num7 < num5 + 6; num7++)
					{
						if ((int)Main.tile[num6, num7].type == type && Main.tile[num6, num7].active())
						{
							WorldGen.KillTile(num6, num7, false, false, false);
						}
					}
				}
				if (type == 548)
				{
					if (num >= 7)
					{
						Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 4902 + num - 7, 1, false, 0, false, false);
					}
					else
					{
						Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 4435 + num, 1, false, 0, false, false);
					}
				}
				if (type == 614)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 4906, 1, false, 0, false, false);
				}
				WorldGen.destroyObject = false;
				for (int num8 = k - 1; num8 < k + 4; num8++)
				{
					for (int num9 = num5 - 1; num9 < num5 + 7; num9++)
					{
						WorldGen.TileFrame(num8, num9, false, false);
					}
				}
			}
		}

		// Token: 0x06000F67 RID: 3943 RVA: 0x00442404 File Offset: 0x00440604
		public static void Place3x3(int x, int y, ushort type, int style = 0)
		{
			bool flag = true;
			int num = 0;
			if (type == 106 || type == 212 || type == 219 || type == 220 || type == 228 || type == 231 || type == 243 || type == 247 || type == 283 || (type >= 300 && type <= 308) || type == 354 || type == 355 || type == 642)
			{
				num = -2;
				for (int i = x - 1; i < x + 2; i++)
				{
					for (int j = y - 2; j < y + 1; j++)
					{
						if (Main.tile[i, j] == null)
						{
							Main.tile[i, j] = new Tile();
						}
						if (Main.tile[i, j].active())
						{
							flag = false;
						}
					}
				}
				for (int k = x - 1; k < x + 2; k++)
				{
					if (Main.tile[k, y + 1] == null)
					{
						Main.tile[k, y + 1] = new Tile();
					}
					if (!WorldGen.SolidTile2(k, y + 1))
					{
						flag = false;
						break;
					}
				}
			}
			else
			{
				for (int l = x - 1; l < x + 2; l++)
				{
					for (int m = y; m < y + 3; m++)
					{
						if (Main.tile[l, m] == null)
						{
							Main.tile[l, m] = new Tile();
						}
						if (Main.tile[l, m].active())
						{
							flag = false;
						}
					}
				}
				if (Main.tile[x, y - 1] == null)
				{
					Main.tile[x, y - 1] = new Tile();
				}
				if (!Main.tile[x, y - 1].nactive() || !Main.tileSolid[(int)Main.tile[x, y - 1].type] || Main.tileSolidTop[(int)Main.tile[x, y - 1].type])
				{
					flag = false;
				}
			}
			if (flag)
			{
				int num2 = style * 18 * 3;
				Main.tile[x - 1, y + num].active(true);
				Main.tile[x - 1, y + num].frameY = 0;
				Main.tile[x - 1, y + num].frameX = (short)num2;
				Main.tile[x - 1, y + num].type = type;
				Main.tile[x, y + num].active(true);
				Main.tile[x, y + num].frameY = 0;
				Main.tile[x, y + num].frameX = (short)(num2 + 18);
				Main.tile[x, y + num].type = type;
				Main.tile[x + 1, y + num].active(true);
				Main.tile[x + 1, y + num].frameY = 0;
				Main.tile[x + 1, y + num].frameX = (short)(num2 + 36);
				Main.tile[x + 1, y + num].type = type;
				Main.tile[x - 1, y + 1 + num].active(true);
				Main.tile[x - 1, y + 1 + num].frameY = 18;
				Main.tile[x - 1, y + 1 + num].frameX = (short)num2;
				Main.tile[x - 1, y + 1 + num].type = type;
				Main.tile[x, y + 1 + num].active(true);
				Main.tile[x, y + 1 + num].frameY = 18;
				Main.tile[x, y + 1 + num].frameX = (short)(num2 + 18);
				Main.tile[x, y + 1 + num].type = type;
				Main.tile[x + 1, y + 1 + num].active(true);
				Main.tile[x + 1, y + 1 + num].frameY = 18;
				Main.tile[x + 1, y + 1 + num].frameX = (short)(num2 + 36);
				Main.tile[x + 1, y + 1 + num].type = type;
				Main.tile[x - 1, y + 2 + num].active(true);
				Main.tile[x - 1, y + 2 + num].frameY = 36;
				Main.tile[x - 1, y + 2 + num].frameX = (short)num2;
				Main.tile[x - 1, y + 2 + num].type = type;
				Main.tile[x, y + 2 + num].active(true);
				Main.tile[x, y + 2 + num].frameY = 36;
				Main.tile[x, y + 2 + num].frameX = (short)(num2 + 18);
				Main.tile[x, y + 2 + num].type = type;
				Main.tile[x + 1, y + 2 + num].active(true);
				Main.tile[x + 1, y + 2 + num].frameY = 36;
				Main.tile[x + 1, y + 2 + num].frameX = (short)(num2 + 36);
				Main.tile[x + 1, y + 2 + num].type = type;
			}
		}

		// Token: 0x06000F68 RID: 3944 RVA: 0x00442968 File Offset: 0x00440B68
		public static void PlaceSunflower(int x, int y, ushort type = 27)
		{
			if ((double)y > Main.worldSurface - 1.0 && !Main.remixWorld)
			{
				return;
			}
			bool flag = true;
			for (int i = x; i < x + 2; i++)
			{
				for (int j = y - 3; j < y + 1; j++)
				{
					if (Main.tile[i, j] == null)
					{
						Main.tile[i, j] = new Tile();
					}
					if (Main.tile[i, j].active() || Main.tile[i, j].wall > 0)
					{
						flag = false;
					}
				}
				if (Main.tile[i, y + 1] == null)
				{
					Main.tile[i, y + 1] = new Tile();
				}
				if (!Main.tile[i, y + 1].nactive() || Main.tile[i, y + 1].halfBrick() || Main.tile[i, y + 1].slope() != 0 || (Main.tile[i, y + 1].type != 2 && Main.tile[i, y + 1].type != 109))
				{
					flag = false;
				}
			}
			if (flag)
			{
				int num = WorldGen.genRand.Next(3);
				for (int k = 0; k < 2; k++)
				{
					for (int l = -3; l < 1; l++)
					{
						int num2 = k * 18 + WorldGen.genRand.Next(3) * 36;
						if (l <= -2)
						{
							num2 = k * 18 + num * 36;
						}
						int num3 = (l + 3) * 18;
						Main.tile[x + k, y + l].active(true);
						Main.tile[x + k, y + l].frameX = (short)num2;
						Main.tile[x + k, y + l].frameY = (short)num3;
						Main.tile[x + k, y + l].type = type;
					}
				}
			}
		}

		// Token: 0x06000F69 RID: 3945 RVA: 0x00442B64 File Offset: 0x00440D64
		public static void FixSunflowers()
		{
			for (int i = 5; i < Main.maxTilesX - 5; i++)
			{
				int num = 5;
				while ((double)num < Main.worldSurface)
				{
					if (Main.tile[i, num].active() && Main.tile[i, num].type == 27)
					{
						WorldGen.FixSunflower(i, num);
					}
					num++;
				}
			}
		}

		// Token: 0x06000F6A RID: 3946 RVA: 0x00442BC4 File Offset: 0x00440DC4
		public static void FixSunflower(int i, int j)
		{
			if (Main.tile[i, j].type != 27)
			{
				return;
			}
			int k = 0;
			k += (int)(Main.tile[i, j].frameX / 18);
			int num = j + (int)(Main.tile[i, j].frameY / 18 * -1);
			while (k > 1)
			{
				k -= 2;
			}
			k *= -1;
			k += i;
			int num2 = WorldGen.genRand.Next(3) * 36;
			int num3 = 0;
			for (int l = k; l < k + 2; l++)
			{
				for (int m = num; m < num + 4; m++)
				{
					Main.tile[l, m].frameX = (short)(num3 + num2);
				}
				num3 += 18;
			}
		}

		// Token: 0x06000F6B RID: 3947 RVA: 0x00442C80 File Offset: 0x00440E80
		public static void CheckSunflower(int i, int j, int type = 27)
		{
			if (WorldGen.destroyObject)
			{
				return;
			}
			bool flag = false;
			int k = 0;
			k += (int)(Main.tile[i, j].frameX / 18);
			int num = j + (int)(Main.tile[i, j].frameY / 18 * -1);
			while (k > 1)
			{
				k -= 2;
			}
			k *= -1;
			k += i;
			for (int l = k; l < k + 2; l++)
			{
				for (int m = num; m < num + 4; m++)
				{
					if (Main.tile[l, m] == null)
					{
						Main.tile[l, m] = new Tile();
					}
					int n;
					for (n = (int)(Main.tile[l, m].frameX / 18); n > 1; n -= 2)
					{
					}
					if (!Main.tile[l, m].nactive() || (int)Main.tile[l, m].type != type || n != l - k || (int)Main.tile[l, m].frameY != (m - num) * 18)
					{
						flag = true;
					}
				}
				if (Main.tile[l, num + 4] == null)
				{
					Main.tile[l, num + 4] = new Tile();
				}
				if (!Main.tile[l, num + 4].nactive() || (Main.tile[l, num + 4].type != 2 && Main.tile[l, num + 4].type != 477 && Main.tile[l, num + 4].type != 492 && Main.tile[l, num + 4].type != 109 && Main.tile[l, num + 4].type != 60 && Main.tile[l, num + 4].type != 633))
				{
					flag = true;
				}
				if (!WorldGen.SolidTile(l, num + 4, false))
				{
					flag = true;
				}
			}
			if (flag)
			{
				WorldGen.destroyObject = true;
				for (int num2 = k; num2 < k + 2; num2++)
				{
					for (int num3 = num; num3 < num + 4; num3++)
					{
						if ((int)Main.tile[num2, num3].type == type && Main.tile[num2, num3].active())
						{
							WorldGen.KillTile(num2, num3, false, false, false);
						}
					}
				}
				Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 63, 1, false, 0, false, false);
				WorldGen.destroyObject = false;
			}
		}

		// Token: 0x06000F6C RID: 3948 RVA: 0x00442F08 File Offset: 0x00441108
		public static void CheckDye(int x, int y)
		{
			int num = (int)(Main.tile[x, y].frameX / 34);
			if (num == 7)
			{
				if (!WorldGen.SolidTile(x, y - 1, false))
				{
					WorldGen.KillTile(x, y, false, false, false);
					return;
				}
			}
			else if (num == 6)
			{
				if (!Main.tile[x, y + 1].nactive() || Main.tile[x, y + 1].type != 80)
				{
					WorldGen.KillTile(x, y, false, false, false);
					return;
				}
			}
			else if (!WorldGen.SolidTile(x, y + 1, false))
			{
				WorldGen.KillTile(x, y, false, false, false);
			}
		}

		// Token: 0x06000F6D RID: 3949 RVA: 0x00442F96 File Offset: 0x00441196
		public static void CheckRockGolemHead(int x, int y)
		{
			if (!WorldGen.SolidTileAllowBottomSlope(x, y + 1))
			{
				WorldGen.KillTile(x, y, false, false, false);
			}
		}

		// Token: 0x06000F6E RID: 3950 RVA: 0x00442FB0 File Offset: 0x004411B0
		public static void CheckStinkbugBlocker(int x, int y)
		{
			Tile tileSafely = Framing.GetTileSafely(x, y);
			int num = (int)(tileSafely.frameX / 18);
			int num2 = -1;
			if (WorldGen.AttemptReorientingStinkbugBlocker(x, y, (int)tileSafely.wall, ref num2))
			{
				if (num2 != num)
				{
					tileSafely.frameX = (short)(num2 * 18);
				}
				return;
			}
			WorldGen.KillTile(x, y, false, false, false);
		}

		// Token: 0x06000F6F RID: 3951 RVA: 0x00442FFC File Offset: 0x004411FC
		public static bool AttemptReorientingStinkbugBlocker(int x, int y, int wall, ref int style)
		{
			style = -1;
			if (style == -1 && WorldGen.SolidTileAllowBottomSlope(x, y + 1))
			{
				style = 0;
			}
			if (style == -1 && WorldGen.SolidTileAllowBottomSlope(x, y - 1))
			{
				style = 1;
			}
			if (style == -1 && WorldGen.SolidTileAllowBottomSlope(x + 1, y))
			{
				style = 2;
			}
			if (style == -1 && WorldGen.SolidTileAllowBottomSlope(x - 1, y))
			{
				style = 3;
			}
			if (style == -1 && wall > 0)
			{
				style = 4;
			}
			return style > -1;
		}

		// Token: 0x06000F70 RID: 3952 RVA: 0x0044306C File Offset: 0x0044126C
		public static void CheckGnome(int x, int j)
		{
			if (WorldGen.destroyObject)
			{
				return;
			}
			int num = 567;
			int num2 = j;
			bool flag = true;
			Tile tileSafely = Framing.GetTileSafely(x, num2);
			Tile tileSafely2 = Framing.GetTileSafely(x, num2 + 1);
			if (tileSafely.frameY > 0)
			{
				num2--;
				tileSafely = Framing.GetTileSafely(x, num2);
				tileSafely2 = Framing.GetTileSafely(x, num2 + 1);
			}
			short num3 = tileSafely.frameX / 28;
			if (tileSafely.frameY == 0 && tileSafely2.frameY == 20 && (int)tileSafely.type == num && (int)tileSafely2.type == num)
			{
				flag = false;
			}
			if (Main.tile[x, num2 + 2] == null)
			{
				Main.tile[x, num2 + 2] = new Tile();
			}
			if (!WorldGen.SolidTileAllowBottomSlope(x, num2 + 2) && !TileID.Sets.Platforms[(int)Main.tile[x, num2 + 2].type])
			{
				flag = true;
			}
			if (flag)
			{
				WorldGen.destroyObject = true;
				if ((int)tileSafely.type == num)
				{
					WorldGen.KillTile(x, num2, false, false, false);
				}
				if ((int)tileSafely2.type == num)
				{
					WorldGen.KillTile(x, num2 + 1, false, false, false);
				}
				Item.NewItem(WorldGen.GetItemSource_FromTileBreak(x, num2), x * 16, num2 * 16, 16, 32, 4609, 1, false, 0, false, false);
				WorldGen.destroyObject = false;
			}
		}

		// Token: 0x06000F71 RID: 3953 RVA: 0x00443196 File Offset: 0x00441396
		public static void PlaceGnome(int x, int y, int style)
		{
			WorldGen.PlaceObject(x, y, 567, false, style, 0, -1, -1);
		}

		// Token: 0x06000F72 RID: 3954 RVA: 0x004431AC File Offset: 0x004413AC
		public static void PlaceDye(int x, int y, int style)
		{
			bool flag = false;
			if (Main.tile[x, y + 1] == null || Main.tile[x, y - 1] == null)
			{
				return;
			}
			if (style == 7)
			{
				if (Main.tile[x, y + 1].active() && Main.tile[x, y + 1].type != 3 && Main.tile[x, y + 1].type != 51 && Main.tile[x, y + 1].type != 61 && Main.tile[x, y + 1].type != 73 && Main.tile[x, y + 1].type != 74 && Main.tile[x, y + 1].type != 184)
				{
					return;
				}
				if (WorldGen.SolidTile(x, y - 1, false) && !Main.tile[x, y + 1].active())
				{
					flag = true;
				}
			}
			else
			{
				if (Main.tile[x, y - 1].active() && Main.tile[x, y - 1].type != 3 && Main.tile[x, y - 1].type != 51 && Main.tile[x, y - 1].type != 61 && Main.tile[x, y - 1].type != 73 && Main.tile[x, y - 1].type != 74 && Main.tile[x, y - 1].type != 184)
				{
					return;
				}
				if (style == 6)
				{
					if (Main.tile[x, y + 1].nactive() && Main.tile[x, y + 1].type == 80 && !Main.tile[x - 1, y + 1].active() && !Main.tile[x + 1, y + 1].active())
					{
						flag = true;
					}
				}
				else if (WorldGen.SolidTile(x, y + 1, false) && !Main.tile[x, y - 1].active())
				{
					if (style == 5)
					{
						if (Main.tile[x, y].liquid == 255 && !Main.tile[x, y].lava() && !Main.tile[x, y].honey() && !Main.tile[x, y].shimmer())
						{
							flag = true;
						}
					}
					else if (style >= 8 && style <= 11)
					{
						flag = true;
					}
					else if (Main.tile[x, y].liquid == 0)
					{
						if (style == 3 || style == 4)
						{
							if (Main.tile[x, y].wall == 0)
							{
								flag = true;
							}
						}
						else
						{
							flag = true;
						}
					}
				}
			}
			if (flag)
			{
				Main.tile[x, y].type = 227;
				Main.tile[x, y].active(true);
				Main.tile[x, y].halfBrick(false);
				Main.tile[x, y].slope(0);
				Main.tile[x, y].frameY = 0;
				Main.tile[x, y].frameX = (short)(34 * style);
			}
		}

		// Token: 0x06000F73 RID: 3955 RVA: 0x00443504 File Offset: 0x00441704
		public static bool PlacePot(int x, int y, ushort type = 28, int style = 0)
		{
			bool flag = true;
			if (WorldGen.remixWorldGen && (double)x > (double)Main.maxTilesX * 0.48 && (double)x < (double)Main.maxTilesX * 0.52 && y > Main.maxTilesY - 220)
			{
				flag = false;
			}
			for (int i = x; i < x + 2; i++)
			{
				for (int j = y - 1; j < y + 1; j++)
				{
					if (Main.tile[i, j] == null)
					{
						Main.tile[i, j] = new Tile();
					}
					if (Main.tile[i, j].active())
					{
						flag = false;
					}
				}
				if (Main.tile[i, y + 1] == null)
				{
					Main.tile[i, y + 1] = new Tile();
				}
				if (!Main.tile[i, y + 1].nactive() || Main.tile[i, y + 1].halfBrick() || Main.tile[i, y + 1].slope() != 0 || !Main.tileSolid[(int)Main.tile[i, y + 1].type])
				{
					flag = false;
				}
			}
			if (flag)
			{
				int num = WorldGen.genRand.Next(3) * 36;
				for (int k = 0; k < 2; k++)
				{
					for (int l = -1; l < 1; l++)
					{
						int num2 = k * 18 + num;
						int num3 = (l + 1) * 18;
						Main.tile[x + k, y + l].active(true);
						Main.tile[x + k, y + l].frameX = (short)num2;
						Main.tile[x + k, y + l].frameY = (short)(num3 + style * 36);
						Main.tile[x + k, y + l].type = type;
						Main.tile[x + k, y + l].halfBrick(false);
					}
				}
				return true;
			}
			return false;
		}

		// Token: 0x06000F74 RID: 3956 RVA: 0x00443700 File Offset: 0x00441900
		public static bool CheckCactus(int i, int j)
		{
			int num = j;
			int num2 = i;
			while (Main.tile[num2, num] != null && Main.tile[num2, num].active() && Main.tile[num2, num].type == 80)
			{
				num++;
				if (Main.tile[num2, num] == null)
				{
					return false;
				}
				if (!Main.tile[num2, num].active() || Main.tile[num2, num].type != 80)
				{
					if (Main.tile[num2 - 1, num] != null && Main.tile[num2 - 1, num].active() && Main.tile[num2 - 1, num].type == 80 && Main.tile[num2 - 1, num - 1] != null && Main.tile[num2 - 1, num - 1].active() && Main.tile[num2 - 1, num - 1].type == 80 && num2 >= i)
					{
						num2--;
					}
					if (Main.tile[num2 + 1, num] != null && Main.tile[num2 + 1, num].active() && Main.tile[num2 + 1, num].type == 80 && Main.tile[num2 + 1, num - 1] != null && Main.tile[num2 + 1, num - 1].active() && Main.tile[num2 + 1, num - 1].type == 80 && num2 <= i)
					{
						num2++;
					}
				}
			}
			if (!Main.tile[num2, num].nactive() || Main.tile[num2, num].halfBrick() || Main.tile[num2, num].slope() != 0 || (Main.tile[num2, num].type != 53 && Main.tile[num2, num].type != 112 && Main.tile[num2, num].type != 116 && Main.tile[num2, num].type != 234))
			{
				WorldGen.KillTile(i, j, false, false, false);
				return true;
			}
			if (i != num2)
			{
				if ((!Main.tile[i, j + 1].active() || Main.tile[i, j + 1].type != 80) && (!Main.tile[i - 1, j].active() || Main.tile[i - 1, j].type != 80) && (!Main.tile[i + 1, j].active() || Main.tile[i + 1, j].type != 80))
				{
					WorldGen.KillTile(i, j, false, false, false);
					return true;
				}
			}
			else if (i == num2 && (!Main.tile[i, j + 1].active() || (Main.tile[i, j + 1].type != 80 && Main.tile[i, j + 1].type != 53 && Main.tile[i, j + 1].type != 112 && Main.tile[i, j + 1].type != 116 && Main.tile[i, j + 1].type != 234)))
			{
				WorldGen.KillTile(i, j, false, false, false);
				return true;
			}
			return false;
		}

		// Token: 0x06000F75 RID: 3957 RVA: 0x00443A78 File Offset: 0x00441C78
		public static void PlantCactus(int i, int j)
		{
			WorldGen.GrowCactus(i, j);
			for (int k = 0; k < 150; k++)
			{
				int i2 = WorldGen.genRand.Next(i - 1, i + 2);
				int j2 = WorldGen.genRand.Next(j - 10, j + 2);
				WorldGen.GrowCactus(i2, j2);
			}
		}

		// Token: 0x06000F76 RID: 3958 RVA: 0x00443AC4 File Offset: 0x00441CC4
		public static void CheckOrb(int i, int j, int type)
		{
			if (Main.tile[i, j] == null)
			{
				return;
			}
			int frameX = (int)Main.tile[i, j].frameX;
			bool flag = false;
			if (frameX >= 36)
			{
				flag = true;
			}
			if (!WorldGen.destroyObject)
			{
				int num;
				if (Main.tile[i, j].frameX == 0 || Main.tile[i, j].frameX == 36)
				{
					num = i;
				}
				else
				{
					num = i - 1;
				}
				int num2;
				if (Main.tile[i, j].frameY == 0)
				{
					num2 = j;
				}
				else
				{
					num2 = j - 1;
				}
				for (int k = 0; k < 2; k++)
				{
					for (int l = 0; l < 2; l++)
					{
						Tile tile = Main.tile[num + k, num2 + l];
						if (tile != null && (!tile.nactive() || (int)tile.type != type))
						{
							WorldGen.destroyObject = true;
							break;
						}
					}
					if (WorldGen.destroyObject)
					{
						break;
					}
					if (type == 12 || type == 639)
					{
						Tile tile = Main.tile[num + k, num2 + 2];
						if (tile != null && !WorldGen.SolidTileAllowBottomSlope(num + k, num2 + 2))
						{
							WorldGen.destroyObject = true;
							break;
						}
					}
				}
				if (!WorldGen.destroyObject)
				{
					return;
				}
				for (int m = num; m < num + 2; m++)
				{
					for (int n = num2; n < num2 + 2; n++)
					{
						if (Main.tile[m, n] != null && (int)Main.tile[m, n].type == type)
						{
							WorldGen.KillTile(m, n, false, false, false);
						}
					}
				}
				if (Main.netMode != 1 && !WorldGen.noTileActions)
				{
					if (type == 12)
					{
						Item.NewItem(WorldGen.GetItemSource_FromTileBreak(num, num2), num * 16, num2 * 16, 32, 32, 29, 1, false, 0, false, false);
					}
					else if (type == 639)
					{
						Item.NewItem(WorldGen.GetItemSource_FromTileBreak(num, num2), num * 16, num2 * 16, 32, 32, 109, 1, false, 0, false, false);
					}
					else if (type == 31)
					{
						if (flag)
						{
							int num3 = Main.rand.Next(5);
							if (!WorldGen.shadowOrbSmashed)
							{
								num3 = 0;
							}
							if (num3 == 0)
							{
								Item.NewItem(WorldGen.GetItemSource_FromTileBreak(num, num2), num * 16, num2 * 16, 32, 32, 800, 1, false, -1, false, false);
								int stack = WorldGen.genRand.Next(100, 101);
								Item.NewItem(WorldGen.GetItemSource_FromTileBreak(num, num2), num * 16, num2 * 16, 32, 32, 97, stack, false, 0, false, false);
							}
							else if (num3 == 1)
							{
								Item.NewItem(WorldGen.GetItemSource_FromTileBreak(num, num2), num * 16, num2 * 16, 32, 32, 1256, 1, false, -1, false, false);
							}
							else if (num3 == 2)
							{
								Item.NewItem(WorldGen.GetItemSource_FromTileBreak(num, num2), num * 16, num2 * 16, 32, 32, 802, 1, false, -1, false, false);
							}
							else if (num3 == 3)
							{
								Item.NewItem(WorldGen.GetItemSource_FromTileBreak(num, num2), num * 16, num2 * 16, 32, 32, 3062, 1, false, -1, false, false);
							}
							else if (num3 == 4)
							{
								Item.NewItem(WorldGen.GetItemSource_FromTileBreak(num, num2), num * 16, num2 * 16, 32, 32, 1290, 1, false, -1, false, false);
							}
						}
						else
						{
							int num4 = Main.rand.Next(5);
							if (!WorldGen.shadowOrbSmashed)
							{
								num4 = 0;
							}
							if (num4 == 0)
							{
								Item.NewItem(WorldGen.GetItemSource_FromTileBreak(num, num2), num * 16, num2 * 16, 32, 32, 96, 1, false, -1, false, false);
								int stack2 = WorldGen.genRand.Next(100, 101);
								Item.NewItem(WorldGen.GetItemSource_FromTileBreak(num, num2), num * 16, num2 * 16, 32, 32, 97, stack2, false, 0, false, false);
							}
							else if (num4 == 1)
							{
								Item.NewItem(WorldGen.GetItemSource_FromTileBreak(num, num2), num * 16, num2 * 16, 32, 32, 64, 1, false, -1, false, false);
							}
							else if (num4 == 2)
							{
								Item.NewItem(WorldGen.GetItemSource_FromTileBreak(num, num2), num * 16, num2 * 16, 32, 32, 162, 1, false, -1, false, false);
							}
							else if (num4 == 3)
							{
								Item.NewItem(WorldGen.GetItemSource_FromTileBreak(num, num2), num * 16, num2 * 16, 32, 32, 115, 1, false, -1, false, false);
							}
							else if (num4 == 4)
							{
								Item.NewItem(WorldGen.GetItemSource_FromTileBreak(num, num2), num * 16, num2 * 16, 32, 32, 111, 1, false, -1, false, false);
							}
						}
						WorldGen.shadowOrbSmashed = true;
						WorldGen.shadowOrbCount++;
						if (WorldGen.shadowOrbCount >= 3)
						{
							if ((!NPC.AnyNPCs(266) || !flag) && (!NPC.AnyNPCs(13) || flag))
							{
								WorldGen.shadowOrbCount = 0;
								float num5 = (float)(num * 16);
								float num6 = (float)(num2 * 16);
								float num7 = -1f;
								int plr = 0;
								for (int num8 = 0; num8 < 255; num8++)
								{
									float num9 = Math.Abs(Main.player[num8].position.X - num5) + Math.Abs(Main.player[num8].position.Y - num6);
									if (num9 < num7 || num7 == -1f)
									{
										plr = num8;
										num7 = num9;
									}
								}
								if (flag)
								{
									NPC.SpawnOnPlayer(plr, 266);
								}
								else
								{
									NPC.SpawnOnPlayer(plr, 13);
								}
							}
						}
						else
						{
							LocalizedText localizedText = Lang.misc[10];
							if (WorldGen.shadowOrbCount == 2)
							{
								localizedText = Lang.misc[11];
							}
							if (Main.netMode == 0)
							{
								Main.NewText(localizedText.ToString(), 50, byte.MaxValue, 130);
							}
							else if (Main.netMode == 2)
							{
								ChatHelper.BroadcastChatMessage(NetworkText.FromKey(localizedText.Key, new object[0]), new Color(50, 255, 130), -1);
							}
						}
						AchievementsHelper.NotifyProgressionEvent(7);
					}
				}
				if (flag)
				{
					SoundEngine.PlaySound(4, i * 16, j * 16, 1, 1f, 0f);
				}
				else
				{
					SoundEngine.PlaySound(13, i * 16, j * 16, 1, 1f, 0f);
				}
				WorldGen.destroyObject = false;
			}
		}

		// Token: 0x06000F77 RID: 3959 RVA: 0x00444084 File Offset: 0x00442284
		public static void CheckPalmTree(int i, int j)
		{
			int num = -1;
			int num2 = -1;
			int type = (int)Main.tile[i, j].type;
			int frameX = (int)Main.tile[i, j].frameX;
			int frameY = (int)Main.tile[i, j].frameY;
			if (Main.tile[i, j - 1] != null && Main.tile[i, j - 1].active())
			{
				num = (int)Main.tile[i, j - 1].type;
			}
			if (Main.tile[i, j + 1] != null && Main.tile[i, j + 1].active())
			{
				num2 = (int)Main.tile[i, j + 1].type;
			}
			if (num2 == 53)
			{
				num2 = 53;
			}
			if (num2 == 234)
			{
				num2 = 53;
			}
			if (num2 == 116)
			{
				num2 = 53;
			}
			if (num2 == 112)
			{
				num2 = 53;
			}
			if (num2 != 53 && num2 != type)
			{
				WorldGen.KillTile(i, j, false, false, false);
			}
			if ((Main.tile[i, j].frameX == 66 || Main.tile[i, j].frameX == 220) && num2 != 53)
			{
				WorldGen.KillTile(i, j, false, false, false);
			}
			if (num != type && Main.tile[i, j].frameX <= 44)
			{
				Main.tile[i, j].frameX = (short)(WorldGen.genRand.Next(7, 10) * 22);
			}
			else if (num != type && Main.tile[i, j].frameX == 66)
			{
				Main.tile[i, j].frameX = 220;
			}
			if ((int)Main.tile[i, j].frameX != frameX && (int)Main.tile[i, j].frameY != frameY && frameX >= 0 && frameY >= 0)
			{
				WorldGen.TileFrame(i - 1, j, false, false);
				WorldGen.TileFrame(i + 1, j, false, false);
				WorldGen.TileFrame(i, j - 1, false, false);
				WorldGen.TileFrame(i, j + 1, false, false);
			}
		}

		// Token: 0x06000F78 RID: 3960 RVA: 0x0044427C File Offset: 0x0044247C
		public static void CheckTreeWithSettings(int x, int y, WorldGen.CheckTreeSettings settings)
		{
			int num = -1;
			int num2 = -1;
			int num3 = -1;
			int num4 = -1;
			Tile tile = Main.tile[x, y];
			int type = (int)tile.type;
			int frameX = (int)tile.frameX;
			int frameY = (int)tile.frameY;
			if (Main.tile[x - 1, y] != null && Main.tile[x - 1, y].active())
			{
				num2 = (int)Main.tile[x - 1, y].type;
			}
			if (Main.tile[x + 1, y] != null && Main.tile[x + 1, y].active())
			{
				num3 = (int)Main.tile[x + 1, y].type;
			}
			if (Main.tile[x, y - 1] != null && Main.tile[x, y - 1].active())
			{
				num = (int)Main.tile[x, y - 1].type;
			}
			if (Main.tile[x, y + 1] != null && Main.tile[x, y + 1].active())
			{
				num4 = (int)Main.tile[x, y + 1].type;
			}
			bool flag = settings.IsGroundValid(num4);
			bool flag2 = num3 == type;
			bool flag3 = num2 == type;
			if (!flag && num4 != type && ((tile.frameX == 0 && tile.frameY <= 130) || (tile.frameX == 22 && tile.frameY <= 130) || (tile.frameX == 44 && tile.frameY <= 130)))
			{
				WorldGen.KillTile(x, y, false, false, false);
			}
			if (tile.frameX >= 22 && tile.frameX <= 44 && tile.frameY >= 132 && tile.frameY <= 176)
			{
				if (!flag)
				{
					WorldGen.KillTile(x, y, false, false, false);
				}
				else if ((tile.frameX != 22 || !flag3) && (tile.frameX != 44 || !flag2))
				{
					WorldGen.KillTile(x, y, false, false, false);
				}
			}
			else if ((tile.frameX == 88 && tile.frameY >= 0 && tile.frameY <= 44) || (tile.frameX == 66 && tile.frameY >= 66 && tile.frameY <= 130) || (tile.frameX == 110 && tile.frameY >= 66 && tile.frameY <= 110) || (tile.frameX == 132 && tile.frameY >= 0 && tile.frameY <= 176))
			{
				if (flag3 && flag2)
				{
					if (tile.frameNumber() == 0)
					{
						tile.frameX = 110;
						tile.frameY = 66;
					}
					if (tile.frameNumber() == 1)
					{
						tile.frameX = 110;
						tile.frameY = 88;
					}
					if (tile.frameNumber() == 2)
					{
						tile.frameX = 110;
						tile.frameY = 110;
					}
				}
				else if (flag3)
				{
					if (tile.frameNumber() == 0)
					{
						tile.frameX = 88;
						tile.frameY = 0;
					}
					if (tile.frameNumber() == 1)
					{
						tile.frameX = 88;
						tile.frameY = 22;
					}
					if (tile.frameNumber() == 2)
					{
						tile.frameX = 88;
						tile.frameY = 44;
					}
				}
				else if (flag2)
				{
					if (tile.frameNumber() == 0)
					{
						tile.frameX = 66;
						tile.frameY = 66;
					}
					if (tile.frameNumber() == 1)
					{
						tile.frameX = 66;
						tile.frameY = 88;
					}
					if (tile.frameNumber() == 2)
					{
						tile.frameX = 66;
						tile.frameY = 110;
					}
				}
				else
				{
					if (tile.frameNumber() == 0)
					{
						tile.frameX = 0;
						tile.frameY = 0;
					}
					if (tile.frameNumber() == 1)
					{
						tile.frameX = 0;
						tile.frameY = 22;
					}
					if (tile.frameNumber() == 2)
					{
						tile.frameX = 0;
						tile.frameY = 44;
					}
				}
			}
			if (tile.frameY >= 132 && tile.frameY <= 176 && (tile.frameX == 0 || tile.frameX == 66 || tile.frameX == 88))
			{
				if (!flag)
				{
					WorldGen.KillTile(x, y, false, false, false);
				}
				if (!flag3 && !flag2)
				{
					if (tile.frameNumber() == 0)
					{
						tile.frameX = 0;
						tile.frameY = 0;
					}
					if (tile.frameNumber() == 1)
					{
						tile.frameX = 0;
						tile.frameY = 22;
					}
					if (tile.frameNumber() == 2)
					{
						tile.frameX = 0;
						tile.frameY = 44;
					}
				}
				else if (!flag3)
				{
					if (tile.frameNumber() == 0)
					{
						tile.frameX = 0;
						tile.frameY = 132;
					}
					if (tile.frameNumber() == 1)
					{
						tile.frameX = 0;
						tile.frameY = 154;
					}
					if (tile.frameNumber() == 2)
					{
						tile.frameX = 0;
						tile.frameY = 176;
					}
				}
				else if (!flag2)
				{
					if (tile.frameNumber() == 0)
					{
						tile.frameX = 66;
						tile.frameY = 132;
					}
					if (tile.frameNumber() == 1)
					{
						tile.frameX = 66;
						tile.frameY = 154;
					}
					if (tile.frameNumber() == 2)
					{
						tile.frameX = 66;
						tile.frameY = 176;
					}
				}
				else
				{
					if (tile.frameNumber() == 0)
					{
						tile.frameX = 88;
						tile.frameY = 132;
					}
					if (tile.frameNumber() == 1)
					{
						tile.frameX = 88;
						tile.frameY = 154;
					}
					if (tile.frameNumber() == 2)
					{
						tile.frameX = 88;
						tile.frameY = 176;
					}
				}
			}
			if ((tile.frameX == 66 && (tile.frameY == 0 || tile.frameY == 22 || tile.frameY == 44)) || (tile.frameX == 44 && (tile.frameY == 198 || tile.frameY == 220 || tile.frameY == 242)))
			{
				if (!flag2)
				{
					WorldGen.KillTile(x, y, false, false, false);
				}
			}
			else if ((tile.frameX == 88 && (tile.frameY == 66 || tile.frameY == 88 || tile.frameY == 110)) || (tile.frameX == 66 && (tile.frameY == 198 || tile.frameY == 220 || tile.frameY == 242)))
			{
				if (!flag3)
				{
					WorldGen.KillTile(x, y, false, false, false);
				}
			}
			else if (num4 == -1)
			{
				WorldGen.KillTile(x, y, false, false, false);
			}
			else if (num != type && tile.frameY < 198 && ((tile.frameX != 22 && tile.frameX != 44) || tile.frameY < 132))
			{
				if (flag3 || flag2)
				{
					if (num4 == type)
					{
						if (flag3 && flag2)
						{
							if (tile.frameNumber() == 0)
							{
								tile.frameX = 132;
								tile.frameY = 132;
							}
							if (tile.frameNumber() == 1)
							{
								tile.frameX = 132;
								tile.frameY = 154;
							}
							if (tile.frameNumber() == 2)
							{
								tile.frameX = 132;
								tile.frameY = 176;
							}
						}
						else if (flag3)
						{
							if (tile.frameNumber() == 0)
							{
								tile.frameX = 132;
								tile.frameY = 0;
							}
							if (tile.frameNumber() == 1)
							{
								tile.frameX = 132;
								tile.frameY = 22;
							}
							if (tile.frameNumber() == 2)
							{
								tile.frameX = 132;
								tile.frameY = 44;
							}
						}
						else if (flag2)
						{
							if (tile.frameNumber() == 0)
							{
								tile.frameX = 132;
								tile.frameY = 66;
							}
							if (tile.frameNumber() == 1)
							{
								tile.frameX = 132;
								tile.frameY = 88;
							}
							if (tile.frameNumber() == 2)
							{
								tile.frameX = 132;
								tile.frameY = 110;
							}
						}
					}
					else if (flag3 && flag2)
					{
						if (tile.frameNumber() == 0)
						{
							tile.frameX = 154;
							tile.frameY = 132;
						}
						if (tile.frameNumber() == 1)
						{
							tile.frameX = 154;
							tile.frameY = 154;
						}
						if (tile.frameNumber() == 2)
						{
							tile.frameX = 154;
							tile.frameY = 176;
						}
					}
					else if (flag3)
					{
						if (tile.frameNumber() == 0)
						{
							tile.frameX = 154;
							tile.frameY = 0;
						}
						if (tile.frameNumber() == 1)
						{
							tile.frameX = 154;
							tile.frameY = 22;
						}
						if (tile.frameNumber() == 2)
						{
							tile.frameX = 154;
							tile.frameY = 44;
						}
					}
					else if (flag2)
					{
						if (tile.frameNumber() == 0)
						{
							tile.frameX = 154;
							tile.frameY = 66;
						}
						if (tile.frameNumber() == 1)
						{
							tile.frameX = 154;
							tile.frameY = 88;
						}
						if (tile.frameNumber() == 2)
						{
							tile.frameX = 154;
							tile.frameY = 110;
						}
					}
				}
				else
				{
					if (tile.frameNumber() == 0)
					{
						tile.frameX = 110;
						tile.frameY = 0;
					}
					if (tile.frameNumber() == 1)
					{
						tile.frameX = 110;
						tile.frameY = 22;
					}
					if (tile.frameNumber() == 2)
					{
						tile.frameX = 110;
						tile.frameY = 44;
					}
				}
			}
			if ((int)tile.frameX != frameX && (int)tile.frameY != frameY && frameX >= 0 && frameY >= 0)
			{
				WorldGen.TileFrame(x - 1, y, false, false);
				WorldGen.TileFrame(x + 1, y, false, false);
				WorldGen.TileFrame(x, y - 1, false, false);
				WorldGen.TileFrame(x, y + 1, false, false);
			}
		}

		// Token: 0x06000F79 RID: 3961 RVA: 0x00444CD8 File Offset: 0x00442ED8
		public static void CheckTree(int i, int j)
		{
			int num = -1;
			int num2 = -1;
			int num3 = -1;
			int num4 = -1;
			int type = (int)Main.tile[i, j].type;
			int frameX = (int)Main.tile[i, j].frameX;
			int frameY = (int)Main.tile[i, j].frameY;
			if (Main.tile[i - 1, j] != null && Main.tile[i - 1, j].active())
			{
				num2 = (int)Main.tile[i - 1, j].type;
			}
			if (Main.tile[i + 1, j] != null && Main.tile[i + 1, j].active())
			{
				num3 = (int)Main.tile[i + 1, j].type;
			}
			if (Main.tile[i, j - 1] != null && Main.tile[i, j - 1].active())
			{
				num = (int)Main.tile[i, j - 1].type;
			}
			if (Main.tile[i, j + 1] != null && Main.tile[i, j + 1].active())
			{
				num4 = (int)Main.tile[i, j + 1].type;
			}
			if (Main.tile[i - 1, j - 1] != null && Main.tile[i - 1, j - 1].active())
			{
				ushort type2 = Main.tile[i - 1, j - 1].type;
			}
			if (Main.tile[i + 1, j - 1] != null && Main.tile[i + 1, j - 1].active())
			{
				ushort type3 = Main.tile[i + 1, j - 1].type;
			}
			if (Main.tile[i - 1, j + 1] != null && Main.tile[i - 1, j + 1].active())
			{
				ushort type4 = Main.tile[i - 1, j + 1].type;
			}
			if (Main.tile[i + 1, j + 1] != null && Main.tile[i + 1, j + 1].active())
			{
				ushort type5 = Main.tile[i + 1, j + 1].type;
			}
			if (num4 == 23 || num4 == 661)
			{
				num4 = 2;
			}
			if (num4 == 477)
			{
				num4 = 2;
			}
			if (num4 == 60)
			{
				num4 = 2;
			}
			if (num4 == 70)
			{
				num4 = 2;
			}
			if (num4 == 109)
			{
				num4 = 2;
			}
			if (num4 == 147)
			{
				num4 = 2;
			}
			if (num4 == 199 || num4 == 662)
			{
				num4 = 2;
			}
			if (num4 == 492)
			{
				num4 = 2;
			}
			if (num4 != 2 && num4 != type && ((Main.tile[i, j].frameX == 0 && Main.tile[i, j].frameY <= 130) || (Main.tile[i, j].frameX == 22 && Main.tile[i, j].frameY <= 130) || (Main.tile[i, j].frameX == 44 && Main.tile[i, j].frameY <= 130)))
			{
				WorldGen.KillTile(i, j, false, false, false);
			}
			if (Main.tile[i, j].frameX >= 22 && Main.tile[i, j].frameX <= 44 && Main.tile[i, j].frameY >= 132 && Main.tile[i, j].frameY <= 176)
			{
				if (num4 != 2)
				{
					WorldGen.KillTile(i, j, false, false, false);
				}
				else if ((Main.tile[i, j].frameX != 22 || num2 != type) && (Main.tile[i, j].frameX != 44 || num3 != type))
				{
					WorldGen.KillTile(i, j, false, false, false);
				}
			}
			else if ((Main.tile[i, j].frameX == 88 && Main.tile[i, j].frameY >= 0 && Main.tile[i, j].frameY <= 44) || (Main.tile[i, j].frameX == 66 && Main.tile[i, j].frameY >= 66 && Main.tile[i, j].frameY <= 130) || (Main.tile[i, j].frameX == 110 && Main.tile[i, j].frameY >= 66 && Main.tile[i, j].frameY <= 110) || (Main.tile[i, j].frameX == 132 && Main.tile[i, j].frameY >= 0 && Main.tile[i, j].frameY <= 176))
			{
				if (num2 == type && num3 == type)
				{
					if (Main.tile[i, j].frameNumber() == 0)
					{
						Main.tile[i, j].frameX = 110;
						Main.tile[i, j].frameY = 66;
					}
					if (Main.tile[i, j].frameNumber() == 1)
					{
						Main.tile[i, j].frameX = 110;
						Main.tile[i, j].frameY = 88;
					}
					if (Main.tile[i, j].frameNumber() == 2)
					{
						Main.tile[i, j].frameX = 110;
						Main.tile[i, j].frameY = 110;
					}
				}
				else if (num2 == type)
				{
					if (Main.tile[i, j].frameNumber() == 0)
					{
						Main.tile[i, j].frameX = 88;
						Main.tile[i, j].frameY = 0;
					}
					if (Main.tile[i, j].frameNumber() == 1)
					{
						Main.tile[i, j].frameX = 88;
						Main.tile[i, j].frameY = 22;
					}
					if (Main.tile[i, j].frameNumber() == 2)
					{
						Main.tile[i, j].frameX = 88;
						Main.tile[i, j].frameY = 44;
					}
				}
				else if (num3 == type)
				{
					if (Main.tile[i, j].frameNumber() == 0)
					{
						Main.tile[i, j].frameX = 66;
						Main.tile[i, j].frameY = 66;
					}
					if (Main.tile[i, j].frameNumber() == 1)
					{
						Main.tile[i, j].frameX = 66;
						Main.tile[i, j].frameY = 88;
					}
					if (Main.tile[i, j].frameNumber() == 2)
					{
						Main.tile[i, j].frameX = 66;
						Main.tile[i, j].frameY = 110;
					}
				}
				else
				{
					if (Main.tile[i, j].frameNumber() == 0)
					{
						Main.tile[i, j].frameX = 0;
						Main.tile[i, j].frameY = 0;
					}
					if (Main.tile[i, j].frameNumber() == 1)
					{
						Main.tile[i, j].frameX = 0;
						Main.tile[i, j].frameY = 22;
					}
					if (Main.tile[i, j].frameNumber() == 2)
					{
						Main.tile[i, j].frameX = 0;
						Main.tile[i, j].frameY = 44;
					}
				}
			}
			if (Main.tile[i, j].frameY >= 132 && Main.tile[i, j].frameY <= 176 && (Main.tile[i, j].frameX == 0 || Main.tile[i, j].frameX == 66 || Main.tile[i, j].frameX == 88))
			{
				if (num4 != 2)
				{
					WorldGen.KillTile(i, j, false, false, false);
				}
				if (num2 != type && num3 != type)
				{
					if (Main.tile[i, j].frameNumber() == 0)
					{
						Main.tile[i, j].frameX = 0;
						Main.tile[i, j].frameY = 0;
					}
					if (Main.tile[i, j].frameNumber() == 1)
					{
						Main.tile[i, j].frameX = 0;
						Main.tile[i, j].frameY = 22;
					}
					if (Main.tile[i, j].frameNumber() == 2)
					{
						Main.tile[i, j].frameX = 0;
						Main.tile[i, j].frameY = 44;
					}
				}
				else if (num2 != type)
				{
					if (Main.tile[i, j].frameNumber() == 0)
					{
						Main.tile[i, j].frameX = 0;
						Main.tile[i, j].frameY = 132;
					}
					if (Main.tile[i, j].frameNumber() == 1)
					{
						Main.tile[i, j].frameX = 0;
						Main.tile[i, j].frameY = 154;
					}
					if (Main.tile[i, j].frameNumber() == 2)
					{
						Main.tile[i, j].frameX = 0;
						Main.tile[i, j].frameY = 176;
					}
				}
				else if (num3 != type)
				{
					if (Main.tile[i, j].frameNumber() == 0)
					{
						Main.tile[i, j].frameX = 66;
						Main.tile[i, j].frameY = 132;
					}
					if (Main.tile[i, j].frameNumber() == 1)
					{
						Main.tile[i, j].frameX = 66;
						Main.tile[i, j].frameY = 154;
					}
					if (Main.tile[i, j].frameNumber() == 2)
					{
						Main.tile[i, j].frameX = 66;
						Main.tile[i, j].frameY = 176;
					}
				}
				else
				{
					if (Main.tile[i, j].frameNumber() == 0)
					{
						Main.tile[i, j].frameX = 88;
						Main.tile[i, j].frameY = 132;
					}
					if (Main.tile[i, j].frameNumber() == 1)
					{
						Main.tile[i, j].frameX = 88;
						Main.tile[i, j].frameY = 154;
					}
					if (Main.tile[i, j].frameNumber() == 2)
					{
						Main.tile[i, j].frameX = 88;
						Main.tile[i, j].frameY = 176;
					}
				}
			}
			if ((Main.tile[i, j].frameX == 66 && (Main.tile[i, j].frameY == 0 || Main.tile[i, j].frameY == 22 || Main.tile[i, j].frameY == 44)) || (Main.tile[i, j].frameX == 44 && (Main.tile[i, j].frameY == 198 || Main.tile[i, j].frameY == 220 || Main.tile[i, j].frameY == 242)))
			{
				if (num3 != type)
				{
					WorldGen.KillTile(i, j, false, false, false);
				}
			}
			else if ((Main.tile[i, j].frameX == 88 && (Main.tile[i, j].frameY == 66 || Main.tile[i, j].frameY == 88 || Main.tile[i, j].frameY == 110)) || (Main.tile[i, j].frameX == 66 && (Main.tile[i, j].frameY == 198 || Main.tile[i, j].frameY == 220 || Main.tile[i, j].frameY == 242)))
			{
				if (num2 != type)
				{
					WorldGen.KillTile(i, j, false, false, false);
				}
			}
			else if (num4 == -1 || num4 == 23)
			{
				WorldGen.KillTile(i, j, false, false, false);
			}
			else if (num != type && Main.tile[i, j].frameY < 198 && ((Main.tile[i, j].frameX != 22 && Main.tile[i, j].frameX != 44) || Main.tile[i, j].frameY < 132))
			{
				if (num2 == type || num3 == type)
				{
					if (num4 == type)
					{
						if (num2 == type && num3 == type)
						{
							if (Main.tile[i, j].frameNumber() == 0)
							{
								Main.tile[i, j].frameX = 132;
								Main.tile[i, j].frameY = 132;
							}
							if (Main.tile[i, j].frameNumber() == 1)
							{
								Main.tile[i, j].frameX = 132;
								Main.tile[i, j].frameY = 154;
							}
							if (Main.tile[i, j].frameNumber() == 2)
							{
								Main.tile[i, j].frameX = 132;
								Main.tile[i, j].frameY = 176;
							}
						}
						else if (num2 == type)
						{
							if (Main.tile[i, j].frameNumber() == 0)
							{
								Main.tile[i, j].frameX = 132;
								Main.tile[i, j].frameY = 0;
							}
							if (Main.tile[i, j].frameNumber() == 1)
							{
								Main.tile[i, j].frameX = 132;
								Main.tile[i, j].frameY = 22;
							}
							if (Main.tile[i, j].frameNumber() == 2)
							{
								Main.tile[i, j].frameX = 132;
								Main.tile[i, j].frameY = 44;
							}
						}
						else if (num3 == type)
						{
							if (Main.tile[i, j].frameNumber() == 0)
							{
								Main.tile[i, j].frameX = 132;
								Main.tile[i, j].frameY = 66;
							}
							if (Main.tile[i, j].frameNumber() == 1)
							{
								Main.tile[i, j].frameX = 132;
								Main.tile[i, j].frameY = 88;
							}
							if (Main.tile[i, j].frameNumber() == 2)
							{
								Main.tile[i, j].frameX = 132;
								Main.tile[i, j].frameY = 110;
							}
						}
					}
					else if (num2 == type && num3 == type)
					{
						if (Main.tile[i, j].frameNumber() == 0)
						{
							Main.tile[i, j].frameX = 154;
							Main.tile[i, j].frameY = 132;
						}
						if (Main.tile[i, j].frameNumber() == 1)
						{
							Main.tile[i, j].frameX = 154;
							Main.tile[i, j].frameY = 154;
						}
						if (Main.tile[i, j].frameNumber() == 2)
						{
							Main.tile[i, j].frameX = 154;
							Main.tile[i, j].frameY = 176;
						}
					}
					else if (num2 == type)
					{
						if (Main.tile[i, j].frameNumber() == 0)
						{
							Main.tile[i, j].frameX = 154;
							Main.tile[i, j].frameY = 0;
						}
						if (Main.tile[i, j].frameNumber() == 1)
						{
							Main.tile[i, j].frameX = 154;
							Main.tile[i, j].frameY = 22;
						}
						if (Main.tile[i, j].frameNumber() == 2)
						{
							Main.tile[i, j].frameX = 154;
							Main.tile[i, j].frameY = 44;
						}
					}
					else if (num3 == type)
					{
						if (Main.tile[i, j].frameNumber() == 0)
						{
							Main.tile[i, j].frameX = 154;
							Main.tile[i, j].frameY = 66;
						}
						if (Main.tile[i, j].frameNumber() == 1)
						{
							Main.tile[i, j].frameX = 154;
							Main.tile[i, j].frameY = 88;
						}
						if (Main.tile[i, j].frameNumber() == 2)
						{
							Main.tile[i, j].frameX = 154;
							Main.tile[i, j].frameY = 110;
						}
					}
				}
				else
				{
					if (Main.tile[i, j].frameNumber() == 0)
					{
						Main.tile[i, j].frameX = 110;
						Main.tile[i, j].frameY = 0;
					}
					if (Main.tile[i, j].frameNumber() == 1)
					{
						Main.tile[i, j].frameX = 110;
						Main.tile[i, j].frameY = 22;
					}
					if (Main.tile[i, j].frameNumber() == 2)
					{
						Main.tile[i, j].frameX = 110;
						Main.tile[i, j].frameY = 44;
					}
				}
			}
			if ((int)Main.tile[i, j].frameX != frameX && (int)Main.tile[i, j].frameY != frameY && frameX >= 0 && frameY >= 0)
			{
				WorldGen.TileFrame(i - 1, j, false, false);
				WorldGen.TileFrame(i + 1, j, false, false);
				WorldGen.TileFrame(i, j - 1, false, false);
				WorldGen.TileFrame(i, j + 1, false, false);
			}
		}

		// Token: 0x06000F7A RID: 3962 RVA: 0x0044602C File Offset: 0x0044422C
		public static bool TileIsExposedToAir(int x, int y)
		{
			if (!WorldGen.InWorld(x, y, 2))
			{
				return false;
			}
			for (int i = x - 1; i <= x + 1; i++)
			{
				for (int j = y - 1; j <= y + 1; j++)
				{
					Tile tile = Main.tile[i, j];
					if (tile != null && (!tile.active() || !Main.tileSolid[(int)tile.type] || TileID.Sets.Platforms[(int)tile.type]))
					{
						return true;
					}
				}
			}
			return false;
		}

		// Token: 0x06000F7B RID: 3963 RVA: 0x0044609C File Offset: 0x0044429C
		public static bool TryKillingTreesAboveIfTheyWouldBecomeInvalid(int i, int j, int newFloorType)
		{
			if (newFloorType < 0 || newFloorType >= (int)TileID.Count)
			{
				return false;
			}
			if (!WorldGen.InWorld(i, j, 2))
			{
				return false;
			}
			Tile tile = Main.tile[i, j - 1];
			if (tile == null || !tile.active())
			{
				return false;
			}
			int type = (int)tile.type;
			if (!WorldGen.IsTreeType((int)tile.type) && tile.type != 323)
			{
				return false;
			}
			bool flag;
			if (type != 5)
			{
				if (type == 72)
				{
					flag = (newFloorType == 70);
					goto IL_9B;
				}
				if (type == 323)
				{
					flag = TileID.Sets.Conversion.Sand[newFloorType];
					goto IL_9B;
				}
			}
			flag = (TileID.Sets.Conversion.Grass[newFloorType] || TileID.Sets.Conversion.JungleGrass[newFloorType] || TileID.Sets.Conversion.Snow[newFloorType]);
			IL_9B:
			WorldGen.GrowTreeSettings growTreeSettings;
			if (flag && WorldGen.GrowTreeSettings.Profiles.TryGetFromTreeId(type, out growTreeSettings))
			{
				flag = growTreeSettings.GroundTest(newFloorType);
			}
			if (!flag)
			{
				WorldGen.KillTile(i, j - 1, false, false, false);
				if (Main.netMode == 1)
				{
					NetMessage.SendData(17, -1, -1, null, 0, (float)i, (float)(j - 1), 0f, 0, 0, 0);
				}
			}
			return true;
		}

		// Token: 0x06000F7C RID: 3964 RVA: 0x00446190 File Offset: 0x00444390
		public static void Convert(int i, int j, int conversionType, int size = 4)
		{
			for (int k = i - size; k <= i + size; k++)
			{
				for (int l = j - size; l <= j + size; l++)
				{
					if (WorldGen.InWorld(k, l, 1) && Math.Abs(k - i) + Math.Abs(l - j) < 6)
					{
						Tile tile = Main.tile[k, l];
						int type = (int)tile.type;
						int wall = (int)tile.wall;
						if (conversionType == 4)
						{
							if (type <= (int)TileID.Count && wall <= (int)WallID.Count)
							{
								if (WallID.Sets.Conversion.Grass[wall] && wall != 81)
								{
									tile.wall = 81;
									WorldGen.SquareWallFrame(k, l, true);
									NetMessage.SendTileSquare(-1, k, l, TileChangeType.None);
								}
								else if (WallID.Sets.Conversion.Stone[wall] && wall != 83)
								{
									tile.wall = 83;
									WorldGen.SquareWallFrame(k, l, true);
									NetMessage.SendTileSquare(-1, k, l, TileChangeType.None);
								}
								else if (WallID.Sets.Conversion.HardenedSand[wall] && wall != 218)
								{
									tile.wall = 218;
									WorldGen.SquareWallFrame(k, l, true);
									NetMessage.SendTileSquare(-1, k, l, TileChangeType.None);
								}
								else if (WallID.Sets.Conversion.Sandstone[wall] && wall != 221)
								{
									tile.wall = 221;
									WorldGen.SquareWallFrame(k, l, true);
									NetMessage.SendTileSquare(-1, k, l, TileChangeType.None);
								}
								else if (WallID.Sets.Conversion.NewWall1[wall] && wall != 192)
								{
									tile.wall = 192;
									WorldGen.SquareWallFrame(k, l, true);
									NetMessage.SendTileSquare(-1, k, l, TileChangeType.None);
								}
								else if (WallID.Sets.Conversion.NewWall2[wall] && wall != 193)
								{
									tile.wall = 193;
									WorldGen.SquareWallFrame(k, l, true);
									NetMessage.SendTileSquare(-1, k, l, TileChangeType.None);
								}
								else if (WallID.Sets.Conversion.NewWall3[wall] && wall != 194)
								{
									tile.wall = 194;
									WorldGen.SquareWallFrame(k, l, true);
									NetMessage.SendTileSquare(-1, k, l, TileChangeType.None);
								}
								else if (WallID.Sets.Conversion.NewWall4[wall] && wall != 195)
								{
									tile.wall = 195;
									WorldGen.SquareWallFrame(k, l, true);
									NetMessage.SendTileSquare(-1, k, l, TileChangeType.None);
								}
								if ((Main.tileMoss[type] || TileID.Sets.Conversion.Stone[type]) && type != 203)
								{
									WorldGen.TryKillingTreesAboveIfTheyWouldBecomeInvalid(k, l, 203);
									tile.type = 203;
									WorldGen.SquareTileFrame(k, l, true);
									NetMessage.SendTileSquare(-1, k, l, TileChangeType.None);
								}
								else if (TileID.Sets.Conversion.JungleGrass[type] && type != 662)
								{
									WorldGen.TryKillingTreesAboveIfTheyWouldBecomeInvalid(k, l, 662);
									tile.type = 662;
									WorldGen.SquareTileFrame(k, l, true);
									NetMessage.SendTileSquare(-1, k, l, TileChangeType.None);
								}
								else if (TileID.Sets.Conversion.Grass[type] && type != 199)
								{
									WorldGen.TryKillingTreesAboveIfTheyWouldBecomeInvalid(k, l, 199);
									tile.type = 199;
									WorldGen.SquareTileFrame(k, l, true);
									NetMessage.SendTileSquare(-1, k, l, TileChangeType.None);
								}
								else if (TileID.Sets.Conversion.Ice[type] && type != 200)
								{
									WorldGen.TryKillingTreesAboveIfTheyWouldBecomeInvalid(k, l, 200);
									tile.type = 200;
									WorldGen.SquareTileFrame(k, l, true);
									NetMessage.SendTileSquare(-1, k, l, TileChangeType.None);
								}
								else if (TileID.Sets.Conversion.Sand[type] && type != 234)
								{
									WorldGen.TryKillingTreesAboveIfTheyWouldBecomeInvalid(k, l, 234);
									tile.type = 234;
									WorldGen.SquareTileFrame(k, l, true);
									NetMessage.SendTileSquare(-1, k, l, TileChangeType.None);
								}
								else if (TileID.Sets.Conversion.HardenedSand[type] && type != 399)
								{
									tile.type = 399;
									WorldGen.SquareTileFrame(k, l, true);
									NetMessage.SendTileSquare(-1, k, l, TileChangeType.None);
								}
								else if (TileID.Sets.Conversion.Sandstone[type] && type != 401)
								{
									tile.type = 401;
									WorldGen.SquareTileFrame(k, l, true);
									NetMessage.SendTileSquare(-1, k, l, TileChangeType.None);
								}
								else if (TileID.Sets.Conversion.Thorn[type] && type != 352)
								{
									tile.type = 352;
									WorldGen.SquareTileFrame(k, l, true);
									NetMessage.SendTileSquare(-1, k, l, TileChangeType.None);
								}
							}
						}
						else if (conversionType == 2)
						{
							if (type <= (int)TileID.Count && wall <= (int)WallID.Count)
							{
								if (WallID.Sets.Conversion.Grass[wall] && wall != 70)
								{
									tile.wall = 70;
									WorldGen.SquareWallFrame(k, l, true);
									NetMessage.SendTileSquare(-1, k, l, TileChangeType.None);
								}
								else if (WallID.Sets.Conversion.Stone[wall] && wall != 28)
								{
									tile.wall = 28;
									WorldGen.SquareWallFrame(k, l, true);
									NetMessage.SendTileSquare(-1, k, l, TileChangeType.None);
								}
								else if (WallID.Sets.Conversion.HardenedSand[wall] && wall != 219)
								{
									tile.wall = 219;
									WorldGen.SquareWallFrame(k, l, true);
									NetMessage.SendTileSquare(-1, k, l, TileChangeType.None);
								}
								else if (WallID.Sets.Conversion.Sandstone[wall] && wall != 222)
								{
									tile.wall = 222;
									WorldGen.SquareWallFrame(k, l, true);
									NetMessage.SendTileSquare(-1, k, l, TileChangeType.None);
								}
								else if (WallID.Sets.Conversion.NewWall1[wall] && wall != 200)
								{
									tile.wall = 200;
									WorldGen.SquareWallFrame(k, l, true);
									NetMessage.SendTileSquare(-1, k, l, TileChangeType.None);
								}
								else if (WallID.Sets.Conversion.NewWall2[wall] && wall != 201)
								{
									tile.wall = 201;
									WorldGen.SquareWallFrame(k, l, true);
									NetMessage.SendTileSquare(-1, k, l, TileChangeType.None);
								}
								else if (WallID.Sets.Conversion.NewWall3[wall] && wall != 202)
								{
									tile.wall = 202;
									WorldGen.SquareWallFrame(k, l, true);
									NetMessage.SendTileSquare(-1, k, l, TileChangeType.None);
								}
								else if (WallID.Sets.Conversion.NewWall4[wall] && wall != 203)
								{
									tile.wall = 203;
									WorldGen.SquareWallFrame(k, l, true);
									NetMessage.SendTileSquare(-1, k, l, TileChangeType.None);
								}
								if ((Main.tileMoss[type] || TileID.Sets.Conversion.Stone[type]) && type != 117)
								{
									WorldGen.TryKillingTreesAboveIfTheyWouldBecomeInvalid(k, l, 117);
									tile.type = 117;
									WorldGen.SquareTileFrame(k, l, true);
									NetMessage.SendTileSquare(-1, k, l, TileChangeType.None);
								}
								else if (TileID.Sets.Conversion.GolfGrass[type] && type != 492)
								{
									WorldGen.TryKillingTreesAboveIfTheyWouldBecomeInvalid(k, l, 492);
									tile.type = 492;
									WorldGen.SquareTileFrame(k, l, true);
									NetMessage.SendTileSquare(-1, k, l, TileChangeType.None);
								}
								else if (TileID.Sets.Conversion.Grass[type] && type != 109 && type != 492)
								{
									WorldGen.TryKillingTreesAboveIfTheyWouldBecomeInvalid(k, l, 109);
									tile.type = 109;
									WorldGen.SquareTileFrame(k, l, true);
									NetMessage.SendTileSquare(-1, k, l, TileChangeType.None);
								}
								else if (TileID.Sets.Conversion.Ice[type] && type != 164)
								{
									WorldGen.TryKillingTreesAboveIfTheyWouldBecomeInvalid(k, l, 164);
									tile.type = 164;
									WorldGen.SquareTileFrame(k, l, true);
									NetMessage.SendTileSquare(-1, k, l, TileChangeType.None);
								}
								else if (TileID.Sets.Conversion.Sand[type] && type != 116)
								{
									WorldGen.TryKillingTreesAboveIfTheyWouldBecomeInvalid(k, l, 116);
									tile.type = 116;
									WorldGen.SquareTileFrame(k, l, true);
									NetMessage.SendTileSquare(-1, k, l, TileChangeType.None);
								}
								else if (TileID.Sets.Conversion.HardenedSand[type] && type != 402)
								{
									tile.type = 402;
									WorldGen.SquareTileFrame(k, l, true);
									NetMessage.SendTileSquare(-1, k, l, TileChangeType.None);
								}
								else if (TileID.Sets.Conversion.Sandstone[type] && type != 403)
								{
									tile.type = 403;
									WorldGen.SquareTileFrame(k, l, true);
									NetMessage.SendTileSquare(-1, k, l, TileChangeType.None);
								}
								else if (TileID.Sets.Conversion.Thorn[type])
								{
									WorldGen.KillTile(k, l, false, false, false);
									if (Main.netMode == 1)
									{
										NetMessage.SendData(17, -1, -1, null, 0, (float)k, (float)l, 0f, 0, 0, 0);
									}
								}
								if (type == 59 && (Main.tile[k - 1, l].type == 109 || Main.tile[k + 1, l].type == 109 || Main.tile[k, l - 1].type == 109 || Main.tile[k, l + 1].type == 109))
								{
									tile.type = 0;
									WorldGen.SquareTileFrame(k, l, true);
									NetMessage.SendTileSquare(-1, k, l, TileChangeType.None);
								}
							}
						}
						else if (conversionType == 1)
						{
							if (type <= (int)TileID.Count && wall <= (int)WallID.Count)
							{
								if (WallID.Sets.Conversion.Grass[wall] && wall != 69)
								{
									tile.wall = 69;
									WorldGen.SquareWallFrame(k, l, true);
									NetMessage.SendTileSquare(-1, k, l, TileChangeType.None);
								}
								else if (TileID.Sets.Conversion.JungleGrass[type] && type != 661)
								{
									tile.type = 661;
									WorldGen.SquareTileFrame(k, l, true);
									NetMessage.SendTileSquare(-1, k, l, TileChangeType.None);
								}
								else if (WallID.Sets.Conversion.Stone[wall] && wall != 3)
								{
									tile.wall = 3;
									WorldGen.SquareWallFrame(k, l, true);
									NetMessage.SendTileSquare(-1, k, l, TileChangeType.None);
								}
								else if (WallID.Sets.Conversion.HardenedSand[wall] && wall != 217)
								{
									tile.wall = 217;
									WorldGen.SquareWallFrame(k, l, true);
									NetMessage.SendTileSquare(-1, k, l, TileChangeType.None);
								}
								else if (WallID.Sets.Conversion.Sandstone[wall] && wall != 220)
								{
									tile.wall = 220;
									WorldGen.SquareWallFrame(k, l, true);
									NetMessage.SendTileSquare(-1, k, l, TileChangeType.None);
								}
								else if (WallID.Sets.Conversion.NewWall1[wall] && wall != 188)
								{
									tile.wall = 188;
									WorldGen.SquareWallFrame(k, l, true);
									NetMessage.SendTileSquare(-1, k, l, TileChangeType.None);
								}
								else if (WallID.Sets.Conversion.NewWall2[wall] && wall != 189)
								{
									tile.wall = 189;
									WorldGen.SquareWallFrame(k, l, true);
									NetMessage.SendTileSquare(-1, k, l, TileChangeType.None);
								}
								else if (WallID.Sets.Conversion.NewWall3[wall] && wall != 190)
								{
									tile.wall = 190;
									WorldGen.SquareWallFrame(k, l, true);
									NetMessage.SendTileSquare(-1, k, l, TileChangeType.None);
								}
								else if (WallID.Sets.Conversion.NewWall4[wall] && wall != 191)
								{
									tile.wall = 191;
									WorldGen.SquareWallFrame(k, l, true);
									NetMessage.SendTileSquare(-1, k, l, TileChangeType.None);
								}
								if ((Main.tileMoss[type] || TileID.Sets.Conversion.Stone[type]) && type != 25)
								{
									WorldGen.TryKillingTreesAboveIfTheyWouldBecomeInvalid(k, l, 25);
									tile.type = 25;
									WorldGen.SquareTileFrame(k, l, true);
									NetMessage.SendTileSquare(-1, k, l, TileChangeType.None);
								}
								else if (TileID.Sets.Conversion.Grass[type] && type != 23)
								{
									WorldGen.TryKillingTreesAboveIfTheyWouldBecomeInvalid(k, l, 23);
									tile.type = 23;
									WorldGen.SquareTileFrame(k, l, true);
									NetMessage.SendTileSquare(-1, k, l, TileChangeType.None);
								}
								else if (TileID.Sets.Conversion.Ice[type] && type != 163)
								{
									WorldGen.TryKillingTreesAboveIfTheyWouldBecomeInvalid(k, l, 163);
									tile.type = 163;
									WorldGen.SquareTileFrame(k, l, true);
									NetMessage.SendTileSquare(-1, k, l, TileChangeType.None);
								}
								else if (TileID.Sets.Conversion.Sand[type] && type != 112)
								{
									WorldGen.TryKillingTreesAboveIfTheyWouldBecomeInvalid(k, l, 112);
									tile.type = 112;
									WorldGen.SquareTileFrame(k, l, true);
									NetMessage.SendTileSquare(-1, k, l, TileChangeType.None);
								}
								else if (TileID.Sets.Conversion.HardenedSand[type] && type != 398)
								{
									tile.type = 398;
									WorldGen.SquareTileFrame(k, l, true);
									NetMessage.SendTileSquare(-1, k, l, TileChangeType.None);
								}
								else if (TileID.Sets.Conversion.Sandstone[type] && type != 400)
								{
									tile.type = 400;
									WorldGen.SquareTileFrame(k, l, true);
									NetMessage.SendTileSquare(-1, k, l, TileChangeType.None);
								}
								else if (TileID.Sets.Conversion.Thorn[type] && type != 32)
								{
									tile.type = 32;
									WorldGen.SquareTileFrame(k, l, true);
									NetMessage.SendTileSquare(-1, k, l, TileChangeType.None);
								}
							}
						}
						else if (conversionType == 3)
						{
							if (WallID.Sets.CanBeConvertedToGlowingMushroom[wall])
							{
								tile.wall = 80;
								WorldGen.SquareWallFrame(k, l, true);
								NetMessage.SendTileSquare(-1, k, l, TileChangeType.None);
							}
							if (tile.type == 60)
							{
								WorldGen.TryKillingTreesAboveIfTheyWouldBecomeInvalid(k, l, 70);
								tile.type = 70;
								WorldGen.SquareTileFrame(k, l, true);
								NetMessage.SendTileSquare(-1, k, l, TileChangeType.None);
							}
							else if (TileID.Sets.Conversion.Thorn[type])
							{
								WorldGen.KillTile(k, l, false, false, false);
								if (Main.netMode == 1)
								{
									NetMessage.SendData(17, -1, -1, null, 0, (float)k, (float)l, 0f, 0, 0, 0);
								}
							}
						}
						else if (conversionType == 5)
						{
							if (type >= 0 && type <= (int)TileID.Count && wall >= 0 && wall <= (int)WallID.Count)
							{
								if ((WallID.Sets.Conversion.Stone[wall] || WallID.Sets.Conversion.NewWall1[wall] || WallID.Sets.Conversion.NewWall2[wall] || WallID.Sets.Conversion.NewWall3[wall] || WallID.Sets.Conversion.NewWall4[wall] || WallID.Sets.Conversion.Ice[wall] || WallID.Sets.Conversion.Sandstone[wall]) && wall != 187)
								{
									tile.wall = 187;
									WorldGen.SquareWallFrame(k, l, true);
									NetMessage.SendTileSquare(-1, k, l, TileChangeType.None);
								}
								else if ((WallID.Sets.Conversion.HardenedSand[wall] || WallID.Sets.Conversion.Dirt[wall] || WallID.Sets.Conversion.Snow[wall]) && wall != 216)
								{
									tile.wall = 216;
									WorldGen.SquareWallFrame(k, l, true);
									NetMessage.SendTileSquare(-1, k, l, TileChangeType.None);
								}
								if ((TileID.Sets.Conversion.Grass[type] || TileID.Sets.Conversion.Sand[type] || TileID.Sets.Conversion.Snow[type] || TileID.Sets.Conversion.Dirt[type]) && type != 53)
								{
									int num = 53;
									if (WorldGen.BlockBelowMakesSandConvertIntoHardenedSand(k, l))
									{
										num = 397;
									}
									WorldGen.TryKillingTreesAboveIfTheyWouldBecomeInvalid(k, l, num);
									tile.type = (ushort)num;
									WorldGen.SquareTileFrame(k, l, true);
									NetMessage.SendTileSquare(-1, k, l, TileChangeType.None);
								}
								else if (TileID.Sets.Conversion.HardenedSand[type] && type != 397)
								{
									tile.type = 397;
									WorldGen.SquareTileFrame(k, l, true);
									NetMessage.SendTileSquare(-1, k, l, TileChangeType.None);
								}
								else if ((Main.tileMoss[type] || TileID.Sets.Conversion.Stone[type] || TileID.Sets.Conversion.Ice[type] || TileID.Sets.Conversion.Sandstone[type]) && type != 396)
								{
									WorldGen.TryKillingTreesAboveIfTheyWouldBecomeInvalid(k, l, 396);
									tile.type = 396;
									WorldGen.SquareTileFrame(k, l, true);
									NetMessage.SendTileSquare(-1, k, l, TileChangeType.None);
								}
								else if (TileID.Sets.Conversion.Thorn[type] && type != 69)
								{
									WorldGen.KillTile(k, l, false, false, false);
									if (Main.netMode == 1)
									{
										NetMessage.SendData(17, -1, -1, null, 0, (float)k, (float)l, 0f, 0, 0, 0);
									}
								}
							}
						}
						else if (conversionType == 6)
						{
							if (type >= 0 && type <= (int)TileID.Count && wall >= 0 && wall <= (int)WallID.Count)
							{
								if ((WallID.Sets.Conversion.Stone[wall] || WallID.Sets.Conversion.NewWall1[wall] || WallID.Sets.Conversion.NewWall2[wall] || WallID.Sets.Conversion.NewWall3[wall] || WallID.Sets.Conversion.NewWall4[wall] || WallID.Sets.Conversion.Ice[wall] || WallID.Sets.Conversion.Sandstone[wall]) && wall != 71)
								{
									tile.wall = 71;
									WorldGen.SquareWallFrame(k, l, true);
									NetMessage.SendTileSquare(-1, k, l, TileChangeType.None);
								}
								else if ((WallID.Sets.Conversion.HardenedSand[wall] || WallID.Sets.Conversion.Dirt[wall] || WallID.Sets.Conversion.Snow[wall]) && wall != 40)
								{
									tile.wall = 40;
									WorldGen.SquareWallFrame(k, l, true);
									NetMessage.SendTileSquare(-1, k, l, TileChangeType.None);
								}
								if ((TileID.Sets.Conversion.Grass[type] || TileID.Sets.Conversion.Sand[type] || TileID.Sets.Conversion.HardenedSand[type] || TileID.Sets.Conversion.Snow[type] || TileID.Sets.Conversion.Dirt[type]) && type != 147)
								{
									WorldGen.TryKillingTreesAboveIfTheyWouldBecomeInvalid(k, l, 147);
									tile.type = 147;
									WorldGen.SquareTileFrame(k, l, true);
									NetMessage.SendTileSquare(-1, k, l, TileChangeType.None);
								}
								else if ((Main.tileMoss[type] || TileID.Sets.Conversion.Stone[type] || TileID.Sets.Conversion.Ice[type] || TileID.Sets.Conversion.Sandstone[type]) && type != 161)
								{
									WorldGen.TryKillingTreesAboveIfTheyWouldBecomeInvalid(k, l, 161);
									tile.type = 161;
									WorldGen.SquareTileFrame(k, l, true);
									NetMessage.SendTileSquare(-1, k, l, TileChangeType.None);
								}
								else if (TileID.Sets.Conversion.Thorn[type] && type != 69)
								{
									WorldGen.KillTile(k, l, false, false, false);
									if (Main.netMode == 1)
									{
										NetMessage.SendData(17, -1, -1, null, 0, (float)k, (float)l, 0f, 0, 0, 0);
									}
								}
							}
						}
						else if (conversionType == 7)
						{
							if (type >= 0 && type <= (int)TileID.Count && wall >= 0 && wall <= (int)WallID.Count)
							{
								if ((WallID.Sets.Conversion.Stone[wall] || WallID.Sets.Conversion.Ice[wall] || WallID.Sets.Conversion.Sandstone[wall]) && wall != 1)
								{
									tile.wall = 1;
									WorldGen.SquareWallFrame(k, l, true);
									NetMessage.SendTileSquare(-1, k, l, TileChangeType.None);
								}
								else if ((WallID.Sets.Conversion.HardenedSand[wall] || WallID.Sets.Conversion.Snow[wall] || WallID.Sets.Conversion.Dirt[wall]) && wall != 2)
								{
									tile.wall = 2;
									WorldGen.SquareWallFrame(k, l, true);
									NetMessage.SendTileSquare(-1, k, l, TileChangeType.None);
								}
								else if (WallID.Sets.Conversion.NewWall1[wall] && wall != 196)
								{
									tile.wall = 196;
									WorldGen.SquareWallFrame(k, l, true);
									NetMessage.SendTileSquare(-1, k, l, TileChangeType.None);
								}
								else if (WallID.Sets.Conversion.NewWall2[wall] && wall != 197)
								{
									tile.wall = 197;
									WorldGen.SquareWallFrame(k, l, true);
									NetMessage.SendTileSquare(-1, k, l, TileChangeType.None);
								}
								else if (WallID.Sets.Conversion.NewWall3[wall] && wall != 198)
								{
									tile.wall = 198;
									WorldGen.SquareWallFrame(k, l, true);
									NetMessage.SendTileSquare(-1, k, l, TileChangeType.None);
								}
								else if (WallID.Sets.Conversion.NewWall4[wall] && wall != 199)
								{
									tile.wall = 199;
									WorldGen.SquareWallFrame(k, l, true);
									NetMessage.SendTileSquare(-1, k, l, TileChangeType.None);
								}
								if ((TileID.Sets.Conversion.Stone[type] || TileID.Sets.Conversion.Ice[type] || TileID.Sets.Conversion.Sandstone[type]) && type != 1)
								{
									WorldGen.TryKillingTreesAboveIfTheyWouldBecomeInvalid(k, l, 1);
									tile.type = 1;
									WorldGen.SquareTileFrame(k, l, true);
									NetMessage.SendTileSquare(-1, k, l, TileChangeType.None);
								}
								else if (TileID.Sets.Conversion.GolfGrass[type] && type != 477)
								{
									WorldGen.TryKillingTreesAboveIfTheyWouldBecomeInvalid(k, l, 477);
									tile.type = 477;
									WorldGen.SquareTileFrame(k, l, true);
									NetMessage.SendTileSquare(-1, k, l, TileChangeType.None);
								}
								else if (TileID.Sets.Conversion.Grass[type] && type != 2 && type != 477)
								{
									WorldGen.TryKillingTreesAboveIfTheyWouldBecomeInvalid(k, l, 2);
									tile.type = 2;
									WorldGen.SquareTileFrame(k, l, true);
									NetMessage.SendTileSquare(-1, k, l, TileChangeType.None);
								}
								else if ((TileID.Sets.Conversion.Sand[type] || TileID.Sets.Conversion.HardenedSand[type] || TileID.Sets.Conversion.Snow[type] || TileID.Sets.Conversion.Dirt[type]) && type != 0)
								{
									int num2 = 0;
									if (WorldGen.TileIsExposedToAir(k, l))
									{
										num2 = 2;
									}
									WorldGen.TryKillingTreesAboveIfTheyWouldBecomeInvalid(k, l, num2);
									tile.type = (ushort)num2;
									WorldGen.SquareTileFrame(k, l, true);
									NetMessage.SendTileSquare(-1, k, l, TileChangeType.None);
								}
								else if (TileID.Sets.Conversion.Thorn[type] && type != 69)
								{
									WorldGen.KillTile(k, l, false, false, false);
									if (Main.netMode == 1)
									{
										NetMessage.SendData(17, -1, -1, null, 0, (float)k, (float)l, 0f, 0, 0, 0);
									}
								}
							}
						}
						else
						{
							if (tile.wall == 69 || tile.wall == 70 || tile.wall == 81)
							{
								if ((double)l < Main.worldSurface)
								{
									if (WorldGen.genRand.Next(10) == 0)
									{
										tile.wall = 65;
									}
									else
									{
										tile.wall = 63;
									}
								}
								else
								{
									tile.wall = 64;
								}
								WorldGen.SquareWallFrame(k, l, true);
								NetMessage.SendTileSquare(-1, k, l, TileChangeType.None);
							}
							else if (WallID.Sets.Conversion.Stone[wall] && wall != 1 && wall != 262 && wall != 274 && wall != 61 && wall != 185)
							{
								tile.wall = 1;
								WorldGen.SquareWallFrame(k, l, true);
								NetMessage.SendTileSquare(-1, k, l, TileChangeType.None);
							}
							else if (WallID.Sets.Conversion.Stone[wall] && wall == 262)
							{
								tile.wall = 61;
								WorldGen.SquareWallFrame(k, l, true);
								NetMessage.SendTileSquare(-1, k, l, TileChangeType.None);
							}
							else if (WallID.Sets.Conversion.Stone[wall] && wall == 274)
							{
								tile.wall = 185;
								WorldGen.SquareWallFrame(k, l, true);
								NetMessage.SendTileSquare(-1, k, l, TileChangeType.None);
							}
							if (WallID.Sets.Conversion.NewWall1[wall] && wall != 212)
							{
								tile.wall = 212;
								WorldGen.SquareWallFrame(k, l, true);
								NetMessage.SendTileSquare(-1, k, l, TileChangeType.None);
							}
							else if (WallID.Sets.Conversion.NewWall2[wall] && wall != 213)
							{
								tile.wall = 213;
								WorldGen.SquareWallFrame(k, l, true);
								NetMessage.SendTileSquare(-1, k, l, TileChangeType.None);
							}
							else if (WallID.Sets.Conversion.NewWall3[wall] && wall != 214)
							{
								tile.wall = 214;
								WorldGen.SquareWallFrame(k, l, true);
								NetMessage.SendTileSquare(-1, k, l, TileChangeType.None);
							}
							else if (WallID.Sets.Conversion.NewWall4[wall] && wall != 215)
							{
								tile.wall = 215;
								WorldGen.SquareWallFrame(k, l, true);
								NetMessage.SendTileSquare(-1, k, l, TileChangeType.None);
							}
							else if (tile.wall == 80)
							{
								if ((double)l < Main.worldSurface + 4.0 + (double)WorldGen.genRand.Next(3) || (double)l > ((double)Main.maxTilesY + Main.rockLayer) / 2.0 - 3.0 + (double)WorldGen.genRand.Next(3))
								{
									tile.wall = 15;
									WorldGen.SquareWallFrame(k, l, true);
									NetMessage.SendTileSquare(-1, k, l, TileChangeType.None);
								}
								else
								{
									tile.wall = 64;
									WorldGen.SquareWallFrame(k, l, true);
									NetMessage.SendTileSquare(-1, k, l, TileChangeType.None);
								}
							}
							else if (WallID.Sets.Conversion.HardenedSand[wall] && wall != 216)
							{
								tile.wall = 216;
								WorldGen.SquareWallFrame(k, l, true);
								NetMessage.SendTileSquare(-1, k, l, TileChangeType.None);
							}
							else if (WallID.Sets.Conversion.Sandstone[wall] && wall != 187)
							{
								tile.wall = 187;
								WorldGen.SquareWallFrame(k, l, true);
								NetMessage.SendTileSquare(-1, k, l, TileChangeType.None);
							}
							if (tile.type == 492)
							{
								WorldGen.TryKillingTreesAboveIfTheyWouldBecomeInvalid(k, l, 477);
								tile.type = 477;
								WorldGen.SquareTileFrame(k, l, true);
								NetMessage.SendTileSquare(-1, k, l, TileChangeType.None);
							}
							else if (TileID.Sets.Conversion.JungleGrass[type] && type != 60)
							{
								WorldGen.TryKillingTreesAboveIfTheyWouldBecomeInvalid(k, l, 60);
								tile.type = 60;
								WorldGen.SquareTileFrame(k, l, true);
								NetMessage.SendTileSquare(-1, k, l, TileChangeType.None);
							}
							else if (TileID.Sets.Conversion.Grass[type] && type != 2 && type != 477)
							{
								WorldGen.TryKillingTreesAboveIfTheyWouldBecomeInvalid(k, l, 2);
								tile.type = 2;
								WorldGen.SquareTileFrame(k, l, true);
								NetMessage.SendTileSquare(-1, k, l, TileChangeType.None);
							}
							else if (TileID.Sets.Conversion.Stone[type] && type != 1)
							{
								WorldGen.TryKillingTreesAboveIfTheyWouldBecomeInvalid(k, l, 1);
								tile.type = 1;
								WorldGen.SquareTileFrame(k, l, true);
								NetMessage.SendTileSquare(-1, k, l, TileChangeType.None);
							}
							else if (TileID.Sets.Conversion.Sand[type] && type != 53)
							{
								WorldGen.TryKillingTreesAboveIfTheyWouldBecomeInvalid(k, l, 53);
								tile.type = 53;
								WorldGen.SquareTileFrame(k, l, true);
								NetMessage.SendTileSquare(-1, k, l, TileChangeType.None);
							}
							else if (TileID.Sets.Conversion.HardenedSand[type] && type != 397)
							{
								tile.type = 397;
								WorldGen.SquareTileFrame(k, l, true);
								NetMessage.SendTileSquare(-1, k, l, TileChangeType.None);
							}
							else if (TileID.Sets.Conversion.Sandstone[type] && type != 396)
							{
								tile.type = 396;
								WorldGen.SquareTileFrame(k, l, true);
								NetMessage.SendTileSquare(-1, k, l, TileChangeType.None);
							}
							else if (TileID.Sets.Conversion.Ice[type] && type != 161)
							{
								WorldGen.TryKillingTreesAboveIfTheyWouldBecomeInvalid(k, l, 161);
								tile.type = 161;
								WorldGen.SquareTileFrame(k, l, true);
								NetMessage.SendTileSquare(-1, k, l, TileChangeType.None);
							}
							else if (TileID.Sets.Conversion.MushroomGrass[type])
							{
								WorldGen.TryKillingTreesAboveIfTheyWouldBecomeInvalid(k, l, 60);
								tile.type = 60;
								WorldGen.SquareTileFrame(k, l, true);
								NetMessage.SendTileSquare(-1, k, l, TileChangeType.None);
							}
							else if (tile.type == 32 || Main.tile[k, l].type == 352)
							{
								WorldGen.KillTile(k, l, false, false, false);
								if (Main.netMode == 1)
								{
									NetMessage.SendData(17, -1, -1, null, 0, (float)k, (float)l, 0f, 0, 0, 0);
								}
							}
						}
					}
				}
			}
		}

		// Token: 0x06000F7D RID: 3965 RVA: 0x00447928 File Offset: 0x00445B28
		public static void CactusFrame(int i, int j)
		{
			try
			{
				int num = j;
				int num2 = i;
				if (!WorldGen.CheckCactus(i, j))
				{
					while (Main.tile[num2, num].active() && Main.tile[num2, num].type == 80)
					{
						num++;
						if (Main.tile[num2, num] == null)
						{
							return;
						}
						if (!Main.tile[num2, num].active() || Main.tile[num2, num].type != 80)
						{
							if (Main.tile[num2 - 1, num] != null && Main.tile[num2 - 1, num].active() && Main.tile[num2 - 1, num].type == 80 && Main.tile[num2 - 1, num - 1].active() && Main.tile[num2 - 1, num - 1].type == 80 && num2 >= i)
							{
								num2--;
							}
							if (Main.tile[num2 + 1, num] != null && Main.tile[num2 + 1, num].active() && Main.tile[num2 + 1, num].type == 80 && Main.tile[num2 + 1, num - 1].active() && Main.tile[num2 + 1, num - 1].type == 80 && num2 <= i)
							{
								num2++;
							}
						}
					}
					num--;
					int num3 = i - num2;
					if (Main.tile[i - 2, j] != null)
					{
						int type = (int)Main.tile[i - 2, j].type;
						if (Main.tile[i - 1, j] != null)
						{
							int num4 = (int)Main.tile[i - 1, j].type;
							if (Main.tile[i + 1, j] != null)
							{
								int num5 = (int)Main.tile[i + 1, j].type;
								if (Main.tile[i, j - 1] != null)
								{
									int num6 = (int)Main.tile[i, j - 1].type;
									if (num6 == 227)
									{
										num6 = 80;
									}
									int num7 = (int)Main.tile[i, j + 1].type;
									int num8 = (int)Main.tile[i - 1, j + 1].type;
									int num9 = (int)Main.tile[i + 1, j + 1].type;
									if (!Main.tile[i - 1, j].active())
									{
										num4 = -1;
									}
									if (!Main.tile[i + 1, j].active())
									{
										num5 = -1;
									}
									if (!Main.tile[i, j - 1].active())
									{
										num6 = -1;
									}
									if (!Main.tile[i, j + 1].active())
									{
										num7 = -1;
									}
									if (!Main.tile[i - 1, j + 1].active())
									{
										num8 = -1;
									}
									if (!Main.tile[i + 1, j + 1].active())
									{
										num9 = -1;
									}
									short num10 = Main.tile[i, j].frameX;
									short num11 = Main.tile[i, j].frameY;
									if (num3 == 0)
									{
										if (num6 != 80)
										{
											if (num4 == 80 && num5 == 80 && num8 != 80 && num9 != 80 && type != 80)
											{
												num10 = 90;
												num11 = 0;
											}
											else if (num4 == 80 && num8 != 80 && type != 80)
											{
												num10 = 72;
												num11 = 0;
											}
											else if (num5 == 80 && num9 != 80)
											{
												num10 = 18;
												num11 = 0;
											}
											else
											{
												num10 = 0;
												num11 = 0;
											}
										}
										else if (num4 == 80 && num5 == 80 && num8 != 80 && num9 != 80 && type != 80)
										{
											num10 = 90;
											num11 = 36;
										}
										else if (num4 == 80 && num8 != 80 && type != 80)
										{
											num10 = 72;
											num11 = 36;
										}
										else if (num5 == 80 && num9 != 80)
										{
											num10 = 18;
											num11 = 36;
										}
										else if (num7 >= 0 && Main.tileSolid[num7])
										{
											num10 = 0;
											num11 = 36;
										}
										else
										{
											num10 = 0;
											num11 = 18;
										}
									}
									else if (num3 == -1)
									{
										if (num5 == 80)
										{
											if (num6 != 80 && num7 != 80)
											{
												num10 = 108;
												num11 = 36;
											}
											else if (num7 != 80)
											{
												num10 = 54;
												num11 = 36;
											}
											else if (num6 != 80)
											{
												num10 = 54;
												num11 = 0;
											}
											else
											{
												num10 = 54;
												num11 = 18;
											}
										}
										else if (num6 != 80)
										{
											num10 = 54;
											num11 = 0;
										}
										else
										{
											num10 = 54;
											num11 = 18;
										}
									}
									else if (num3 == 1)
									{
										if (num4 == 80)
										{
											if (num6 != 80 && num7 != 80)
											{
												num10 = 108;
												num11 = 18;
											}
											else if (num7 != 80)
											{
												num10 = 36;
												num11 = 36;
											}
											else if (num6 != 80)
											{
												num10 = 36;
												num11 = 0;
											}
											else
											{
												num10 = 36;
												num11 = 18;
											}
										}
										else if (num6 != 80)
										{
											num10 = 36;
											num11 = 0;
										}
										else
										{
											num10 = 36;
											num11 = 18;
										}
									}
									if (num10 != Main.tile[i, j].frameX || num11 != Main.tile[i, j].frameY)
									{
										Main.tile[i, j].frameX = num10;
										Main.tile[i, j].frameY = num11;
										WorldGen.DiamondTileFrame(i, j);
									}
								}
							}
						}
					}
				}
			}
			catch
			{
				Main.tile[i, j].frameX = 0;
				Main.tile[i, j].frameY = 0;
			}
		}

		// Token: 0x06000F7E RID: 3966 RVA: 0x00447EC0 File Offset: 0x004460C0
		public static void GrowCactus(int i, int j)
		{
			int num = j;
			int num2 = i;
			if (!Main.tile[i, j].nactive())
			{
				return;
			}
			if (Main.tile[i, j].halfBrick())
			{
				return;
			}
			if (!WorldGen.gen && Main.tile[i, j].slope() != 0)
			{
				return;
			}
			if (Main.tile[i, j - 1].liquid > 0)
			{
				return;
			}
			if (Main.tile[i, j].type != 53 && Main.tile[i, j].type != 80 && Main.tile[i, j].type != 234 && Main.tile[i, j].type != 112 && Main.tile[i, j].type != 116)
			{
				return;
			}
			int num3 = 0;
			for (int k = i - WorldGen.cactusWaterWidth; k < i + WorldGen.cactusWaterWidth; k++)
			{
				for (int l = j - WorldGen.cactusWaterHeight; l < j + WorldGen.cactusWaterHeight; l++)
				{
					num3 += (int)Main.tile[k, l].liquid;
				}
			}
			if ((!Main.remixWorld || (double)j <= Main.worldSurface) && num3 / 255 > WorldGen.cactusWaterLimit)
			{
				return;
			}
			if (Main.tile[i, j].type == 53 || Main.tile[i, j].type == 112 || Main.tile[i, j].type == 116 || Main.tile[i, j].type == 234)
			{
				if (!Main.tile[i, j - 1].active() && !Main.tile[i - 1, j - 1].active() && !Main.tile[i + 1, j - 1].active())
				{
					int num4 = 0;
					int num5 = 0;
					for (int m = i - 6; m <= i + 6; m++)
					{
						for (int n = j - 3; n <= j + 1; n++)
						{
							try
							{
								if (Main.tile[m, n].active())
								{
									if (Main.tile[m, n].type == 80)
									{
										num4++;
										if (num4 >= 4)
										{
											return;
										}
									}
									if (Main.tile[m, n].type == 53 || Main.tile[m, n].type == 112 || Main.tile[m, n].type == 116 || Main.tile[m, n].type == 234)
									{
										num5++;
									}
								}
							}
							catch
							{
							}
						}
					}
					if (num5 > 10)
					{
						if (WorldGen.gen && WorldGen.genRand.Next(2) == 0)
						{
							Main.tile[i, j].slope(0);
						}
						Main.tile[i, j - 1].active(true);
						Main.tile[i, j - 1].type = 80;
						if (Main.netMode == 2)
						{
							NetMessage.SendTileSquare(-1, i, j - 1, TileChangeType.None);
						}
						WorldGen.SquareTileFrame(num2, num - 1, true);
						return;
					}
				}
			}
			else if (Main.tile[i, j].type == 80)
			{
				while (Main.tile[num2, num].active() && Main.tile[num2, num].type == 80)
				{
					num++;
					if (!Main.tile[num2, num].active() || Main.tile[num2, num].type != 80)
					{
						if (Main.tile[num2 - 1, num].active() && Main.tile[num2 - 1, num].type == 80 && Main.tile[num2 - 1, num - 1].active() && Main.tile[num2 - 1, num - 1].type == 80 && num2 >= i)
						{
							num2--;
						}
						if (Main.tile[num2 + 1, num].active() && Main.tile[num2 + 1, num].type == 80 && Main.tile[num2 + 1, num - 1].active() && Main.tile[num2 + 1, num - 1].type == 80 && num2 <= i)
						{
							num2++;
						}
					}
				}
				num--;
				int num6 = num - j;
				int num7 = i - num2;
				num2 = i - num7;
				num = j;
				int num8 = 11 - num6;
				int num9 = 0;
				for (int num10 = num2 - 2; num10 <= num2 + 2; num10++)
				{
					for (int num11 = num - num8; num11 <= num + num6; num11++)
					{
						if (Main.tile[num10, num11].active() && Main.tile[num10, num11].type == 80)
						{
							num9++;
						}
					}
				}
				if (Main.drunkWorld)
				{
					if (num9 >= WorldGen.genRand.Next(11, 20))
					{
						return;
					}
				}
				else if (num9 >= WorldGen.genRand.Next(11, 13))
				{
					return;
				}
				num2 = i;
				num = j;
				if (num7 == 0)
				{
					if (num6 == 0)
					{
						if (!Main.tile[num2, num - 1].active())
						{
							Main.tile[num2, num - 1].active(true);
							Main.tile[num2, num - 1].type = 80;
							WorldGen.SquareTileFrame(num2, num - 1, true);
							if (Main.netMode == 2)
							{
								NetMessage.SendTileSquare(-1, num2, num - 1, TileChangeType.None);
								return;
							}
						}
					}
					else
					{
						bool flag = false;
						bool flag2 = false;
						if (Main.tile[num2, num - 1].active() && Main.tile[num2, num - 1].type == 80)
						{
							if (!Main.tile[num2 - 1, num].active() && !Main.tile[num2 - 2, num + 1].active() && !Main.tile[num2 - 1, num - 1].active() && !Main.tile[num2 - 1, num + 1].active() && !Main.tile[num2 - 2, num].active())
							{
								flag = true;
							}
							if (!Main.tile[num2 + 1, num].active() && !Main.tile[num2 + 2, num + 1].active() && !Main.tile[num2 + 1, num - 1].active() && !Main.tile[num2 + 1, num + 1].active() && !Main.tile[num2 + 2, num].active())
							{
								flag2 = true;
							}
						}
						int num12 = WorldGen.genRand.Next(3);
						if (num12 == 0 && flag)
						{
							Main.tile[num2 - 1, num].active(true);
							Main.tile[num2 - 1, num].type = 80;
							WorldGen.SquareTileFrame(num2 - 1, num, true);
							if (Main.netMode == 2)
							{
								NetMessage.SendTileSquare(-1, num2 - 1, num, TileChangeType.None);
								return;
							}
						}
						else if (num12 == 1 && flag2)
						{
							Main.tile[num2 + 1, num].active(true);
							Main.tile[num2 + 1, num].type = 80;
							WorldGen.SquareTileFrame(num2 + 1, num, true);
							if (Main.netMode == 2)
							{
								NetMessage.SendTileSquare(-1, num2 + 1, num, TileChangeType.None);
								return;
							}
						}
						else if (num6 < WorldGen.genRand.Next(2, 8))
						{
							if (Main.tile[num2 - 1, num - 1].active())
							{
								ushort type = Main.tile[num2 - 1, num - 1].type;
							}
							if ((!Main.tile[num2 + 1, num - 1].active() || Main.tile[num2 + 1, num - 1].type != 80) && !Main.tile[num2, num - 1].active())
							{
								Main.tile[num2, num - 1].active(true);
								Main.tile[num2, num - 1].type = 80;
								WorldGen.SquareTileFrame(num2, num - 1, true);
								if (Main.netMode == 2)
								{
									NetMessage.SendTileSquare(-1, num2, num - 1, TileChangeType.None);
									return;
								}
							}
						}
					}
				}
				else if (!Main.tile[num2, num - 1].active() && !Main.tile[num2, num - 2].active() && !Main.tile[num2 + num7, num - 1].active() && Main.tile[num2 - num7, num - 1].active() && Main.tile[num2 - num7, num - 1].type == 80)
				{
					Main.tile[num2, num - 1].active(true);
					Main.tile[num2, num - 1].type = 80;
					WorldGen.SquareTileFrame(num2, num - 1, true);
					if (Main.netMode == 2)
					{
						NetMessage.SendTileSquare(-1, num2, num - 1, TileChangeType.None);
					}
				}
			}
		}

		// Token: 0x06000F7F RID: 3967 RVA: 0x004487D8 File Offset: 0x004469D8
		public static void CheckPot(int i, int j, int type = 28)
		{
			if (WorldGen.destroyObject)
			{
				return;
			}
			bool flag = false;
			int k = 0;
			for (k += (int)(Main.tile[i, j].frameX / 18); k > 1; k -= 2)
			{
			}
			k *= -1;
			k += i;
			int l = (int)(Main.tile[i, j].frameY / 18);
			int num = 0;
			while (l > 1)
			{
				l -= 2;
				num++;
			}
			int num2 = j - l;
			for (int m = k; m < k + 2; m++)
			{
				for (int n = num2; n < num2 + 2; n++)
				{
					if (Main.tile[m, n] == null)
					{
						Main.tile[m, n] = new Tile();
					}
					int num3;
					for (num3 = (int)(Main.tile[m, n].frameX / 18); num3 > 1; num3 -= 2)
					{
					}
					if (!Main.tile[m, n].active() || (int)Main.tile[m, n].type != type || num3 != m - k || (int)Main.tile[m, n].frameY != (n - num2) * 18 + num * 36)
					{
						flag = true;
					}
				}
				if (Main.tile[m, num2 + 2] == null)
				{
					Main.tile[m, num2 + 2] = new Tile();
				}
				if (!WorldGen.SolidTile2(m, num2 + 2))
				{
					flag = true;
				}
			}
			if (flag)
			{
				WorldGen.destroyObject = true;
				if (num >= 7 && num <= 9)
				{
					SoundEngine.PlaySound(6, i * 16, j * 16, 1, 1f, 0f);
				}
				else if (num >= 16 && num <= 24)
				{
					SoundEngine.PlaySound(4, i * 16, j * 16, 1, 1f, 0f);
				}
				else
				{
					SoundEngine.PlaySound(13, i * 16, j * 16, 1, 1f, 0f);
				}
				for (int num4 = k; num4 < k + 2; num4++)
				{
					for (int num5 = num2; num5 < num2 + 2; num5++)
					{
						if ((int)Main.tile[num4, num5].type == type && Main.tile[num4, num5].active())
						{
							WorldGen.KillTile(num4, num5, false, false, false);
						}
					}
				}
				if (num == 0)
				{
					Gore.NewGore(new Vector2((float)(i * 16), (float)(j * 16)), default(Vector2), 51, 1f);
					Gore.NewGore(new Vector2((float)(i * 16), (float)(j * 16)), default(Vector2), 52, 1f);
					Gore.NewGore(new Vector2((float)(i * 16), (float)(j * 16)), default(Vector2), 53, 1f);
				}
				else if (num == 1)
				{
					Gore.NewGore(new Vector2((float)(i * 16), (float)(j * 16)), default(Vector2), 166, 1f);
					Gore.NewGore(new Vector2((float)(i * 16), (float)(j * 16)), default(Vector2), 167, 1f);
					Gore.NewGore(new Vector2((float)(i * 16), (float)(j * 16)), default(Vector2), 168, 1f);
				}
				else if (num == 2)
				{
					Gore.NewGore(new Vector2((float)(i * 16), (float)(j * 16)), default(Vector2), 169, 1f);
					Gore.NewGore(new Vector2((float)(i * 16), (float)(j * 16)), default(Vector2), 170, 1f);
					Gore.NewGore(new Vector2((float)(i * 16), (float)(j * 16)), default(Vector2), 171, 1f);
				}
				else if (num == 3)
				{
					Gore.NewGore(new Vector2((float)(i * 16), (float)(j * 16)), default(Vector2), 172, 1f);
					Gore.NewGore(new Vector2((float)(i * 16), (float)(j * 16)), default(Vector2), 173, 1f);
					Gore.NewGore(new Vector2((float)(i * 16), (float)(j * 16)), default(Vector2), 174, 1f);
				}
				else if (num >= 4 && num <= 6)
				{
					Gore.NewGore(new Vector2((float)(i * 16), (float)(j * 16)), default(Vector2), 197, 1f);
					Gore.NewGore(new Vector2((float)(i * 16), (float)(j * 16)), default(Vector2), 198, 1f);
				}
				else if (num >= 7 && num <= 9)
				{
					Gore.NewGore(new Vector2((float)(i * 16), (float)(j * 16)), default(Vector2), 199, 1f);
					Gore.NewGore(new Vector2((float)(i * 16), (float)(j * 16)), default(Vector2), 200, 1f);
				}
				else if (num >= 10 && num <= 12)
				{
					Gore.NewGore(new Vector2((float)(i * 16), (float)(j * 16)), default(Vector2), 201, 1f);
					Gore.NewGore(new Vector2((float)(i * 16), (float)(j * 16)), default(Vector2), 202, 1f);
				}
				else if (num >= 13 && num <= 15)
				{
					Gore.NewGore(new Vector2((float)(i * 16), (float)(j * 16)), default(Vector2), 203, 1f);
					Gore.NewGore(new Vector2((float)(i * 16), (float)(j * 16)), default(Vector2), 204, 1f);
				}
				else if ((num < 16 || num > 18) && (num < 19 || num > 21) && (num < 22 || num > 24))
				{
					if (num >= 25 && num <= 27)
					{
						Gore.NewGore(new Vector2((float)(i * 16), (float)(j * 16)), default(Vector2), WorldGen.genRand.Next(217, 220), 1f);
						Gore.NewGore(new Vector2((float)(i * 16), (float)(j * 16)), default(Vector2), WorldGen.genRand.Next(217, 220), 1f);
					}
					else if (num >= 28 && num <= 30)
					{
						Gore.NewGore(new Vector2((float)(i * 16), (float)(j * 16)), default(Vector2), WorldGen.genRand.Next(315, 317), 1f);
						Gore.NewGore(new Vector2((float)(i * 16), (float)(j * 16)), default(Vector2), WorldGen.genRand.Next(315, 317), 1f);
					}
					else if (num >= 31 && num <= 33)
					{
						int num6 = WorldGen.genRand.Next(2, 5);
						for (int num7 = 0; num7 < num6; num7++)
						{
							Gore.NewGore(new Vector2((float)(i * 16), (float)(j * 16)), default(Vector2), 698 + WorldGen.genRand.Next(6), 1f);
						}
					}
					else if (num >= 34 && num <= 36)
					{
						Gore.NewGore(new Vector2((float)(i * 16), (float)(j * 16)), default(Vector2), 1122, 1f);
						Gore.NewGore(new Vector2((float)(i * 16), (float)(j * 16)), default(Vector2), 1123, 1f);
						Gore.NewGore(new Vector2((float)(i * 16), (float)(j * 16)), default(Vector2), 1124, 1f);
					}
				}
				if (Main.netMode != 1 && type != 653)
				{
					WorldGen.SpawnThingsFromPot(i, j, k, num2, num);
				}
				WorldGen.destroyObject = false;
			}
		}

		// Token: 0x06000F80 RID: 3968 RVA: 0x00448FFC File Offset: 0x004471FC
		private static void SpawnThingsFromPot(int i, int j, int x2, int y2, int style)
		{
			bool flag = (double)j < Main.rockLayer;
			bool flag2 = j < Main.UnderworldLayer;
			if (Main.remixWorld)
			{
				flag = ((double)j > Main.rockLayer && j < Main.UnderworldLayer);
				flag2 = ((double)j > Main.worldSurface && (double)j < Main.rockLayer);
			}
			float num = 1f;
			bool flag3 = style >= 34 && style <= 36;
			if (style != 0 && style != 1 && style != 2 && style != 3)
			{
				if (style >= 4 && style <= 6)
				{
					num = 1.25f;
				}
				else if (style >= 7 && style <= 9)
				{
					num = 1.75f;
				}
				else if (style >= 10 && style <= 12)
				{
					num = 1.9f;
				}
				else if (style >= 13 && style <= 15)
				{
					num = 2.1f;
				}
				else if (style >= 16 && style <= 18)
				{
					num = 1.6f;
				}
				else if (style >= 19 && style <= 21)
				{
					num = 3.5f;
				}
				else if (style >= 22 && style <= 24)
				{
					num = 1.6f;
				}
				else if (style >= 25 && style <= 27)
				{
					num = 10f;
				}
				else if (style >= 28 && style <= 30)
				{
					if (Main.hardMode)
					{
						num = 4f;
					}
				}
				else if (style >= 31 && style <= 33)
				{
					num = 2f;
				}
				else if (style >= 34 && style <= 36)
				{
					num = 1.25f;
				}
			}
			num = (num * 2f + 1f) / 3f;
			int range = (int)(500f / ((num + 1f) / 2f));
			if (!WorldGen.gen)
			{
				if (Player.GetClosestRollLuck(i, j, range) == 0f)
				{
					if (Main.netMode != 1)
					{
						Projectile.NewProjectile(WorldGen.GetProjectileSource_TileBreak(i, j), (float)(i * 16 + 16), (float)(j * 16 + 16), 0f, -12f, 518, 0, 0f, Main.myPlayer, 0f, 0f, 0f);
						return;
					}
				}
				else
				{
					if (WorldGen.genRand.Next(35) == 0 && Main.wallDungeon[(int)Main.tile[i, j].wall] && (double)j > Main.worldSurface)
					{
						Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 16, 16, 327, 1, false, 0, false, false);
						return;
					}
					if (Main.getGoodWorld && WorldGen.genRand.Next(6) == 0)
					{
						Projectile.NewProjectile(WorldGen.GetProjectileSource_TileBreak(i, j), (float)(i * 16 + 16), (float)(j * 16 + 8), (float)Main.rand.Next(-100, 101) * 0.002f, 0f, 28, 0, 0f, Main.myPlayer, 16f, 16f, 0f);
						return;
					}
					if (Main.remixWorld && Main.netMode != 1 && WorldGen.genRand.Next(5) == 0)
					{
						Player player = Main.player[(int)Player.FindClosest(new Vector2((float)(i * 16), (float)(j * 16)), 16, 16)];
						if (Main.rand.Next(2) == 0)
						{
							Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 16, 16, 75, 1, false, 0, false, false);
							return;
						}
						if (player.ZoneJungle)
						{
							int num2 = NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), x2 * 16 + 16, y2 * 16 + 32, -10, 0, 0f, 0f, 0f, 0f, 255);
							if (num2 > -1)
							{
								Main.npc[num2].ai[1] = 75f;
								Main.npc[num2].netUpdate = true;
								return;
							}
						}
						else if ((double)j > Main.rockLayer && j < Main.maxTilesY - 350)
						{
							int num3;
							if (Main.rand.Next(9) == 0)
							{
								num3 = NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), x2 * 16 + 16, y2 * 16 + 32, -7, 0, 0f, 0f, 0f, 0f, 255);
							}
							else if (Main.rand.Next(7) == 0)
							{
								num3 = NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), x2 * 16 + 16, y2 * 16 + 32, -8, 0, 0f, 0f, 0f, 0f, 255);
							}
							else if (Main.rand.Next(6) == 0)
							{
								num3 = NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), x2 * 16 + 16, y2 * 16 + 32, -9, 0, 0f, 0f, 0f, 0f, 255);
							}
							else if (Main.rand.Next(3) == 0)
							{
								num3 = NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), x2 * 16 + 16, y2 * 16 + 32, -3, 0, 0f, 0f, 0f, 0f, 255);
							}
							else
							{
								num3 = NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), x2 * 16 + 16, y2 * 16 + 32, 1, 0, 0f, 0f, 0f, 0f, 255);
							}
							if (num3 > -1)
							{
								Main.npc[num3].ai[1] = 75f;
								Main.npc[num3].netUpdate = true;
								return;
							}
						}
						else
						{
							if ((double)j <= Main.worldSurface || (double)j > Main.rockLayer)
							{
								Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 16, 16, 75, 1, false, 0, false, false);
								return;
							}
							int num4 = NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), x2 * 16 + 16, y2 * 16 + 32, -6, 0, 0f, 0f, 0f, 0f, 255);
							if (num4 > -1)
							{
								Main.npc[num4].ai[1] = 75f;
								Main.npc[num4].netUpdate = true;
								return;
							}
						}
					}
					else
					{
						if (Main.remixWorld && (double)i > (double)Main.maxTilesX * 0.37 && (double)i < (double)Main.maxTilesX * 0.63 && j > Main.maxTilesY - 220)
						{
							int stack = Main.rand.Next(20, 41);
							Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 16, 16, 965, stack, false, 0, false, false);
							return;
						}
						if (WorldGen.genRand.Next(45) == 0 || (Main.rand.Next(45) == 0 && Main.expertMode))
						{
							if ((double)j < Main.worldSurface)
							{
								int num5 = WorldGen.genRand.Next(10);
								if (num5 == 0)
								{
									Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 16, 16, 292, 1, false, 0, false, false);
								}
								if (num5 == 1)
								{
									Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 16, 16, 298, 1, false, 0, false, false);
								}
								if (num5 == 2)
								{
									Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 16, 16, 299, 1, false, 0, false, false);
								}
								if (num5 == 3)
								{
									Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 16, 16, 290, 1, false, 0, false, false);
								}
								if (num5 == 4)
								{
									Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 16, 16, 2322, 1, false, 0, false, false);
								}
								if (num5 == 5)
								{
									Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 16, 16, 2324, 1, false, 0, false, false);
								}
								if (num5 == 6)
								{
									Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 16, 16, 2325, 1, false, 0, false, false);
								}
								if (num5 >= 7)
								{
									Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 16, 16, 2350, WorldGen.genRand.Next(1, 3), false, 0, false, false);
									return;
								}
							}
							else if (flag)
							{
								int num6 = WorldGen.genRand.Next(11);
								if (num6 == 0)
								{
									Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 16, 16, 289, 1, false, 0, false, false);
								}
								if (num6 == 1)
								{
									Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 16, 16, 298, 1, false, 0, false, false);
								}
								if (num6 == 2)
								{
									Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 16, 16, 299, 1, false, 0, false, false);
								}
								if (num6 == 3)
								{
									Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 16, 16, 290, 1, false, 0, false, false);
								}
								if (num6 == 4)
								{
									Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 16, 16, 303, 1, false, 0, false, false);
								}
								if (num6 == 5)
								{
									Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 16, 16, 291, 1, false, 0, false, false);
								}
								if (num6 == 6)
								{
									Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 16, 16, 304, 1, false, 0, false, false);
								}
								if (num6 == 7)
								{
									Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 16, 16, 2322, 1, false, 0, false, false);
								}
								if (num6 == 8)
								{
									Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 16, 16, 2329, 1, false, 0, false, false);
								}
								if (num6 >= 7)
								{
									Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 16, 16, 2350, WorldGen.genRand.Next(1, 3), false, 0, false, false);
									return;
								}
							}
							else if (flag2)
							{
								int num7 = WorldGen.genRand.Next(15);
								if (num7 == 0)
								{
									Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 16, 16, 296, 1, false, 0, false, false);
								}
								if (num7 == 1)
								{
									Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 16, 16, 295, 1, false, 0, false, false);
								}
								if (num7 == 2)
								{
									Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 16, 16, 299, 1, false, 0, false, false);
								}
								if (num7 == 3)
								{
									Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 16, 16, 302, 1, false, 0, false, false);
								}
								if (num7 == 4)
								{
									Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 16, 16, 303, 1, false, 0, false, false);
								}
								if (num7 == 5)
								{
									Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 16, 16, 305, 1, false, 0, false, false);
								}
								if (num7 == 6)
								{
									Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 16, 16, 301, 1, false, 0, false, false);
								}
								if (num7 == 7)
								{
									Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 16, 16, 302, 1, false, 0, false, false);
								}
								if (num7 == 8)
								{
									Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 16, 16, 297, 1, false, 0, false, false);
								}
								if (num7 == 9)
								{
									Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 16, 16, 304, 1, false, 0, false, false);
								}
								if (num7 == 10)
								{
									Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 16, 16, 2322, 1, false, 0, false, false);
								}
								if (num7 == 11)
								{
									Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 16, 16, 2323, 1, false, 0, false, false);
								}
								if (num7 == 12)
								{
									Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 16, 16, 2327, 1, false, 0, false, false);
								}
								if (num7 == 13)
								{
									Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 16, 16, 2329, 1, false, 0, false, false);
								}
								if (num7 >= 7)
								{
									Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 16, 16, 2350, WorldGen.genRand.Next(1, 3), false, 0, false, false);
									return;
								}
							}
							else
							{
								int num8 = WorldGen.genRand.Next(14);
								if (num8 == 0)
								{
									Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 16, 16, 296, 1, false, 0, false, false);
								}
								if (num8 == 1)
								{
									Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 16, 16, 295, 1, false, 0, false, false);
								}
								if (num8 == 2)
								{
									Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 16, 16, 293, 1, false, 0, false, false);
								}
								if (num8 == 3)
								{
									Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 16, 16, 288, 1, false, 0, false, false);
								}
								if (num8 == 4)
								{
									Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 16, 16, 294, 1, false, 0, false, false);
								}
								if (num8 == 5)
								{
									Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 16, 16, 297, 1, false, 0, false, false);
								}
								if (num8 == 6)
								{
									Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 16, 16, 304, 1, false, 0, false, false);
								}
								if (num8 == 7)
								{
									Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 16, 16, 305, 1, false, 0, false, false);
								}
								if (num8 == 8)
								{
									Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 16, 16, 301, 1, false, 0, false, false);
								}
								if (num8 == 9)
								{
									Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 16, 16, 302, 1, false, 0, false, false);
								}
								if (num8 == 10)
								{
									Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 16, 16, 288, 1, false, 0, false, false);
								}
								if (num8 == 11)
								{
									Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 16, 16, 300, 1, false, 0, false, false);
								}
								if (num8 == 12)
								{
									Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 16, 16, 2323, 1, false, 0, false, false);
								}
								if (num8 == 13)
								{
									Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 16, 16, 2326, 1, false, 0, false, false);
								}
								if (WorldGen.genRand.Next(5) == 0)
								{
									Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 16, 16, 4870, 1, false, 0, false, false);
									return;
								}
							}
						}
						else
						{
							if (Main.netMode == 2 && Main.rand.Next(30) == 0)
							{
								Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 16, 16, 2997, 1, false, 0, false, false);
								return;
							}
							int num9 = Main.rand.Next(7);
							if (Main.expertMode)
							{
								num9--;
							}
							Player player2 = Main.player[(int)Player.FindClosest(new Vector2((float)(i * 16), (float)(j * 16)), 16, 16)];
							int num10 = 0;
							int num11 = 20;
							for (int k = 0; k < 50; k++)
							{
								Item item = player2.inventory[k];
								if (!item.IsAir && item.createTile == 4)
								{
									num10 += item.stack;
									if (num10 >= num11)
									{
										break;
									}
								}
							}
							bool flag4 = num10 < num11;
							if (num9 == 0 && player2.statLife < player2.statLifeMax2)
							{
								Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 16, 16, 58, 1, false, 0, false, false);
								if (Main.rand.Next(2) == 0)
								{
									Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 16, 16, 58, 1, false, 0, false, false);
								}
								if (Main.expertMode)
								{
									if (Main.rand.Next(2) == 0)
									{
										Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 16, 16, 58, 1, false, 0, false, false);
									}
									if (Main.rand.Next(2) == 0)
									{
										Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 16, 16, 58, 1, false, 0, false, false);
										return;
									}
								}
							}
							else if (num9 == 1 || (num9 == 0 && flag4))
							{
								int num12 = Main.rand.Next(2, 7);
								if (Main.expertMode)
								{
									num12 += Main.rand.Next(1, 7);
								}
								int type = 8;
								int type2 = 282;
								if (player2.ZoneHallow)
								{
									num12 += Main.rand.Next(2, 7);
									type = 4387;
								}
								else if ((style >= 22 && style <= 24) || player2.ZoneCrimson)
								{
									num12 += Main.rand.Next(2, 7);
									type = 4386;
								}
								else if ((style >= 16 && style <= 18) || player2.ZoneCorrupt)
								{
									num12 += Main.rand.Next(2, 7);
									type = 4385;
								}
								else if (style >= 7 && style <= 9)
								{
									num12 += Main.rand.Next(2, 7);
									num12 = (int)((float)num12 * 1.5f);
									type = 4388;
								}
								else if (style >= 4 && style <= 6)
								{
									type = 974;
									type2 = 286;
								}
								else if (style >= 34 && style <= 36)
								{
									num12 += Main.rand.Next(2, 7);
									type = 4383;
								}
								else if (player2.ZoneGlowshroom)
								{
									num12 += Main.rand.Next(2, 7);
									type = 5293;
								}
								if (Main.tile[i, j].liquid > 0)
								{
									Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 16, 16, type2, num12, false, 0, false, false);
									return;
								}
								Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 16, 16, type, num12, false, 0, false, false);
								return;
							}
							else
							{
								if (num9 == 2)
								{
									int stack2 = Main.rand.Next(10, 21);
									int type3 = 40;
									if (flag && WorldGen.genRand.Next(2) == 0)
									{
										if (Main.hardMode)
										{
											type3 = 168;
										}
										else
										{
											type3 = 42;
										}
									}
									if (j > Main.UnderworldLayer)
									{
										type3 = 265;
									}
									else if (Main.hardMode)
									{
										if (Main.rand.Next(2) == 0)
										{
											if (WorldGen.SavedOreTiers.Silver == 168)
											{
												type3 = 4915;
											}
											else
											{
												type3 = 278;
											}
										}
										else
										{
											type3 = 47;
										}
									}
									Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 16, 16, type3, stack2, false, 0, false, false);
									return;
								}
								if (num9 == 3)
								{
									int type4 = 28;
									if (j > Main.UnderworldLayer || Main.hardMode)
									{
										type4 = 188;
									}
									int num13 = 1;
									if (Main.expertMode && Main.rand.Next(3) != 0)
									{
										num13++;
									}
									Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 16, 16, type4, num13, false, 0, false, false);
									return;
								}
								if (num9 == 4 && (flag3 || flag2))
								{
									int type5 = 166;
									if (flag3)
									{
										type5 = 4423;
									}
									int num14 = Main.rand.Next(4) + 1;
									if (Main.expertMode)
									{
										num14 += Main.rand.Next(4);
									}
									Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 16, 16, type5, num14, false, 0, false, false);
									return;
								}
								if ((num9 == 4 || num9 == 5) && j < Main.UnderworldLayer && !Main.hardMode)
								{
									int stack3 = Main.rand.Next(20, 41);
									Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 16, 16, 965, stack3, false, 0, false, false);
									return;
								}
								float num15 = (float)(200 + WorldGen.genRand.Next(-100, 101));
								if ((double)j < Main.worldSurface)
								{
									num15 *= 0.5f;
								}
								else if (flag)
								{
									num15 *= 0.75f;
								}
								else if (j > Main.maxTilesY - 250)
								{
									num15 *= 1.25f;
								}
								num15 *= 1f + (float)Main.rand.Next(-20, 21) * 0.01f;
								if (Main.rand.Next(4) == 0)
								{
									num15 *= 1f + (float)Main.rand.Next(5, 11) * 0.01f;
								}
								if (Main.rand.Next(8) == 0)
								{
									num15 *= 1f + (float)Main.rand.Next(10, 21) * 0.01f;
								}
								if (Main.rand.Next(12) == 0)
								{
									num15 *= 1f + (float)Main.rand.Next(20, 41) * 0.01f;
								}
								if (Main.rand.Next(16) == 0)
								{
									num15 *= 1f + (float)Main.rand.Next(40, 81) * 0.01f;
								}
								if (Main.rand.Next(20) == 0)
								{
									num15 *= 1f + (float)Main.rand.Next(50, 101) * 0.01f;
								}
								if (Main.expertMode)
								{
									num15 *= 2.5f;
								}
								if (Main.expertMode && Main.rand.Next(2) == 0)
								{
									num15 *= 1.25f;
								}
								if (Main.expertMode && Main.rand.Next(3) == 0)
								{
									num15 *= 1.5f;
								}
								if (Main.expertMode && Main.rand.Next(4) == 0)
								{
									num15 *= 1.75f;
								}
								num15 *= num;
								if (NPC.downedBoss1)
								{
									num15 *= 1.1f;
								}
								if (NPC.downedBoss2)
								{
									num15 *= 1.1f;
								}
								if (NPC.downedBoss3)
								{
									num15 *= 1.1f;
								}
								if (NPC.downedMechBoss1)
								{
									num15 *= 1.1f;
								}
								if (NPC.downedMechBoss2)
								{
									num15 *= 1.1f;
								}
								if (NPC.downedMechBoss3)
								{
									num15 *= 1.1f;
								}
								if (NPC.downedPlantBoss)
								{
									num15 *= 1.1f;
								}
								if (NPC.downedQueenBee)
								{
									num15 *= 1.1f;
								}
								if (NPC.downedGolemBoss)
								{
									num15 *= 1.1f;
								}
								if (NPC.downedPirates)
								{
									num15 *= 1.1f;
								}
								if (NPC.downedGoblins)
								{
									num15 *= 1.1f;
								}
								if (NPC.downedFrost)
								{
									num15 *= 1.1f;
								}
								while ((int)num15 > 0)
								{
									if (num15 > 1000000f)
									{
										int num16 = (int)(num15 / 1000000f);
										if (num16 > 50 && Main.rand.Next(2) == 0)
										{
											num16 /= Main.rand.Next(3) + 1;
										}
										if (Main.rand.Next(2) == 0)
										{
											num16 /= Main.rand.Next(3) + 1;
										}
										num15 -= (float)(1000000 * num16);
										Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 16, 16, 74, num16, false, 0, false, false);
									}
									else if (num15 > 10000f)
									{
										int num17 = (int)(num15 / 10000f);
										if (num17 > 50 && Main.rand.Next(2) == 0)
										{
											num17 /= Main.rand.Next(3) + 1;
										}
										if (Main.rand.Next(2) == 0)
										{
											num17 /= Main.rand.Next(3) + 1;
										}
										num15 -= (float)(10000 * num17);
										Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 16, 16, 73, num17, false, 0, false, false);
									}
									else if (num15 > 100f)
									{
										int num18 = (int)(num15 / 100f);
										if (num18 > 50 && Main.rand.Next(2) == 0)
										{
											num18 /= Main.rand.Next(3) + 1;
										}
										if (Main.rand.Next(2) == 0)
										{
											num18 /= Main.rand.Next(3) + 1;
										}
										num15 -= (float)(100 * num18);
										Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 16, 16, 72, num18, false, 0, false, false);
									}
									else
									{
										int num19 = (int)num15;
										if (num19 > 50 && Main.rand.Next(2) == 0)
										{
											num19 /= Main.rand.Next(3) + 1;
										}
										if (Main.rand.Next(2) == 0)
										{
											num19 /= Main.rand.Next(4) + 1;
										}
										if (num19 < 1)
										{
											num19 = 1;
										}
										num15 -= (float)num19;
										Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 16, 16, 71, num19, false, 0, false, false);
									}
								}
							}
						}
					}
				}
			}
		}

		// Token: 0x06000F81 RID: 3969 RVA: 0x0044A808 File Offset: 0x00448A08
		public static int PlaceChest(int x, int y, ushort type = 21, bool notNearOtherChests = false, int style = 0)
		{
			int num = -1;
			if (TileID.Sets.Boulders[(int)Main.tile[x, y + 1].type] || TileID.Sets.Boulders[(int)Main.tile[x + 1, y + 1].type])
			{
				return -1;
			}
			TileObject tileObject;
			if (TileObject.CanPlace(x, y, (int)type, style, 1, out tileObject, false, null))
			{
				bool flag = true;
				if (notNearOtherChests && Chest.NearOtherChests(x - 1, y - 1))
				{
					flag = false;
				}
				if (flag)
				{
					TileObject.Place(tileObject);
					num = Chest.CreateChest(tileObject.xCoord, tileObject.yCoord, -1);
				}
			}
			else
			{
				num = -1;
			}
			if (num != -1 && Main.netMode == 1 && type == 21)
			{
				NetMessage.SendData(34, -1, -1, null, 0, (float)x, (float)y, (float)style, 0, 0, 0);
			}
			if (num != -1 && Main.netMode == 1 && type == 467)
			{
				NetMessage.SendData(34, -1, -1, null, 4, (float)x, (float)y, (float)style, 0, 0, 0);
			}
			return num;
		}

		// Token: 0x06000F82 RID: 3970 RVA: 0x0044A8F0 File Offset: 0x00448AF0
		public static void PlaceChestDirect(int x, int y, ushort type, int style, int id)
		{
			Chest.CreateChest(x, y - 1, id);
			for (int i = 0; i <= 1; i++)
			{
				for (int j = -1; j <= 0; j++)
				{
					if (Main.tile[x + i, y + j] == null)
					{
						Main.tile[x + i, y + j] = new Tile();
					}
				}
			}
			Main.tile[x, y - 1].active(true);
			Main.tile[x, y - 1].frameY = 0;
			Main.tile[x, y - 1].frameX = (short)(36 * style);
			Main.tile[x, y - 1].type = type;
			Main.tile[x, y - 1].halfBrick(false);
			Main.tile[x + 1, y - 1].active(true);
			Main.tile[x + 1, y - 1].frameY = 0;
			Main.tile[x + 1, y - 1].frameX = (short)(18 + 36 * style);
			Main.tile[x + 1, y - 1].type = type;
			Main.tile[x + 1, y - 1].halfBrick(false);
			Main.tile[x, y].active(true);
			Main.tile[x, y].frameY = 18;
			Main.tile[x, y].frameX = (short)(36 * style);
			Main.tile[x, y].type = type;
			Main.tile[x, y].halfBrick(false);
			Main.tile[x + 1, y].active(true);
			Main.tile[x + 1, y].frameY = 18;
			Main.tile[x + 1, y].frameX = (short)(18 + 36 * style);
			Main.tile[x + 1, y].type = type;
			Main.tile[x + 1, y].halfBrick(false);
		}

		// Token: 0x06000F83 RID: 3971 RVA: 0x0044AAF0 File Offset: 0x00448CF0
		public static void PlaceDresserDirect(int x, int y, ushort type, int style, int id)
		{
			Chest.CreateChest(x - 1, y - 1, id);
			for (int i = -1; i <= 1; i++)
			{
				for (int j = -1; j <= 0; j++)
				{
					if (Main.tile[x + i, y + j] == null)
					{
						Main.tile[x + i, y + j] = new Tile();
					}
				}
			}
			short num = (short)(style * 54);
			Main.tile[x - 1, y - 1].active(true);
			Main.tile[x - 1, y - 1].frameY = 0;
			Main.tile[x - 1, y - 1].frameX = num;
			Main.tile[x - 1, y - 1].type = type;
			Main.tile[x, y - 1].active(true);
			Main.tile[x, y - 1].frameY = 0;
			Main.tile[x, y - 1].frameX = num + 18;
			Main.tile[x, y - 1].type = type;
			Main.tile[x + 1, y - 1].active(true);
			Main.tile[x + 1, y - 1].frameY = 0;
			Main.tile[x + 1, y - 1].frameX = num + 36;
			Main.tile[x + 1, y - 1].type = type;
			Main.tile[x - 1, y].active(true);
			Main.tile[x - 1, y].frameY = 18;
			Main.tile[x - 1, y].frameX = num;
			Main.tile[x - 1, y].type = type;
			Main.tile[x, y].active(true);
			Main.tile[x, y].frameY = 18;
			Main.tile[x, y].frameX = num + 18;
			Main.tile[x, y].type = type;
			Main.tile[x + 1, y].active(true);
			Main.tile[x + 1, y].frameY = 18;
			Main.tile[x + 1, y].frameX = num + 36;
			Main.tile[x + 1, y].type = type;
		}

		// Token: 0x06000F84 RID: 3972 RVA: 0x0044AD4C File Offset: 0x00448F4C
		public static void CheckChest(int i, int j, int type)
		{
			if (WorldGen.destroyObject)
			{
				return;
			}
			bool flag = false;
			int k = 0;
			k += (int)(Main.tile[i, j].frameX / 18);
			int num = j + (int)(Main.tile[i, j].frameY / 18 * -1);
			while (k > 1)
			{
				k -= 2;
			}
			k *= -1;
			k += i;
			for (int l = k; l < k + 2; l++)
			{
				for (int m = num; m < num + 2; m++)
				{
					if (Main.tile[l, m] == null)
					{
						Main.tile[l, m] = new Tile();
					}
					int n;
					for (n = (int)(Main.tile[l, m].frameX / 18); n > 1; n -= 2)
					{
					}
					if (!Main.tile[l, m].active() || (int)Main.tile[l, m].type != type || n != l - k || (int)Main.tile[l, m].frameY != (m - num) * 18)
					{
						flag = true;
					}
				}
				if (Main.tile[l, num + 2] == null)
				{
					Main.tile[l, num + 2] = new Tile();
				}
				if ((!Main.tile[l, num + 2].active() || !Main.tileSolid[(int)Main.tile[l, num + 2].type]) && Chest.CanDestroyChest(k, num))
				{
					flag = true;
				}
			}
			if (flag)
			{
				int chestItemDrop = WorldGen.GetChestItemDrop(i, j, type);
				WorldGen.destroyObject = true;
				for (int num2 = k; num2 < k + 2; num2++)
				{
					for (int num3 = num; num3 < num + 3; num3++)
					{
						if ((int)Main.tile[num2, num3].type == type && Main.tile[num2, num3].active())
						{
							Chest.DestroyChest(num2, num3);
							WorldGen.KillTile(num2, num3, false, false, false);
						}
					}
				}
				Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, chestItemDrop, 1, false, 0, false, false);
				WorldGen.destroyObject = false;
			}
		}

		// Token: 0x06000F85 RID: 3973 RVA: 0x0044AF68 File Offset: 0x00449168
		private static int GetChestItemDrop(int x, int y, int type)
		{
			int num = (int)(Main.tile[x, y].frameX / 36);
			int result;
			if (type == 467)
			{
				result = Chest.chestItemSpawn2[num];
			}
			else
			{
				result = Chest.chestItemSpawn[num];
			}
			return result;
		}

		// Token: 0x06000F86 RID: 3974 RVA: 0x0044AFA8 File Offset: 0x004491A8
		public static bool PlaceActuator(int i, int j)
		{
			if (!Main.tile[i, j].actuator())
			{
				SoundEngine.PlaySound(0, i * 16, j * 16, 1, 1f, 0f);
				Main.tile[i, j].actuator(true);
				return true;
			}
			return false;
		}

		// Token: 0x06000F87 RID: 3975 RVA: 0x0044AFF8 File Offset: 0x004491F8
		public static bool KillActuator(int i, int j)
		{
			if (Main.tile[i, j].actuator())
			{
				SoundEngine.PlaySound(0, i * 16, j * 16, 1, 1f, 0f);
				Main.tile[i, j].actuator(false);
				if (Main.netMode != 1)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 16, 16, 849, 1, false, 0, false, false);
				}
				for (int k = 0; k < 5; k++)
				{
					Dust.NewDust(new Vector2((float)(i * 16), (float)(j * 16)), 16, 16, 50, 0f, 0f, 0, default(Color), 1f);
				}
				return true;
			}
			return false;
		}

		// Token: 0x06000F88 RID: 3976 RVA: 0x0044B0B8 File Offset: 0x004492B8
		public static bool PlaceWire(int i, int j)
		{
			if (!Main.tile[i, j].wire())
			{
				SoundEngine.PlaySound(0, i * 16, j * 16, 1, 1f, 0f);
				Main.tile[i, j].wire(true);
				return true;
			}
			return false;
		}

		// Token: 0x06000F89 RID: 3977 RVA: 0x0044B108 File Offset: 0x00449308
		public static bool KillWire(int i, int j)
		{
			if (Main.tile[i, j].wire())
			{
				SoundEngine.PlaySound(0, i * 16, j * 16, 1, 1f, 0f);
				Main.tile[i, j].wire(false);
				if (Main.netMode != 1)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 16, 16, 530, 1, false, 0, false, false);
				}
				for (int k = 0; k < 5; k++)
				{
					Dust.NewDust(new Vector2((float)(i * 16), (float)(j * 16)), 16, 16, 50, 0f, 0f, 0, default(Color), 1f);
				}
				return true;
			}
			return false;
		}

		// Token: 0x06000F8A RID: 3978 RVA: 0x0044B1C8 File Offset: 0x004493C8
		public static bool PlaceWire2(int i, int j)
		{
			if (!Main.tile[i, j].wire2())
			{
				SoundEngine.PlaySound(0, i * 16, j * 16, 1, 1f, 0f);
				Main.tile[i, j].wire2(true);
				return true;
			}
			return false;
		}

		// Token: 0x06000F8B RID: 3979 RVA: 0x0044B218 File Offset: 0x00449418
		public static bool KillWire2(int i, int j)
		{
			if (Main.tile[i, j].wire2())
			{
				SoundEngine.PlaySound(0, i * 16, j * 16, 1, 1f, 0f);
				Main.tile[i, j].wire2(false);
				if (Main.netMode != 1)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 16, 16, 530, 1, false, 0, false, false);
				}
				for (int k = 0; k < 5; k++)
				{
					Dust.NewDust(new Vector2((float)(i * 16), (float)(j * 16)), 16, 16, 50, 0f, 0f, 0, default(Color), 1f);
				}
				return true;
			}
			return false;
		}

		// Token: 0x06000F8C RID: 3980 RVA: 0x0044B2D8 File Offset: 0x004494D8
		public static bool PlaceWire3(int i, int j)
		{
			if (!Main.tile[i, j].wire3())
			{
				SoundEngine.PlaySound(0, i * 16, j * 16, 1, 1f, 0f);
				Main.tile[i, j].wire3(true);
				return true;
			}
			return false;
		}

		// Token: 0x06000F8D RID: 3981 RVA: 0x0044B328 File Offset: 0x00449528
		public static bool KillWire3(int i, int j)
		{
			if (Main.tile[i, j].wire3())
			{
				SoundEngine.PlaySound(0, i * 16, j * 16, 1, 1f, 0f);
				Main.tile[i, j].wire3(false);
				if (Main.netMode != 1)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 16, 16, 530, 1, false, 0, false, false);
				}
				for (int k = 0; k < 5; k++)
				{
					Dust.NewDust(new Vector2((float)(i * 16), (float)(j * 16)), 16, 16, 50, 0f, 0f, 0, default(Color), 1f);
				}
				return true;
			}
			return false;
		}

		// Token: 0x06000F8E RID: 3982 RVA: 0x0044B3E8 File Offset: 0x004495E8
		public static bool PlaceWire4(int i, int j)
		{
			if (!Main.tile[i, j].wire4())
			{
				SoundEngine.PlaySound(0, i * 16, j * 16, 1, 1f, 0f);
				Main.tile[i, j].wire4(true);
				return true;
			}
			return false;
		}

		// Token: 0x06000F8F RID: 3983 RVA: 0x0044B438 File Offset: 0x00449638
		public static bool KillWire4(int i, int j)
		{
			if (Main.tile[i, j].wire4())
			{
				SoundEngine.PlaySound(0, i * 16, j * 16, 1, 1f, 0f);
				Main.tile[i, j].wire4(false);
				if (Main.netMode != 1)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 16, 16, 530, 1, false, 0, false, false);
				}
				for (int k = 0; k < 5; k++)
				{
					Dust.NewDust(new Vector2((float)(i * 16), (float)(j * 16)), 16, 16, 50, 0f, 0f, 0, default(Color), 1f);
				}
				return true;
			}
			return false;
		}

		// Token: 0x06000F90 RID: 3984 RVA: 0x0044B4F8 File Offset: 0x004496F8
		public static bool IsFitToPlaceFlowerIn(int x, int y, int typeAttemptedToPlace)
		{
			if (y < 1 || y > Main.maxTilesY - 1)
			{
				return false;
			}
			Tile tile = Main.tile[x, y + 1];
			return tile.active() && tile.slope() == 0 && !tile.halfBrick() && (((tile.type == 2 || tile.type == 78 || tile.type == 380 || tile.type == 477 || tile.type == 579) && typeAttemptedToPlace == 3) || ((tile.type == 23 || tile.type == 661) && typeAttemptedToPlace == 24) || ((tile.type == 109 || tile.type == 492) && typeAttemptedToPlace == 110) || ((tile.type == 199 || tile.type == 662) && typeAttemptedToPlace == 201) || (tile.type == 633 && typeAttemptedToPlace == 637));
		}

		// Token: 0x06000F91 RID: 3985 RVA: 0x0044B5F8 File Offset: 0x004497F8
		private static bool SeaOatWaterCheck(int x, int y)
		{
			int num = 45;
			int num2 = 20;
			int num3 = 20;
			int num4 = num + 1;
			int num5 = 0;
			bool flag = false;
			if (x <= WorldGen.beachDistance || x >= Main.maxTilesX - WorldGen.beachDistance)
			{
				flag = true;
				num = 65;
				num2 += 5;
			}
			for (int i = x - num; i <= x + num; i++)
			{
				for (int j = y - num2; j <= y + num2; j++)
				{
					if (WorldGen.InWorld(i, j, 0) && !WorldGen.SolidTile(i, j, false) && Main.tile[i, j].liquid > 0)
					{
						num5 += (int)Main.tile[i, j].liquid;
						int num6 = Math.Abs(i - x);
						if (num6 < num4)
						{
							num4 = num6;
						}
					}
				}
			}
			if (num5 / 255 >= num3)
			{
				return !flag;
			}
			return flag;
		}

		// Token: 0x06000F92 RID: 3986 RVA: 0x0044B6E0 File Offset: 0x004498E0
		private static bool PlantSeaOat(int x, int y)
		{
			if (Main.tile[x, y].wall > 0 || Main.tile[x, y].active() || Main.tile[x, y].liquid > 0 || !WorldGen.SolidTileAllowBottomSlope(x, y + 1) || !TileID.Sets.Conversion.Sand[(int)Main.tile[x, y + 1].type])
			{
				return false;
			}
			if (!WorldGen.SeaOatWaterCheck(x, y))
			{
				return false;
			}
			Main.tile[x, y].active(true);
			Main.tile[x, y].slope(0);
			Main.tile[x, y].halfBrick(false);
			Main.tile[x, y].type = 529;
			Main.tile[x, y].frameX = (short)(WorldGen.genRand.Next(5) * 18);
			int num = 0;
			Main.tile[x, y].frameY = (short)(num * 34);
			if (Main.netMode == 2)
			{
				NetMessage.SendTileSquare(-1, x, y, TileChangeType.None);
			}
			return true;
		}

		// Token: 0x06000F93 RID: 3987 RVA: 0x0044B7F4 File Offset: 0x004499F4
		private static bool CheckSeaOat(int x, int y)
		{
			if (!WorldGen.SeaOatWaterCheck(x, y))
			{
				WorldGen.KillTile(x, y, false, false, false);
				if (Main.netMode == 2)
				{
					NetMessage.SendData(17, -1, -1, null, 0, (float)x, (float)y, 0f, 0, 0, 0);
				}
				return false;
			}
			return true;
		}

		// Token: 0x06000F94 RID: 3988 RVA: 0x0044B838 File Offset: 0x00449A38
		private static bool GrowSeaOat(int x, int y)
		{
			if (Main.tile[x, y].frameX < 180)
			{
				Tile tile = Main.tile[x, y];
				tile.frameX += 90;
			}
			if (Main.netMode == 2)
			{
				NetMessage.SendTileSquare(-1, x, y, TileChangeType.None);
			}
			return false;
		}

		// Token: 0x06000F95 RID: 3989 RVA: 0x0044B88C File Offset: 0x00449A8C
		private static int GetWaterDepth(int x, int y)
		{
			int num = y;
			while (!WorldGen.SolidTile(x, num, false))
			{
				num++;
				if (num > Main.maxTilesY - 1)
				{
					return 0;
				}
			}
			num--;
			int num2 = num;
			while (Main.tile[x, num2].liquid > 0 && !WorldGen.SolidTile(x, num2, false))
			{
				num2--;
			}
			return num - num2;
		}

		// Token: 0x06000F96 RID: 3990 RVA: 0x0044B8E4 File Offset: 0x00449AE4
		private static int CountGrowingPlantTiles(int x, int y, int range, int type)
		{
			int num = 0;
			for (int i = x - range; i <= x + range; i++)
			{
				for (int j = y - range * 3; j <= y + range * 3; j++)
				{
					if (Main.tile[i, j].active() && (int)Main.tile[i, j].type == type)
					{
						num++;
					}
				}
			}
			return num;
		}

		// Token: 0x06000F97 RID: 3991 RVA: 0x0044B944 File Offset: 0x00449B44
		private static bool PlaceBamboo(int x, int y)
		{
			int num = 2;
			int num2 = 5;
			int num3 = WorldGen.genRand.Next(1, 21);
			Tile tile = Main.tile[x, y];
			if (tile.wall > 0 && (double)y <= Main.worldSurface)
			{
				return false;
			}
			if (tile.active() && tile.type == 314)
			{
				return false;
			}
			Tile tile2 = Main.tile[x, y + 1];
			if (tile2.type != 571 && tile2.type != 60)
			{
				return false;
			}
			int waterDepth = WorldGen.GetWaterDepth(x, y);
			if (waterDepth < num || waterDepth > num2)
			{
				return false;
			}
			int num4 = WorldGen.CountGrowingPlantTiles(x, y, 5, 571);
			int num5 = 1;
			if (tile2.type == 571)
			{
				while (!WorldGen.SolidTile(x, y + num5, false))
				{
					num5++;
				}
				if (num5 + num4 / WorldGen.genRand.Next(1, 21) > num3)
				{
					return false;
				}
			}
			else
			{
				num4 += 25;
			}
			num4 += num5 * 2;
			if (num4 > WorldGen.genRand.Next(40, 61))
			{
				return false;
			}
			tile = Main.tile[x, y];
			tile.active(true);
			tile.type = 571;
			tile.frameX = 0;
			tile.frameY = 0;
			tile.slope(0);
			tile.halfBrick(false);
			WorldGen.SquareTileFrame(x, y, true);
			return true;
		}

		// Token: 0x06000F98 RID: 3992 RVA: 0x0044BA90 File Offset: 0x00449C90
		public static void CheckBamboo(int x, int y)
		{
			Tile tile = Main.tile[x, y + 1];
			if (tile == null)
			{
				return;
			}
			if (!tile.active() || (tile.type != 60 && tile.type != 571))
			{
				WorldGen.KillTile(x, y, false, false, false);
				if (Main.netMode == 2)
				{
					NetMessage.SendData(17, -1, -1, null, 0, (float)x, (float)y, 0f, 0, 0, 0);
				}
				WorldGen.SquareTileFrame(x, y, true);
				return;
			}
			Tile tile2 = Main.tile[x, y - 1];
			if (tile2 == null)
			{
				return;
			}
			Tile tile3 = Main.tile[x, y];
			if (tile3 == null)
			{
				return;
			}
			bool flag = tile2.active() && tile2.type == 571;
			bool flag2 = tile.active() && tile.type == 571;
			int num = (int)(tile3.frameX / 18);
			tile3.frameY = 0;
			if (flag)
			{
				if (flag2)
				{
					if (num < 5 || num > 14)
					{
						tile3.frameX = (short)(WorldGen.genRand.Next(5, 15) * 18);
						if (Main.netMode == 2)
						{
							NetMessage.SendTileSquare(-1, x, y, TileChangeType.None);
							return;
						}
					}
				}
				else if (num < 1 || num > 4)
				{
					tile3.frameX = (short)(WorldGen.genRand.Next(1, 5) * 18);
					if (Main.netMode == 2)
					{
						NetMessage.SendTileSquare(-1, x, y, TileChangeType.None);
						return;
					}
				}
			}
			else if (flag2)
			{
				if (num < 15 || num > 19)
				{
					tile3.frameX = (short)(WorldGen.genRand.Next(15, 20) * 18);
					if (Main.netMode == 2)
					{
						NetMessage.SendTileSquare(-1, x, y, TileChangeType.None);
						return;
					}
				}
			}
			else if (num != 0)
			{
				tile3.frameX = 0;
				if (Main.netMode == 2)
				{
					NetMessage.SendTileSquare(-1, x, y, TileChangeType.None);
				}
			}
		}

		// Token: 0x06000F99 RID: 3993 RVA: 0x0044BC50 File Offset: 0x00449E50
		public static void PlaceUnderwaterPlant(ushort type, int x, int y)
		{
			if (!WorldGen.CanUnderwaterPlantGrowHere(type, x, y, false))
			{
				return;
			}
			Tile tileSafely = Framing.GetTileSafely(x, y + 1);
			tileSafely.slope(0);
			tileSafely.halfBrick(false);
			Tile tileSafely2 = Framing.GetTileSafely(x, y);
			tileSafely2.active(true);
			tileSafely2.type = type;
			tileSafely2.frameX = 0;
			tileSafely2.frameY = 0;
			tileSafely2.slope(0);
			tileSafely2.halfBrick(false);
			WorldGen.SquareTileFrame(x, y, true);
		}

		// Token: 0x06000F9A RID: 3994 RVA: 0x0044BCB8 File Offset: 0x00449EB8
		public static bool CanUnderwaterPlantGrowHere(ushort type, int x, int y, bool ignoreSelf)
		{
			if (!WorldGen.InWorld(x, y, 50))
			{
				return false;
			}
			Tile tileSafely = Framing.GetTileSafely(x, y);
			if (!ignoreSelf && tileSafely.active())
			{
				return false;
			}
			for (int i = 0; i < 3; i++)
			{
				tileSafely = Framing.GetTileSafely(x, y - i);
				if (tileSafely.liquid == 0 || tileSafely.liquidType() != 0)
				{
					return false;
				}
			}
			Tile tileSafely2 = Framing.GetTileSafely(x, y + 1);
			if (!tileSafely2.nactive())
			{
				return false;
			}
			if (!TileID.Sets.Conversion.Sand[(int)tileSafely2.type] && type != tileSafely2.type)
			{
				return false;
			}
			tileSafely = Framing.GetTileSafely(x, y);
			ushort wall = tileSafely.wall;
			return wall == 0 || wall - 63 <= 6 || wall - 80 <= 1;
		}

		// Token: 0x06000F9B RID: 3995 RVA: 0x0044BD64 File Offset: 0x00449F64
		public static void CheckUnderwaterPlant(ushort type, int x, int y)
		{
			if (!WorldGen.CanUnderwaterPlantGrowHere(type, x, y, true))
			{
				WorldGen.KillTile(x, y, false, false, false);
				if (Main.netMode == 2)
				{
					NetMessage.SendData(17, -1, -1, null, 0, (float)x, (float)y, 0f, 0, 0, 0);
				}
				WorldGen.SquareTileFrame(x, y, true);
				return;
			}
			Tile tileSafely = Framing.GetTileSafely(x, y - 1);
			Tile tileSafely2 = Framing.GetTileSafely(x, y);
			Tile tileSafely3 = Framing.GetTileSafely(x, y + 1);
			bool flag = tileSafely.active() && tileSafely.type == type;
			bool flag2 = tileSafely3.active() && tileSafely3.type == type;
			int num = (int)(tileSafely2.frameX / 18);
			tileSafely2.frameY = 0;
			if (flag)
			{
				if (1 > num || num > 7)
				{
					tileSafely2.frameX = (short)(WorldGen.genRand.Next(1, 8) * 18);
					if (Main.netMode == 2)
					{
						NetMessage.SendTileSquare(-1, x, y, TileChangeType.None);
						return;
					}
				}
			}
			else if (flag2)
			{
				if (7 > num || num > 12)
				{
					tileSafely2.frameX = (short)(WorldGen.genRand.Next(7, 13) * 18);
					if (Main.netMode == 2)
					{
						NetMessage.SendTileSquare(-1, x, y, TileChangeType.None);
						return;
					}
				}
			}
			else if (num != 0)
			{
				tileSafely2.frameX = 0;
				if (Main.netMode == 2)
				{
					NetMessage.SendTileSquare(-1, x, y, TileChangeType.None);
				}
			}
		}

		// Token: 0x06000F9C RID: 3996 RVA: 0x0044BEA8 File Offset: 0x0044A0A8
		public static Point PlaceCatTail(int x, int j)
		{
			int num = j;
			Point result = new Point(-1, -1);
			if (x < 50 || x > Main.maxTilesX - 50 || num < 50 || num > Main.maxTilesY - 50)
			{
				return result;
			}
			if ((Main.tile[x, num].active() && Main.tile[x, num].type != 71) || Main.tile[x, num].liquid == 0 || Main.tile[x, num].liquidType() != 0)
			{
				return result;
			}
			while (Main.tile[x, num].liquid > 0 && num > 50)
			{
				num--;
			}
			num++;
			if (Main.tile[x, num].active() || Main.tile[x, num - 1].active() || Main.tile[x, num].liquid == 0 || Main.tile[x, num].liquidType() != 0)
			{
				return result;
			}
			if (Main.tile[x, num].wall != 0 && Main.tile[x, num].wall != 80 && Main.tile[x, num].wall != 81 && Main.tile[x, num].wall != 69 && (Main.tile[x, num].wall < 63 || Main.tile[x, num].wall > 68))
			{
				return result;
			}
			int num2 = 7;
			int num3 = 0;
			for (int i = x - num2; i <= x + num2; i++)
			{
				for (int k = num - num2; k <= num + num2; k++)
				{
					if (Main.tile[i, k].active() && Main.tile[i, k].type == 519)
					{
						num3++;
						break;
					}
				}
			}
			if (num3 > 3)
			{
				return result;
			}
			int num4 = num;
			while ((!Main.tile[x, num4].active() || !Main.tileSolid[(int)Main.tile[x, num4].type] || Main.tileSolidTop[(int)Main.tile[x, num4].type]) && num4 < Main.maxTilesY - 50)
			{
				if (Main.tile[x, num4].active() && Main.tile[x, num4].type != 71)
				{
					return result;
				}
				num4++;
			}
			int num5 = WorldGen.catTailDistance - 1;
			if (num4 - num > num5)
			{
				return result;
			}
			if (num4 - num < 2)
			{
				return result;
			}
			int type = (int)Main.tile[x, num4].type;
			if (!Main.tile[x, num4].nactive())
			{
				return result;
			}
			int num6 = -1;
			if (type == 2 || type == 477)
			{
				num6 = 0;
			}
			else if (type == 53)
			{
				if (x < WorldGen.beachDistance || x > Main.maxTilesX - WorldGen.beachDistance)
				{
					return result;
				}
				num6 = 18;
			}
			else if (type == 199 || type == 662 || type == 234)
			{
				num6 = 54;
			}
			else if (type == 23 || type == 661 || type == 112)
			{
				num6 = 72;
			}
			else if (type == 70)
			{
				num6 = 90;
			}
			if (num6 < 0)
			{
				return result;
			}
			if (Main.tile[x, num4].topSlope() && WorldGen.gen && WorldGen.genRand.Next(3) != 0)
			{
				Main.tile[x, num4].slope(0);
			}
			else if (Main.tile[x, num4].topSlope() || Main.tile[x, num4].halfBrick())
			{
				return result;
			}
			num = num4 - 1;
			Main.tile[x, num].active(true);
			Main.tile[x, num].type = 519;
			Main.tile[x, num].frameX = 0;
			Main.tile[x, num].frameY = (short)num6;
			Main.tile[x, num].halfBrick(false);
			Main.tile[x, num].slope(0);
			Main.tile[x, num].CopyPaintAndCoating(Main.tile[x, num + 1]);
			WorldGen.SquareTileFrame(x, num, true);
			result = new Point(x, num);
			return result;
		}

		// Token: 0x06000F9D RID: 3997 RVA: 0x0044C2F4 File Offset: 0x0044A4F4
		public static void CheckCatTail(int x, int j)
		{
			if (Main.tile[x, j] == null)
			{
				return;
			}
			bool flag = false;
			int num = j;
			while ((!Main.tile[x, num].active() || !Main.tileSolid[(int)Main.tile[x, num].type] || Main.tileSolidTop[(int)Main.tile[x, num].type]) && num < Main.maxTilesY - 50)
			{
				if (Main.tile[x, num].active() && Main.tile[x, num].type != 519)
				{
					flag = true;
				}
				if (!Main.tile[x, num].active())
				{
					break;
				}
				num++;
				if (Main.tile[x, num] == null)
				{
					return;
				}
			}
			int num2 = num - 1;
			if (Main.tile[x, num2] == null)
			{
				return;
			}
			while (Main.tile[x, num2] != null && Main.tile[x, num2].liquid > 0 && num2 > 50)
			{
				if ((Main.tile[x, num2].active() && Main.tile[x, num2].type != 519) || Main.tile[x, num2].liquidType() != 0)
				{
					flag = true;
				}
				num2--;
				if (Main.tile[x, num2] == null)
				{
					return;
				}
			}
			num2++;
			if (Main.tile[x, num2] == null)
			{
				return;
			}
			int num3 = num2;
			int num4 = WorldGen.catTailDistance;
			if (num - num3 > num4)
			{
				flag = true;
			}
			int type = (int)Main.tile[x, num].type;
			int num5 = -1;
			if (type == 2 || type == 477)
			{
				num5 = 0;
			}
			else if (type == 53)
			{
				num5 = 18;
			}
			else if (type == 199 || type == 662 || type == 234)
			{
				num5 = 54;
			}
			else if (type == 23 || type == 661 || type == 112)
			{
				num5 = 72;
			}
			else if (type == 70)
			{
				num5 = 90;
			}
			if (!Main.tile[x, num].nactive())
			{
				flag = true;
			}
			if (num5 < 0)
			{
				flag = true;
			}
			num2 = num - 1;
			if (Main.tile[x, num2] != null && !Main.tile[x, num2].active())
			{
				for (int i = num2; i >= num3; i--)
				{
					if (Main.tile[x, i] == null)
					{
						return;
					}
					if (Main.tile[x, i].active() && Main.tile[x, i].type == 519)
					{
						num2 = i;
						break;
					}
				}
			}
			while (Main.tile[x, num2] != null && Main.tile[x, num2].active() && Main.tile[x, num2].type == 519)
			{
				num2--;
			}
			num2++;
			if (Main.tile[x, num - 1] != null && Main.tile[x, num - 1].liquid < 127 && WorldGen.genRand.Next(4) == 0)
			{
				flag = true;
			}
			if (Main.tile[x, num2] != null && Main.tile[x, num2].frameX >= 180 && Main.tile[x, num2].liquid > 127 && WorldGen.genRand.Next(4) == 0)
			{
				flag = true;
			}
			if (Main.tile[x, num2] != null && Main.tile[x, num - 1] != null && Main.tile[x, num2].frameX > 18)
			{
				if (Main.tile[x, num - 1].frameX < 36 || Main.tile[x, num - 1].frameX > 72)
				{
					flag = true;
				}
				else if (Main.tile[x, num2].frameX < 90)
				{
					flag = true;
				}
				else if (Main.tile[x, num2].frameX >= 108 && Main.tile[x, num2].frameX <= 162)
				{
					Main.tile[x, num2].frameX = 90;
				}
			}
			if (num > num2 + 4 && Main.tile[x, num2 + 4] != null && Main.tile[x, num2 + 3] != null && Main.tile[x, num2 + 4].liquid == 0 && Main.tile[x, num2 + 3].type == 519)
			{
				flag = true;
			}
			if (flag)
			{
				int num6 = num3;
				if (num2 < num3)
				{
					num6 = num2;
				}
				num6 -= 4;
				for (int k = num6; k <= num; k++)
				{
					if (Main.tile[x, k] != null && Main.tile[x, k].active() && Main.tile[x, k].type == 519)
					{
						WorldGen.KillTile(x, k, false, false, false);
						if (Main.netMode == 2)
						{
							NetMessage.SendData(17, -1, -1, null, 0, (float)x, (float)k, 0f, 0, 0, 0);
						}
						WorldGen.SquareTileFrame(x, k, true);
					}
				}
				return;
			}
			if (num5 != (int)Main.tile[x, num2].frameY)
			{
				for (int l = num2; l < num; l++)
				{
					if (Main.tile[x, l] != null && Main.tile[x, l].active() && Main.tile[x, l].type == 519)
					{
						Main.tile[x, l].frameY = (short)num5;
						if (Main.netMode == 2)
						{
							NetMessage.SendTileSquare(-1, x, num2, TileChangeType.None);
						}
					}
				}
			}
		}

		// Token: 0x06000F9E RID: 3998 RVA: 0x0044C880 File Offset: 0x0044AA80
		public static void GrowCheckSeaweed(int x, int y)
		{
			int maxValue = 1;
			if (Main.netMode != 1)
			{
				if ((Main.tile[x, y].type == 549 && Main.tile[x, y].liquid < 200) || Main.tile[x, y - 1].liquid < 200)
				{
					if (Main.tile[x, y].active() && Main.tile[x, y].type == 549 && WorldGen.genRand.Next(2) == 0)
					{
						WorldGen.KillTile(x, y, false, false, false);
						if (Main.netMode == 2)
						{
							NetMessage.SendData(17, -1, -1, null, 0, (float)x, (float)y, 0f, 0, 0, 0);
							return;
						}
					}
				}
				else if (!Main.tile[x, y - 1].active() && !Main.tile[x, y - 2].active() && WorldGen.genRand.Next(maxValue) == 0 && Main.tile[x, y - 2].liquid == 255 && Main.tile[x, y - 3].liquid == 255)
				{
					int num = 17;
					int num2 = 4;
					int num3 = 30;
					int num4 = 0;
					for (int i = x - num2; i <= x + num2; i++)
					{
						for (int j = y; j <= y + num2 * 3; j++)
						{
							if (Main.tile[i, j].active() && Main.tile[i, j].type == 549)
							{
								num4++;
								if (num4 > num3)
								{
									return;
								}
							}
						}
					}
					int num5 = y;
					while (!WorldGen.SolidTile(x, num5, false) && num5 < Main.maxTilesY - 50)
					{
						num5++;
					}
					if (num5 - y >= num - WorldGen.genRand.Next(20))
					{
						return;
					}
					WorldGen.PlaceTile(x, y - 1, 549, true, false, -1, 0);
					if (Main.netMode == 2)
					{
						NetMessage.SendTileSquare(-1, x, y - 1, TileChangeType.None);
					}
				}
			}
		}

		// Token: 0x06000F9F RID: 3999 RVA: 0x0044CA98 File Offset: 0x0044AC98
		public static void GrowCatTail(int x, int j)
		{
			if (Main.netMode != 1)
			{
				int num = j;
				while (Main.tile[x, num].liquid > 0 && num > 50)
				{
					num--;
				}
				num++;
				int num2 = num;
				while ((!Main.tile[x, num2].active() || !Main.tileSolid[(int)Main.tile[x, num2].type] || Main.tileSolidTop[(int)Main.tile[x, num2].type]) && num2 < Main.maxTilesY - 50)
				{
					num2++;
				}
				num = num2 - 1;
				while (Main.tile[x, num].active() && Main.tile[x, num].type == 519)
				{
					num--;
				}
				num++;
				if (Main.tile[x, num].frameX == 90 && Main.tile[x, num - 1].active() && Main.tileCut[(int)Main.tile[x, num - 1].type])
				{
					WorldGen.KillTile(x, num - 1, false, false, false);
					if (Main.netMode == 2)
					{
						NetMessage.SendData(17, -1, -1, null, 0, (float)x, (float)(num - 1), 0f, 0, 0, 0);
					}
				}
				if (!Main.tile[x, num - 1].active())
				{
					if (Main.tile[x, num].frameX == 0)
					{
						Main.tile[x, num].frameX = 18;
						WorldGen.SquareTileFrame(x, num, true);
						if (Main.netMode == 2)
						{
							NetMessage.SendTileSquare(-1, x, num, TileChangeType.None);
						}
					}
					else if (Main.tile[x, num].frameX == 18)
					{
						Main.tile[x, num].frameX = (short)(18 * WorldGen.genRand.Next(2, 5));
						Main.tile[x, num - 1].active(true);
						Main.tile[x, num - 1].type = 519;
						Main.tile[x, num - 1].frameX = 90;
						Main.tile[x, num - 1].frameY = Main.tile[x, num].frameY;
						Main.tile[x, num - 1].halfBrick(false);
						Main.tile[x, num - 1].slope(0);
						Main.tile[x, num - 1].CopyPaintAndCoating(Main.tile[x, num]);
						WorldGen.SquareTileFrame(x, num, true);
						if (Main.netMode == 2)
						{
							NetMessage.SendTileSquare(-1, x, num, TileChangeType.None);
						}
					}
					else if (Main.tile[x, num].frameX == 90)
					{
						if (Main.tile[x, num - 1].liquid == 0)
						{
							if (!Main.tile[x, num - 2].active() && (Main.tile[x, num].liquid > 0 || Main.tile[x, num + 1].liquid > 0 || Main.tile[x, num + 2].liquid > 0) && WorldGen.genRand.Next(3) == 0)
							{
								Main.tile[x, num].frameX = 108;
								Main.tile[x, num - 1].active(true);
								Main.tile[x, num - 1].type = 519;
								Main.tile[x, num - 1].frameX = 90;
								Main.tile[x, num - 1].frameY = Main.tile[x, num].frameY;
								Main.tile[x, num - 1].halfBrick(false);
								Main.tile[x, num - 1].slope(0);
								Main.tile[x, num - 1].CopyPaintAndCoating(Main.tile[x, num]);
								WorldGen.SquareTileFrame(x, num, true);
							}
							else
							{
								int num3 = WorldGen.genRand.Next(3);
								Main.tile[x, num].frameX = (short)(126 + num3 * 18);
								Main.tile[x, num - 1].active(true);
								Main.tile[x, num - 1].type = 519;
								Main.tile[x, num - 1].frameX = (short)(180 + num3 * 18);
								Main.tile[x, num - 1].frameY = Main.tile[x, num].frameY;
								Main.tile[x, num - 1].halfBrick(false);
								Main.tile[x, num - 1].slope(0);
								Main.tile[x, num - 1].CopyPaintAndCoating(Main.tile[x, num]);
								WorldGen.SquareTileFrame(x, num, true);
							}
						}
						else
						{
							Main.tile[x, num].frameX = 108;
							Main.tile[x, num - 1].active(true);
							Main.tile[x, num - 1].type = 519;
							Main.tile[x, num - 1].frameX = 90;
							Main.tile[x, num - 1].frameY = Main.tile[x, num].frameY;
							Main.tile[x, num - 1].halfBrick(false);
							Main.tile[x, num - 1].slope(0);
							Main.tile[x, num - 1].CopyPaintAndCoating(Main.tile[x, num]);
							WorldGen.SquareTileFrame(x, num, true);
						}
					}
					WorldGen.SquareTileFrame(x, num - 1, false);
					if (Main.netMode == 2)
					{
						NetMessage.SendTileSquare(-1, x, num - 1, 1, 2, TileChangeType.None);
					}
				}
			}
		}

		// Token: 0x06000FA0 RID: 4000 RVA: 0x0044D074 File Offset: 0x0044B274
		public static bool PlaceLilyPad(int x, int j)
		{
			int num = j;
			if (x < 50 || x > Main.maxTilesX - 50 || num < 50 || num > Main.maxTilesY - 50)
			{
				return false;
			}
			if (Main.tile[x, num].active() || Main.tile[x, num].liquid == 0 || Main.tile[x, num].liquidType() != 0)
			{
				return false;
			}
			while (Main.tile[x, num].liquid > 0 && num > 50)
			{
				num--;
			}
			num++;
			if (Main.tile[x, num].active() || Main.tile[x, num - 1].active() || Main.tile[x, num].liquid == 0 || Main.tile[x, num].liquidType() != 0)
			{
				return false;
			}
			if (Main.tile[x, num].wall != 0 && Main.tile[x, num].wall != 15 && Main.tile[x, num].wall != 70 && (Main.tile[x, num].wall < 63 || Main.tile[x, num].wall > 68))
			{
				return false;
			}
			int num2 = 5;
			int num3 = 0;
			for (int i = x - num2; i <= x + num2; i++)
			{
				for (int k = num - num2; k <= num + num2; k++)
				{
					if (Main.tile[i, k].active() && Main.tile[i, k].type == 518)
					{
						num3++;
					}
				}
			}
			if (num3 > 3)
			{
				return false;
			}
			int num4 = num;
			while ((!Main.tile[x, num4].active() || !Main.tileSolid[(int)Main.tile[x, num4].type] || Main.tileSolidTop[(int)Main.tile[x, num4].type]) && num4 < Main.maxTilesY - 50)
			{
				if (Main.tile[x, num4].active() && Main.tile[x, num4].type == 519)
				{
					return false;
				}
				num4++;
			}
			int num5 = 12;
			if (num4 - num > num5)
			{
				return false;
			}
			if (num4 - num < 3)
			{
				return false;
			}
			int type = (int)Main.tile[x, num4].type;
			int num6 = -1;
			if (type == 2 || type == 477)
			{
				num6 = 0;
			}
			if (type == 109 || type == 109 || type == 116)
			{
				num6 = 18;
			}
			if (type == 60)
			{
				num6 = 36;
			}
			if (num6 < 0)
			{
				return false;
			}
			Main.tile[x, num].active(true);
			Main.tile[x, num].type = 518;
			if (WorldGen.genRand.Next(2) == 0)
			{
				Main.tile[x, num].frameX = (short)(18 * WorldGen.genRand.Next(3));
			}
			else if (WorldGen.genRand.Next(15) == 0)
			{
				Main.tile[x, num].frameX = (short)(18 * WorldGen.genRand.Next(18));
			}
			else
			{
				int num7 = Main.maxTilesX / 5;
				if (x < num7)
				{
					Main.tile[x, num].frameX = (short)(18 * WorldGen.genRand.Next(6, 9));
				}
				else if (x < num7 * 2)
				{
					Main.tile[x, num].frameX = (short)(18 * WorldGen.genRand.Next(9, 12));
				}
				else if (x < num7 * 3)
				{
					Main.tile[x, num].frameX = (short)(18 * WorldGen.genRand.Next(3, 6));
				}
				else if (x < num7 * 4)
				{
					Main.tile[x, num].frameX = (short)(18 * WorldGen.genRand.Next(15, 18));
				}
				else
				{
					Main.tile[x, num].frameX = (short)(18 * WorldGen.genRand.Next(12, 15));
				}
			}
			Main.tile[x, num].frameY = (short)num6;
			Main.tile[x, num].halfBrick(false);
			Main.tile[x, num].slope(0);
			WorldGen.SquareTileFrame(x, num, true);
			return true;
		}

		// Token: 0x06000FA1 RID: 4001 RVA: 0x0044D4B4 File Offset: 0x0044B6B4
		public static void CheckLilyPad(int x, int y)
		{
			if (Main.netMode != 1)
			{
				if (Main.tile[x, y].liquidType() != 0)
				{
					WorldGen.KillTile(x, y, false, false, false);
					if (Main.netMode == 2)
					{
						NetMessage.SendData(17, -1, -1, null, 0, (float)x, (float)y, 0f, 0, 0, 0);
					}
					return;
				}
				int num = y;
				while ((!Main.tile[x, num].active() || !Main.tileSolid[(int)Main.tile[x, num].type] || Main.tileSolidTop[(int)Main.tile[x, num].type]) && num < Main.maxTilesY - 50)
				{
					num++;
					if (Main.tile[x, num] == null)
					{
						return;
					}
				}
				int type = (int)Main.tile[x, num].type;
				int num2 = -1;
				if (type == 2 || type == 477)
				{
					num2 = 0;
				}
				if (type == 109 || type == 109 || type == 116)
				{
					num2 = 18;
				}
				if (type == 60)
				{
					num2 = 36;
				}
				if (num2 < 0)
				{
					WorldGen.KillTile(x, y, false, false, false);
					if (Main.netMode == 2)
					{
						NetMessage.SendData(17, -1, -1, null, 0, (float)x, (float)y, 0f, 0, 0, 0);
					}
					return;
				}
				if (num2 != (int)Main.tile[x, y].frameY)
				{
					Main.tile[x, y].frameY = (short)num2;
					if (Main.netMode == 2)
					{
						NetMessage.SendTileSquare(-1, x, y, TileChangeType.None);
					}
				}
				if (Main.tile[x, y - 1].liquid > 0 && !Main.tile[x, y - 1].active())
				{
					Main.tile[x, y - 1].active(true);
					Main.tile[x, y - 1].type = 518;
					Main.tile[x, y - 1].frameX = Main.tile[x, y].frameX;
					Main.tile[x, y - 1].frameY = Main.tile[x, y].frameY;
					Main.tile[x, y - 1].halfBrick(false);
					Main.tile[x, y - 1].slope(0);
					Main.tile[x, y].active(false);
					Main.tile[x, y].type = 0;
					WorldGen.SquareTileFrame(x, y - 1, false);
					if (Main.netMode == 2)
					{
						NetMessage.SendTileSquare(-1, x, y - 1, 1, 2, TileChangeType.None);
						return;
					}
				}
				else if (Main.tile[x, y].liquid == 0)
				{
					Tile tileSafely = Framing.GetTileSafely(x, y + 1);
					if (!tileSafely.active())
					{
						Main.tile[x, y + 1].active(true);
						Main.tile[x, y + 1].type = 518;
						Main.tile[x, y + 1].frameX = Main.tile[x, y].frameX;
						Main.tile[x, y + 1].frameY = Main.tile[x, y].frameY;
						Main.tile[x, y + 1].halfBrick(false);
						Main.tile[x, y + 1].slope(0);
						Main.tile[x, y].active(false);
						Main.tile[x, y].type = 0;
						WorldGen.SquareTileFrame(x, y + 1, false);
						if (Main.netMode == 2)
						{
							NetMessage.SendTileSquare(-1, x, y, 1, 2, TileChangeType.None);
							return;
						}
					}
					else if (tileSafely.active() && !TileID.Sets.Platforms[(int)tileSafely.type] && (!Main.tileSolid[(int)tileSafely.type] || Main.tileSolidTop[(int)tileSafely.type]))
					{
						WorldGen.KillTile(x, y, false, false, false);
						if (Main.netMode == 2)
						{
							NetMessage.SendData(17, -1, -1, null, 0, (float)x, (float)y, 0f, 0, 0, 0);
						}
						return;
					}
				}
			}
		}

		// Token: 0x06000FA2 RID: 4002 RVA: 0x0044D890 File Offset: 0x0044BA90
		public static bool TryKillingReplaceableTile(int x, int y, int tileType)
		{
			if (!WorldGen.InWorld(x, y, 2))
			{
				return false;
			}
			if (!Main.tile[x, y].active() || (!Main.tileCut[(int)Main.tile[x, y].type] && !TileID.Sets.BreakableWhenPlacing[(int)Main.tile[x, y].type] && (Main.tile[x, y].type < 373 || Main.tile[x, y].type > 375) && Main.tile[x, y].type != 461))
			{
				return false;
			}
			if ((int)Main.tile[x, y].type == tileType)
			{
				return false;
			}
			bool flag = Main.tile[x, y + 1].type != 78 && Main.tile[x, y + 1].type != 380 && Main.tile[x, y + 1].type != 579;
			bool flag2 = Main.tile[x, y].type == 3 || Main.tile[x, y].type == 73;
			bool flag3 = Main.tileAlch[(int)Main.tile[x, y].type] && WorldGen.IsHarvestableHerbWithSeed((int)Main.tile[x, y].type, (int)(Main.tile[x, y].frameX / 18));
			bool flag4 = Main.tileAlch[tileType];
			if (flag || ((flag2 || flag3) && flag4))
			{
				WorldGen.KillTile(x, y, false, false, false);
				if (!Main.tile[x, y].active() && Main.netMode != 0)
				{
					NetMessage.SendData(17, -1, -1, null, 0, (float)x, (float)y, 0f, 0, 0, 0);
				}
				return true;
			}
			return false;
		}

		// Token: 0x06000FA3 RID: 4003 RVA: 0x0044DA6C File Offset: 0x0044BC6C
		public static bool PlaceTile(int i, int j, int Type, bool mute = false, bool forced = false, int plr = -1, int style = 0)
		{
			int num = Type;
			if (WorldGen.gen && Main.tile[i, j].active() && Main.tile[i, j].type == 488)
			{
				return false;
			}
			if (num >= (int)TileID.Count)
			{
				return false;
			}
			bool result = false;
			if (i >= 0 && j >= 0 && i < Main.maxTilesX && j < Main.maxTilesY)
			{
				Tile tile = Main.tile[i, j];
				if (tile == null)
				{
					tile = new Tile();
					Main.tile[i, j] = tile;
				}
				if (tile.active())
				{
					if (num == 23 && tile.type == 59)
					{
						num = 661;
					}
					if (num == 199 && tile.type == 59)
					{
						num = 662;
					}
				}
				if (forced || Collision.EmptyTile(i, j, false) || !Main.tileSolid[num] || (num == 23 && tile.type == 0 && tile.active()) || (num == 199 && tile.type == 0 && tile.active()) || (num == 2 && tile.type == 0 && tile.active()) || (num == 109 && tile.type == 0 && tile.active()) || (num == 60 && tile.type == 59 && tile.active()) || (num == 661 && tile.type == 59 && tile.active()) || (num == 662 && tile.type == 59 && tile.active()) || (num == 70 && tile.type == 59 && tile.active()) || (num == 633 && tile.type == 57 && tile.active()) || (Main.tileMoss[num] && (tile.type == 1 || tile.type == 38) && tile.active()))
				{
					if (num == 23 && (tile.type != 0 || !tile.active()))
					{
						return false;
					}
					if (num == 199 && (tile.type != 0 || !tile.active()))
					{
						return false;
					}
					if (num == 2 && (tile.type != 0 || !tile.active()))
					{
						return false;
					}
					if (num == 109 && (tile.type != 0 || !tile.active()))
					{
						return false;
					}
					if (num == 60 && (tile.type != 59 || !tile.active()))
					{
						return false;
					}
					if (num == 661 && (tile.type != 59 || !tile.active()))
					{
						return false;
					}
					if (num == 662 && (tile.type != 59 || !tile.active()))
					{
						return false;
					}
					if (num == 70 && (tile.type != 59 || !tile.active()))
					{
						return false;
					}
					if (num == 633 && (tile.type != 57 || !tile.active()))
					{
						return false;
					}
					if (Main.tileMoss[num])
					{
						if ((tile.type != 1 && tile.type != 38) || !tile.active())
						{
							return false;
						}
						if (tile.type == 38)
						{
							if (num == 381)
							{
								num = 517;
							}
							else if (num == 534)
							{
								num = 535;
							}
							else if (num == 536)
							{
								num = 537;
							}
							else if (num == 539)
							{
								num = 540;
							}
							else if (num == 625)
							{
								num = 626;
							}
							else if (num == 627)
							{
								num = 628;
							}
							else
							{
								num = 512 + num - 179;
							}
						}
					}
					if (num == 81)
					{
						if (Main.tile[i, j - 1] == null)
						{
							Main.tile[i, j - 1] = new Tile();
						}
						if (Main.tile[i, j + 1] == null)
						{
							Main.tile[i, j + 1] = new Tile();
						}
						if (Main.tile[i, j - 1].active())
						{
							return false;
						}
						if (!Main.tile[i, j + 1].active() || !Main.tileSolid[(int)Main.tile[i, j + 1].type] || Main.tile[i, j + 1].halfBrick() || Main.tile[i, j + 1].slope() != 0)
						{
							return false;
						}
					}
					if ((num == 373 || num == 375 || num == 374 || num == 461) && (Main.tile[i, j - 1] == null || Main.tile[i, j - 1].bottomSlope()))
					{
						return false;
					}
					if (tile.liquid > 0 || tile.checkingLiquid())
					{
						if (num == 4)
						{
							if (style != 8 && style != 11 && style != 17)
							{
								return false;
							}
						}
						else if (num == 3 || num == 20 || num == 24 || num == 27 || num == 32 || num == 51 || num == 69 || num == 72 || num == 201 || num == 352 || num == 529 || num == 624 || num == 637 || num == 656)
						{
							return false;
						}
					}
					if (TileID.Sets.ResetsHalfBrickPlacementAttempt[num] && (!tile.active() || !Main.tileFrameImportant[(int)tile.type]))
					{
						tile.halfBrick(false);
						tile.frameY = 0;
						tile.frameX = 0;
					}
					if (num == 624)
					{
						if ((!tile.active() || Main.tileCut[(int)tile.type] || TileID.Sets.BreakableWhenPlacing[(int)tile.type]) && WorldGen.HasValidGroundForAbigailsFlowerBelowSpot(i, j))
						{
							tile.active(true);
							tile.type = 624;
							tile.halfBrick(false);
							tile.slope(0);
							tile.frameX = 0;
							tile.frameY = 0;
						}
					}
					else if (num == 656)
					{
						if ((!tile.active() || Main.tileCut[(int)tile.type] || TileID.Sets.BreakableWhenPlacing[(int)tile.type]) && WorldGen.HasValidGroundForGlowTulipBelowSpot(i, j))
						{
							tile.active(true);
							tile.type = 656;
							tile.halfBrick(false);
							tile.slope(0);
							tile.frameX = 0;
							tile.frameY = 0;
						}
					}
					else if (num == 3 || num == 24 || num == 110 || num == 201 || num == 637)
					{
						if (WorldGen.IsFitToPlaceFlowerIn(i, j, num))
						{
							if (num == 24 && WorldGen.genRand.Next(13) == 0)
							{
								tile.active(true);
								tile.type = 32;
								WorldGen.SquareTileFrame(i, j, true);
							}
							else if (num == 201 && WorldGen.genRand.Next(13) == 0)
							{
								tile.active(true);
								tile.type = 352;
								WorldGen.SquareTileFrame(i, j, true);
							}
							else if (Main.tile[i, j + 1].type == 78 || Main.tile[i, j + 1].type == 380 || Main.tile[i, j + 1].type == 579)
							{
								tile.active(true);
								tile.type = (ushort)num;
								int num2 = WorldGen.genRand.NextFromList(new int[]
								{
									6,
									7,
									9,
									10,
									11,
									12,
									13,
									14,
									15,
									16,
									17,
									18,
									19,
									20,
									21,
									24,
									27,
									30,
									33,
									36,
									39,
									42
								});
								if (num2 <= 30)
								{
									if (num2 <= 24)
									{
										if (num2 != 21 && num2 != 24)
										{
											goto IL_763;
										}
									}
									else if (num2 != 27 && num2 != 30)
									{
										goto IL_763;
									}
								}
								else if (num2 <= 36)
								{
									if (num2 != 33 && num2 != 36)
									{
										goto IL_763;
									}
								}
								else if (num2 != 39 && num2 != 42)
								{
									goto IL_763;
								}
								num2 += WorldGen.genRand.Next(3);
								IL_763:
								tile.frameX = (short)(num2 * 18);
							}
							else if (tile.wall >= 0 && tile.wall < WallID.Count && WallID.Sets.AllowsPlantsToGrow[(int)tile.wall] && Main.tile[i, j + 1].wall >= 0 && Main.tile[i, j + 1].wall < WallID.Count && WallID.Sets.AllowsPlantsToGrow[(int)Main.tile[i, j + 1].wall])
							{
								if (WorldGen.genRand.Next(50) == 0 || ((num == 24 || num == 201) && WorldGen.genRand.Next(40) == 0))
								{
									tile.active(true);
									tile.type = (ushort)num;
									if (num == 201)
									{
										tile.frameX = 270;
									}
									else
									{
										tile.frameX = 144;
									}
								}
								else if (WorldGen.genRand.Next(35) == 0 || (Main.tile[i, j].wall >= 63 && Main.tile[i, j].wall <= 70))
								{
									tile.active(true);
									tile.type = (ushort)num;
									int num3 = WorldGen.genRand.NextFromList(new int[]
									{
										6,
										7,
										9,
										10,
										11,
										12,
										13,
										14,
										15,
										16,
										17,
										18,
										19,
										20
									});
									if (num == 201)
									{
										num3 = WorldGen.genRand.NextFromList(new int[]
										{
											6,
											7,
											8,
											9,
											10,
											11,
											12,
											13,
											14,
											16,
											17,
											18,
											19,
											20,
											21,
											22
										});
									}
									if (num == 637)
									{
										num3 = WorldGen.genRand.NextFromList(new int[]
										{
											6,
											7,
											8,
											9,
											10
										});
									}
									tile.frameX = (short)(num3 * 18);
								}
								else
								{
									tile.active(true);
									tile.type = (ushort)num;
									tile.frameX = (short)(WorldGen.genRand.Next(6) * 18);
								}
							}
						}
					}
					else if (num == 61)
					{
						if (j + 1 < Main.maxTilesY && Main.tile[i, j + 1].active() && Main.tile[i, j + 1].slope() == 0 && !Main.tile[i, j + 1].halfBrick() && Main.tile[i, j + 1].type == 60)
						{
							bool flag = (double)j > Main.rockLayer || Main.remixWorld || WorldGen.remixWorldGen;
							if (WorldGen.genRand.Next(16) == 0 && (double)j > Main.worldSurface)
							{
								tile.active(true);
								tile.type = 69;
								WorldGen.SquareTileFrame(i, j, true);
							}
							else if (WorldGen.genRand.Next(60) == 0 && flag)
							{
								tile.active(true);
								tile.type = (ushort)num;
								tile.frameX = 144;
							}
							else if (WorldGen.genRand.Next(230) == 0 && flag)
							{
								tile.active(true);
								tile.type = (ushort)num;
								tile.frameX = 162;
							}
							else if (WorldGen.genRand.Next(15) == 0)
							{
								tile.active(true);
								tile.type = (ushort)num;
								if (WorldGen.genRand.Next(3) != 0)
								{
									tile.frameX = (short)(WorldGen.genRand.Next(2) * 18 + 108);
								}
								else
								{
									tile.frameX = (short)(WorldGen.genRand.Next(13) * 18 + 180);
								}
							}
							else
							{
								tile.active(true);
								tile.type = (ushort)num;
								tile.frameX = (short)(WorldGen.genRand.Next(6) * 18);
							}
						}
					}
					else if (num == 518)
					{
						WorldGen.PlaceLilyPad(i, j);
					}
					else if (num == 519)
					{
						WorldGen.PlaceCatTail(i, j);
					}
					else if (num == 529)
					{
						WorldGen.PlantSeaOat(i, j);
					}
					else if (num == 571)
					{
						WorldGen.PlaceBamboo(i, j);
					}
					else if (num == 549)
					{
						WorldGen.PlaceUnderwaterPlant(549, i, j);
					}
					else if (num == 71)
					{
						if (j + 1 < Main.maxTilesY && Main.tile[i, j + 1].active() && Main.tile[i, j + 1].slope() == 0 && !Main.tile[i, j + 1].halfBrick() && Main.tile[i, j + 1].type == 70)
						{
							Point point = new Point(-1, -1);
							if ((double)j > Main.worldSurface)
							{
								point = WorldGen.PlaceCatTail(i, j);
							}
							if (WorldGen.InWorld(point.X, point.Y, 0))
							{
								if (WorldGen.gen)
								{
									int num4 = WorldGen.genRand.Next(14);
									for (int k = 0; k < num4; k++)
									{
										WorldGen.GrowCatTail(point.X, point.Y);
									}
									WorldGen.SquareTileFrame(point.X, point.Y, true);
								}
							}
							else
							{
								tile.active(true);
								tile.type = (ushort)num;
								tile.frameX = (short)(WorldGen.genRand.Next(5) * 18);
							}
						}
					}
					else if (num == 129)
					{
						if (WorldGen.SolidTile(i - 1, j, false) || WorldGen.SolidTile(i + 1, j, false) || WorldGen.SolidTile(i, j - 1, false) || WorldGen.SolidTile(i, j + 1, false))
						{
							tile.active(true);
							tile.type = (ushort)num;
							tile.frameX = (short)(style * 18);
							WorldGen.SquareTileFrame(i, j, true);
						}
					}
					else if (num == 178)
					{
						if (WorldGen.SolidTile(i - 1, j, true) || WorldGen.SolidTile(i + 1, j, true) || WorldGen.SolidTile(i, j - 1, false) || WorldGen.SolidTile(i, j + 1, false))
						{
							tile.active(true);
							tile.type = (ushort)num;
							tile.frameX = (short)(style * 18);
							tile.frameY = (short)(WorldGen.genRand.Next(3) * 18);
							WorldGen.SquareTileFrame(i, j, true);
						}
					}
					else if (num == 184)
					{
						if ((Main.tileMoss[(int)Main.tile[i - 1, j].type] && WorldGen.SolidTile(i - 1, j, false)) || (Main.tileMoss[(int)Main.tile[i + 1, j].type] && WorldGen.SolidTile(i + 1, j, false)) || (Main.tileMoss[(int)Main.tile[i, j - 1].type] && WorldGen.SolidTile(i, j - 1, false)) || (Main.tileMoss[(int)Main.tile[i, j + 1].type] && WorldGen.SolidTile(i, j + 1, false)))
						{
							tile.active(true);
							tile.type = (ushort)num;
							tile.frameX = (short)(style * 18);
							tile.frameY = (short)(WorldGen.genRand.Next(3) * 18);
							WorldGen.SquareTileFrame(i, j, true);
						}
						if ((TileID.Sets.tileMossBrick[(int)Main.tile[i - 1, j].type] && WorldGen.SolidTile(i - 1, j, false)) || (TileID.Sets.tileMossBrick[(int)Main.tile[i + 1, j].type] && WorldGen.SolidTile(i + 1, j, false)) || (TileID.Sets.tileMossBrick[(int)Main.tile[i, j - 1].type] && WorldGen.SolidTile(i, j - 1, false)) || (TileID.Sets.tileMossBrick[(int)Main.tile[i, j + 1].type] && WorldGen.SolidTile(i, j + 1, false)))
						{
							tile.active(true);
							tile.type = (ushort)num;
							tile.frameX = (short)(style * 18);
							tile.frameY = (short)(WorldGen.genRand.Next(3) * 18);
							WorldGen.SquareTileFrame(i, j, true);
						}
					}
					else if (num == 485)
					{
						WorldGen.PlaceObject(i, j, num, mute, style, 0, -1, -1);
					}
					else if (num == 171)
					{
						WorldGen.PlaceXmasTree(i, j, 171);
					}
					else if (num == 254)
					{
						WorldGen.Place2x2Style(i, j, (ushort)num, style);
					}
					else if (num == 335 || num == 564 || num == 594)
					{
						WorldGen.Place2x2(i, j, (ushort)num, 0);
					}
					else if (num == 654 || num == 319 || num == 132 || num == 484 || num == 138 || num == 664 || num == 142 || num == 143 || num == 282 || (num >= 288 && num <= 295) || (num >= 316 && num <= 318))
					{
						WorldGen.Place2x2(i, j, (ushort)num, 0);
					}
					else if (num == 411)
					{
						WorldGen.Place2x2(i, j, (ushort)num, 0);
					}
					else if (num == 457)
					{
						WorldGen.Place2x2Horizontal(i, j, 457, style);
					}
					else if (num == 137)
					{
						tile.active(true);
						tile.type = (ushort)num;
						tile.frameY = (short)(18 * style);
					}
					else if (num == 136)
					{
						if (Main.tile[i - 1, j] == null)
						{
							Main.tile[i - 1, j] = new Tile();
						}
						if (Main.tile[i + 1, j] == null)
						{
							Main.tile[i + 1, j] = new Tile();
						}
						if (Main.tile[i, j + 1] == null)
						{
							Main.tile[i, j + 1] = new Tile();
						}
						if ((Main.tile[i - 1, j].nactive() && !Main.tile[i - 1, j].halfBrick() && !TileID.Sets.NotReallySolid[(int)Main.tile[i - 1, j].type] && Main.tile[i - 1, j].slope() == 0 && (WorldGen.SolidTile(i - 1, j, false) || TileID.Sets.IsBeam[(int)Main.tile[i - 1, j].type] || (Main.tile[i - 1, j].type == 5 && Main.tile[i - 1, j - 1].type == 5 && Main.tile[i - 1, j + 1].type == 5))) || (Main.tile[i + 1, j].nactive() && !Main.tile[i + 1, j].halfBrick() && !TileID.Sets.NotReallySolid[(int)Main.tile[i + 1, j].type] && Main.tile[i + 1, j].slope() == 0 && (WorldGen.SolidTile(i + 1, j, false) || TileID.Sets.IsBeam[(int)Main.tile[i + 1, j].type] || (Main.tile[i + 1, j].type == 5 && Main.tile[i + 1, j - 1].type == 5 && Main.tile[i + 1, j + 1].type == 5))) || (Main.tile[i, j + 1].nactive() && !Main.tile[i, j + 1].halfBrick() && WorldGen.SolidTile(i, j + 1, false) && Main.tile[i, j + 1].slope() == 0) || tile.wall > 0)
						{
							tile.active(true);
							tile.type = (ushort)num;
							WorldGen.SquareTileFrame(i, j, true);
						}
					}
					else if (num == 442)
					{
						if (Main.tile[i - 1, j] == null)
						{
							Main.tile[i - 1, j] = new Tile();
						}
						if (Main.tile[i + 1, j] == null)
						{
							Main.tile[i + 1, j] = new Tile();
						}
						if (Main.tile[i, j + 1] == null)
						{
							Main.tile[i, j + 1] = new Tile();
						}
						if ((Main.tile[i - 1, j].nactive() && !Main.tile[i - 1, j].halfBrick() && !TileID.Sets.NotReallySolid[(int)Main.tile[i - 1, j].type] && Main.tile[i - 1, j].slope() == 0 && (WorldGen.SolidTile(i - 1, j, false) || TileID.Sets.IsBeam[(int)Main.tile[i - 1, j].type] || (Main.tile[i - 1, j].type == 5 && Main.tile[i - 1, j - 1].type == 5 && Main.tile[i - 1, j + 1].type == 5))) || (Main.tile[i + 1, j].nactive() && !Main.tile[i + 1, j].halfBrick() && !TileID.Sets.NotReallySolid[(int)Main.tile[i + 1, j].type] && Main.tile[i + 1, j].slope() == 0 && (WorldGen.SolidTile(i + 1, j, false) || TileID.Sets.IsBeam[(int)Main.tile[i + 1, j].type] || (Main.tile[i + 1, j].type == 5 && Main.tile[i + 1, j - 1].type == 5 && Main.tile[i + 1, j + 1].type == 5))) || (Main.tile[i, j + 1].nactive() && !Main.tile[i, j + 1].halfBrick() && WorldGen.SolidTile(i, j + 1, false) && Main.tile[i, j + 1].slope() == 0))
						{
							tile.active(true);
							tile.type = (ushort)num;
							WorldGen.SquareTileFrame(i, j, true);
						}
					}
					else if (num == 4)
					{
						if (Main.tile[i - 1, j] == null)
						{
							Main.tile[i - 1, j] = new Tile();
						}
						if (Main.tile[i + 1, j] == null)
						{
							Main.tile[i + 1, j] = new Tile();
						}
						if (Main.tile[i, j + 1] == null)
						{
							Main.tile[i, j + 1] = new Tile();
						}
						Tile tile2 = Main.tile[i - 1, j];
						Tile tile3 = Main.tile[i + 1, j];
						Tile tile4 = Main.tile[i, j + 1];
						if (tile.wall > 0 || (tile2.active() && (tile2.slope() == 0 || tile2.slope() % 2 != 1) && ((Main.tileSolid[(int)tile2.type] && !Main.tileSolidTop[(int)tile2.type] && !TileID.Sets.NotReallySolid[(int)tile2.type]) || TileID.Sets.IsBeam[(int)tile2.type] || (WorldGen.IsTreeType((int)tile2.type) && WorldGen.IsTreeType((int)Main.tile[i - 1, j - 1].type) && WorldGen.IsTreeType((int)Main.tile[i - 1, j + 1].type)))) || (tile3.active() && (tile3.slope() == 0 || tile3.slope() % 2 != 0) && ((Main.tileSolid[(int)tile3.type] && !Main.tileSolidTop[(int)tile3.type] && !TileID.Sets.NotReallySolid[(int)tile3.type]) || TileID.Sets.IsBeam[(int)tile3.type] || (WorldGen.IsTreeType((int)tile3.type) && WorldGen.IsTreeType((int)Main.tile[i + 1, j - 1].type) && WorldGen.IsTreeType((int)Main.tile[i + 1, j + 1].type)))) || (tile4.active() && Main.tileSolid[(int)tile4.type] && ((TileID.Sets.Platforms[(int)tile4.type] && WorldGen.TopEdgeCanBeAttachedTo(i, j + 1)) || ((!Main.tileSolidTop[(int)tile4.type] || (tile4.type == 380 && tile4.slope() == 0)) && !TileID.Sets.NotReallySolid[(int)tile4.type] && !tile4.halfBrick() && tile4.slope() == 0))))
						{
							tile.active(true);
							tile.type = (ushort)num;
							tile.frameY = (short)(22 * style);
							WorldGen.SquareTileFrame(i, j, true);
						}
					}
					else if (num == 10)
					{
						if (Main.tile[i, j - 1] == null)
						{
							Main.tile[i, j - 1] = new Tile();
						}
						if (Main.tile[i, j - 2] == null)
						{
							Main.tile[i, j - 2] = new Tile();
						}
						if (Main.tile[i, j - 3] == null)
						{
							Main.tile[i, j - 3] = new Tile();
						}
						if (Main.tile[i, j + 1] == null)
						{
							Main.tile[i, j + 1] = new Tile();
						}
						if (Main.tile[i, j + 2] == null)
						{
							Main.tile[i, j + 2] = new Tile();
						}
						if (Main.tile[i, j + 3] == null)
						{
							Main.tile[i, j + 3] = new Tile();
						}
						if (!Main.tile[i, j - 1].active() && !Main.tile[i, j - 2].active() && Main.tile[i, j - 3].active() && Main.tileSolid[(int)Main.tile[i, j - 3].type])
						{
							WorldGen.PlaceDoor(i, j - 1, num, style);
							WorldGen.SquareTileFrame(i, j, true);
						}
						else
						{
							if (Main.tile[i, j + 1].active() || Main.tile[i, j + 2].active() || !Main.tile[i, j + 3].active() || !Main.tileSolid[(int)Main.tile[i, j + 3].type])
							{
								return false;
							}
							WorldGen.PlaceDoor(i, j + 1, num, style);
							WorldGen.SquareTileFrame(i, j, true);
						}
					}
					else if ((num >= 275 && num <= 281) || num == 296 || num == 297 || num == 309 || num == 358 || num == 359 || num == 413 || num == 414 || num == 542)
					{
						WorldGen.Place6x3(i, j, (ushort)num, -1, 0);
					}
					else if (num == 237 || num == 244 || num == 285 || num == 286 || num == 298 || num == 299 || num == 310 || num == 339 || num == 538 || (num >= 361 && num <= 364) || num == 532 || num == 533 || num == 486 || num == 488 || num == 544 || num == 582 || num == 619 || num == 629)
					{
						WorldGen.Place3x2(i, j, (ushort)num, 0);
					}
					else if (num == 128)
					{
						WorldGen.PlaceMan(i, j, style);
						WorldGen.SquareTileFrame(i, j, true);
					}
					else if (num == 269)
					{
						WorldGen.PlaceWoman(i, j, style);
						WorldGen.SquareTileFrame(i, j, true);
					}
					else if (num == 334)
					{
						int style2 = 0;
						if (style == -1)
						{
							style2 = 1;
						}
						WorldGen.Place3x3Wall(i, j, 334, style2);
						WorldGen.SquareTileFrame(i, j, true);
					}
					else if (num == 149)
					{
						if (WorldGen.SolidTile(i - 1, j, false) || WorldGen.SolidTile(i + 1, j, false) || WorldGen.SolidTile(i, j - 1, false) || WorldGen.SolidTile(i, j + 1, false))
						{
							tile.frameX = (short)(18 * style);
							tile.active(true);
							tile.type = (ushort)num;
							WorldGen.SquareTileFrame(i, j, true);
						}
					}
					else if (num == 139 || num == 35)
					{
						WorldGen.PlaceMB(i, j, (ushort)num, style);
						WorldGen.SquareTileFrame(i, j, true);
					}
					else if (num == 165)
					{
						WorldGen.PlaceTight(i, j, false);
						WorldGen.SquareTileFrame(i, j, true);
					}
					else if (num == 235)
					{
						WorldGen.Place3x1(i, j, (ushort)num, 0);
						WorldGen.SquareTileFrame(i, j, true);
					}
					else if (num == 240)
					{
						WorldGen.Place3x3Wall(i, j, (ushort)num, style);
					}
					else if (num == 440)
					{
						WorldGen.Place3x3Wall(i, j, (ushort)num, style);
					}
					else if (num == 245)
					{
						WorldGen.Place2x3Wall(i, j, (ushort)num, style);
					}
					else if (num == 246)
					{
						WorldGen.Place3x2Wall(i, j, (ushort)num, style);
					}
					else if (num == 241)
					{
						WorldGen.Place4x3Wall(i, j, (ushort)num, style);
					}
					else if (num == 242)
					{
						WorldGen.Place6x4Wall(i, j, (ushort)num, style);
					}
					else if (num == 34)
					{
						WorldGen.PlaceChand(i, j, (ushort)num, style);
						WorldGen.SquareTileFrame(i, j, true);
					}
					else if (num == 106 || num == 212 || num == 219 || num == 220 || num == 228 || num == 231 || num == 243 || num == 247 || num == 283 || (num >= 300 && num <= 308) || num == 354 || num == 355 || num == 491 || num == 642)
					{
						WorldGen.Place3x3(i, j, (ushort)num, style);
						WorldGen.SquareTileFrame(i, j, true);
					}
					else if (num == 13 || num == 33 || num == 49 || num == 50 || num == 78 || num == 174 || num == 372 || num == 646)
					{
						WorldGen.PlaceOnTable1x1(i, j, num, style);
						WorldGen.SquareTileFrame(i, j, true);
					}
					else if (num == 14 || num == 469 || num == 26 || num == 86 || num == 87 || num == 88 || num == 89 || num == 114 || num == 186 || num == 187 || num == 215 || num == 217 || num == 218 || num == 377)
					{
						WorldGen.Place3x2(i, j, (ushort)num, style);
						WorldGen.SquareTileFrame(i, j, true);
					}
					else if (num == 236)
					{
						WorldGen.PlaceJunglePlant(i, j, (ushort)num, WorldGen.genRand.Next(3), 0);
						WorldGen.SquareTileFrame(i, j, true);
					}
					else if (num == 238)
					{
						WorldGen.PlaceJunglePlant(i, j, (ushort)num, 0, 0);
						WorldGen.SquareTileFrame(i, j, true);
					}
					else if (num == 20)
					{
						if (Main.tile[i, j + 1] == null)
						{
							Main.tile[i, j + 1] = new Tile();
						}
						int type = (int)Main.tile[i, j + 1].type;
						if (Main.tile[i, j + 1].active() && (type == 2 || type == 109 || type == 147 || type == 60 || type == 23 || type == 199 || type == 661 || type == 662 || type == 53 || type == 234 || type == 116 || type == 112))
						{
							WorldGen.Place1x2(i, j, (ushort)num, style);
							WorldGen.SquareTileFrame(i, j, true);
						}
					}
					else if (num == 15 || num == 216 || num == 338 || num == 390)
					{
						if (Main.tile[i, j - 1] == null)
						{
							Main.tile[i, j - 1] = new Tile();
						}
						if (Main.tile[i, j] == null)
						{
							Main.tile[i, j] = new Tile();
						}
						WorldGen.Place1x2(i, j, (ushort)num, style);
						WorldGen.SquareTileFrame(i, j, true);
					}
					else if (num == 227)
					{
						WorldGen.PlaceDye(i, j, style);
						WorldGen.SquareTileFrame(i, j, true);
					}
					else if (num == 567)
					{
						WorldGen.PlaceGnome(i, j, style);
						WorldGen.SquareTileFrame(i, j, true);
					}
					else if (num == 16 || num == 18 || num == 29 || num == 103 || num == 134 || num == 462)
					{
						WorldGen.Place2x1(i, j, (ushort)num, style);
						WorldGen.SquareTileFrame(i, j, true);
					}
					else if (num == 92 || num == 93 || num == 453)
					{
						WorldGen.Place1xX(i, j, (ushort)num, style);
						WorldGen.SquareTileFrame(i, j, true);
					}
					else if (num == 104 || num == 105 || num == 320 || num == 337 || num == 349 || num == 356 || num == 663 || num == 378 || num == 456 || num == 506 || num == 545)
					{
						WorldGen.Place2xX(i, j, (ushort)num, style);
						WorldGen.SquareTileFrame(i, j, true);
					}
					else if (num == 17 || num == 77 || num == 133)
					{
						WorldGen.Place3x2(i, j, (ushort)num, style);
						WorldGen.SquareTileFrame(i, j, true);
					}
					else if (num == 207)
					{
						WorldGen.Place2xX(i, j, (ushort)num, style);
						WorldGen.SquareTileFrame(i, j, true);
					}
					else if (num == 410 || num == 480 || num == 509 || num == 657 || num == 658)
					{
						WorldGen.Place2xX(i, j, (ushort)num, style);
						WorldGen.SquareTileFrame(i, j, true);
					}
					else if (num == 465 || num == 531 || num == 591 || num == 592)
					{
						WorldGen.Place2xX(i, j, (ushort)num, style);
						WorldGen.SquareTileFrame(i, j, true);
					}
					else if (TileID.Sets.BasicChest[num])
					{
						WorldGen.PlaceChest(i, j, (ushort)num, false, style);
						WorldGen.SquareTileFrame(i, j, true);
					}
					else if (num == 91)
					{
						WorldGen.PlaceBanner(i, j, (ushort)num, style);
						WorldGen.SquareTileFrame(i, j, true);
					}
					else if (num == 419 || num == 420 || num == 423 || num == 424 || num == 429 || num == 445)
					{
						WorldGen.PlaceLogicTiles(i, j, num, style);
						WorldGen.SquareTileFrame(i, j, true);
					}
					else if (num == 135 || num == 141 || num == 144 || num == 210 || num == 239 || num == 36 || num == 324 || num == 476 || num == 494)
					{
						WorldGen.Place1x1(i, j, num, style);
						WorldGen.SquareTileFrame(i, j, true);
					}
					else if (num == 101 || num == 102 || num == 463)
					{
						WorldGen.Place3x4(i, j, (ushort)num, style);
						WorldGen.SquareTileFrame(i, j, true);
					}
					else if (num == 464 || num == 466)
					{
						WorldGen.Place5x4(i, j, (ushort)num, style);
						WorldGen.SquareTileFrame(i, j, true);
					}
					else if (num == 27)
					{
						WorldGen.PlaceSunflower(i, j, 27);
						WorldGen.SquareTileFrame(i, j, true);
					}
					else if (num == 28)
					{
						WorldGen.PlacePot(i, j, 28, WorldGen.genRand.Next(4));
						WorldGen.SquareTileFrame(i, j, true);
					}
					else if (num == 42 || num == 270 || num == 271)
					{
						WorldGen.Place1x2Top(i, j, (ushort)num, style);
						WorldGen.SquareTileFrame(i, j, true);
					}
					else if (num == 55 || num == 425 || num == 511 || num == 510)
					{
						WorldGen.PlaceSign(i, j, (ushort)num, style);
					}
					else if (num == 85 || num == 376)
					{
						WorldGen.Place2x2Horizontal(i, j, (ushort)num, style);
					}
					else if (Main.tileAlch[num])
					{
						WorldGen.PlaceAlch(i, j, style);
					}
					else if (num == 94 || num == 95 || num == 97 || num == 98 || num == 99 || num == 100 || num == 125 || num == 126 || num == 173 || num == 287 || num == 172)
					{
						WorldGen.Place2x2(i, j, (ushort)num, style);
					}
					else if (num == 96)
					{
						WorldGen.Place2x2Style(i, j, (ushort)num, style);
					}
					else if (num == 79 || num == 90)
					{
						int direction = 1;
						if (plr > -1)
						{
							direction = Main.player[plr].direction;
						}
						WorldGen.Place4x2(i, j, (ushort)num, direction, style);
					}
					else if (num == 209)
					{
						WorldGen.PlaceCannon(i, j, (ushort)num, style);
					}
					else if (num == 81)
					{
						tile.frameX = (short)(26 * WorldGen.genRand.Next(6));
						tile.active(true);
						tile.type = (ushort)num;
					}
					else if (num == 19)
					{
						tile.frameY = (short)(18 * style);
						tile.active(true);
						tile.type = (ushort)num;
					}
					else if (num == 380)
					{
						tile.frameY = (short)(18 * style);
						tile.active(true);
						tile.type = (ushort)num;
					}
					else if (num == 314)
					{
						Minecart.PlaceTrack(tile, style);
					}
					else
					{
						tile.active(true);
						tile.type = (ushort)num;
						if (Main.tenthAnniversaryWorld && !Main.remixWorld && (num == 53 || num == 396 || num == 397))
						{
							tile.color(7);
						}
					}
					if (tile.active())
					{
						if (TileID.Sets.BlocksWaterDrawingBehindSelf[(int)tile.type])
						{
							WorldGen.SquareWallFrame(i, j, true);
						}
						WorldGen.SquareTileFrame(i, j, true);
						result = true;
						if (!mute)
						{
							if (num == 127)
							{
								SoundEngine.PlaySound(SoundID.Item30, i * 16, j * 16);
							}
							else if (num == 314)
							{
								SoundEngine.PlaySound(SoundID.Item52, i * 16, j * 16);
							}
							else if (num >= 330 && num <= 333)
							{
								SoundEngine.PlaySound(18, i * 16, j * 16, 1, 1f, 0f);
							}
							else
							{
								SoundEngine.PlaySound(0, i * 16, j * 16, 1, 1f, 0f);
							}
							if (num == 22 || num == 140)
							{
								for (int l = 0; l < 3; l++)
								{
									Dust.NewDust(new Vector2((float)(i * 16), (float)(j * 16)), 16, 16, 14, 0f, 0f, 0, default(Color), 1f);
								}
							}
						}
					}
				}
			}
			return result;
		}

		// Token: 0x06000FA4 RID: 4004 RVA: 0x004500A4 File Offset: 0x0044E2A4
		public static void KillWall(int i, int j, bool fail = false)
		{
			if (i >= 0 && j >= 0 && i < Main.maxTilesX && j < Main.maxTilesY)
			{
				Tile tile = Main.tile[i, j];
				if (tile == null)
				{
					tile = new Tile();
					Main.tile[i, j] = tile;
				}
				if (tile.wall > 0)
				{
					fail = WorldGen.KillWall_CheckFailure(fail, tile);
					WorldGen.KillWall_PlaySounds(i, j, tile);
					int num = 10;
					if (fail)
					{
						num = 3;
					}
					for (int k = 0; k < num; k++)
					{
						WorldGen.KillWall_MakeWallDust(i, j, tile);
					}
					if (fail)
					{
						WorldGen.SquareWallFrame(i, j, true);
						return;
					}
					WorldGen.KillWall_DropItems(i, j, tile);
					tile.wall = 0;
					tile.ClearWallPaintAndCoating();
					WorldGen.SquareWallFrame(i, j, true);
					if (tile.type >= 0 && tile.type < TileID.Count && TileID.Sets.FramesOnKillWall[(int)tile.type])
					{
						WorldGen.TileFrame(i, j, false, false);
					}
				}
			}
		}

		// Token: 0x06000FA5 RID: 4005 RVA: 0x00450187 File Offset: 0x0044E387
		private static bool KillWall_CheckFailure(bool fail, Tile tileCache)
		{
			if (Main.wallDungeon[(int)tileCache.wall] && !NPC.downedBoss3)
			{
				fail = true;
			}
			if (tileCache.wall == 87 && !NPC.downedGolemBoss)
			{
				fail = true;
			}
			return fail;
		}

		// Token: 0x06000FA6 RID: 4006 RVA: 0x004501B8 File Offset: 0x0044E3B8
		private static void KillWall_PlaySounds(int i, int j, Tile tileCache)
		{
			if (tileCache.wall == 241 || (tileCache.wall >= 88 && tileCache.wall <= 93) || tileCache.wall == 21 || tileCache.wall == 186 || tileCache.wall == 136 || tileCache.wall == 137 || tileCache.wall == 168 || tileCache.wall == 169 || tileCache.wall == 172 || tileCache.wall == 226 || tileCache.wall == 227 || tileCache.wall == 242 || tileCache.wall == 243)
			{
				SoundEngine.PlaySound(13, i * 16, j * 16, 1, 1f, 0f);
				return;
			}
			if ((tileCache.wall >= 63 && tileCache.wall <= 70) || tileCache.wall == 264 || tileCache.wall == 268 || tileCache.wall == 265)
			{
				SoundEngine.PlaySound(6, i * 16, j * 16, 1, 1f, 0f);
				return;
			}
			SoundEngine.PlaySound(0, i * 16, j * 16, 1, 1f, 0f);
		}

		// Token: 0x06000FA7 RID: 4007 RVA: 0x00450308 File Offset: 0x0044E508
		private static void KillWall_DropItems(int i, int j, Tile tileCache)
		{
			int num = WorldGen.KillWall_GetItemDrops(tileCache);
			if (num > 0)
			{
				Item.NewItem(WorldGen.GetItemSource_FromWallBreak(i, j), i * 16, j * 16, 16, 16, num, 1, false, 0, false, false);
			}
		}

		// Token: 0x06000FA8 RID: 4008 RVA: 0x00450340 File Offset: 0x0044E540
		private static int KillWall_GetItemDrops(Tile tileCache)
		{
			switch (tileCache.wall)
			{
			case 237:
				return 4233;
			case 238:
				return 4234;
			case 239:
				return 4235;
			case 240:
				return 4236;
			case 246:
				return 4486;
			case 247:
				return 4487;
			case 248:
				return 4488;
			case 249:
				return 4489;
			case 250:
				return 4490;
			case 251:
				return 4491;
			case 252:
				return 4492;
			case 253:
				return 4493;
			case 254:
				return 4494;
			case 255:
				return 4495;
			case 256:
				return 4496;
			case 257:
				return 4497;
			case 258:
				return 4498;
			case 259:
				return 4499;
			case 260:
				return 4500;
			case 261:
				return 4501;
			case 262:
				return 4502;
			case 263:
				return 4503;
			case 264:
				return 4504;
			case 265:
				return 4505;
			case 266:
				return 4506;
			case 267:
				return 4507;
			case 268:
				return 4508;
			case 269:
				return 4509;
			case 270:
				return 4510;
			case 271:
				return 4511;
			case 274:
				return 4512;
			case 275:
				return 3273;
			case 276:
				return 4513;
			case 277:
				return 4514;
			case 278:
				return 4515;
			case 279:
				return 4516;
			case 280:
				return 4517;
			case 281:
				return 4518;
			case 282:
				return 4519;
			case 283:
				return 4520;
			case 284:
				return 4521;
			case 285:
				return 4522;
			case 286:
				return 4523;
			case 287:
				return 4524;
			case 288:
				return 4525;
			case 289:
				return 4526;
			case 290:
				return 4527;
			case 291:
				return 4528;
			case 292:
				return 4529;
			case 293:
				return 4530;
			case 294:
				return 4531;
			case 295:
				return 4532;
			case 296:
				return 4533;
			case 297:
				return 4534;
			case 298:
				return 4535;
			case 299:
				return 4536;
			case 300:
				return 4537;
			case 301:
				return 4538;
			case 302:
				return 4539;
			case 303:
				return 4540;
			case 304:
				return 3340;
			case 305:
				return 3341;
			case 306:
				return 3342;
			case 307:
				return 3343;
			case 308:
				return 3344;
			case 309:
				return 3345;
			case 310:
				return 3346;
			case 311:
				return 3348;
			case 314:
				return 4647;
			}
			int result = 0;
			if (tileCache.wall == 168)
			{
				result = 2696;
			}
			if (tileCache.wall == 169)
			{
				result = 2698;
			}
			if (tileCache.wall == 226)
			{
				result = 3752;
			}
			if (tileCache.wall == 227)
			{
				result = 3753;
			}
			if (tileCache.wall == 228)
			{
				result = 3760;
			}
			if (tileCache.wall == 229)
			{
				result = 3761;
			}
			if (tileCache.wall == 230)
			{
				result = 3762;
			}
			if (tileCache.wall == 142)
			{
				result = 2263;
			}
			if (tileCache.wall == 143)
			{
				result = 2264;
			}
			if (tileCache.wall == 144)
			{
				result = 2271;
			}
			if (tileCache.wall == 149)
			{
				result = 2505;
			}
			if (tileCache.wall == 150)
			{
				result = 2507;
			}
			if (tileCache.wall == 151)
			{
				result = 2506;
			}
			if (tileCache.wall == 152)
			{
				result = 2508;
			}
			if (tileCache.wall == 316)
			{
				result = 5216;
			}
			if (tileCache.wall == 317)
			{
				result = 5217;
			}
			if (tileCache.wall == 245)
			{
				result = 4424;
			}
			if (tileCache.wall == 315)
			{
				result = 4667;
			}
			if (tileCache.wall == 1)
			{
				result = 26;
			}
			if (tileCache.wall == 4)
			{
				result = 93;
			}
			if (tileCache.wall == 5)
			{
				result = 130;
			}
			if (tileCache.wall == 6)
			{
				result = 132;
			}
			if (tileCache.wall == 7)
			{
				result = 135;
			}
			if (tileCache.wall == 8)
			{
				result = 138;
			}
			if (tileCache.wall == 9)
			{
				result = 140;
			}
			if (tileCache.wall == 10)
			{
				result = 142;
			}
			if (tileCache.wall == 11)
			{
				result = 144;
			}
			if (tileCache.wall == 12)
			{
				result = 146;
			}
			if (tileCache.wall == 14)
			{
				result = 330;
			}
			if (tileCache.wall == 224)
			{
				result = 3472;
			}
			if (tileCache.wall == 323)
			{
				result = 5409;
			}
			if (tileCache.wall == 324)
			{
				result = 5410;
			}
			if (tileCache.wall == 325)
			{
				result = 5411;
			}
			if (tileCache.wall == 326)
			{
				result = 5412;
			}
			if (tileCache.wall == 327)
			{
				result = 5413;
			}
			if (tileCache.wall == 328)
			{
				result = 5414;
			}
			if (tileCache.wall == 329)
			{
				result = 5415;
			}
			if (tileCache.wall == 330)
			{
				result = 5416;
			}
			if (tileCache.wall == 331)
			{
				result = 5418;
			}
			if (tileCache.wall == 332)
			{
				result = 5420;
			}
			if (tileCache.wall == 333)
			{
				result = 5422;
			}
			if (tileCache.wall == 334)
			{
				result = 5424;
			}
			if (tileCache.wall == 335)
			{
				result = 5426;
			}
			if (tileCache.wall == 336)
			{
				result = 5428;
			}
			if (tileCache.wall == 337)
			{
				result = 5434;
			}
			if (tileCache.wall == 338)
			{
				result = 5436;
			}
			if (tileCache.wall == 339)
			{
				result = 5430;
			}
			if (tileCache.wall == 340)
			{
				result = 5432;
			}
			if (tileCache.wall == 341)
			{
				result = 5445;
			}
			if (tileCache.wall == 342)
			{
				result = 5446;
			}
			if (tileCache.wall == 343)
			{
				result = 5447;
			}
			if (tileCache.wall == 344)
			{
				result = 5448;
			}
			if (tileCache.wall == 345)
			{
				result = 5449;
			}
			if (tileCache.wall == 346)
			{
				result = 5450;
			}
			if (tileCache.wall == 177)
			{
				result = 3067;
			}
			if (tileCache.wall == 167)
			{
				result = 2691;
			}
			if (tileCache.wall == 60)
			{
				result = 3584;
			}
			if (tileCache.wall == 231)
			{
				result = 3952;
			}
			if (tileCache.wall == 232)
			{
				result = 3954;
			}
			if (tileCache.wall == 225)
			{
				result = 3751;
			}
			if (tileCache.wall == 233)
			{
				result = 3956;
			}
			if (tileCache.wall == 234)
			{
				result = 4052;
			}
			if (tileCache.wall == 235)
			{
				result = 4053;
			}
			if (tileCache.wall == 236)
			{
				result = 4140;
			}
			if (tileCache.wall == 312)
			{
				result = 4565;
			}
			if (tileCache.wall == 313)
			{
				result = 4548;
			}
			if (tileCache.wall == 319)
			{
				result = 5307;
			}
			if (tileCache.wall == 318)
			{
				result = 5291;
			}
			if (tileCache.wall == 179)
			{
				result = 3083;
			}
			if (tileCache.wall == 183)
			{
				result = 3082;
			}
			if (tileCache.wall == 321)
			{
				result = 5397;
			}
			if (tileCache.wall == 322)
			{
				result = 5399;
			}
			if (tileCache.wall == 181)
			{
				result = 3089;
			}
			if (tileCache.wall == 184)
			{
				result = 3088;
			}
			if (tileCache.wall == 186)
			{
				result = 3238;
			}
			if (tileCache.wall == 320)
			{
				result = 5396;
			}
			if (tileCache.wall >= 153 && tileCache.wall <= 166)
			{
				switch (tileCache.wall)
				{
				case 153:
					result = 2677;
					break;
				case 154:
					result = 2679;
					break;
				case 155:
					result = 2681;
					break;
				case 156:
					result = 2683;
					break;
				case 157:
					result = 2678;
					break;
				case 158:
					result = 2680;
					break;
				case 159:
					result = 2682;
					break;
				case 160:
					result = 2684;
					break;
				case 161:
					result = 2686;
					break;
				case 162:
					result = 2688;
					break;
				case 163:
					result = 2690;
					break;
				case 164:
					result = 2685;
					break;
				case 165:
					result = 2687;
					break;
				case 166:
					result = 2689;
					break;
				}
			}
			if (tileCache.wall == 136)
			{
				result = 2169;
			}
			if (tileCache.wall == 137)
			{
				result = 2170;
			}
			if (tileCache.wall == 172)
			{
				result = 2788;
			}
			if (tileCache.wall == 242)
			{
				result = 4279;
			}
			if (tileCache.wall == 243)
			{
				result = 4280;
			}
			if (tileCache.wall == 145)
			{
				result = 2333;
			}
			if (tileCache.wall == 16)
			{
				result = 30;
			}
			if (tileCache.wall == 17)
			{
				result = 135;
			}
			if (tileCache.wall == 18)
			{
				result = 138;
			}
			if (tileCache.wall == 19)
			{
				result = 140;
			}
			if (tileCache.wall == 20)
			{
				result = 330;
			}
			if (tileCache.wall == 21)
			{
				result = 392;
			}
			if (tileCache.wall == 86 || tileCache.wall == 108)
			{
				result = 1126;
			}
			if (tileCache.wall == 173)
			{
				result = 2789;
			}
			if (tileCache.wall == 174)
			{
				result = 2790;
			}
			if (tileCache.wall == 175)
			{
				result = 2791;
			}
			if (tileCache.wall == 176)
			{
				result = 2861;
			}
			if (tileCache.wall == 182)
			{
				result = 3101;
			}
			if (tileCache.wall == 133)
			{
				result = 2158;
			}
			if (tileCache.wall == 134)
			{
				result = 2159;
			}
			if (tileCache.wall == 135)
			{
				result = 2160;
			}
			else if (tileCache.wall == 113)
			{
				result = 1726;
			}
			else if (tileCache.wall == 114)
			{
				result = 1728;
			}
			else if (tileCache.wall == 115)
			{
				result = 1730;
			}
			else if (tileCache.wall == 146)
			{
				result = 2432;
			}
			else if (tileCache.wall == 147)
			{
				result = 2433;
			}
			else if (tileCache.wall == 148)
			{
				result = 2434;
			}
			if (tileCache.wall >= 116 && tileCache.wall <= 125)
			{
				result = (int)(1948 + tileCache.wall - 116);
			}
			if (tileCache.wall >= 126 && tileCache.wall <= 132)
			{
				result = (int)(2008 + tileCache.wall - 126);
			}
			if (tileCache.wall == 22)
			{
				result = 417;
			}
			if (tileCache.wall == 23)
			{
				result = 418;
			}
			if (tileCache.wall == 24)
			{
				result = 419;
			}
			if (tileCache.wall == 25)
			{
				result = 420;
			}
			if (tileCache.wall == 26)
			{
				result = 421;
			}
			if (tileCache.wall == 29)
			{
				result = 587;
			}
			if (tileCache.wall == 30)
			{
				result = 592;
			}
			if (tileCache.wall == 31)
			{
				result = 595;
			}
			if (tileCache.wall == 32)
			{
				result = 605;
			}
			if (tileCache.wall == 33)
			{
				result = 606;
			}
			if (tileCache.wall == 34)
			{
				result = 608;
			}
			if (tileCache.wall == 35)
			{
				result = 610;
			}
			if (tileCache.wall == 36)
			{
				result = 615;
			}
			if (tileCache.wall == 37)
			{
				result = 616;
			}
			if (tileCache.wall == 38)
			{
				result = 617;
			}
			if (tileCache.wall == 39)
			{
				result = 618;
			}
			if (tileCache.wall == 41)
			{
				result = 622;
			}
			if (tileCache.wall == 42)
			{
				result = 623;
			}
			if (tileCache.wall == 43)
			{
				result = 624;
			}
			if (tileCache.wall == 44)
			{
				result = 663;
			}
			if (tileCache.wall == 45)
			{
				result = 720;
			}
			if (tileCache.wall == 46)
			{
				result = 721;
			}
			if (tileCache.wall == 47)
			{
				result = 722;
			}
			if (tileCache.wall == 66)
			{
				result = 745;
			}
			if (tileCache.wall == 67)
			{
				result = 746;
			}
			if (tileCache.wall == 68)
			{
				result = 747;
			}
			if (tileCache.wall == 84)
			{
				result = 884;
			}
			if (tileCache.wall == 72)
			{
				result = 750;
			}
			if (tileCache.wall == 73)
			{
				result = 752;
			}
			if (tileCache.wall == 74)
			{
				result = 764;
			}
			if (tileCache.wall == 85)
			{
				result = 927;
			}
			if (tileCache.wall == 75)
			{
				result = 768;
			}
			if (tileCache.wall == 76)
			{
				result = 769;
			}
			if (tileCache.wall == 77)
			{
				result = 770;
			}
			if (tileCache.wall == 82)
			{
				result = 825;
			}
			if (tileCache.wall == 27)
			{
				result = 479;
			}
			if (tileCache.wall == 106)
			{
				result = 1447;
			}
			if (tileCache.wall == 107)
			{
				result = 1448;
			}
			if (tileCache.wall == 109)
			{
				result = 1590;
			}
			if (tileCache.wall == 110)
			{
				result = 1592;
			}
			if (tileCache.wall == 111)
			{
				result = 1594;
			}
			if (tileCache.wall == 78)
			{
				result = 1723;
			}
			if (tileCache.wall == 87 || tileCache.wall == 112)
			{
				result = 1102;
			}
			if (tileCache.wall == 94 || tileCache.wall == 100)
			{
				result = 1378;
			}
			if (tileCache.wall == 95 || tileCache.wall == 101)
			{
				result = 1379;
			}
			if (tileCache.wall == 96 || tileCache.wall == 102)
			{
				result = 1380;
			}
			if (tileCache.wall == 97 || tileCache.wall == 103)
			{
				result = 1381;
			}
			if (tileCache.wall == 98 || tileCache.wall == 104)
			{
				result = 1382;
			}
			if (tileCache.wall == 99 || tileCache.wall == 105)
			{
				result = 1383;
			}
			if (tileCache.wall == 241)
			{
				result = 4260;
			}
			if (tileCache.wall >= 88 && tileCache.wall <= 93)
			{
				result = (int)(1267 + tileCache.wall - 88);
			}
			if (tileCache.wall >= 138 && tileCache.wall <= 141)
			{
				result = (int)(2210 + tileCache.wall - 138);
			}
			return result;
		}

		// Token: 0x06000FA9 RID: 4009 RVA: 0x00451288 File Offset: 0x0044F488
		private static void KillWall_MakeWallDust(int i, int j, Tile tileCache)
		{
			int num = 0;
			ushort wall = tileCache.wall;
			switch (wall)
			{
			case 3:
			case 246:
				if (WorldGen.genRand.Next(2) == 0)
				{
					num = 14;
					goto IL_6CD;
				}
				num = 1;
				goto IL_6CD;
			case 4:
			case 5:
			case 6:
			case 10:
			case 11:
			case 12:
			case 13:
			case 14:
			case 16:
			case 20:
			case 21:
			case 23:
			case 24:
			case 25:
			case 26:
			case 27:
			case 29:
			case 30:
			case 31:
			case 32:
			case 33:
			case 34:
			case 35:
			case 36:
			case 37:
			case 38:
			case 39:
			case 41:
			case 42:
			case 43:
			case 44:
			case 45:
			case 46:
			case 47:
			case 60:
			case 63:
			case 64:
			case 65:
			case 66:
			case 67:
			case 68:
			case 72:
			case 73:
			case 74:
			case 75:
			case 76:
			case 77:
			case 78:
			case 80:
			case 82:
			case 84:
			case 85:
			case 86:
			case 87:
			case 88:
			case 89:
			case 90:
			case 91:
			case 92:
			case 93:
			case 106:
			case 107:
			case 108:
			case 109:
			case 110:
			case 111:
			case 112:
			case 113:
			case 114:
			case 115:
			case 116:
			case 117:
			case 118:
			case 119:
			case 120:
			case 121:
			case 122:
			case 123:
			case 124:
			case 125:
			case 126:
			case 127:
			case 128:
			case 129:
			case 130:
			case 131:
			case 132:
			case 133:
			case 134:
			case 135:
			case 136:
			case 137:
			case 138:
			case 139:
			case 140:
			case 141:
			case 142:
			case 143:
			case 144:
			case 145:
			case 146:
			case 147:
			case 148:
			case 149:
			case 150:
			case 151:
			case 152:
			case 153:
			case 154:
			case 155:
			case 156:
			case 157:
			case 158:
			case 159:
			case 160:
			case 161:
			case 162:
			case 163:
			case 164:
			case 165:
			case 166:
			case 167:
			case 168:
			case 169:
			case 172:
			case 173:
			case 174:
			case 175:
			case 176:
			case 177:
			case 178:
			case 179:
			case 180:
			case 181:
			case 182:
			case 183:
			case 184:
			case 186:
			case 224:
			case 225:
			case 226:
			case 227:
			case 228:
			case 229:
			case 230:
			case 235:
			case 236:
			case 241:
			case 242:
			case 243:
			case 244:
			case 245:
			case 272:
			case 273:
				goto IL_6CD;
			case 7:
			case 17:
			case 94:
			case 95:
			case 100:
			case 101:
				break;
			case 8:
			case 18:
			case 98:
			case 99:
			case 104:
			case 105:
				goto IL_52D;
			case 9:
			case 19:
			case 96:
			case 97:
			case 102:
			case 103:
				goto IL_538;
			case 15:
			case 247:
				num = 38;
				goto IL_6CD;
			case 22:
			case 28:
			case 248:
				num = 51;
				goto IL_6CD;
			case 40:
			case 249:
				num = 51;
				goto IL_6CD;
			case 48:
			case 49:
			case 50:
			case 51:
			case 52:
			case 53:
			case 54:
			case 55:
			case 56:
			case 57:
			case 58:
			case 185:
			case 250:
			case 251:
			case 252:
			case 253:
			case 254:
			case 255:
			case 256:
			case 257:
			case 258:
			case 259:
			case 260:
			case 274:
			case 314:
				num = 1;
				goto IL_6CD;
			case 59:
			case 61:
			case 261:
			case 262:
				num = 0;
				goto IL_6CD;
			case 62:
			case 263:
				num = 0;
				goto IL_6CD;
			case 69:
			case 264:
				if (WorldGen.genRand.Next(2) == 0)
				{
					num = 14;
					goto IL_6CD;
				}
				num = 17;
				goto IL_6CD;
			case 70:
			case 265:
				num = 47;
				goto IL_6CD;
			case 71:
			case 266:
				num = 80;
				goto IL_6CD;
			case 79:
			case 267:
				num = 37;
				goto IL_6CD;
			case 81:
			case 268:
				num = 123;
				goto IL_6CD;
			case 83:
			case 234:
			case 269:
				if (WorldGen.genRand.Next(2) == 0)
				{
					num = 1;
					goto IL_6CD;
				}
				num = 117;
				goto IL_6CD;
			case 170:
			case 171:
			case 270:
			case 271:
				num = 0;
				goto IL_6CD;
			case 187:
			case 275:
				num = 0;
				goto IL_6CD;
			case 188:
			case 189:
			case 190:
			case 191:
			case 276:
			case 277:
			case 278:
			case 279:
				num = 37;
				goto IL_6CD;
			case 192:
			case 193:
			case 194:
			case 195:
			case 280:
			case 281:
			case 282:
			case 283:
				num = 117;
				goto IL_6CD;
			case 196:
			case 197:
			case 198:
			case 199:
			case 284:
			case 285:
			case 286:
			case 287:
				num = 0;
				goto IL_6CD;
			case 200:
			case 202:
			case 288:
			case 290:
				if (WorldGen.genRand.Next(2) == 0)
				{
					num = 69;
					goto IL_6CD;
				}
				num = 70;
				goto IL_6CD;
			case 201:
			case 289:
				num = 17;
				goto IL_6CD;
			case 203:
			case 291:
				if (WorldGen.genRand.Next(2) == 0)
				{
					num = 69;
					goto IL_6CD;
				}
				num = 68;
				goto IL_6CD;
			case 204:
			case 205:
			case 207:
			case 292:
			case 293:
			case 295:
				num = 0;
				goto IL_6CD;
			case 206:
			case 294:
				num = 1;
				goto IL_6CD;
			case 208:
			case 209:
			case 210:
			case 211:
			case 296:
			case 297:
			case 298:
			case 299:
				if (WorldGen.genRand.Next(2) == 0)
				{
					num = 155;
					goto IL_6CD;
				}
				num = 125;
				goto IL_6CD;
			case 212:
			case 213:
			case 214:
			case 215:
			case 300:
			case 301:
			case 302:
			case 303:
				num = 1;
				goto IL_6CD;
			case 216:
			case 304:
				num = 0;
				goto IL_6CD;
			case 217:
			case 305:
				num = 37;
				goto IL_6CD;
			case 218:
			case 306:
				num = 155;
				goto IL_6CD;
			case 219:
			case 307:
				num = 17;
				goto IL_6CD;
			case 220:
			case 308:
				num = 37;
				goto IL_6CD;
			case 221:
			case 309:
				num = 155;
				goto IL_6CD;
			case 222:
			case 310:
				num = 37;
				goto IL_6CD;
			case 223:
			case 311:
				num = 0;
				goto IL_6CD;
			case 231:
				num = 8;
				goto IL_6CD;
			case 232:
				num = 82;
				goto IL_6CD;
			case 233:
				num = 18;
				goto IL_6CD;
			case 237:
				num = 6;
				goto IL_6CD;
			case 238:
				num = 61;
				goto IL_6CD;
			case 239:
				num = 242;
				goto IL_6CD;
			case 240:
				num = 135;
				goto IL_6CD;
			case 312:
			case 313:
			case 315:
				num = -1;
				goto IL_6CD;
			case 316:
			case 317:
				num = 36;
				goto IL_6CD;
			default:
				switch (wall)
				{
				case 331:
					break;
				case 332:
					goto IL_52D;
				case 333:
					goto IL_538;
				default:
					goto IL_6CD;
				}
				break;
			}
			num = 275;
			goto IL_6CD;
			IL_52D:
			num = 276;
			goto IL_6CD;
			IL_538:
			num = 277;
			IL_6CD:
			if (tileCache.wall == 148)
			{
				num = -1;
			}
			if (tileCache.wall == 1 || tileCache.wall == 5 || tileCache.wall == 6 || tileCache.wall == 107)
			{
				num = 1;
			}
			if (tileCache.wall == 35)
			{
				num = 37;
			}
			if (tileCache.wall == 4 || tileCache.wall == 106)
			{
				num = 7;
			}
			if (tileCache.wall == 12)
			{
				num = 9;
			}
			if (tileCache.wall == 336)
			{
				num = 9;
			}
			if (tileCache.wall == 10)
			{
				num = 10;
			}
			if (tileCache.wall == 334)
			{
				num = 10;
			}
			if (tileCache.wall == 11)
			{
				num = 11;
			}
			if (tileCache.wall == 335)
			{
				num = 11;
			}
			if (tileCache.wall == 21)
			{
				num = 13;
			}
			if (tileCache.wall == 34)
			{
				num = 32;
			}
			if (tileCache.wall == 225)
			{
				num = 1;
			}
			if (tileCache.wall == 145)
			{
				num = 8;
			}
			if (tileCache.wall == 23)
			{
				num = 38;
			}
			if (tileCache.wall == 24)
			{
				num = 36;
			}
			if (tileCache.wall == 25 || tileCache.wall == 339)
			{
				num = 48;
			}
			if (tileCache.wall == 179 || tileCache.wall == 178 || tileCache.wall == 183)
			{
				num = 236;
			}
			if (tileCache.wall == 181 || tileCache.wall == 180 || tileCache.wall == 184)
			{
				num = 240;
			}
			if (tileCache.wall == 113)
			{
				num = 189;
			}
			if (tileCache.wall == 114)
			{
				num = 190;
			}
			if (tileCache.wall == 115)
			{
				num = 191;
			}
			if (tileCache.wall == 177 || tileCache.wall == 13 || tileCache.wall == 338)
			{
				num = 25;
			}
			if (tileCache.wall == 186)
			{
				num = WorldGen.genRand.Next(68, 71);
			}
			if (tileCache.wall == 319)
			{
				num = 171;
			}
			if (tileCache.wall == 321)
			{
				num = 308;
			}
			if (tileCache.wall == 322)
			{
				num = 308;
			}
			if (tileCache.wall == 318)
			{
				num = 226;
			}
			if (tileCache.wall == 142)
			{
				num = 210;
			}
			if (tileCache.wall == 143)
			{
				num = 210;
			}
			if (tileCache.wall == 224)
			{
				num = 265;
			}
			if (tileCache.wall == 323)
			{
				num = 314;
			}
			if (tileCache.wall == 324)
			{
				num = 315;
			}
			if (tileCache.wall == 325)
			{
				num = 316;
			}
			if (tileCache.wall == 326)
			{
				num = 317;
			}
			if (tileCache.wall == 327)
			{
				num = 318;
			}
			if (tileCache.wall == 328)
			{
				num = 319;
			}
			if (tileCache.wall == 329)
			{
				num = 320;
			}
			if (tileCache.wall == 330)
			{
				num = 321;
			}
			if (tileCache.wall == 320)
			{
				num = 0;
			}
			if (tileCache.wall == 341)
			{
				num = 258;
			}
			if (tileCache.wall == 342)
			{
				num = 301;
			}
			if (tileCache.wall == 343)
			{
				num = 299;
			}
			if (tileCache.wall == 344)
			{
				num = 300;
			}
			if (tileCache.wall == 345)
			{
				num = 305;
			}
			if (tileCache.wall == 173)
			{
				num = 128;
			}
			if (tileCache.wall == 174)
			{
				num = 117;
			}
			if (tileCache.wall == 175)
			{
				num = 42;
			}
			if (tileCache.wall == 176)
			{
				num = 226;
			}
			if (tileCache.wall == 182)
			{
				if (WorldGen.genRand.Next(2) == 0)
				{
					num = 6;
				}
				else
				{
					num = 23;
				}
			}
			if (tileCache.wall >= 153 && tileCache.wall <= 166)
			{
				switch (tileCache.wall)
				{
				case 153:
				case 157:
					num = 138;
					break;
				case 154:
				case 158:
					num = 86;
					break;
				case 155:
				case 159:
					num = 91;
					break;
				case 156:
				case 160:
					num = 89;
					break;
				case 161:
				case 164:
					num = 90;
					break;
				case 162:
				case 165:
					num = 88;
					break;
				case 163:
				case 166:
					num = 87;
					break;
				}
			}
			if (tileCache.wall == 26 || tileCache.wall == 30 || tileCache.wall == 340)
			{
				num = 49;
			}
			if (tileCache.wall == 29 || tileCache.wall == 32)
			{
				num = 50;
			}
			if (tileCache.wall == 31)
			{
				num = 51;
			}
			if (tileCache.wall == 14 || tileCache.wall == 20 || tileCache.wall == 337)
			{
				num = 109;
			}
			if (tileCache.wall == 241)
			{
				num = 286;
			}
			if (tileCache.wall >= 88 && tileCache.wall <= 93)
			{
				num = (int)(86 + tileCache.wall - 88);
				if (tileCache.wall == 93)
				{
					num = WorldGen.genRand.Next(88, 94);
				}
			}
			if (tileCache.wall == 33)
			{
				num = 14;
			}
			if (tileCache.wall == 41)
			{
				num = 77;
			}
			if (tileCache.wall == 42)
			{
				num = 78;
			}
			if (tileCache.wall == 43)
			{
				num = 78;
			}
			if (tileCache.wall == 36)
			{
				num = 26;
			}
			if (tileCache.wall == 37)
			{
				num = 32;
			}
			if (tileCache.wall == 38)
			{
				num = 2;
			}
			if (tileCache.wall == 39)
			{
				num = 1;
			}
			if (tileCache.wall == 45)
			{
				num = 81;
			}
			if (tileCache.wall == 46)
			{
				num = 83;
			}
			if (tileCache.wall == 47)
			{
				num = 84;
			}
			if (tileCache.wall == 85)
			{
				num = 126;
			}
			if (tileCache.wall == 63)
			{
				num = 3;
			}
			if (tileCache.wall == 65)
			{
				num = 3;
			}
			if (tileCache.wall == 66)
			{
				num = 3;
			}
			if (tileCache.wall == 68)
			{
				num = 3;
			}
			if (tileCache.wall == 64)
			{
				num = 40;
			}
			if (tileCache.wall == 67)
			{
				num = 40;
			}
			if (tileCache.wall == 84)
			{
				num = 80;
			}
			if (tileCache.wall == 60)
			{
				num = 3;
			}
			if (tileCache.wall == 167)
			{
				num = 81;
			}
			if (tileCache.wall == 147)
			{
				num = 51;
			}
			if (tileCache.wall == 146)
			{
				num = 9;
			}
			if (tileCache.wall == 109)
			{
				num = 144;
			}
			if (tileCache.wall == 110)
			{
				num = 145;
			}
			if (tileCache.wall == 111)
			{
				num = 146;
			}
			if (tileCache.wall == 86 || tileCache.wall == 108)
			{
				num = 147;
			}
			if (tileCache.wall == 87)
			{
				num = 148;
			}
			if (tileCache.wall == 136)
			{
				num = 13;
			}
			if (tileCache.wall == 137)
			{
				num = 13;
			}
			if (tileCache.wall == 168)
			{
				num = 13;
			}
			if (tileCache.wall == 169)
			{
				num = 13;
			}
			if (tileCache.wall == 172)
			{
				num = 13;
			}
			if (tileCache.wall == 226)
			{
				num = 13;
			}
			if (tileCache.wall == 227)
			{
				num = 13;
			}
			if (tileCache.wall == 242)
			{
				num = 13;
			}
			if (tileCache.wall == 243)
			{
				num = 13;
			}
			if (tileCache.wall == 72)
			{
				num = 40;
			}
			if (tileCache.wall == 73)
			{
				num = 16;
			}
			if (tileCache.wall == 74 || tileCache.wall == 80)
			{
				num = 26;
			}
			if (tileCache.wall == 144)
			{
				if (WorldGen.genRand.Next(2) == 0)
				{
					num = 10;
				}
				else
				{
					num = 118;
				}
			}
			if (tileCache.wall == 75)
			{
				num = 26;
			}
			if (tileCache.wall == 76)
			{
				num = 4;
			}
			if (tileCache.wall == 77 || tileCache.wall == 81)
			{
				num = 5;
			}
			if (tileCache.wall == 78 || tileCache.wall == 244)
			{
				num = 7;
			}
			if (tileCache.wall == 82)
			{
				num = 36;
			}
			if (tileCache.wall == 27)
			{
				if (WorldGen.genRand.Next(2) == 0)
				{
					num = 7;
				}
				else
				{
					num = 1;
				}
			}
			if (tileCache.wall == 138)
			{
				num = 77;
			}
			if (tileCache.wall == 139)
			{
				num = 78;
			}
			if (tileCache.wall == 140)
			{
				num = 79;
			}
			if (tileCache.wall == 141)
			{
				num = 126;
			}
			if (tileCache.wall == 149 || tileCache.wall == 150)
			{
				num = 214;
			}
			if (tileCache.wall == 151 || tileCache.wall == 152)
			{
				num = 215;
			}
			if (tileCache.wall == 245)
			{
				num = 195;
			}
			if (tileCache.wall == 44 || tileCache.wall == 346)
			{
				int num2 = Dust.NewDust(new Vector2((float)(i * 16), (float)(j * 16)), 16, 16, 66, 0f, 0f, 100, new Color(Main.DiscoR, Main.DiscoG, Main.DiscoB), 0.75f);
				Main.dust[num2].noGravity = true;
				return;
			}
			if ((tileCache.wall < 133 || tileCache.wall > 135) && (tileCache.wall < 116 || tileCache.wall > 125) && (tileCache.wall < 126 || tileCache.wall > 132))
			{
				if (tileCache.wall == 76)
				{
					Dust.NewDust(new Vector2((float)(i * 16), (float)(j * 16)), 16, 16, num, 0f, 0f, 75, new Color(0, 80, 255, 100), 0.75f);
					return;
				}
				if (num >= 0)
				{
					Dust.NewDust(new Vector2((float)(i * 16), (float)(j * 16)), 16, 16, num, 0f, 0f, 0, default(Color), 1f);
				}
			}
		}

		// Token: 0x06000FAA RID: 4010 RVA: 0x0045231C File Offset: 0x0045051C
		public static void LaunchRocket(int x, int y, bool fromWiring)
		{
			int i = (int)Main.tile[x, y].frameY;
			int num = 0;
			while (i >= 40)
			{
				i -= 40;
				num++;
			}
			if (i == 18)
			{
				y--;
			}
			Vector2 vector = new Vector2((float)(x * 16 + 8), (float)(y * 16 + 4));
			int type = 167 + num;
			int damage = 150;
			int num2 = 7;
			int num3 = Projectile.NewProjectile(WorldGen.GetProjectileSource_PlayerOrWires(x, y, fromWiring, Main.LocalPlayer), vector.X, vector.Y + 2f, 0f, -8f, type, damage, (float)num2, Main.myPlayer, 0f, 0f, 0f);
			Main.projectile[num3].originatedFromActivableTile = true;
			Main.tile[x, y].active(false);
			Main.tile[x, y + 1].active(false);
			NetMessage.SendTileSquare(-1, x, y, 1, 2, TileChangeType.None);
		}

		// Token: 0x06000FAB RID: 4011 RVA: 0x00452408 File Offset: 0x00450608
		public static void LaunchRocketSmall(int x, int y, bool fromWiring)
		{
			if (Main.tile[x, y].frameX == 18)
			{
				x--;
			}
			if (Main.tile[x, y].frameY == 18)
			{
				y--;
			}
			Vector2 vector = new Vector2((float)(x * 16 + 16), (float)(y * 16));
			int type = 415 + Main.rand.Next(4);
			int damage = 0;
			int num = 0;
			int num2 = Projectile.NewProjectile(WorldGen.GetProjectileSource_PlayerOrWires(x, y, fromWiring, Main.LocalPlayer), vector.X, vector.Y + 2f, 0f, -8f, type, damage, (float)num, Main.myPlayer, 0f, 0f, 0f);
			Main.projectile[num2].originatedFromActivableTile = true;
		}

		// Token: 0x06000FAC RID: 4012 RVA: 0x004524CC File Offset: 0x004506CC
		public static bool CanKillTile(int i, int j, WorldGen.SpecialKillTileContext context)
		{
			if (context == WorldGen.SpecialKillTileContext.MowingTheGrass)
			{
				Tile tile = Main.tile[i, j];
				if (tile == null)
				{
					return false;
				}
				if (tile.type == 2 || tile.type == 109)
				{
					return true;
				}
			}
			return WorldGen.CanKillTile(i, j);
		}

		// Token: 0x06000FAD RID: 4013 RVA: 0x0045250C File Offset: 0x0045070C
		public static bool CanKillTile(int i, int j)
		{
			bool flag;
			return WorldGen.CanKillTile(i, j, out flag);
		}

		// Token: 0x06000FAE RID: 4014 RVA: 0x00452524 File Offset: 0x00450724
		public static bool CanKillTile(int i, int j, out bool blockDamaged)
		{
			blockDamaged = false;
			if (i < 0 || j < 0 || i >= Main.maxTilesX || j >= Main.maxTilesY)
			{
				return false;
			}
			Tile tile = Main.tile[i, j];
			Tile tile2 = null;
			if (tile == null)
			{
				return false;
			}
			if (!tile.active())
			{
				return false;
			}
			if (j >= 1)
			{
				tile2 = Main.tile[i, j - 1];
			}
			if (tile2 != null && tile2.active())
			{
				int type = (int)tile2.type;
				if (TileID.Sets.IsATreeTrunk[type] && (int)tile.type != type && (tile2.frameX != 66 || tile2.frameY < 0 || tile2.frameY > 44) && (tile2.frameX != 88 || tile2.frameY < 66 || tile2.frameY > 110) && tile2.frameY < 198)
				{
					return false;
				}
				if (type <= 77)
				{
					if (type <= 26)
					{
						if (type != 21 && type != 26)
						{
							goto IL_15E;
						}
					}
					else if (type != 72 && type != 77)
					{
						goto IL_15E;
					}
				}
				else if (type <= 88)
				{
					if (type != 80)
					{
						if (type != 88)
						{
							goto IL_15E;
						}
					}
					else
					{
						if ((int)tile.type == type)
						{
							goto IL_15E;
						}
						int num = (int)(tile2.frameX / 18);
						if (num <= 1 || num - 4 <= 1)
						{
							return false;
						}
						goto IL_15E;
					}
				}
				else if (type != 323)
				{
					if (type != 467 && type != 488)
					{
						goto IL_15E;
					}
				}
				else
				{
					if ((int)tile.type != type && (tile2.frameX == 66 || tile2.frameX == 220))
					{
						return false;
					}
					goto IL_15E;
				}
				if ((int)tile.type != type)
				{
					return false;
				}
			}
			IL_15E:
			if (TileID.Sets.Boulders[(int)tile.type] && WorldGen.CheckBoulderChest(i, j))
			{
				blockDamaged = true;
				return false;
			}
			ushort type2 = tile.type;
			if (type2 <= 21)
			{
				if (type2 != 10)
				{
					if (type2 != 21)
					{
						return true;
					}
				}
				else
				{
					if (WorldGen.IsLockedDoor(tile))
					{
						blockDamaged = true;
						return false;
					}
					return true;
				}
			}
			else if (type2 != 88)
			{
				if (type2 == 235)
				{
					int num2 = i - (int)(tile.frameX % 54 / 18);
					for (int k = 0; k < 3; k++)
					{
						Tile tile3 = Main.tile[num2 + k, j - 1];
						if (tile3.active() && WorldGen.IsAContainer(tile3))
						{
							blockDamaged = true;
							return false;
						}
					}
					return true;
				}
				if (type2 != 467)
				{
					return true;
				}
			}
			else
			{
				if (!Chest.CanDestroyChest(i - (int)(tile.frameX / 18 % 3), j - (int)(tile.frameY / 18)))
				{
					return false;
				}
				return true;
			}
			if (!Chest.CanDestroyChest(i - (int)(tile.frameX / 18 % 2), j - (int)(tile.frameY / 18)))
			{
				return false;
			}
			return true;
		}

		// Token: 0x06000FAF RID: 4015 RVA: 0x00452790 File Offset: 0x00450990
		public static bool IsTileReplacable(int x, int y)
		{
			Tile tile = Main.tile[x, y];
			if (y >= 1)
			{
				Tile tile2 = Main.tile[x, y - 1];
				if (tile == null || tile2 == null)
				{
					return false;
				}
				if (tile2.active())
				{
					if (tile2.type == 80)
					{
						return false;
					}
					if (tile2.type == 488)
					{
						return false;
					}
					if (TileID.Sets.PreventsTileReplaceIfOnTopOfIt[(int)tile2.type] && tile.type != tile2.type)
					{
						if (TileID.Sets.IsATreeTrunk[(int)tile2.type])
						{
							return (tile2.frameX == 66 && tile2.frameY >= 0 && tile2.frameY <= 44) || (tile2.frameX == 88 && tile2.frameY >= 66 && tile2.frameY <= 110) || tile2.frameY >= 198;
						}
						return tile2.type == 323 && tile2.frameX != 66 && tile2.frameX != 220;
					}
				}
			}
			return true;
		}

		// Token: 0x06000FB0 RID: 4016 RVA: 0x00452898 File Offset: 0x00450A98
		public static int CheckTileBreakability(int x, int y)
		{
			if (Main.tile[x, y] == null)
			{
				Main.tile[x, y] = new Tile();
			}
			Tile tile = Main.tile[x, y];
			if (y >= 1 && y <= Main.maxTilesY - 1)
			{
				if (Main.tile[x, y - 1] == null)
				{
					Main.tile[x, y - 1] = new Tile();
				}
				if (Main.tile[x, y + 1] == null)
				{
					Main.tile[x, y + 1] = new Tile();
				}
				Tile tile2 = Main.tile[x, y - 1];
				Tile tile3 = Main.tile[x, y + 1];
				if (tile3 != null && tile3.active() && WorldGen.IsLockedDoor(x, y + 1))
				{
					return 2;
				}
				if (!Main.tileSolid[(int)tile.type] && !Main.tileSolidTop[(int)tile.type])
				{
					return 0;
				}
				if (tile2.active())
				{
					if ((TileID.Sets.PreventsTileRemovalIfOnTopOfIt[(int)tile2.type] && tile.type != tile2.type) | WorldGen.IsLockedDoor(x, y - 1) | (tile2.type == 77 && tile.type != 77 && !Main.hardMode) | (WorldGen.IsAContainer(tile2) && !WorldGen.IsAContainer(tile)))
					{
						if (TileID.Sets.IsATreeTrunk[(int)tile2.type])
						{
							if ((tile2.frameX == 66 && tile2.frameY >= 0 && tile2.frameY <= 44) || (tile2.frameX == 88 && tile2.frameY >= 66 && tile2.frameY <= 110) || tile2.frameY >= 198)
							{
								return 0;
							}
							return 2;
						}
						else
						{
							if (tile2.type != 323)
							{
								return 2;
							}
							if (tile2.frameX == 66 || tile2.frameX == 220)
							{
								return 2;
							}
							return 0;
						}
					}
					else
					{
						if (tile2.type == 80 && tile2.type != tile.type)
						{
							int num = (int)(tile2.frameX / 18);
							if (num <= 1 || num - 4 <= 1)
							{
								return 2;
							}
						}
						if (tile.type == 10 && WorldGen.IsLockedDoor(tile))
						{
							return 1;
						}
						if (TileID.Sets.Boulders[(int)tile.type])
						{
							if (WorldGen.CheckBoulderChest(x, y))
							{
								return 1;
							}
							return 0;
						}
					}
				}
				if (tile.type == 235)
				{
					int frameX = (int)tile.frameX;
					int num2 = x - frameX % 54 / 18;
					for (int i = 0; i < 3; i++)
					{
						if (Main.tile[num2 + i, y - 1].active() && WorldGen.IsAContainer(Main.tile[num2 + i, y - 1]))
						{
							return 2;
						}
					}
				}
			}
			return 0;
		}

		// Token: 0x06000FB1 RID: 4017 RVA: 0x00452B38 File Offset: 0x00450D38
		public static bool CheckTileBreakability2_ShouldTileSurvive(int x, int y)
		{
			if (Main.netMode == 1)
			{
				return false;
			}
			if (Main.tile[x, y] == null)
			{
				Main.tile[x, y] = new Tile();
			}
			Tile tile = Main.tile[x, y];
			if (TileID.Sets.BasicChest[(int)tile.type])
			{
				int i = (int)(tile.frameX / 18);
				int y2 = y - (int)(tile.frameY / 18);
				while (i > 1)
				{
					i -= 2;
				}
				i = x - i;
				if (!Chest.DestroyChest(i, y2))
				{
					return true;
				}
			}
			if (tile.type == 88)
			{
				int num = (int)(tile.frameX / 18);
				int y3 = y - (int)(tile.frameY / 18);
				num %= 3;
				num = x - num;
				if (!Chest.DestroyChest(num, y3))
				{
					return true;
				}
			}
			if (tile.type == 470)
			{
				return !TEDisplayDoll.IsBreakable(x, y);
			}
			return tile.type == 475 && !TEHatRack.IsBreakable(x, y);
		}

		// Token: 0x06000FB2 RID: 4018 RVA: 0x00452C20 File Offset: 0x00450E20
		public static bool ReplaceWall(int x, int y, ushort targetWall)
		{
			if (targetWall >= WallID.Count)
			{
				return false;
			}
			Tile tile = Main.tile[x, y];
			if (tile.wall == 0 || targetWall == 0)
			{
				return false;
			}
			if (WorldGen.KillWall_CheckFailure(false, tile))
			{
				return false;
			}
			int num = 10;
			for (int i = 0; i < num; i++)
			{
				WorldGen.KillWall_MakeWallDust(x, y, tile);
			}
			WorldGen.KillWall_PlaySounds(x, y, tile);
			WorldGen.KillWall_DropItems(x, y, tile);
			tile.wall = targetWall;
			tile.ClearWallPaintAndCoating();
			WorldGen.SquareWallFrame(x, y, true);
			return true;
		}

		// Token: 0x06000FB3 RID: 4019 RVA: 0x00452C9C File Offset: 0x00450E9C
		public static bool ReplaceTile(int x, int y, ushort targetType, int targetStyle)
		{
			Tile tileSafely = Framing.GetTileSafely(x, y);
			if (!WorldGen.WouldTileReplacementWork(targetType, x, y))
			{
				return false;
			}
			if (!WorldGen.IsTileReplacable(x, y))
			{
				return false;
			}
			WorldGen.MoveReplaceTileAnchor(ref x, ref y, targetType, tileSafely);
			int num = WorldGen.KillTile_GetTileDustAmount(false, tileSafely);
			for (int i = 0; i < num; i++)
			{
				WorldGen.KillTile_MakeTileDust(x, y, tileSafely);
			}
			WorldGen.KillTile_PlaySounds(x, y, false, tileSafely);
			WorldGen.KillTile_DropItems(x, y, tileSafely, true);
			WorldGen.AttemptFossilShattering(x, y, tileSafely, false);
			WorldGen.ReplaceTIle_DoActualReplacement(targetType, targetStyle, x, y, tileSafely);
			return true;
		}

		// Token: 0x06000FB4 RID: 4020 RVA: 0x00452D18 File Offset: 0x00450F18
		private static void ReplaceTIle_DoActualReplacement(ushort targetType, int targetStyle, int topLeftX, int topLeftY, Tile t)
		{
			if (TileID.Sets.BasicChest[(int)targetType])
			{
				if (WorldGen.IsChestRigged(topLeftX, topLeftY) && Main.netMode != 1)
				{
					Wiring.HitSwitch(topLeftX, topLeftY);
					NetMessage.SendData(59, -1, -1, null, topLeftX, (float)topLeftY, 0f, 0f, 0, 0, 0);
				}
				WorldGen.ReplaceTile_DoActualReplacement_Area(targetType, targetStyle, topLeftX, topLeftY, 2, 2);
				return;
			}
			if (TileID.Sets.BasicDresser[(int)targetType])
			{
				WorldGen.ReplaceTile_DoActualReplacement_Area(targetType, targetStyle, topLeftX, topLeftY, 3, 2);
				return;
			}
			if (targetType == 215)
			{
				WorldGen.ReplaceTile_DoActualReplacement_Area(targetType, targetStyle, topLeftX, topLeftY, 3, 2);
				return;
			}
			WorldGen.ReplaceTile_DoActualReplacement_Single(targetType, targetStyle, topLeftX, topLeftY, t);
		}

		// Token: 0x06000FB5 RID: 4021 RVA: 0x00452DA0 File Offset: 0x00450FA0
		private static void ReplaceTile_DoActualReplacement_Single(ushort targetType, int targetStyle, int topLeftX, int topLeftY, Tile t)
		{
			WorldGen.ReplaceTile_EliminateNaturalExtras(topLeftX, topLeftY);
			int type = (int)t.type;
			t.type = targetType;
			if (TileID.Sets.Platforms[(int)t.type])
			{
				t.frameY = (short)(targetStyle * 18);
			}
			if (t.type == 4)
			{
				t.frameY = (short)(targetStyle * 22);
			}
			t.ClearBlockPaintAndCoating();
			bool flag = !WorldGen.CanPoundTile(topLeftX, topLeftY);
			if (TileID.Sets.Platforms[type] && TileID.Sets.Platforms[(int)t.type])
			{
				flag = false;
			}
			if (flag)
			{
				t.slope(0);
				t.halfBrick(false);
			}
			if (Main.tenthAnniversaryWorld && !Main.remixWorld && (targetType == 53 || targetType == 396 || targetType == 397))
			{
				t.color(7);
			}
			WorldGen.SquareTileFrame(topLeftX, topLeftY, true);
		}

		// Token: 0x06000FB6 RID: 4022 RVA: 0x00452E68 File Offset: 0x00451068
		private static void ReplaceTile_EliminateNaturalExtras(int x, int y)
		{
			if (WorldGen.InWorld(x, y, 2))
			{
				if (Main.tile[x, y - 1] != null && Main.tile[x, y - 1].active() && (TileID.Sets.ReplaceTileBreakUp[(int)Main.tile[x, y - 1].type] || (Main.tile[x, y - 1].type == 165 && (Main.tile[x, y - 1].frameY == 36 || Main.tile[x, y - 1].frameY == 54 || Main.tile[x, y - 1].frameY == 90))))
				{
					WorldGen.KillTile(x, y - 1, false, false, false);
				}
				if (Main.tile[x, y + 1] != null && Main.tile[x, y + 1].active() && (TileID.Sets.ReplaceTileBreakDown[(int)Main.tile[x, y + 1].type] || (Main.tile[x, y + 1].type == 165 && (Main.tile[x, y + 1].frameY == 0 || Main.tile[x, y + 1].frameY == 18 || Main.tile[x, y + 1].frameY == 72))))
				{
					WorldGen.KillTile(x, y + 1, false, false, false);
				}
			}
		}

		// Token: 0x06000FB7 RID: 4023 RVA: 0x00452FE4 File Offset: 0x004511E4
		private static void ReplaceTile_DoActualReplacement_Area(ushort targetType, int targetStyle, int topLeftX, int topLeftY, int areaSizeX, int areaSizeY)
		{
			for (int i = 0; i < areaSizeX; i++)
			{
				for (int j = 0; j < areaSizeY; j++)
				{
					Tile tile = Main.tile[topLeftX + i, topLeftY + j];
					tile.type = targetType;
					tile.frameX = (short)(targetStyle * (areaSizeX * 18) + i * 18);
					tile.frameY = (short)(j * 18);
					tile.ClearBlockPaintAndCoating();
				}
			}
			for (int k = 0; k < areaSizeX; k++)
			{
				for (int l = 0; l < areaSizeY; l++)
				{
					WorldGen.SquareTileFrame(topLeftX + k, topLeftY + l, true);
				}
			}
		}

		// Token: 0x06000FB8 RID: 4024 RVA: 0x0045306C File Offset: 0x0045126C
		private static void MoveReplaceTileAnchor(ref int x, ref int y, ushort targetType, Tile t)
		{
			if (TileID.Sets.BasicChest[(int)t.type])
			{
				x -= (int)(t.frameX % 36 / 18);
				y -= (int)(t.frameY % 36 / 18);
			}
			if (TileID.Sets.BasicDresser[(int)t.type])
			{
				x -= (int)(t.frameX % 54 / 18);
				y -= (int)(t.frameY % 36 / 18);
			}
			if (t.type == 215)
			{
				x -= (int)(t.frameX % 54 / 18);
				y -= (int)(t.frameY % 36 / 18);
			}
		}

		// Token: 0x06000FB9 RID: 4025 RVA: 0x00453108 File Offset: 0x00451308
		public static bool WouldTileReplacementBeBlockedByLiquid(int x, int y, int liquidType)
		{
			return (Main.tile[x - 1, y].liquid > 0 && (int)Main.tile[x - 1, y].liquidType() == liquidType) || (Main.tile[x + 1, y].liquid > 0 && (int)Main.tile[x + 1, y].liquidType() == liquidType) || (Main.tile[x, y - 1].liquid > 0 && (int)Main.tile[x, y - 1].liquidType() == liquidType);
		}

		// Token: 0x06000FBA RID: 4026 RVA: 0x004531A0 File Offset: 0x004513A0
		public static bool WouldTileReplacementWork(ushort attemptingToReplaceWith, int x, int y)
		{
			Tile tile = Main.tile[x, y];
			if (attemptingToReplaceWith >= TileID.Count)
			{
				return false;
			}
			if (TileID.Sets.Conversion.Grass[(int)attemptingToReplaceWith] || attemptingToReplaceWith == 633)
			{
				return false;
			}
			if (Main.tileRope[(int)tile.type] && WorldGen.InWorld(x, y, 2))
			{
				Tile tile2 = Main.tile[x - 1, y];
				Tile tile3 = Main.tile[x + 1, y];
				if (attemptingToReplaceWith == 314 && tile2 != null && tile3 != null && ((tile2.active() && tile2.type == 314) || (tile3.active() && tile3.type == 314)))
				{
					return true;
				}
				if (TileID.Sets.Platforms[(int)attemptingToReplaceWith] && tile2 != null && tile3 != null && ((tile2.active() && TileID.Sets.Platforms[(int)tile2.type]) || (tile3.active() && TileID.Sets.Platforms[(int)tile3.type])))
				{
					return true;
				}
			}
			bool flag = !WorldGen.ReplaceTile_IsValidSolid((int)attemptingToReplaceWith) || !WorldGen.ReplaceTile_IsValidSolid((int)tile.type);
			bool flag2 = !WorldGen.ReplaceTile_IsValidTorch((int)attemptingToReplaceWith) || !WorldGen.ReplaceTile_IsValidTorch((int)tile.type);
			bool flag3 = !WorldGen.ReplaceTile_IsValidCampfire((int)attemptingToReplaceWith) || !WorldGen.ReplaceTile_IsValidCampfire((int)tile.type);
			bool flag4 = !WorldGen.ReplaceTile_IsValidPlatform((int)attemptingToReplaceWith) || !WorldGen.ReplaceTile_IsValidPlatform((int)tile.type);
			bool flag5 = (!WorldGen.ReplaceTile_IsValidSolid((int)attemptingToReplaceWith) && !WorldGen.ReplaceTile_IsValidPlatform((int)attemptingToReplaceWith)) || (!WorldGen.ReplaceTile_IsValidSolid((int)tile.type) && !WorldGen.ReplaceTile_IsValidPlatform((int)tile.type));
			bool flag6 = !WorldGen.ReplaceTile_IsValidChest((int)attemptingToReplaceWith) || !WorldGen.ReplaceTile_IsValidChest((int)tile.type) || Chest.IsLocked(tile);
			bool flag7 = !WorldGen.ReplaceTile_IsValidDresser((int)attemptingToReplaceWith) || !WorldGen.ReplaceTile_IsValidDresser((int)tile.type);
			return !flag4 || !flag2 || !flag3 || !flag || !flag5 || !flag6 || !flag7;
		}

		// Token: 0x06000FBB RID: 4027 RVA: 0x0045337F File Offset: 0x0045157F
		private static bool ReplaceTile_IsValidSolid(int type)
		{
			return Main.tileSolid[type] && !Main.tileSolidTop[type] && (Main.tileRope[type] || !Main.tileFrameImportant[type]);
		}

		// Token: 0x06000FBC RID: 4028 RVA: 0x004533AA File Offset: 0x004515AA
		private static bool ReplaceTile_IsValidTorch(int type)
		{
			return type == 4;
		}

		// Token: 0x06000FBD RID: 4029 RVA: 0x004533B0 File Offset: 0x004515B0
		private static bool ReplaceTile_IsValidCampfire(int type)
		{
			return type == 215;
		}

		// Token: 0x06000FBE RID: 4030 RVA: 0x004533BA File Offset: 0x004515BA
		private static bool ReplaceTile_IsValidChest(int type)
		{
			return TileID.Sets.BasicChest[type];
		}

		// Token: 0x06000FBF RID: 4031 RVA: 0x004533C3 File Offset: 0x004515C3
		private static bool ReplaceTile_IsValidDresser(int type)
		{
			return TileID.Sets.BasicDresser[type];
		}

		// Token: 0x06000FC0 RID: 4032 RVA: 0x004533CC File Offset: 0x004515CC
		private static bool ReplaceTile_IsValidPlatform(int type)
		{
			return TileID.Sets.Platforms[type];
		}

		// Token: 0x06000FC1 RID: 4033 RVA: 0x004533D8 File Offset: 0x004515D8
		public static bool GetAshTreeFoliageData(int i, int j, int xoffset, ref int treeFrame, ref int treeStyle, out int floorY, out int topTextureFrameWidth, out int topTextureFrameHeight)
		{
			Main.tile[i, j];
			int num = i + xoffset;
			topTextureFrameWidth = 116;
			topTextureFrameHeight = 96;
			floorY = j;
			for (int k = 0; k < 100; k++)
			{
				floorY = j + k;
				Tile tile = Main.tile[num, floorY];
				if (tile == null)
				{
					return false;
				}
				if (tile.type == 633)
				{
					treeStyle = 31;
					return true;
				}
			}
			return false;
		}

		// Token: 0x06000FC2 RID: 4034 RVA: 0x00453440 File Offset: 0x00451640
		public static bool GetVanityTreeFoliageData(int i, int j, int xoffset, ref int treeFrame, ref int treeStyle, out int floorY, out int topTextureFrameWidth, out int topTextureFrameHeight)
		{
			Tile tile = Main.tile[i, j];
			int num = i + xoffset;
			topTextureFrameWidth = 118;
			topTextureFrameHeight = 96;
			floorY = j;
			for (int k = 0; k < 100; k++)
			{
				floorY = j + k;
				Tile tile2 = Main.tile[num, floorY];
				if (tile2 == null)
				{
					return false;
				}
				if (TileID.Sets.Conversion.Grass[(int)tile2.type])
				{
					ushort type = tile.type;
					if (type == 596)
					{
						treeStyle = 29;
						return true;
					}
					if (type == 616)
					{
						treeStyle = 30;
						return true;
					}
				}
			}
			return false;
		}

		// Token: 0x06000FC3 RID: 4035 RVA: 0x004534CC File Offset: 0x004516CC
		public static bool GetGemTreeFoliageData(int i, int j, int xoffset, ref int treeFrame, ref int treeStyle, out int floorY, out int topTextureFrameWidth, out int topTextureFrameHeight)
		{
			Tile tile = Main.tile[i, j];
			int num = i + xoffset;
			topTextureFrameWidth = 116;
			topTextureFrameHeight = 96;
			floorY = j;
			WorldGen.GrowTreeSettings growTreeSettings;
			if (!WorldGen.GrowTreeSettings.Profiles.TryGetFromTreeId((int)tile.type, out growTreeSettings))
			{
				return false;
			}
			for (int k = 0; k < 100; k++)
			{
				floorY = j + k;
				Tile tile2 = Main.tile[num, floorY];
				if (tile2 == null)
				{
					return false;
				}
				if (growTreeSettings.GroundTest((int)tile2.type))
				{
					switch (tile.type)
					{
					case 583:
						treeStyle = 22;
						return true;
					case 584:
						treeStyle = 23;
						return true;
					case 585:
						treeStyle = 24;
						return true;
					case 586:
						treeStyle = 25;
						return true;
					case 587:
						treeStyle = 26;
						return true;
					case 588:
						treeStyle = 27;
						return true;
					case 589:
						treeStyle = 28;
						return true;
					}
				}
			}
			return false;
		}

		// Token: 0x06000FC4 RID: 4036 RVA: 0x004535B4 File Offset: 0x004517B4
		public static bool GetCommonTreeFoliageData(int i, int j, int xoffset, ref int treeFrame, ref int treeStyle, out int floorY, out int topTextureFrameWidth, out int topTextureFrameHeight)
		{
			Main.tile[i, j];
			int num = i + xoffset;
			topTextureFrameWidth = 80;
			topTextureFrameHeight = 80;
			floorY = j;
			int k = 0;
			while (k < 100)
			{
				floorY = j + k;
				Tile tile = Main.tile[num, floorY];
				if (tile == null)
				{
					return false;
				}
				ushort type = tile.type;
				if (type > 109)
				{
					if (type <= 477)
					{
						if (type == 147)
						{
							treeStyle = 4;
							int treeStyle2 = WorldGen.TreeTops.GetTreeStyle(6);
							if (treeStyle2 == 0)
							{
								treeStyle = 12;
								if (i % 10 == 0)
								{
									treeStyle = 18;
								}
							}
							if (treeStyle2 == 2 || treeStyle2 == 3 || treeStyle2 == 32 || treeStyle2 == 4 || treeStyle2 == 42 || treeStyle2 == 5 || treeStyle2 == 7)
							{
								if (treeStyle2 % 2 == 0)
								{
									if (i < Main.maxTilesX / 2)
									{
										treeStyle = 16;
									}
									else
									{
										treeStyle = 17;
									}
								}
								else if (i > Main.maxTilesX / 2)
								{
									treeStyle = 16;
								}
								else
								{
									treeStyle = 17;
								}
							}
							return true;
						}
						if (type != 199)
						{
							if (type != 477)
							{
								goto IL_2B5;
							}
							goto IL_E4;
						}
					}
					else
					{
						if (type == 492)
						{
							goto IL_226;
						}
						if (type == 661)
						{
							goto IL_15E;
						}
						if (type != 662)
						{
							goto IL_2B5;
						}
					}
					treeStyle = 5;
					return true;
				}
				if (type <= 23)
				{
					if (type == 2)
					{
						goto IL_E4;
					}
					if (type == 23)
					{
						goto IL_15E;
					}
				}
				else
				{
					if (type == 60)
					{
						topTextureFrameHeight = 96;
						topTextureFrameWidth = 114;
						treeStyle = 2;
						int treeStyle2 = WorldGen.TreeTops.GetTreeStyle(5);
						if (treeStyle2 == 1)
						{
							treeStyle = 11;
							topTextureFrameWidth = 116;
						}
						if ((double)floorY > Main.worldSurface)
						{
							treeStyle = 13;
							topTextureFrameWidth = 116;
						}
						return true;
					}
					if (type == 70)
					{
						treeStyle = 14;
						return true;
					}
					if (type == 109)
					{
						goto IL_226;
					}
				}
				IL_2B5:
				k++;
				continue;
				IL_E4:
				int treeStyle3;
				if (num <= Main.treeX[0])
				{
					treeStyle3 = WorldGen.TreeTops.GetTreeStyle(0);
				}
				else if (num <= Main.treeX[1])
				{
					treeStyle3 = WorldGen.TreeTops.GetTreeStyle(1);
				}
				else if (num <= Main.treeX[2])
				{
					treeStyle3 = WorldGen.TreeTops.GetTreeStyle(2);
				}
				else
				{
					treeStyle3 = WorldGen.TreeTops.GetTreeStyle(3);
				}
				if (treeStyle3 == 0)
				{
					treeStyle = 0;
				}
				else if (treeStyle3 == 5)
				{
					treeStyle = 10;
				}
				else
				{
					treeStyle = 5 + treeStyle3;
				}
				return true;
				IL_15E:
				treeStyle = 1;
				return true;
				IL_226:
				topTextureFrameHeight = 140;
				int hollowTreeFoliageStyle = WorldGen.GetHollowTreeFoliageStyle();
				treeStyle = hollowTreeFoliageStyle;
				if (hollowTreeFoliageStyle == 19)
				{
					topTextureFrameWidth = 120;
				}
				if (hollowTreeFoliageStyle == 20)
				{
					treeStyle = 20;
					if (i % 6 == 1)
					{
						treeFrame += 3;
					}
					else if (i % 6 == 2)
					{
						treeFrame += 6;
					}
					else if (i % 6 == 3)
					{
						treeFrame += 9;
					}
					else if (i % 6 == 4)
					{
						treeFrame += 12;
					}
					else if (i % 6 == 5)
					{
						treeFrame += 15;
					}
				}
				else if (i % 3 == 1)
				{
					treeFrame += 3;
				}
				else if (i % 3 == 2)
				{
					treeFrame += 6;
				}
				return true;
			}
			return false;
		}

		// Token: 0x06000FC5 RID: 4037 RVA: 0x00453884 File Offset: 0x00451A84
		public static int GetHollowTreeFoliageStyle()
		{
			WorldGen.TreeTops.GetTreeStyle(7);
			int num = WorldGen.hallowBG;
			if (num - 2 <= 1)
			{
				return 20;
			}
			if (num != 4)
			{
				return 3;
			}
			return 19;
		}

		// Token: 0x06000FC6 RID: 4038 RVA: 0x004538B4 File Offset: 0x00451AB4
		public static int GetTreeFrame(Tile t)
		{
			if (t.frameY == 220)
			{
				return 1;
			}
			if (t.frameY == 242)
			{
				return 2;
			}
			return 0;
		}

		// Token: 0x06000FC7 RID: 4039 RVA: 0x004538D8 File Offset: 0x00451AD8
		public static TreeTypes GetTreeType(int tileType)
		{
			if (tileType <= 112)
			{
				if (tileType <= 53)
				{
					if (tileType != 2)
					{
						if (tileType == 23)
						{
							return TreeTypes.Corrupt;
						}
						if (tileType != 53)
						{
							return TreeTypes.None;
						}
						return TreeTypes.Palm;
					}
				}
				else if (tileType <= 70)
				{
					if (tileType == 60)
					{
						return TreeTypes.Jungle;
					}
					if (tileType != 70)
					{
						return TreeTypes.None;
					}
					return TreeTypes.Mushroom;
				}
				else
				{
					if (tileType == 109)
					{
						return TreeTypes.Hallowed;
					}
					if (tileType != 112)
					{
						return TreeTypes.None;
					}
					return TreeTypes.PalmCorrupt;
				}
			}
			else if (tileType <= 199)
			{
				if (tileType == 116)
				{
					return TreeTypes.PalmHallowed;
				}
				if (tileType == 147)
				{
					return TreeTypes.Snow;
				}
				if (tileType != 199)
				{
					return TreeTypes.None;
				}
				return TreeTypes.Crimson;
			}
			else if (tileType <= 477)
			{
				if (tileType == 234)
				{
					return TreeTypes.PalmCrimson;
				}
				if (tileType != 477)
				{
					return TreeTypes.None;
				}
			}
			else
			{
				if (tileType == 492)
				{
					return TreeTypes.Hallowed;
				}
				if (tileType != 633)
				{
					return TreeTypes.None;
				}
				return TreeTypes.Ash;
			}
			return TreeTypes.Forest;
		}

		// Token: 0x06000FC8 RID: 4040 RVA: 0x00453988 File Offset: 0x00451B88
		public static bool IsThisAMushroomTree(int i, int j)
		{
			int num;
			int num2;
			WorldGen.GetTreeBottom(i, j, out num, out num2);
			return WorldGen.GetTreeType((int)Main.tile[num, num2].type) == TreeTypes.Mushroom;
		}

		// Token: 0x06000FC9 RID: 4041 RVA: 0x004539BC File Offset: 0x00451BBC
		public static void ResetTreeShakes()
		{
			WorldGen.numTreeShakes = 0;
		}

		// Token: 0x06000FCA RID: 4042 RVA: 0x004539C4 File Offset: 0x00451BC4
		private static void ShakeTree(int i, int j)
		{
			if (WorldGen.numTreeShakes == WorldGen.maxTreeShakes)
			{
				return;
			}
			int num;
			int num2;
			WorldGen.GetTreeBottom(i, j, out num, out num2);
			int num3 = num2;
			TreeTypes treeType = WorldGen.GetTreeType((int)Main.tile[num, num2].type);
			if (treeType == TreeTypes.None)
			{
				return;
			}
			for (int k = 0; k < WorldGen.numTreeShakes; k++)
			{
				if (WorldGen.treeShakeX[k] == num && WorldGen.treeShakeY[k] == num2)
				{
					return;
				}
			}
			WorldGen.treeShakeX[WorldGen.numTreeShakes] = num;
			WorldGen.treeShakeY[WorldGen.numTreeShakes] = num2;
			WorldGen.numTreeShakes++;
			num2--;
			while (num2 > 10 && Main.tile[num, num2].active() && TileID.Sets.IsShakeable[(int)Main.tile[num, num2].type])
			{
				num2--;
			}
			num2++;
			if (!WorldGen.IsTileALeafyTreeTop(num, num2) || Collision.SolidTiles(num - 2, num + 2, num2 - 2, num2 + 2))
			{
				return;
			}
			if (Main.getGoodWorld && WorldGen.genRand.Next(17) == 0)
			{
				Projectile.NewProjectile(WorldGen.GetProjectileSource_ShakeTree(num, num2), (float)(num * 16), (float)(num2 * 16), (float)Main.rand.Next(-100, 101) * 0.002f, 0f, 28, 0, 0f, Main.myPlayer, 16f, 16f, 0f);
			}
			else if (WorldGen.genRand.Next(300) == 0 && treeType == TreeTypes.Forest)
			{
				Item.NewItem(WorldGen.GetItemSource_ShakeTree(num, num2), num * 16, num2 * 16, 16, 16, 832, 1, false, 0, false, false);
			}
			else if (WorldGen.genRand.Next(300) == 0 && treeType == TreeTypes.Forest)
			{
				Item.NewItem(WorldGen.GetItemSource_ShakeTree(num, num2), num * 16, num2 * 16, 16, 16, 933, 1, false, 0, false, false);
			}
			else if (WorldGen.genRand.Next(200) == 0 && treeType == TreeTypes.Jungle)
			{
				Item.NewItem(WorldGen.GetItemSource_ShakeTree(num, num2), num * 16, num2 * 16, 16, 16, 3360, 1, false, 0, false, false);
			}
			else if (WorldGen.genRand.Next(200) == 0 && treeType == TreeTypes.Jungle)
			{
				Item.NewItem(WorldGen.GetItemSource_ShakeTree(num, num2), num * 16, num2 * 16, 16, 16, 3361, 1, false, 0, false, false);
			}
			else if (WorldGen.genRand.Next(1000) == 0 && treeType == TreeTypes.Forest)
			{
				Item.NewItem(WorldGen.GetItemSource_ShakeTree(num, num2), num * 16, num2 * 16, 16, 16, 4366, 1, false, 0, false, false);
			}
			else if (WorldGen.genRand.Next(7) == 0 && (treeType == TreeTypes.Forest || treeType == TreeTypes.Snow || treeType == TreeTypes.Hallowed || treeType == TreeTypes.Ash))
			{
				Item.NewItem(WorldGen.GetItemSource_ShakeTree(num, num2), num * 16, num2 * 16, 16, 16, 27, WorldGen.genRand.Next(1, 3), false, 0, false, false);
			}
			else if (WorldGen.genRand.Next(8) == 0 && treeType == TreeTypes.Mushroom)
			{
				Item.NewItem(WorldGen.GetItemSource_ShakeTree(num, num2), num * 16, num2 * 16, 16, 16, 194, WorldGen.genRand.Next(1, 2), false, 0, false, false);
			}
			else if (WorldGen.genRand.Next(35) == 0 && Main.halloween)
			{
				Item.NewItem(WorldGen.GetItemSource_ShakeTree(num, num2), num * 16, num2 * 16, 16, 16, 1809, WorldGen.genRand.Next(1, 3), false, 0, false, false);
			}
			else if (WorldGen.genRand.Next(12) == 0)
			{
				int type = 0;
				int num4;
				int num5;
				int num6;
				WorldGen.KillTile_GetItemDrops(i, j, Main.tile[i, j], out type, out num4, out num5, out num6, false);
				Item.NewItem(WorldGen.GetItemSource_FromTreeShake(num, num2), num * 16, num2 * 16, 16, 16, type, WorldGen.genRand.Next(1, 4), false, 0, false, false);
			}
			else if (WorldGen.genRand.Next(20) == 0)
			{
				int type2 = 71;
				int num7 = WorldGen.genRand.Next(50, 100);
				if (WorldGen.genRand.Next(30) == 0)
				{
					type2 = 73;
					num7 = 1;
					if (WorldGen.genRand.Next(5) == 0)
					{
						num7++;
					}
					if (WorldGen.genRand.Next(10) == 0)
					{
						num7++;
					}
				}
				else if (WorldGen.genRand.Next(10) == 0)
				{
					type2 = 72;
					num7 = WorldGen.genRand.Next(1, 21);
					if (WorldGen.genRand.Next(3) == 0)
					{
						num7 += WorldGen.genRand.Next(1, 21);
					}
					if (WorldGen.genRand.Next(4) == 0)
					{
						num7 += WorldGen.genRand.Next(1, 21);
					}
				}
				Item.NewItem(WorldGen.GetItemSource_FromTreeShake(num, num2), num * 16, num2 * 16, 16, 16, type2, num7, false, 0, false, false);
			}
			else if (WorldGen.genRand.Next(15) == 0 && (treeType == TreeTypes.Forest || treeType == TreeTypes.Hallowed))
			{
				int num8 = WorldGen.genRand.Next(5);
				int type3;
				if (num8 == 0)
				{
					type3 = 74;
				}
				else if (num8 == 1)
				{
					type3 = 297;
				}
				else if (num8 == 2)
				{
					type3 = 298;
				}
				else if (num8 == 3)
				{
					type3 = 299;
				}
				else
				{
					type3 = 538;
				}
				if (Player.GetClosestRollLuck(num, num2, NPC.goldCritterChance) == 0f)
				{
					if (WorldGen.genRand.Next(2) == 0)
					{
						type3 = 442;
					}
					else
					{
						type3 = 539;
					}
				}
				NPC.NewNPC(new EntitySource_ShakeTree(num, num2), num * 16, num2 * 16, type3, 0, 0f, 0f, 0f, 0f, 255);
			}
			else if (WorldGen.genRand.Next(50) == 0 && treeType == TreeTypes.Hallowed && !Main.dayTime)
			{
				int type4 = (int)Main.rand.NextFromList(new short[]
				{
					583,
					584,
					585
				});
				if (Main.tenthAnniversaryWorld && Main.rand.Next(4) != 0)
				{
					type4 = 583;
				}
				NPC.NewNPC(new EntitySource_ShakeTree(num, num2), num * 16, num2 * 16, type4, 0, 0f, 0f, 0f, 0f, 255);
			}
			else if (WorldGen.genRand.Next(50) == 0 && treeType == TreeTypes.Forest && !Main.dayTime)
			{
				NPC npc = Main.npc[NPC.NewNPC(new EntitySource_ShakeTree(num, num2), num * 16, num2 * 16, 611, 0, 0f, 0f, 0f, 0f, 255)];
				npc.velocity.Y = 1f;
				npc.netUpdate = true;
			}
			else if (WorldGen.genRand.Next(50) == 0 && treeType == TreeTypes.Jungle && Main.dayTime)
			{
				NPC npc2 = Main.npc[NPC.NewNPC(new EntitySource_ShakeTree(num, num2), num * 16, num2 * 16, (int)Main.rand.NextFromList(new short[]
				{
					671,
					672,
					673,
					674,
					675
				}), 0, 0f, 0f, 0f, 0f, 255)];
				npc2.velocity.Y = 1f;
				npc2.netUpdate = true;
			}
			else if (WorldGen.genRand.Next(40) == 0 && treeType == TreeTypes.Forest && !Main.dayTime && Main.halloween)
			{
				NPC.NewNPC(new EntitySource_ShakeTree(num, num2), num * 16, num2 * 16, 301, 0, 0f, 0f, 0f, 0f, 255);
			}
			else if (WorldGen.genRand.Next(50) == 0 && (treeType == TreeTypes.Forest || treeType == TreeTypes.Hallowed))
			{
				for (int l = 0; l < 5; l++)
				{
					Point point = new Point(num + Main.rand.Next(-2, 2), num2 - 1 + Main.rand.Next(-2, 2));
					int type5;
					if (Player.GetClosestRollLuck(num, num2, NPC.goldCritterChance) == 0f)
					{
						type5 = 442;
					}
					else
					{
						type5 = (int)Main.rand.NextFromList(new short[]
						{
							74,
							297,
							298
						});
					}
					NPC npc3 = Main.npc[NPC.NewNPC(new EntitySource_ShakeTree(num, num2), point.X * 16, point.Y * 16, type5, 0, 0f, 0f, 0f, 0f, 255)];
					npc3.velocity = Main.rand.NextVector2CircularEdge(3f, 3f);
					npc3.netUpdate = true;
				}
			}
			else if (WorldGen.genRand.Next(40) == 0 && treeType == TreeTypes.Jungle)
			{
				for (int m = 0; m < 5; m++)
				{
					Point point2 = new Point(num + Main.rand.Next(-2, 2), num2 - 1 + Main.rand.Next(-2, 2));
					NPC npc4 = Main.npc[NPC.NewNPC(new EntitySource_ShakeTree(num, num2), point2.X * 16, point2.Y * 16, (int)Main.rand.NextFromList(new short[]
					{
						210,
						211
					}), 0, 0f, 0f, 0f, 0f, 255)];
					npc4.ai[1] = 65f;
					npc4.netUpdate = true;
				}
			}
			else if (WorldGen.genRand.Next(20) == 0 && (treeType == TreeTypes.Palm || treeType == TreeTypes.PalmCorrupt || treeType == TreeTypes.PalmCrimson || treeType == TreeTypes.PalmHallowed) && !WorldGen.IsPalmOasisTree(num))
			{
				NPC.NewNPC(new EntitySource_ShakeTree(num, num2), num * 16, num2 * 16, 603, 0, 0f, 0f, 0f, 0f, 255);
			}
			else if (WorldGen.genRand.Next(30) == 0 && (treeType == TreeTypes.Crimson || treeType == TreeTypes.PalmCrimson))
			{
				NPC.NewNPC(new EntitySource_ShakeTree(num, num2), num * 16 + 8, (num2 - 1) * 16, -22, 0, 0f, 0f, 0f, 0f, 255);
			}
			else if (WorldGen.genRand.Next(30) == 0 && (treeType == TreeTypes.Corrupt || treeType == TreeTypes.PalmCorrupt))
			{
				NPC.NewNPC(new EntitySource_ShakeTree(num, num2), num * 16 + 8, (num2 - 1) * 16, -11, 0, 0f, 0f, 0f, 0f, 255);
			}
			else if (WorldGen.genRand.Next(30) == 0 && treeType == TreeTypes.Jungle && !Main.dayTime)
			{
				NPC.NewNPC(new EntitySource_ShakeTree(num, num2), num * 16, num2 * 16, 51, 0, 0f, 0f, 0f, 0f, 255);
			}
			else if (WorldGen.genRand.Next(40) == 0 && treeType == TreeTypes.Jungle)
			{
				Projectile.NewProjectile(WorldGen.GetProjectileSource_ShakeTree(num, num2), (float)(num * 16 + 8), (float)((num2 - 1) * 16), 0f, 0f, 655, 0, 0f, Main.myPlayer, 0f, 0f, 0f);
			}
			else if (WorldGen.genRand.Next(20) == 0 && (treeType == TreeTypes.Forest || treeType == TreeTypes.Hallowed) && !Main.raining && !NPC.TooWindyForButterflies && Main.dayTime)
			{
				int type6 = 356;
				if (Player.GetClosestRollLuck(num, num2, NPC.goldCritterChance) == 0f)
				{
					type6 = 444;
				}
				NPC.NewNPC(new EntitySource_ShakeTree(num, num2), num * 16, num2 * 16, type6, 0, 0f, 0f, 0f, 0f, 255);
			}
			else if (WorldGen.genRand.Next(20) == 0 && treeType == TreeTypes.Ash && num2 > Main.maxTilesY - 250)
			{
				int num9 = WorldGen.genRand.Next(3);
				if (num9 == 0)
				{
					num9 = 654;
				}
				else if (num9 == 1)
				{
					num9 = 653;
				}
				else
				{
					num9 = 655;
				}
				NPC.NewNPC(new EntitySource_ShakeTree(num, num2), num * 16, num2 * 16, num9, 0, 0f, 0f, 0f, 0f, 255);
			}
			else if (Main.remixWorld && WorldGen.genRand.Next(20) == 0 && treeType == TreeTypes.Ash && num2 > Main.maxTilesY - 250)
			{
				Item.NewItem(WorldGen.GetItemSource_FromTreeShake(num, num2), num * 16, num2 * 16, 16, 16, 965, WorldGen.genRand.Next(20, 41), false, 0, false, false);
			}
			else if (WorldGen.genRand.Next(12) == 0 && treeType == TreeTypes.Forest)
			{
				int num10 = WorldGen.genRand.Next(5);
				int type7;
				if (num10 == 0)
				{
					type7 = 4009;
				}
				else if (num10 == 1)
				{
					type7 = 4293;
				}
				else if (num10 == 2)
				{
					type7 = 4282;
				}
				else if (num10 == 3)
				{
					type7 = 4290;
				}
				else
				{
					type7 = 4291;
				}
				Item.NewItem(WorldGen.GetItemSource_FromTreeShake(num, num2), num * 16, num2 * 16, 16, 16, type7, 1, false, 0, false, false);
			}
			else if (WorldGen.genRand.Next(12) == 0 && treeType == TreeTypes.Snow)
			{
				int type8;
				if (WorldGen.genRand.Next(2) == 0)
				{
					type8 = 4286;
				}
				else
				{
					type8 = 4295;
				}
				Item.NewItem(WorldGen.GetItemSource_FromTreeShake(num, num2), num * 16, num2 * 16, 16, 16, type8, 1, false, 0, false, false);
			}
			else if (WorldGen.genRand.Next(12) == 0 && treeType == TreeTypes.Jungle)
			{
				int type9;
				if (WorldGen.genRand.Next(2) == 0)
				{
					type9 = 4294;
				}
				else
				{
					type9 = 4292;
				}
				Item.NewItem(WorldGen.GetItemSource_FromTreeShake(num, num2), num * 16, num2 * 16, 16, 16, type9, 1, false, 0, false, false);
			}
			else if (WorldGen.genRand.Next(12) == 0 && (treeType == TreeTypes.Palm || treeType == TreeTypes.PalmCorrupt || treeType == TreeTypes.PalmCrimson || treeType == TreeTypes.PalmHallowed) && !WorldGen.IsPalmOasisTree(num))
			{
				int type10;
				if (WorldGen.genRand.Next(2) == 0)
				{
					type10 = 4283;
				}
				else
				{
					type10 = 4287;
				}
				Item.NewItem(WorldGen.GetItemSource_FromTreeShake(num, num2), num * 16, num2 * 16, 16, 16, type10, 1, false, 0, false, false);
			}
			else if (WorldGen.genRand.Next(12) == 0 && (treeType == TreeTypes.Corrupt || treeType == TreeTypes.PalmCorrupt))
			{
				int type11;
				if (WorldGen.genRand.Next(2) == 0)
				{
					type11 = 4284;
				}
				else
				{
					type11 = 4289;
				}
				Item.NewItem(WorldGen.GetItemSource_FromTreeShake(num, num2), num * 16, num2 * 16, 16, 16, type11, 1, false, 0, false, false);
			}
			else if (WorldGen.genRand.Next(12) == 0 && (treeType == TreeTypes.Hallowed || treeType == TreeTypes.PalmHallowed))
			{
				int type12;
				if (WorldGen.genRand.Next(2) == 0)
				{
					type12 = 4297;
				}
				else
				{
					type12 = 4288;
				}
				Item.NewItem(WorldGen.GetItemSource_FromTreeShake(num, num2), num * 16, num2 * 16, 16, 16, type12, 1, false, 0, false, false);
			}
			else if (WorldGen.genRand.Next(12) == 0 && (treeType == TreeTypes.Crimson || treeType == TreeTypes.PalmCrimson))
			{
				int type13;
				if (WorldGen.genRand.Next(2) == 0)
				{
					type13 = 4296;
				}
				else
				{
					type13 = 4285;
				}
				Item.NewItem(WorldGen.GetItemSource_FromTreeShake(num, num2), num * 16, num2 * 16, 16, 16, type13, 1, false, 0, false, false);
			}
			else if (WorldGen.genRand.Next(12) == 0 && treeType == TreeTypes.Ash)
			{
				int type14;
				if (WorldGen.genRand.Next(2) == 0)
				{
					type14 = 5277;
				}
				else
				{
					type14 = 5278;
				}
				Item.NewItem(WorldGen.GetItemSource_FromTreeShake(num, num2), num * 16, num2 * 16, 16, 16, type14, 1, false, 0, false, false);
			}
			int num11 = 0;
			int num12 = 0;
			int num13 = 0;
			WorldGen.GetTreeLeaf(num, Main.tile[num, num2], Main.tile[num, num3], ref num11, out num12, out num13);
			if (num13 != -1)
			{
				if (Main.netMode == 2)
				{
					NetMessage.SendData(112, -1, -1, null, 1, (float)num, (float)num2, 1f, num13, 0, 0);
				}
				if (Main.netMode == 0)
				{
					WorldGen.TreeGrowFX(num, num2, 1, num13, true);
				}
			}
		}

		// Token: 0x06000FCB RID: 4043 RVA: 0x00454930 File Offset: 0x00452B30
		private static void GetVineTop(int i, int j, out int x, out int y)
		{
			x = i;
			y = j;
			Tile tileSafely = Framing.GetTileSafely(x, y);
			if (TileID.Sets.IsVine[(int)tileSafely.type])
			{
				while (y > 20 && tileSafely.active() && TileID.Sets.IsVine[(int)tileSafely.type])
				{
					y--;
					tileSafely = Framing.GetTileSafely(x, y);
				}
			}
		}

		// Token: 0x06000FCC RID: 4044 RVA: 0x0045498C File Offset: 0x00452B8C
		public static void GetTreeBottom(int i, int j, out int x, out int y)
		{
			x = i;
			y = j;
			Tile tileSafely = Framing.GetTileSafely(x, y);
			if (tileSafely.type == 323)
			{
				while (y < Main.maxTilesY - 50)
				{
					if (tileSafely.active() && tileSafely.type != 323)
					{
						return;
					}
					y++;
					tileSafely = Framing.GetTileSafely(x, y);
				}
			}
			else
			{
				int num = (int)(tileSafely.frameX / 22);
				int num2 = (int)(tileSafely.frameY / 22);
				if (num == 3 && num2 <= 2)
				{
					x++;
				}
				else if (num == 4 && num2 >= 3 && num2 <= 5)
				{
					x--;
				}
				else if (num == 1 && num2 >= 6 && num2 <= 8)
				{
					x--;
				}
				else if (num == 2 && num2 >= 6 && num2 <= 8)
				{
					x++;
				}
				else if (num == 2 && num2 >= 9)
				{
					x++;
				}
				else if (num == 3 && num2 >= 9)
				{
					x--;
				}
				tileSafely = Framing.GetTileSafely(x, y);
				while (y < Main.maxTilesY - 50 && (!tileSafely.active() || TileID.Sets.IsATreeTrunk[(int)tileSafely.type] || tileSafely.type == 72))
				{
					y++;
					tileSafely = Framing.GetTileSafely(x, y);
				}
			}
		}

		// Token: 0x06000FCD RID: 4045 RVA: 0x00454AB8 File Offset: 0x00452CB8
		private static void AttemptFossilShattering(int i, int j, Tile tileCache, bool fail)
		{
			if (tileCache.type == 404 && Main.netMode != 1 && !WorldGen.fossilBreak)
			{
				WorldGen.fossilBreak = true;
				for (int k = i - 1; k <= i + 1; k++)
				{
					for (int l = j - 1; l <= j + 1; l++)
					{
						int maxValue = 15;
						if (!WorldGen.SolidTile(k, l + 1, false))
						{
							maxValue = 4;
						}
						else if (k == i && l == j - 1 && !fail)
						{
							maxValue = 4;
						}
						if ((k != i || l != j) && Main.tile[k, l].active() && Main.tile[k, l].type == 404 && WorldGen.genRand.Next(maxValue) == 0)
						{
							WorldGen.KillTile(k, l, false, false, true);
							if (Main.netMode == 2)
							{
								NetMessage.SendData(17, -1, -1, null, 0, (float)k, (float)l, 0f, 0, 0, 0);
							}
						}
					}
				}
				WorldGen.fossilBreak = false;
			}
		}

		// Token: 0x06000FCE RID: 4046 RVA: 0x00454BB0 File Offset: 0x00452DB0
		public static void KillTile(int i, int j, bool fail = false, bool effectOnly = false, bool noItem = false)
		{
			if (i >= 0 && j >= 0 && i < Main.maxTilesX && j < Main.maxTilesY)
			{
				Tile tile = Main.tile[i, j];
				if (tile == null)
				{
					tile = new Tile();
					Main.tile[i, j] = tile;
				}
				if (tile.active())
				{
					if (j >= 1 && Main.tile[i, j - 1] == null)
					{
						Main.tile[i, j - 1] = new Tile();
					}
					int num = WorldGen.CheckTileBreakability(i, j);
					if (num == 1)
					{
						fail = true;
					}
					if (num == 2)
					{
						return;
					}
					if (WorldGen.gen)
					{
						noItem = true;
					}
					if (!effectOnly && !WorldGen.stopDrops)
					{
						if (!noItem && FixExploitManEaters.SpotProtected(i, j))
						{
							return;
						}
						if (!Main.dedServ && !WorldGen.gen && !Main.gameMenu)
						{
							WorldGen.KillTile_PlaySounds(i, j, fail, tile);
						}
					}
					if (tile.type == 128 || tile.type == 269)
					{
						int num2 = i;
						int k = (int)tile.frameX;
						int l;
						for (l = (int)tile.frameX; l >= 100; l -= 100)
						{
						}
						while (l >= 36)
						{
							l -= 36;
						}
						if (l == 18)
						{
							k = (int)Main.tile[i - 1, j].frameX;
							num2--;
						}
						if (k >= 100)
						{
							int num3 = 0;
							while (k >= 100)
							{
								k -= 100;
								num3++;
							}
							short num4 = Main.tile[num2, j].frameY / 18;
							if (num4 == 0)
							{
								Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 16, 16, Item.headType[num3], 1, false, 0, false, false);
							}
							if (num4 == 1)
							{
								Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 16, 16, Item.bodyType[num3], 1, false, 0, false, false);
							}
							if (num4 == 2)
							{
								Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 16, 16, Item.legType[num3], 1, false, 0, false, false);
							}
							for (k = (int)Main.tile[num2, j].frameX; k >= 100; k -= 100)
							{
							}
							Main.tile[num2, j].frameX = (short)k;
						}
					}
					if (tile.type == 334)
					{
						int num5 = i;
						int m = (int)tile.frameX;
						int n = (int)tile.frameX;
						int num6 = 0;
						while (n >= 5000)
						{
							n -= 5000;
							num6++;
						}
						if (num6 != 0)
						{
							n = (num6 - 1) * 18;
						}
						n %= 54;
						if (n == 18)
						{
							m = (int)Main.tile[i - 1, j].frameX;
							num5--;
						}
						if (n == 36)
						{
							m = (int)Main.tile[i - 2, j].frameX;
							num5 -= 2;
						}
						if (m >= 5000)
						{
							int num7 = m % 5000;
							num7 -= 100;
							int num8 = (int)Main.tile[num5 + 1, j].frameX;
							if (num8 >= 25000)
							{
								num8 -= 25000;
							}
							else
							{
								num8 -= 10000;
							}
							if (Main.netMode != 1)
							{
								Item item = new Item();
								item.netDefaults(num7);
								item.Prefix(num8);
								int num9 = Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 16, 16, num7, 1, true, 0, false, false);
								item.position = Main.item[num9].position;
								Main.item[num9] = item;
								NetMessage.SendData(21, -1, -1, null, num9, 0f, 0f, 0f, 0, 0, 0);
							}
							m = (int)Main.tile[num5, j].frameX;
							int num10 = 0;
							while (m >= 5000)
							{
								m -= 5000;
								num10++;
							}
							if (num10 != 0)
							{
								m = (num10 - 1) * 18;
							}
							Main.tile[num5, j].frameX = (short)m;
							Main.tile[num5 + 1, j].frameX = (short)(m + 18);
						}
					}
					if (tile.type == 395)
					{
						int num11 = TEItemFrame.Find(i - (int)(tile.frameX % 36 / 18), j - (int)(tile.frameY % 36 / 18));
						if (num11 != -1 && ((TEItemFrame)TileEntity.ByID[num11]).item.stack > 0)
						{
							((TEItemFrame)TileEntity.ByID[num11]).DropItem();
							if (Main.netMode != 2)
							{
								Main.LocalPlayer.InterruptItemUsageIfOverTile(395);
							}
							return;
						}
					}
					if (tile.type == 471)
					{
						int num12 = TEWeaponsRack.Find(i - (int)(tile.frameX % 54 / 18), j - (int)(tile.frameY % 54 / 18));
						if (num12 != -1 && ((TEWeaponsRack)TileEntity.ByID[num12]).item.stack > 0)
						{
							((TEWeaponsRack)TileEntity.ByID[num12]).DropItem();
							if (Main.netMode != 2)
							{
								Main.LocalPlayer.InterruptItemUsageIfOverTile(471);
							}
							return;
						}
					}
					if (tile.type == 520)
					{
						int num13 = TEFoodPlatter.Find(i, j);
						if (num13 != -1 && ((TEFoodPlatter)TileEntity.ByID[num13]).item.stack > 0)
						{
							((TEFoodPlatter)TileEntity.ByID[num13]).DropItem();
							if (Main.netMode != 2)
							{
								Main.LocalPlayer.InterruptItemUsageIfOverTile(520);
							}
							return;
						}
					}
					if (tile.type == 470 && (WorldGen.CheckTileBreakability2_ShouldTileSurvive(i, j) || fail))
					{
						return;
					}
					if (tile.type == 475 && (WorldGen.CheckTileBreakability2_ShouldTileSurvive(i, j) || fail))
					{
						return;
					}
					int num14 = WorldGen.KillTile_GetTileDustAmount(fail, tile);
					for (int num15 = 0; num15 < num14; num15++)
					{
						WorldGen.KillTile_MakeTileDust(i, j, tile);
					}
					if (effectOnly)
					{
						return;
					}
					WorldGen.AttemptFossilShattering(i, j, tile, fail);
					if (fail)
					{
						if (Main.netMode != 1 && TileID.Sets.IsShakeable[(int)tile.type])
						{
							WorldGen.ShakeTree(i, j);
						}
						if (tile.type == 2 || tile.type == 23 || tile.type == 109 || tile.type == 199 || tile.type == 477 || tile.type == 492)
						{
							tile.type = 0;
						}
						if (tile.type == 633)
						{
							tile.type = 57;
						}
						if (tile.type == 60 || tile.type == 661 || tile.type == 662 || tile.type == 70)
						{
							tile.type = 59;
						}
						if (Main.tileMoss[(int)tile.type])
						{
							tile.type = 1;
						}
						if (TileID.Sets.tileMossBrick[(int)tile.type])
						{
							tile.type = 38;
						}
						WorldGen.SquareTileFrame(i, j, true);
						return;
					}
					if (Main.getGoodWorld && Main.netMode != 1 && tile.type == 57)
					{
						for (int num16 = 0; num16 < 8; num16++)
						{
							int maxValue = 2;
							int num17 = i;
							int num18 = j;
							if (num16 == 0)
							{
								num17--;
							}
							else if (num16 == 1)
							{
								num17++;
							}
							else if (num16 == 2)
							{
								num18--;
							}
							else if (num16 == 3)
							{
								num18++;
							}
							else if (num16 == 4)
							{
								num17--;
								num18--;
							}
							else if (num16 == 5)
							{
								num17++;
								num18--;
							}
							else if (num16 == 6)
							{
								num17--;
								num18++;
							}
							else if (num16 == 7)
							{
								num17++;
								num18++;
							}
							Tile tile2 = Main.tile[num17, num18];
							if (tile2.active() && WorldGen.genRand.Next(maxValue) == 0 && tile2.type == 57 && !WorldGen.SolidTile(num17, num18 + 1, false))
							{
								WorldGen.KillTile(num17, num18, false, false, true);
								if (Main.netMode == 2)
								{
									NetMessage.TrySendData(17, -1, -1, null, 20, (float)num17, (float)num18, 0f, 0, 0, 0);
								}
								int num19 = Projectile.NewProjectile(WorldGen.GetProjectileSource_TileBreak(num17, num18), (float)(num17 * 16 + 8), (float)(num18 * 16 + 8), 0f, 0.41f, 40, 15, 0f, Main.myPlayer, 0f, 0f, 0f);
								Main.projectile[num19].netUpdate = true;
							}
						}
					}
					if (Main.netMode != 1 && tile.type >= 481 && tile.type <= 483)
					{
						for (int num20 = 0; num20 < 8; num20++)
						{
							int num21 = 6;
							int num22 = i;
							int num23 = j;
							if (num20 == 0)
							{
								num22--;
							}
							else if (num20 == 1)
							{
								num22++;
							}
							else if (num20 == 2)
							{
								num23--;
								num21 /= 2;
							}
							else if (num20 == 3)
							{
								num23++;
							}
							else if (num20 == 4)
							{
								num22--;
								num23--;
							}
							else if (num20 == 5)
							{
								num22++;
								num23--;
							}
							else if (num20 == 6)
							{
								num22--;
								num23++;
							}
							else if (num20 == 7)
							{
								num22++;
								num23++;
							}
							Tile tile3 = Main.tile[num22, num23];
							if (tile3.active() && WorldGen.genRand.Next(num21) == 0 && tile3.type >= 481 && tile3.type <= 483)
							{
								tile.active(false);
								WorldGen.KillTile(num22, num23, false, false, true);
								if (Main.netMode == 2)
								{
									NetMessage.TrySendData(17, -1, -1, null, 20, (float)num22, (float)num23, 0f, 0, 0, 0);
								}
							}
						}
						int type = (int)(tile.type - 481 + 736);
						int damage = 20;
						EntitySource_TileBreak projectileSource_TileBreak = WorldGen.GetProjectileSource_TileBreak(i, j);
						if (Main.netMode == 0)
						{
							Projectile.NewProjectile(projectileSource_TileBreak, (float)(i * 16 + 8), (float)(j * 16 + 8), 0f, 0.41f, type, damage, 0f, Main.myPlayer, 0f, 0f, 0f);
						}
						else if (Main.netMode == 2)
						{
							int num24 = Projectile.NewProjectile(projectileSource_TileBreak, (float)(i * 16 + 8), (float)(j * 16 + 8), 0f, 0.41f, type, damage, 0f, Main.myPlayer, 0f, 0f, 0f);
							Main.projectile[num24].netUpdate = true;
						}
					}
					if (WorldGen.CheckTileBreakability2_ShouldTileSurvive(i, j))
					{
						return;
					}
					if (tile.type == 51 && tile.wall == 62 && WorldGen.genRand.Next(4) != 0)
					{
						noItem = true;
					}
					if (!noItem && !WorldGen.stopDrops && Main.netMode != 1)
					{
						WorldGen.KillTile_DropBait(i, j, tile);
						WorldGen.KillTile_DropItems(i, j, tile, false);
					}
					if (tile.type == 520)
					{
						TEFoodPlatter.Kill(i, j);
					}
					if (tile.type == 423)
					{
						TELogicSensor.Kill(i, j);
					}
					if (Main.netMode != 2)
					{
						AchievementsHelper.NotifyTileDestroyed(Main.player[Main.myPlayer], tile.type);
					}
					tile.active(false);
					tile.halfBrick(false);
					tile.frameX = -1;
					tile.frameY = -1;
					tile.ClearBlockPaintAndCoating();
					tile.frameNumber(0);
					if (Main.netMode != 1)
					{
						if (tile.type == 58 && j > Main.UnderworldLayer)
						{
							tile.lava(true);
							tile.liquid = 128;
						}
						else if (tile.type == 230 && Main.getGoodWorld && WorldGen.genRand.Next(2) == 0)
						{
							tile.lava(true);
							tile.liquid = 128;
						}
					}
					if (tile.type == 419)
					{
						Wiring.PokeLogicGate(i, j + 1);
					}
					else if (TileID.Sets.BlocksWaterDrawingBehindSelf[(int)tile.type])
					{
						WorldGen.SquareWallFrame(i, j, true);
					}
					tile.type = 0;
					tile.inActive(false);
					WorldGen.SquareTileFrame(i, j, true);
					while (!WorldGen.destroyObject && WorldGen.ExploitDestroyQueue.Count > 0)
					{
						Point point = WorldGen.ExploitDestroyQueue.Dequeue();
						if (Framing.GetTileSafely(point.X, point.Y).active())
						{
							WorldGen.SquareTileFrame(point.X, point.Y, true);
							NetMessage.SendTileSquare(-1, point.X, point.Y, TileChangeType.None);
						}
					}
				}
			}
		}

		// Token: 0x06000FCF RID: 4047 RVA: 0x004557BA File Offset: 0x004539BA
		private static Player GetPlayerForTile(int x, int y)
		{
			return Main.player[(int)Player.FindClosest(new Vector2((float)x, (float)y) * 16f, 16, 16)];
		}

		// Token: 0x06000FD0 RID: 4048 RVA: 0x004557E0 File Offset: 0x004539E0
		private static void KillTile_DropItems(int x, int y, Tile tileCache, bool includeLargeObjectDrops = false)
		{
			int num;
			int stack;
			int num2;
			int stack2;
			WorldGen.KillTile_GetItemDrops(x, y, tileCache, out num, out stack, out num2, out stack2, includeLargeObjectDrops);
			if (Main.getGoodWorld && !tileCache.active())
			{
				return;
			}
			if (num > 0)
			{
				int num3 = Item.NewItem(WorldGen.GetItemSource_FromTileBreak(x, y), x * 16, y * 16, 16, 16, num, stack, false, -1, false, false);
				Main.item[num3].TryCombiningIntoNearbyItems(num3);
			}
			if (num2 > 0)
			{
				int num4 = Item.NewItem(WorldGen.GetItemSource_FromTileBreak(x, y), x * 16, y * 16, 16, 16, num2, stack2, false, -1, false, false);
				Main.item[num4].TryCombiningIntoNearbyItems(num4);
			}
		}

		// Token: 0x06000FD1 RID: 4049 RVA: 0x00455874 File Offset: 0x00453A74
		public static void KillTile_GetItemDrops(int x, int y, Tile tileCache, out int dropItem, out int dropItemStack, out int secondaryItem, out int secondaryItemStack, bool includeLargeObjectDrops = false)
		{
			dropItem = 0;
			dropItemStack = 1;
			secondaryItem = 0;
			secondaryItemStack = 1;
			if (includeLargeObjectDrops)
			{
				ushort type = tileCache.type;
				if (type <= 88)
				{
					if (type != 21)
					{
						if (type != 88)
						{
							goto IL_74;
						}
						int num = (int)(tileCache.frameX / 54);
						dropItem = WorldGen.GetDresserItemDrop(num);
						goto IL_74;
					}
				}
				else
				{
					if (type == 215)
					{
						int num = (int)(tileCache.frameX / 54);
						dropItem = WorldGen.GetCampfireItemDrop(num);
						goto IL_74;
					}
					if (type != 467)
					{
						goto IL_74;
					}
				}
				dropItem = WorldGen.GetChestItemDrop(x, y, (int)tileCache.type);
			}
			IL_74:
			switch (tileCache.type)
			{
			case 0:
			case 2:
			case 109:
			case 199:
			case 477:
			case 492:
				dropItem = 2;
				return;
			case 1:
				dropItem = 3;
				return;
			case 3:
				if (tileCache.frameX == 144)
				{
					dropItem = 5;
					return;
				}
				if (WorldGen.KillTile_ShouldDropSeeds(x, y))
				{
					dropItem = 283;
					return;
				}
				break;
			case 4:
			{
				int num = (int)(tileCache.frameY / 22);
				if (num == 0)
				{
					dropItem = 8;
					return;
				}
				if (num == 8)
				{
					dropItem = 523;
					return;
				}
				if (num == 9)
				{
					dropItem = 974;
					return;
				}
				if (num == 10)
				{
					dropItem = 1245;
					return;
				}
				if (num == 11)
				{
					dropItem = 1333;
					return;
				}
				if (num == 12)
				{
					dropItem = 2274;
					return;
				}
				if (num == 13)
				{
					dropItem = 3004;
					return;
				}
				if (num == 14)
				{
					dropItem = 3045;
					return;
				}
				if (num == 15)
				{
					dropItem = 3114;
					return;
				}
				if (num == 16)
				{
					dropItem = 4383;
					return;
				}
				if (num == 17)
				{
					dropItem = 4384;
					return;
				}
				if (num == 18)
				{
					dropItem = 4385;
					return;
				}
				if (num == 19)
				{
					dropItem = 4386;
					return;
				}
				if (num == 20)
				{
					dropItem = 4387;
					return;
				}
				if (num == 21)
				{
					dropItem = 4388;
					return;
				}
				if (num == 22)
				{
					dropItem = 5293;
					return;
				}
				if (num == 23)
				{
					dropItem = 5353;
					return;
				}
				dropItem = 426 + num;
				return;
			}
			case 5:
			case 596:
			case 616:
			case 634:
			{
				bool flag = false;
				WorldGen.KillTile_GetTreeDrops(x, y, tileCache, ref flag, ref dropItem, ref secondaryItem);
				if (flag)
				{
					dropItemStack++;
					return;
				}
				break;
			}
			case 6:
				dropItem = 11;
				return;
			case 7:
				dropItem = 12;
				return;
			case 8:
				dropItem = 13;
				return;
			case 9:
				dropItem = 14;
				return;
			case 10:
			case 11:
			case 12:
			case 14:
			case 15:
			case 16:
			case 17:
			case 18:
			case 20:
			case 21:
			case 26:
			case 27:
			case 28:
			case 29:
			case 31:
			case 32:
			case 34:
			case 35:
			case 42:
			case 55:
			case 69:
			case 77:
			case 79:
			case 82:
			case 85:
			case 86:
			case 87:
			case 88:
			case 89:
			case 90:
			case 91:
			case 92:
			case 93:
			case 94:
			case 95:
			case 96:
			case 97:
			case 98:
			case 99:
			case 100:
			case 101:
			case 102:
			case 103:
			case 104:
			case 105:
			case 106:
			case 113:
			case 114:
			case 115:
			case 125:
			case 126:
			case 127:
			case 128:
			case 132:
			case 133:
			case 134:
			case 138:
			case 139:
			case 142:
			case 143:
			case 162:
			case 165:
			case 172:
			case 173:
			case 184:
			case 185:
			case 186:
			case 187:
			case 192:
			case 205:
			case 207:
			case 209:
			case 212:
			case 215:
			case 216:
			case 217:
			case 218:
			case 219:
			case 220:
			case 228:
			case 231:
			case 233:
			case 235:
			case 236:
			case 237:
			case 238:
			case 240:
			case 241:
			case 242:
			case 243:
			case 244:
			case 245:
			case 246:
			case 247:
			case 254:
			case 269:
			case 270:
			case 271:
			case 275:
			case 276:
			case 277:
			case 278:
			case 279:
			case 280:
			case 281:
			case 282:
			case 283:
			case 285:
			case 286:
			case 287:
			case 288:
			case 289:
			case 290:
			case 291:
			case 292:
			case 293:
			case 294:
			case 295:
			case 296:
			case 297:
			case 298:
			case 299:
			case 300:
			case 301:
			case 302:
			case 303:
			case 304:
			case 305:
			case 306:
			case 307:
			case 308:
			case 309:
			case 310:
			case 316:
			case 317:
			case 318:
			case 319:
			case 320:
			case 334:
			case 335:
			case 337:
			case 338:
			case 339:
			case 349:
			case 352:
			case 354:
			case 355:
			case 356:
			case 358:
			case 359:
			case 360:
			case 361:
			case 362:
			case 363:
			case 364:
			case 373:
			case 374:
			case 375:
			case 376:
			case 377:
			case 378:
			case 384:
			case 386:
			case 387:
			case 388:
			case 389:
			case 390:
			case 391:
			case 392:
			case 393:
			case 394:
			case 395:
			case 405:
			case 406:
			case 410:
			case 411:
			case 412:
			case 413:
			case 414:
			case 425:
			case 440:
			case 441:
			case 443:
			case 444:
			case 452:
			case 453:
			case 454:
			case 455:
			case 456:
			case 457:
			case 461:
			case 462:
			case 463:
			case 464:
			case 465:
			case 466:
			case 467:
			case 468:
			case 469:
			case 470:
			case 471:
			case 475:
			case 480:
			case 481:
			case 482:
			case 483:
			case 484:
			case 485:
			case 486:
			case 487:
			case 488:
			case 489:
			case 490:
			case 491:
			case 493:
			case 497:
			case 499:
			case 504:
			case 505:
			case 506:
			case 509:
			case 510:
			case 511:
			case 518:
			case 521:
			case 522:
			case 523:
			case 524:
			case 525:
			case 526:
			case 527:
			case 529:
			case 530:
			case 531:
			case 532:
			case 533:
			case 538:
			case 542:
			case 543:
			case 544:
			case 545:
			case 547:
			case 548:
			case 549:
			case 550:
			case 551:
			case 552:
			case 553:
			case 554:
			case 555:
			case 556:
			case 558:
			case 559:
			case 560:
			case 564:
			case 565:
			case 567:
			case 568:
			case 569:
			case 570:
			case 572:
			case 573:
			case 580:
			case 581:
			case 582:
			case 590:
			case 591:
			case 592:
			case 594:
			case 595:
			case 597:
			case 598:
			case 599:
			case 600:
			case 601:
			case 602:
			case 603:
			case 604:
			case 605:
			case 606:
			case 607:
			case 608:
			case 609:
			case 610:
			case 611:
			case 612:
			case 613:
			case 614:
			case 615:
			case 617:
			case 619:
			case 620:
			case 621:
			case 622:
			case 623:
			case 629:
			case 632:
			case 636:
			case 638:
			case 639:
			case 640:
			case 642:
			case 643:
			case 644:
			case 645:
			case 647:
			case 648:
			case 649:
			case 651:
			case 652:
			case 653:
			case 654:
			case 655:
			case 657:
			case 658:
			case 660:
			case 663:
			case 664:
			case 665:
				break;
			case 13:
			{
				int num = (int)(tileCache.frameX / 18);
				if (num == 1)
				{
					dropItem = 28;
					return;
				}
				if (num == 2)
				{
					dropItem = 110;
					return;
				}
				if (num == 3)
				{
					dropItem = 350;
					return;
				}
				if (num == 4)
				{
					dropItem = 351;
					return;
				}
				if (num == 5)
				{
					dropItem = 2234;
					return;
				}
				if (num == 6)
				{
					dropItem = 2244;
					return;
				}
				if (num == 7)
				{
					dropItem = 2257;
					return;
				}
				if (num == 8)
				{
					dropItem = 2258;
					return;
				}
				dropItem = 31;
				return;
			}
			case 19:
			{
				int num = (int)(tileCache.frameY / 18);
				if (num == 0)
				{
					dropItem = 94;
					return;
				}
				if (num == 1)
				{
					dropItem = 631;
					return;
				}
				if (num == 2)
				{
					dropItem = 632;
					return;
				}
				if (num == 3)
				{
					dropItem = 633;
					return;
				}
				if (num == 4)
				{
					dropItem = 634;
					return;
				}
				if (num == 5)
				{
					dropItem = 913;
					return;
				}
				if (num == 6)
				{
					dropItem = 1384;
					return;
				}
				if (num == 7)
				{
					dropItem = 1385;
					return;
				}
				if (num == 8)
				{
					dropItem = 1386;
					return;
				}
				if (num == 9)
				{
					dropItem = 1387;
					return;
				}
				if (num == 10)
				{
					dropItem = 1388;
					return;
				}
				if (num == 11)
				{
					dropItem = 1389;
					return;
				}
				if (num == 12)
				{
					dropItem = 1418;
					return;
				}
				if (num == 13)
				{
					dropItem = 1457;
					return;
				}
				if (num == 14)
				{
					dropItem = 1702;
					return;
				}
				if (num == 15)
				{
					dropItem = 1796;
					return;
				}
				if (num == 16)
				{
					dropItem = 1818;
					return;
				}
				if (num == 17)
				{
					dropItem = 2518;
					return;
				}
				if (num == 18)
				{
					dropItem = 2549;
					return;
				}
				if (num == 19)
				{
					dropItem = 2566;
					return;
				}
				if (num == 20)
				{
					dropItem = 2581;
					return;
				}
				if (num == 21)
				{
					dropItem = 2627;
					return;
				}
				if (num == 22)
				{
					dropItem = 2628;
					return;
				}
				if (num == 23)
				{
					dropItem = 2629;
					return;
				}
				if (num == 24)
				{
					dropItem = 2630;
					return;
				}
				if (num == 25)
				{
					dropItem = 2744;
					return;
				}
				if (num == 26)
				{
					dropItem = 2822;
					return;
				}
				if (num == 27)
				{
					dropItem = 3144;
					return;
				}
				if (num == 28)
				{
					dropItem = 3146;
					return;
				}
				if (num == 29)
				{
					dropItem = 3145;
					return;
				}
				if (num >= 30 && num <= 35)
				{
					dropItem = 3903 + num - 30;
					return;
				}
				if (num == 36)
				{
					dropItem = 3945;
					return;
				}
				if (num == 37)
				{
					dropItem = 3957;
					return;
				}
				if (num == 38)
				{
					dropItem = 4159;
					return;
				}
				if (num == 39)
				{
					dropItem = 4180;
					return;
				}
				if (num == 40)
				{
					dropItem = 4201;
					return;
				}
				if (num == 41)
				{
					dropItem = 4222;
					return;
				}
				if (num == 42)
				{
					dropItem = 4311;
					return;
				}
				if (num == 43)
				{
					dropItem = 4416;
					return;
				}
				if (num == 44)
				{
					dropItem = 4580;
					return;
				}
				if (num == 45)
				{
					dropItem = 5162;
					return;
				}
				if (num == 46)
				{
					dropItem = 5183;
					return;
				}
				if (num == 47)
				{
					dropItem = 5204;
					return;
				}
				if (num == 48)
				{
					dropItem = 5292;
					return;
				}
				break;
			}
			case 22:
				dropItem = 56;
				return;
			case 23:
				dropItem = 2;
				return;
			case 24:
				if (tileCache.frameX == 144)
				{
					dropItem = 60;
					return;
				}
				break;
			case 25:
				dropItem = 61;
				return;
			case 30:
				dropItem = 9;
				return;
			case 33:
			{
				int num = (int)(tileCache.frameY / 22);
				dropItem = 105;
				if (num == 1)
				{
					dropItem = 1405;
					return;
				}
				if (num == 2)
				{
					dropItem = 1406;
					return;
				}
				if (num == 3)
				{
					dropItem = 1407;
					return;
				}
				if (num >= 4 && num <= 13)
				{
					dropItem = 2045 + num - 4;
					return;
				}
				if (num >= 14 && num <= 16)
				{
					dropItem = 2153 + num - 14;
					return;
				}
				if (num == 17)
				{
					dropItem = 2236;
					return;
				}
				if (num == 18)
				{
					dropItem = 2523;
					return;
				}
				if (num == 19)
				{
					dropItem = 2542;
					return;
				}
				if (num == 20)
				{
					dropItem = 2556;
					return;
				}
				if (num == 21)
				{
					dropItem = 2571;
					return;
				}
				if (num == 22)
				{
					dropItem = 2648;
					return;
				}
				if (num == 23)
				{
					dropItem = 2649;
					return;
				}
				if (num == 24)
				{
					dropItem = 2650;
					return;
				}
				if (num == 25)
				{
					dropItem = 2651;
					return;
				}
				if (num == 26)
				{
					dropItem = 2818;
					return;
				}
				if (num == 27)
				{
					dropItem = 3171;
					return;
				}
				if (num == 28)
				{
					dropItem = 3173;
					return;
				}
				if (num == 29)
				{
					dropItem = 3172;
					return;
				}
				if (num == 30)
				{
					dropItem = 3890;
					return;
				}
				if (num == 31)
				{
					dropItem = 3936;
					return;
				}
				if (num == 32)
				{
					dropItem = 3962;
					return;
				}
				if (num == 33)
				{
					dropItem = 4150;
					return;
				}
				if (num == 34)
				{
					dropItem = 4171;
					return;
				}
				if (num == 35)
				{
					dropItem = 4192;
					return;
				}
				if (num == 36)
				{
					dropItem = 4213;
					return;
				}
				if (num == 37)
				{
					dropItem = 4303;
					return;
				}
				if (num == 38)
				{
					dropItem = 4571;
					return;
				}
				if (num == 39)
				{
					dropItem = 5153;
					return;
				}
				if (num == 40)
				{
					dropItem = 5174;
					return;
				}
				if (num == 41)
				{
					dropItem = 5195;
					return;
				}
				break;
			}
			case 36:
				dropItem = 1869;
				return;
			case 37:
				dropItem = 116;
				return;
			case 38:
				dropItem = 129;
				return;
			case 39:
				dropItem = 131;
				return;
			case 40:
				dropItem = 133;
				return;
			case 41:
				dropItem = 134;
				return;
			case 43:
				dropItem = 137;
				return;
			case 44:
				dropItem = 139;
				return;
			case 45:
				dropItem = 141;
				return;
			case 46:
				dropItem = 143;
				return;
			case 47:
				dropItem = 145;
				return;
			case 48:
				dropItem = 147;
				return;
			case 49:
				dropItem = 148;
				return;
			case 50:
				if (tileCache.frameX == 90)
				{
					dropItem = 165;
					return;
				}
				dropItem = 149;
				return;
			case 51:
				dropItem = 150;
				return;
			case 52:
			case 62:
			case 382:
				if (Main.rand.Next(2) == 0 && WorldGen.GetPlayerForTile(x, y).cordage)
				{
					dropItem = 2996;
					return;
				}
				break;
			case 53:
				dropItem = 169;
				return;
			case 54:
				dropItem = 170;
				return;
			case 56:
				dropItem = 173;
				return;
			case 57:
				dropItem = 172;
				return;
			case 58:
				dropItem = 174;
				return;
			case 59:
			case 60:
			case 661:
			case 662:
				dropItem = 176;
				return;
			case 61:
			case 74:
				if (tileCache.frameX == 144 && tileCache.type == 61)
				{
					dropItem = 331;
					dropItemStack = Main.rand.Next(2, 4);
					return;
				}
				if (tileCache.frameX == 162 && tileCache.type == 61)
				{
					dropItem = 223;
					return;
				}
				if (tileCache.frameX >= 108 && tileCache.frameX <= 126 && tileCache.type == 61 && Main.rand.Next(20) == 0)
				{
					dropItem = 208;
					return;
				}
				if (Main.rand.Next(100) == 0)
				{
					dropItem = 195;
					return;
				}
				break;
			case 63:
			case 64:
			case 65:
			case 66:
			case 67:
			case 68:
				dropItem = (int)(tileCache.type - 63 + 177);
				return;
			case 70:
				dropItem = 176;
				return;
			case 71:
			case 72:
				if (Main.rand.Next(40) == 0)
				{
					dropItem = 194;
					return;
				}
				if (Main.rand.Next(2) == 0)
				{
					dropItem = 183;
					return;
				}
				break;
			case 73:
				if (WorldGen.KillTile_ShouldDropSeeds(x, y))
				{
					dropItem = 283;
					return;
				}
				break;
			case 75:
				dropItem = 192;
				return;
			case 76:
				dropItem = 214;
				return;
			case 78:
				dropItem = 222;
				return;
			case 80:
				dropItem = 276;
				return;
			case 81:
				dropItem = 275;
				return;
			case 83:
			case 84:
			{
				int num = (int)(tileCache.frameX / 18);
				dropItem = 313 + num;
				int num2 = 307 + num;
				if (num == 6)
				{
					dropItem = 2358;
					num2 = 2357;
				}
				bool flag2 = WorldGen.IsHarvestableHerbWithSeed((int)tileCache.type, num);
				Player playerForTile = WorldGen.GetPlayerForTile(x, y);
				if (playerForTile.HeldItem.type == 213 || playerForTile.HeldItem.type == 5295)
				{
					dropItemStack = Main.rand.Next(1, 3);
					secondaryItem = num2;
					secondaryItemStack = Main.rand.Next(1, 6);
					return;
				}
				if (flag2)
				{
					secondaryItem = num2;
					secondaryItemStack = Main.rand.Next(1, 4);
					return;
				}
				break;
			}
			case 107:
				dropItem = 364;
				return;
			case 108:
				dropItem = 365;
				return;
			case 110:
				if (tileCache.frameX == 144)
				{
					dropItem = 5;
					return;
				}
				break;
			case 111:
				dropItem = 366;
				return;
			case 112:
				dropItem = 370;
				return;
			case 116:
				dropItem = 408;
				return;
			case 117:
				dropItem = 409;
				return;
			case 118:
				dropItem = 412;
				return;
			case 119:
				dropItem = 413;
				return;
			case 120:
				dropItem = 414;
				return;
			case 121:
				dropItem = 415;
				return;
			case 122:
				dropItem = 416;
				return;
			case 123:
				dropItem = 424;
				return;
			case 124:
				dropItem = 480;
				return;
			case 129:
				if (tileCache.frameX >= 324)
				{
					dropItem = 4988;
					return;
				}
				dropItem = 502;
				return;
			case 130:
				dropItem = 511;
				return;
			case 131:
				dropItem = 512;
				return;
			case 135:
			{
				int num = (int)(tileCache.frameY / 18);
				if (num == 0)
				{
					dropItem = 529;
				}
				if (num == 1)
				{
					dropItem = 541;
				}
				if (num == 2)
				{
					dropItem = 542;
				}
				if (num == 3)
				{
					dropItem = 543;
				}
				if (num == 4)
				{
					dropItem = 852;
				}
				if (num == 5)
				{
					dropItem = 853;
				}
				if (num == 6)
				{
					dropItem = 1151;
					return;
				}
				break;
			}
			case 136:
				dropItem = 538;
				return;
			case 137:
			{
				int num = (int)(tileCache.frameY / 18);
				if (num == 0)
				{
					dropItem = 539;
				}
				if (num == 1)
				{
					dropItem = 1146;
				}
				if (num == 2)
				{
					dropItem = 1147;
				}
				if (num == 3)
				{
					dropItem = 1148;
				}
				if (num == 4)
				{
					dropItem = 1149;
				}
				if (num == 5)
				{
					dropItem = 5135;
					return;
				}
				break;
			}
			case 140:
				dropItem = 577;
				return;
			case 141:
				dropItem = 580;
				return;
			case 144:
				if (tileCache.frameX == 0)
				{
					dropItem = 583;
				}
				if (tileCache.frameX == 18)
				{
					dropItem = 584;
				}
				if (tileCache.frameX == 36)
				{
					dropItem = 585;
				}
				if (tileCache.frameX == 54)
				{
					dropItem = 4484;
				}
				if (tileCache.frameX == 72)
				{
					dropItem = 4485;
					return;
				}
				break;
			case 145:
				dropItem = 586;
				return;
			case 146:
				dropItem = 591;
				return;
			case 147:
				dropItem = 593;
				return;
			case 148:
				dropItem = 594;
				return;
			case 149:
				if (tileCache.frameX == 0 || tileCache.frameX == 54)
				{
					dropItem = 596;
					return;
				}
				if (tileCache.frameX == 18 || tileCache.frameX == 72)
				{
					dropItem = 597;
					return;
				}
				if (tileCache.frameX == 36 || tileCache.frameX == 90)
				{
					dropItem = 598;
					return;
				}
				break;
			case 150:
				dropItem = 604;
				return;
			case 151:
				dropItem = 607;
				return;
			case 152:
				dropItem = 609;
				return;
			case 153:
				dropItem = 611;
				return;
			case 154:
				dropItem = 612;
				return;
			case 155:
				dropItem = 613;
				return;
			case 156:
				dropItem = 614;
				return;
			case 157:
				dropItem = 619;
				return;
			case 158:
				dropItem = 620;
				return;
			case 159:
				dropItem = 621;
				return;
			case 160:
				dropItem = 662;
				return;
			case 161:
				dropItem = 664;
				return;
			case 163:
				dropItem = 833;
				return;
			case 164:
				dropItem = 834;
				return;
			case 166:
				dropItem = 699;
				return;
			case 167:
				dropItem = 700;
				return;
			case 168:
				dropItem = 701;
				return;
			case 169:
				dropItem = 702;
				return;
			case 170:
				dropItem = 1872;
				return;
			case 171:
				if (tileCache.frameX >= 10)
				{
					WorldGen.dropXmasTree(x, y, 0);
					WorldGen.dropXmasTree(x, y, 1);
					WorldGen.dropXmasTree(x, y, 2);
					WorldGen.dropXmasTree(x, y, 3);
					return;
				}
				break;
			case 174:
				dropItem = 713;
				return;
			case 175:
				dropItem = 717;
				return;
			case 176:
				dropItem = 718;
				return;
			case 177:
				dropItem = 719;
				return;
			case 178:
			{
				int num = (int)(tileCache.frameX / 18);
				if (num == 0)
				{
					dropItem = 181;
					return;
				}
				if (num == 1)
				{
					dropItem = 180;
					return;
				}
				if (num == 2)
				{
					dropItem = 177;
					return;
				}
				if (num == 3)
				{
					dropItem = 179;
					return;
				}
				if (num == 4)
				{
					dropItem = 178;
					return;
				}
				if (num == 5)
				{
					dropItem = 182;
					return;
				}
				if (num == 6)
				{
					dropItem = 999;
					return;
				}
				break;
			}
			case 179:
			case 180:
			case 181:
			case 182:
			case 183:
			case 381:
			case 534:
			case 536:
			case 539:
			case 625:
			case 627:
				dropItem = 3;
				return;
			case 188:
				dropItem = 276;
				return;
			case 189:
				dropItem = 751;
				return;
			case 190:
				dropItem = 183;
				return;
			case 191:
				dropItem = 9;
				return;
			case 193:
				dropItem = 762;
				return;
			case 194:
				dropItem = 154;
				return;
			case 195:
				dropItem = 763;
				return;
			case 196:
				dropItem = 765;
				return;
			case 197:
				dropItem = 767;
				return;
			case 198:
				dropItem = 775;
				return;
			case 200:
				dropItem = 835;
				return;
			case 201:
				if (tileCache.frameX == 270)
				{
					dropItem = 2887;
					return;
				}
				break;
			case 202:
				dropItem = 824;
				return;
			case 203:
				dropItem = 836;
				return;
			case 204:
				dropItem = 880;
				return;
			case 206:
				dropItem = 883;
				return;
			case 208:
				dropItem = 911;
				return;
			case 210:
				dropItem = 937;
				return;
			case 211:
				dropItem = 947;
				return;
			case 213:
				dropItem = 965;
				return;
			case 214:
				dropItem = 85;
				return;
			case 221:
				dropItem = 1104;
				return;
			case 222:
				dropItem = 1105;
				return;
			case 223:
				dropItem = 1106;
				return;
			case 224:
				dropItem = 1103;
				return;
			case 225:
				if (Main.rand.Next(3) == 0)
				{
					tileCache.honey(true);
					tileCache.liquid = byte.MaxValue;
					return;
				}
				dropItem = 1124;
				if (Main.netMode != 1 && Main.rand.Next(2) == 0)
				{
					int num3 = 1;
					if (Main.rand.Next(3) == 0)
					{
						num3 = 2;
					}
					for (int i = 0; i < num3; i++)
					{
						int type2 = Main.rand.Next(210, 212);
						int num4 = NPC.NewNPC(WorldGen.GetNPCSource_TileBreak(x, y), x * 16 + 8, y * 16 + 15, type2, 1, 0f, 0f, 0f, 0f, 255);
						Main.npc[num4].velocity.X = (float)Main.rand.Next(-200, 201) * 0.002f;
						Main.npc[num4].velocity.Y = (float)Main.rand.Next(-200, 201) * 0.002f;
						Main.npc[num4].netUpdate = true;
					}
					return;
				}
				break;
			case 226:
				dropItem = 1101;
				return;
			case 227:
			{
				int num = (int)(tileCache.frameX / 34);
				dropItem = 1107 + num;
				if (num >= 8 && num <= 11)
				{
					dropItem = 3385 + num - 8;
					return;
				}
				break;
			}
			case 229:
				dropItem = 1125;
				return;
			case 230:
				dropItem = 1127;
				return;
			case 232:
				dropItem = 1150;
				return;
			case 234:
				dropItem = 1246;
				return;
			case 239:
			{
				int num = (int)(tileCache.frameX / 18);
				if (num == 0)
				{
					dropItem = 20;
				}
				if (num == 1)
				{
					dropItem = 703;
				}
				if (num == 2)
				{
					dropItem = 22;
				}
				if (num == 3)
				{
					dropItem = 704;
				}
				if (num == 4)
				{
					dropItem = 21;
				}
				if (num == 5)
				{
					dropItem = 705;
				}
				if (num == 6)
				{
					dropItem = 19;
				}
				if (num == 7)
				{
					dropItem = 706;
				}
				if (num == 8)
				{
					dropItem = 57;
				}
				if (num == 9)
				{
					dropItem = 117;
				}
				if (num == 10)
				{
					dropItem = 175;
				}
				if (num == 11)
				{
					dropItem = 381;
				}
				if (num == 12)
				{
					dropItem = 1184;
				}
				if (num == 13)
				{
					dropItem = 382;
				}
				if (num == 14)
				{
					dropItem = 1191;
				}
				if (num == 15)
				{
					dropItem = 391;
				}
				if (num == 16)
				{
					dropItem = 1198;
				}
				if (num == 17)
				{
					dropItem = 1006;
				}
				if (num == 18)
				{
					dropItem = 1225;
				}
				if (num == 19)
				{
					dropItem = 1257;
				}
				if (num == 20)
				{
					dropItem = 1552;
				}
				if (num == 21)
				{
					dropItem = 3261;
				}
				if (num == 22)
				{
					dropItem = 3467;
					return;
				}
				break;
			}
			case 248:
				dropItem = 1589;
				return;
			case 249:
				dropItem = 1591;
				return;
			case 250:
				dropItem = 1593;
				return;
			case 251:
				dropItem = 1725;
				return;
			case 252:
				dropItem = 1727;
				return;
			case 253:
				dropItem = 1729;
				return;
			case 255:
			case 256:
			case 257:
			case 258:
			case 259:
			case 260:
			case 261:
				dropItem = (int)(1970 + tileCache.type - 255);
				return;
			case 262:
			case 263:
			case 264:
			case 265:
			case 266:
			case 267:
			case 268:
				dropItem = (int)(1970 + tileCache.type - 262);
				return;
			case 272:
				dropItem = 1344;
				return;
			case 273:
				dropItem = 2119;
				return;
			case 274:
				dropItem = 2120;
				return;
			case 284:
				dropItem = 2173;
				return;
			case 311:
				dropItem = 2260;
				return;
			case 312:
				dropItem = 2261;
				return;
			case 313:
				dropItem = 2262;
				return;
			case 314:
				dropItem = Minecart.GetTrackItem(tileCache);
				return;
			case 315:
				dropItem = 2435;
				return;
			case 321:
				dropItem = 2503;
				return;
			case 322:
				dropItem = 2504;
				return;
			case 323:
			{
				dropItem = 2504;
				if (Main.tenthAnniversaryWorld)
				{
					dropItemStack += WorldGen.genRand.Next(2, 5);
				}
				if (tileCache.frameX <= 132 && tileCache.frameX >= 88)
				{
					secondaryItem = 27;
				}
				int num5 = y;
				while (!Main.tile[x, num5].active() || !Main.tileSolid[(int)Main.tile[x, num5].type])
				{
					num5++;
				}
				if (Main.tile[x, num5].active())
				{
					ushort type = Main.tile[x, num5].type;
					if (type == 112)
					{
						dropItem = 619;
						return;
					}
					if (type == 116)
					{
						dropItem = 621;
						return;
					}
					if (type == 234)
					{
						dropItem = 911;
						return;
					}
				}
				break;
			}
			case 324:
				switch (tileCache.frameY / 22)
				{
				case 0:
					dropItem = 2625;
					return;
				case 1:
					dropItem = 2626;
					return;
				case 2:
					dropItem = 4072;
					return;
				case 3:
					dropItem = 4073;
					return;
				case 4:
					dropItem = 4071;
					return;
				default:
					return;
				}
				break;
			case 325:
				dropItem = 2692;
				return;
			case 326:
				dropItem = 2693;
				return;
			case 327:
				dropItem = 2694;
				return;
			case 328:
				dropItem = 2695;
				return;
			case 329:
				dropItem = 2697;
				return;
			case 330:
				dropItem = 71;
				return;
			case 331:
				dropItem = 72;
				return;
			case 332:
				dropItem = 73;
				return;
			case 333:
				dropItem = 74;
				return;
			case 336:
				dropItem = 2701;
				return;
			case 340:
				dropItem = 2751;
				return;
			case 341:
				dropItem = 2752;
				return;
			case 342:
				dropItem = 2753;
				return;
			case 343:
				dropItem = 2754;
				return;
			case 344:
				dropItem = 2755;
				return;
			case 345:
				dropItem = 2787;
				return;
			case 346:
				dropItem = 2792;
				return;
			case 347:
				dropItem = 2793;
				return;
			case 348:
				dropItem = 2794;
				return;
			case 350:
				dropItem = 2860;
				return;
			case 351:
				dropItem = 2868;
				return;
			case 353:
				dropItem = 2996;
				return;
			case 357:
				dropItem = 3066;
				return;
			case 365:
				dropItem = 3077;
				return;
			case 366:
				dropItem = 3078;
				return;
			case 367:
				dropItem = 3081;
				return;
			case 368:
				dropItem = 3086;
				return;
			case 369:
				dropItem = 3087;
				return;
			case 370:
				dropItem = 3100;
				return;
			case 371:
				dropItem = 3113;
				return;
			case 372:
				dropItem = 3117;
				return;
			case 379:
				dropItem = 3214;
				return;
			case 380:
			{
				int num = (int)(tileCache.frameY / 18);
				dropItem = 3215 + num;
				return;
			}
			case 383:
				dropItem = 620;
				return;
			case 385:
				dropItem = 3234;
				return;
			case 396:
				dropItem = 3271;
				return;
			case 397:
				dropItem = 3272;
				return;
			case 398:
				dropItem = 3274;
				return;
			case 399:
				dropItem = 3275;
				return;
			case 400:
				dropItem = 3276;
				return;
			case 401:
				dropItem = 3277;
				return;
			case 402:
				dropItem = 3338;
				return;
			case 403:
				dropItem = 3339;
				return;
			case 404:
				dropItem = 3347;
				return;
			case 407:
				dropItem = 3380;
				return;
			case 408:
				dropItem = 3460;
				return;
			case 409:
				dropItem = 3461;
				return;
			case 415:
				dropItem = 3573;
				return;
			case 416:
				dropItem = 3574;
				return;
			case 417:
				dropItem = 3575;
				return;
			case 418:
				dropItem = 3576;
				return;
			case 419:
				switch (tileCache.frameX / 18)
				{
				case 0:
					dropItem = 3602;
					return;
				case 1:
					dropItem = 3618;
					return;
				case 2:
					dropItem = 3663;
					return;
				default:
					return;
				}
				break;
			case 420:
				switch (tileCache.frameY / 18)
				{
				case 0:
					dropItem = 3603;
					return;
				case 1:
					dropItem = 3604;
					return;
				case 2:
					dropItem = 3605;
					return;
				case 3:
					dropItem = 3606;
					return;
				case 4:
					dropItem = 3607;
					return;
				case 5:
					dropItem = 3608;
					return;
				default:
					return;
				}
				break;
			case 421:
				dropItem = 3609;
				return;
			case 422:
				dropItem = 3610;
				return;
			case 423:
				TELogicSensor.Kill(x, y);
				switch (tileCache.frameY / 18)
				{
				case 0:
					dropItem = 3613;
					return;
				case 1:
					dropItem = 3614;
					return;
				case 2:
					dropItem = 3615;
					return;
				case 3:
					dropItem = 3726;
					return;
				case 4:
					dropItem = 3727;
					return;
				case 5:
					dropItem = 3728;
					return;
				case 6:
					dropItem = 3729;
					return;
				default:
					return;
				}
				break;
			case 424:
				dropItem = 3616;
				return;
			case 426:
				dropItem = 3621;
				return;
			case 427:
				dropItem = 3622;
				return;
			case 428:
				switch (tileCache.frameY / 18)
				{
				case 0:
					dropItem = 3630;
					break;
				case 1:
					dropItem = 3632;
					break;
				case 2:
					dropItem = 3631;
					break;
				case 3:
					dropItem = 3626;
					break;
				}
				PressurePlateHelper.DestroyPlate(new Point(x, y));
				return;
			case 429:
				dropItem = 3629;
				return;
			case 430:
				dropItem = 3633;
				return;
			case 431:
				dropItem = 3634;
				return;
			case 432:
				dropItem = 3635;
				return;
			case 433:
				dropItem = 3636;
				return;
			case 434:
				dropItem = 3637;
				return;
			case 435:
				dropItem = 3638;
				return;
			case 436:
				dropItem = 3639;
				return;
			case 437:
				dropItem = 3640;
				return;
			case 438:
				dropItem = 3641;
				return;
			case 439:
				dropItem = 3642;
				return;
			case 442:
				dropItem = 3707;
				return;
			case 445:
				dropItem = 3725;
				return;
			case 446:
				dropItem = 3736;
				return;
			case 447:
				dropItem = 3737;
				return;
			case 448:
				dropItem = 3738;
				return;
			case 449:
				dropItem = 3739;
				return;
			case 450:
				dropItem = 3740;
				return;
			case 451:
				dropItem = 3741;
				return;
			case 458:
				dropItem = 3754;
				return;
			case 459:
				dropItem = 3755;
				return;
			case 460:
				dropItem = 3756;
				return;
			case 472:
				dropItem = 3951;
				return;
			case 473:
				dropItem = 3953;
				return;
			case 474:
				dropItem = 3955;
				return;
			case 476:
				dropItem = 4040;
				return;
			case 478:
				dropItem = 4050;
				return;
			case 479:
				dropItem = 4051;
				return;
			case 494:
				dropItem = 4089;
				return;
			case 495:
				dropItem = 4090;
				return;
			case 496:
				dropItem = 4091;
				return;
			case 498:
				dropItem = 4139;
				return;
			case 500:
				dropItem = 4229;
				return;
			case 501:
				dropItem = 4230;
				return;
			case 502:
				dropItem = 4231;
				return;
			case 503:
				dropItem = 4232;
				return;
			case 507:
				dropItem = 4277;
				return;
			case 508:
				dropItem = 4278;
				return;
			case 512:
			case 513:
			case 514:
			case 515:
			case 516:
			case 517:
			case 535:
			case 537:
			case 540:
			case 626:
			case 628:
				dropItem = 129;
				return;
			case 519:
				if (tileCache.frameY == 90 && WorldGen.genRand.Next(2) == 0)
				{
					dropItem = 183;
					return;
				}
				break;
			case 520:
				dropItem = 4326;
				return;
			case 528:
				if (WorldGen.genRand.Next(2) == 0)
				{
					dropItem = 183;
					return;
				}
				break;
			case 541:
				dropItem = 4392;
				return;
			case 546:
			case 557:
				dropItem = 4422;
				return;
			case 561:
				dropItem = 4554;
				return;
			case 562:
				dropItem = 4564;
				return;
			case 563:
				dropItem = 4547;
				return;
			case 566:
				dropItem = 999;
				return;
			case 571:
				dropItem = 4564;
				dropItemStack = WorldGen.genRand.Next(1, 3);
				return;
			case 574:
				dropItem = 4717;
				return;
			case 575:
				dropItem = 4718;
				return;
			case 576:
				dropItem = 4719;
				return;
			case 577:
				dropItem = 4720;
				return;
			case 578:
				dropItem = 4721;
				return;
			case 579:
				dropItem = 4761;
				return;
			case 583:
				WorldGen.SetGemTreeDrops(180, 4851, tileCache, ref dropItem, ref secondaryItem);
				if (dropItem == 3)
				{
					dropItemStack = Main.rand.Next(1, 3);
					return;
				}
				break;
			case 584:
				WorldGen.SetGemTreeDrops(181, 4852, tileCache, ref dropItem, ref secondaryItem);
				if (dropItem == 3)
				{
					dropItemStack = Main.rand.Next(1, 3);
					return;
				}
				break;
			case 585:
				WorldGen.SetGemTreeDrops(177, 4853, tileCache, ref dropItem, ref secondaryItem);
				if (dropItem == 3)
				{
					dropItemStack = Main.rand.Next(1, 3);
					return;
				}
				break;
			case 586:
				WorldGen.SetGemTreeDrops(179, 4854, tileCache, ref dropItem, ref secondaryItem);
				if (dropItem == 3)
				{
					dropItemStack = Main.rand.Next(1, 3);
					return;
				}
				break;
			case 587:
				WorldGen.SetGemTreeDrops(178, 4855, tileCache, ref dropItem, ref secondaryItem);
				if (dropItem == 3)
				{
					dropItemStack = Main.rand.Next(1, 3);
					return;
				}
				break;
			case 588:
				WorldGen.SetGemTreeDrops(182, 4856, tileCache, ref dropItem, ref secondaryItem);
				if (dropItem == 3)
				{
					dropItemStack = Main.rand.Next(1, 3);
				}
				break;
			case 589:
				WorldGen.SetGemTreeDrops(999, 4857, tileCache, ref dropItem, ref secondaryItem);
				if (dropItem == 3)
				{
					dropItemStack = Main.rand.Next(1, 3);
					return;
				}
				break;
			case 593:
				dropItem = 4868;
				return;
			case 618:
				dropItem = 4962;
				return;
			case 624:
				dropItem = 5114;
				return;
			case 630:
				dropItem = 5137;
				return;
			case 631:
				dropItem = 5138;
				return;
			case 633:
				dropItem = 172;
				return;
			case 635:
				dropItem = 5215;
				return;
			case 637:
				if (Main.rand.Next(100) == 0)
				{
					dropItem = 5214;
					return;
				}
				break;
			case 641:
				dropItem = 5306;
				return;
			case 646:
				dropItem = 5322;
				return;
			case 650:
			{
				int num = (int)(tileCache.frameX / 18);
				if (num < 6)
				{
					dropItem = 3;
					return;
				}
				if (num < 12)
				{
					dropItem = 2;
					return;
				}
				if (num < 20)
				{
					dropItem = 154;
					return;
				}
				if (num < 28)
				{
					dropItem = 154;
					return;
				}
				if (num < 36)
				{
					dropItem = 9;
					return;
				}
				if (num < 42)
				{
					dropItem = 593;
					return;
				}
				if (num < 48)
				{
					dropItem = 664;
					return;
				}
				if (num < 54)
				{
					dropItem = 150;
					return;
				}
				if (num < 60)
				{
					dropItem = 3271;
					return;
				}
				if (num < 66)
				{
					dropItem = 3086;
					return;
				}
				if (num < 72)
				{
					dropItem = 3081;
					return;
				}
				if (num < 73)
				{
					dropItem = 62;
					return;
				}
				if (num < 77)
				{
					dropItem = 169;
					return;
				}
				break;
			}
			case 656:
				dropItem = 5333;
				return;
			case 659:
				dropItem = 5349;
				return;
			case 666:
				dropItem = 5395;
				return;
			case 667:
				dropItem = 5398;
				return;
			case 668:
				dropItem = 5400;
				return;
			case 669:
				dropItem = 5401;
				return;
			case 670:
				dropItem = 5402;
				return;
			case 671:
				dropItem = 5403;
				return;
			case 672:
				dropItem = 5404;
				return;
			case 673:
				dropItem = 5405;
				return;
			case 674:
				dropItem = 5406;
				return;
			case 675:
				dropItem = 5407;
				return;
			case 676:
				dropItem = 5408;
				return;
			case 677:
				dropItem = 5417;
				return;
			case 678:
				dropItem = 5419;
				return;
			case 679:
				dropItem = 5421;
				return;
			case 680:
				dropItem = 5423;
				return;
			case 681:
				dropItem = 5425;
				return;
			case 682:
				dropItem = 5427;
				return;
			case 683:
				dropItem = 5433;
				return;
			case 684:
				dropItem = 5435;
				return;
			case 685:
				dropItem = 5429;
				return;
			case 686:
				dropItem = 5431;
				return;
			case 687:
				dropItem = 5439;
				return;
			case 688:
				dropItem = 5440;
				return;
			case 689:
				dropItem = 5441;
				return;
			case 690:
				dropItem = 5442;
				return;
			case 691:
				dropItem = 5443;
				return;
			case 692:
				dropItem = 5444;
				return;
			default:
				return;
			}
		}

		// Token: 0x06000FD2 RID: 4050 RVA: 0x00457D06 File Offset: 0x00455F06
		private static void SetGemTreeDrops(int gemType, int seedType, Tile tileCache, ref int dropItem, ref int secondaryItem)
		{
			if (Main.rand.Next(10) == 0)
			{
				dropItem = gemType;
			}
			else
			{
				dropItem = 3;
			}
			if (tileCache.frameX >= 22 && tileCache.frameY >= 198 && Main.rand.Next(2) == 0)
			{
				secondaryItem = seedType;
			}
		}

		// Token: 0x06000FD3 RID: 4051 RVA: 0x00457D46 File Offset: 0x00455F46
		private static void SetVanityTreeDrops(int dropType, Tile tileCache, ref int dropItem)
		{
			if (Main.rand.Next(2) == 0)
			{
				dropItem = dropType;
			}
		}

		// Token: 0x06000FD4 RID: 4052 RVA: 0x00457D58 File Offset: 0x00455F58
		public static bool IsHarvestableHerbWithSeed(int type, int style)
		{
			if (type == 82)
			{
				return false;
			}
			if (type != 84 && type != 83)
			{
				return false;
			}
			bool result = false;
			if (type == 84)
			{
				result = true;
			}
			if (style == 0 && Main.dayTime)
			{
				result = true;
			}
			if (style == 1 && !Main.dayTime)
			{
				result = true;
			}
			if (style == 3 && !Main.dayTime && (Main.bloodMoon || Main.moonPhase == 0))
			{
				result = true;
			}
			if (style == 4 && (Main.raining || Main.cloudAlpha > 0f))
			{
				result = true;
			}
			if (style == 5 && !Main.raining && Main.dayTime && Main.time > 40500.0)
			{
				result = true;
			}
			return result;
		}

		// Token: 0x06000FD5 RID: 4053 RVA: 0x00457DF3 File Offset: 0x00455FF3
		private static bool KillTile_ShouldDropSeeds(int x, int y)
		{
			return Main.rand.Next(2) == 0 && (WorldGen.GetPlayerForTile(x, y).HasItem(281) || WorldGen.GetPlayerForTile(x, y).HasItem(986));
		}

		// Token: 0x06000FD6 RID: 4054 RVA: 0x00457E2C File Offset: 0x0045602C
		private static void KillTile_GetTreeDrops(int i, int j, Tile tileCache, ref bool bonusWood, ref int dropItem, ref int secondaryItem)
		{
			if (tileCache.frameX >= 22 && tileCache.frameY >= 198)
			{
				if (Main.netMode != 1)
				{
					if (WorldGen.genRand.Next(2) == 0)
					{
						int num = j;
						while (Main.tile[i, num] != null && (!Main.tile[i, num].active() || !Main.tileSolid[(int)Main.tile[i, num].type] || Main.tileSolidTop[(int)Main.tile[i, num].type]))
						{
							num++;
						}
						if (Main.tile[i, num] != null)
						{
							Tile tile = Main.tile[i, num];
							if (tile.type == 2 || tile.type == 109 || tile.type == 477 || tile.type == 492 || tile.type == 147 || tile.type == 199 || tile.type == 23 || tile.type == 633)
							{
								dropItem = 9;
								secondaryItem = 27;
							}
							else
							{
								dropItem = 9;
							}
						}
					}
					else
					{
						dropItem = 9;
					}
				}
			}
			else
			{
				dropItem = 9;
			}
			if (dropItem == 9)
			{
				int num2;
				int num3;
				WorldGen.GetTreeBottom(i, j, out num2, out num3);
				if (Main.tile[num2, num3].active())
				{
					ushort type = Main.tile[num2, num3].type;
					if (type > 147)
					{
						if (type <= 492)
						{
							if (type != 199)
							{
								if (type != 492)
								{
									goto IL_23D;
								}
								goto IL_20E;
							}
						}
						else
						{
							if (type == 633)
							{
								dropItem = 5215;
								goto IL_23D;
							}
							if (type == 661)
							{
								goto IL_1F0;
							}
							if (type != 662)
							{
								goto IL_23D;
							}
						}
						dropItem = 911;
						goto IL_23D;
					}
					if (type <= 60)
					{
						if (type != 23)
						{
							if (type != 60)
							{
								goto IL_23D;
							}
							dropItem = 620;
							goto IL_23D;
						}
					}
					else if (type != 70)
					{
						if (type == 109)
						{
							goto IL_20E;
						}
						if (type != 147)
						{
							goto IL_23D;
						}
						dropItem = 2503;
						goto IL_23D;
					}
					else
					{
						if (WorldGen.genRand.Next(2) == 0)
						{
							dropItem = 183;
							goto IL_23D;
						}
						dropItem = 0;
						goto IL_23D;
					}
					IL_1F0:
					dropItem = 619;
					goto IL_23D;
					IL_20E:
					dropItem = 621;
				}
				IL_23D:
				int num4 = (int)Player.FindClosest(new Vector2((float)(num2 * 16), (float)(num3 * 16)), 16, 16);
				int axe = Main.player[num4].inventory[Main.player[num4].selectedItem].axe;
				if (WorldGen.genRand.Next(100) < axe || Main.rand.Next(3) == 0)
				{
					bonusWood = true;
				}
			}
		}

		// Token: 0x06000FD7 RID: 4055 RVA: 0x004580D4 File Offset: 0x004562D4
		private static void KillTile_DropBait(int i, int j, Tile tileCache)
		{
			int num = -1;
			int num2 = -1;
			int num3 = -1;
			int num4 = -1;
			int num5 = (int)Player.FindClosest(new Vector2((float)(i * 16), (float)(j * 16)), 16, 16);
			if (tileCache.type == 3)
			{
				num = 400;
				num2 = 100;
				if (Main.player[num5].flowerBoots && tileCache.frameX >= 108)
				{
					num *= 10000;
					num2 *= 10000;
				}
			}
			if (tileCache.type == 73)
			{
				num = 200;
				num2 = 50;
				if (Main.player[num5].flowerBoots && tileCache.frameX >= 108)
				{
					num *= 10000;
					num2 *= 10000;
				}
			}
			if (tileCache.type == 637)
			{
				num4 = 100;
				if (Main.player[num5].flowerBoots && tileCache.frameX >= 108)
				{
					num4 *= 10000;
				}
			}
			if (tileCache.type == 61)
			{
				num3 = 80;
				if (Main.player[num5].flowerBoots && tileCache.frameX >= 108)
				{
					num3 *= 10000;
				}
			}
			if (tileCache.type == 74)
			{
				num3 = 40;
				if (Main.player[num5].flowerBoots && tileCache.frameX >= 108)
				{
					num3 *= 10000;
				}
			}
			if (tileCache.type == 62)
			{
				num3 = 250;
			}
			if (tileCache.type == 185)
			{
				if (tileCache.frameY == 0 && tileCache.frameX < 214)
				{
					num = 6;
				}
				if (tileCache.frameY == 18 && (tileCache.frameX < 214 || tileCache.frameX >= 1368))
				{
					num = 6;
				}
			}
			else if (tileCache.type == 186)
			{
				if (tileCache.frameX >= 378 && tileCache.frameX <= 700)
				{
					num = 6;
				}
			}
			else if (tileCache.type == 187)
			{
				if (tileCache.frameX >= 756 && tileCache.frameX <= 916)
				{
					num = 6;
				}
				if (tileCache.frameX <= 322)
				{
					num = 6;
				}
			}
			else if (tileCache.type == 233)
			{
				num3 = 10;
			}
			int num6 = 357;
			if (Main.player[num5].ZoneGraveyard)
			{
				num6 = 606;
			}
			if (num > 0 && NPC.CountNPCS(num6) < 5 && WorldGen.genRand.Next(num) == 0)
			{
				int type = num6;
				if (num6 == 357 && Player.GetClosestRollLuck(i, j, NPC.goldCritterChance) == 0f)
				{
					type = 448;
				}
				int num7 = NPC.NewNPC(WorldGen.GetNPCSource_TileBreak(i, j), i * 16 + 10, j * 16, type, 0, 0f, 0f, 0f, 0f, 255);
				Main.npc[num7].TargetClosest(true);
				Main.npc[num7].velocity.Y = (float)WorldGen.genRand.Next(-50, -21) * 0.1f;
				Main.npc[num7].velocity.X = (float)WorldGen.genRand.Next(0, 26) * 0.1f * (float)(-(float)Main.npc[num7].direction);
				Main.npc[num7].direction *= -1;
				Main.npc[num7].netUpdate = true;
			}
			if (num2 > 0 && NPC.CountNPCS(377) < 5 && WorldGen.genRand.Next(num2) == 0)
			{
				int type2 = 377;
				if (Player.GetClosestRollLuck(i, j, NPC.goldCritterChance) == 0f)
				{
					type2 = 446;
				}
				int num8 = NPC.NewNPC(WorldGen.GetNPCSource_TileBreak(i, j), i * 16 + 10, j * 16, type2, 0, 0f, 0f, 0f, 0f, 255);
				Main.npc[num8].TargetClosest(true);
				Main.npc[num8].velocity.Y = (float)WorldGen.genRand.Next(-50, -21) * 0.1f;
				Main.npc[num8].velocity.X = (float)WorldGen.genRand.Next(0, 26) * 0.1f * (float)(-(float)Main.npc[num8].direction);
				Main.npc[num8].direction *= -1;
				Main.npc[num8].netUpdate = true;
			}
			if (num3 > 0 && NPC.CountNPCS(485) + NPC.CountNPCS(486) + NPC.CountNPCS(487) < 8 && WorldGen.genRand.Next(num3) == 0)
			{
				int type3 = 485;
				if (WorldGen.genRand.Next(4) == 0)
				{
					type3 = 486;
				}
				if (WorldGen.genRand.Next(12) == 0)
				{
					type3 = 487;
				}
				int num9 = NPC.NewNPC(WorldGen.GetNPCSource_TileBreak(i, j), i * 16 + 10, j * 16, type3, 0, 0f, 0f, 0f, 0f, 255);
				Main.npc[num9].TargetClosest(true);
				Main.npc[num9].velocity.Y = (float)WorldGen.genRand.Next(-50, -21) * 0.1f;
				Main.npc[num9].velocity.X = (float)WorldGen.genRand.Next(0, 26) * 0.1f * (float)(-(float)Main.npc[num9].direction);
				Main.npc[num9].direction *= -1;
				Main.npc[num9].netUpdate = true;
			}
			if (num4 > 0 && NPC.CountNPCS(654) + NPC.CountNPCS(653) < 8 && WorldGen.genRand.Next(num4) == 0)
			{
				int type4 = 653;
				if (WorldGen.genRand.Next(2) == 0)
				{
					type4 = 654;
				}
				int num10 = NPC.NewNPC(WorldGen.GetNPCSource_TileBreak(i, j), i * 16 + 10, j * 16, type4, 0, 0f, 0f, 0f, 0f, 255);
				Main.npc[num10].TargetClosest(true);
				Main.npc[num10].velocity.Y = (float)WorldGen.genRand.Next(-50, -21) * 0.1f;
				Main.npc[num10].velocity.X = (float)WorldGen.genRand.Next(0, 26) * 0.1f * (float)(-(float)Main.npc[num10].direction);
				Main.npc[num10].direction *= -1;
				Main.npc[num10].netUpdate = true;
			}
		}

		// Token: 0x06000FD8 RID: 4056 RVA: 0x00458754 File Offset: 0x00456954
		public static void KillTile_PlaySounds(int i, int j, bool fail, Tile tileCache)
		{
			if (WorldGen.gen)
			{
				return;
			}
			int type = (int)tileCache.type;
			if (type == 127 || type == 623)
			{
				SoundEngine.PlaySound(SoundID.Item27, i * 16, j * 16);
			}
			else if (type == 147 || type == 224)
			{
				if (WorldGen.genRand.Next(2) == 0)
				{
					SoundEngine.PlaySound(SoundID.Item48, i * 16, j * 16);
				}
				else
				{
					SoundEngine.PlaySound(SoundID.Item49, i * 16, j * 16);
				}
			}
			else if (type == 161 || type == 163 || type == 164 || type == 200 || type == 541)
			{
				SoundEngine.PlaySound(SoundID.Item50, i * 16, j * 16);
			}
			else if (type == 518 || type == 519 || type == 528 || type == 529 || type == 549 || type == 637 || type == 638 || type == 636)
			{
				SoundEngine.PlaySound(6, i * 16, j * 16, 1, 1f, 0f);
			}
			else if (type == 530 && tileCache.frameX < 270)
			{
				SoundEngine.PlaySound(6, i * 16, j * 16, 1, 1f, 0f);
			}
			else if (type == 3 || type == 110)
			{
				SoundEngine.PlaySound(6, i * 16, j * 16, 1, 1f, 0f);
			}
			else if (type == 254)
			{
				SoundEngine.PlaySound(6, i * 16, j * 16, 1, 1f, 0f);
			}
			else if (type == 24)
			{
				SoundEngine.PlaySound(6, i * 16, j * 16, 1, 1f, 0f);
			}
			else if (Main.tileAlch[type] || type == 384 || type == 227 || type == 32 || type == 51 || type == 52 || type == 61 || type == 62 || type == 69 || type == 655 || type == 71 || type == 73 || type == 74 || type == 113 || type == 115 || type == 184 || type == 192 || type == 205 || type == 233 || type == 352 || type == 382 || type == 624 || type == 656)
			{
				SoundEngine.PlaySound(6, i * 16, j * 16, 1, 1f, 0f);
			}
			else if (type == 485)
			{
				SoundEngine.PlaySound(4, i * 16, j * 16, 11, 1f, 0f);
			}
			else if (type == 201)
			{
				SoundEngine.PlaySound(6, i * 16, j * 16, 1, 1f, 0f);
			}
			else if (type == 481 || type == 482 || type == 483)
			{
				SoundEngine.PlaySound(SoundID.Item127, i * 16, j * 16);
			}
			else if (type == 1 || type == 6 || type == 7 || type == 8 || type == 9 || type == 22 || type == 140 || type == 25 || type == 37 || type == 38 || type == 39 || type == 41 || type == 43 || type == 44 || type == 45 || type == 46 || type == 47 || type == 48 || type == 56 || type == 58 || type == 63 || type == 64 || type == 65 || type == 66 || type == 67 || type == 68 || type == 75 || type == 76 || type == 107 || type == 108 || type == 111 || type == 117 || type == 118 || type == 119 || type == 120 || type == 121 || type == 122 || type == 150 || type == 151 || type == 152 || type == 153 || type == 154 || type == 155 || type == 156 || type == 160 || type == 161 || type == 166 || type == 167 || type == 168 || type == 169 || type == 175 || type == 176 || type == 177 || type == 203 || type == 202 || type == 204 || type == 206 || type == 211 || type == 221 || type == 222 || type == 223 || type == 226 || type == 248 || type == 249 || type == 250 || type == 272 || type == 273 || type == 274 || type == 478 || type == 284 || type == 325 || type == 346 || type == 347 || type == 348 || type == 350 || type == 367 || type == 357 || type == 368 || type == 369 || type == 370 || type == 407 || type == 472 || type == 473 || type == 500 || type == 501 || type == 502 || type == 503 || type == 546 || type == 557 || type == 566 || type == 618 || type == 408 || type == 409 || type == 669 || type == 670 || type == 671 || type == 672 || type == 673 || type == 674 || type == 675 || type == 676 || type == 677 || type == 678 || type == 679 || type == 680 || type == 681 || type == 682 || type == 683 || type == 684 || type == 685 || type == 686 || type == 687 || type == 689 || type == 688 || type == 690 || type == 691 || type == 692)
			{
				SoundEngine.PlaySound(21, i * 16, j * 16, 1, 1f, 0f);
			}
			else if (type == 666)
			{
				SoundEngine.PlaySound(SoundID.Item177, i * 16, j * 16);
			}
			else if (type == 231 || type == 195 || type == 474)
			{
				SoundEngine.PlaySound(4, i * 16, j * 16, 1, 1f, 0f);
				if (type == 231)
				{
					SoundEngine.PlaySound(SoundID.Item173, i * 16, j * 16);
				}
			}
			else if (type == 26 && tileCache.frameX >= 54)
			{
				SoundEngine.PlaySound(4, i * 16, j * 16, 1, 1f, 0f);
			}
			else if (type == 314)
			{
				SoundEngine.PlaySound(SoundID.Item52, i * 16, j * 16);
			}
			else if (type >= 330 && type <= 333)
			{
				SoundEngine.PlaySound(18, i * 16, j * 16, 1, 1f, 0f);
			}
			else if ((type == 162 || type == 385 || type == 129 || (type == 165 && tileCache.frameX < 54)) && !fail)
			{
				SoundEngine.PlaySound(SoundID.Item27, i * 16, j * 16);
			}
			else if (type != 138)
			{
				SoundEngine.PlaySound(0, i * 16, j * 16, 1, 1f, 0f);
			}
			if (!fail)
			{
				if (tileCache.type == 13)
				{
					SoundEngine.PlaySound(13, i * 16, j * 16, 1, 1f, 0f);
					return;
				}
				if (tileCache.type == 54)
				{
					SoundEngine.PlaySound(13, i * 16, j * 16, 1, 1f, 0f);
					return;
				}
				if (tileCache.type == 326)
				{
					SoundEngine.PlaySound(13, i * 16, j * 16, 1, 1f, 0f);
					return;
				}
				if (tileCache.type == 327)
				{
					SoundEngine.PlaySound(13, i * 16, j * 16, 1, 1f, 0f);
					return;
				}
				if (tileCache.type == 458)
				{
					SoundEngine.PlaySound(13, i * 16, j * 16, 1, 1f, 0f);
					return;
				}
				if (tileCache.type == 459)
				{
					SoundEngine.PlaySound(13, i * 16, j * 16, 1, 1f, 0f);
					return;
				}
				if (tileCache.type == 345)
				{
					SoundEngine.PlaySound(13, i * 16, j * 16, 1, 1f, 0f);
					return;
				}
				if (tileCache.type == 328)
				{
					SoundEngine.PlaySound(13, i * 16, j * 16, 1, 1f, 0f);
					return;
				}
				if (tileCache.type == 329)
				{
					SoundEngine.PlaySound(13, i * 16, j * 16, 1, 1f, 0f);
					return;
				}
				if (tileCache.type == 507)
				{
					SoundEngine.PlaySound(13, i * 16, j * 16, 1, 1f, 0f);
					return;
				}
				if (tileCache.type == 508)
				{
					SoundEngine.PlaySound(13, i * 16, j * 16, 1, 1f, 0f);
				}
			}
		}

		// Token: 0x06000FD9 RID: 4057 RVA: 0x00459204 File Offset: 0x00457404
		public static Rectangle? GetTileVisualHitbox(int x, int y)
		{
			Tile tile = Main.tile[x, y];
			if (tile == null || !tile.nactive())
			{
				return null;
			}
			Rectangle value = new Rectangle(x * 16, y * 16, 16, 16);
			ushort type = tile.type;
			if (type == 323)
			{
				value.X += (int)tile.frameY;
			}
			if (tile.halfBrick())
			{
				value.Y += 8;
				value.Height = 8;
			}
			return new Rectangle?(value);
		}

		// Token: 0x06000FDA RID: 4058 RVA: 0x00459288 File Offset: 0x00457488
		public static int KillTile_GetTileDustAmount(bool fail, Tile tileCache)
		{
			ushort type = tileCache.type;
			if (type <= 484)
			{
				if (type <= 287)
				{
					if (type <= 172)
					{
						if (type == 125 || type == 138 || type == 172)
						{
							return 0;
						}
					}
					else if (type != 184)
					{
						if (type != 231)
						{
							if (type == 287)
							{
								return 0;
							}
						}
						else
						{
							if (!fail)
							{
								return 6;
							}
							return 3;
						}
					}
					else
					{
						if (tileCache.frameX / 22 >= 5)
						{
							return 5;
						}
						if (!fail)
						{
							return 10;
						}
						return 3;
					}
				}
				else if (type <= 376)
				{
					if (type - 300 <= 8 || type - 354 <= 1 || type - 373 <= 3)
					{
						return 0;
					}
				}
				else
				{
					if (type == 461)
					{
						return 0;
					}
					if (type - 481 <= 2)
					{
						return 3;
					}
					if (type == 484)
					{
						return 0;
					}
				}
			}
			else
			{
				if (type <= 549)
				{
					if (type <= 536)
					{
						if (type == 499)
						{
							return 0;
						}
						if (type != 534 && type != 536)
						{
							goto IL_177;
						}
					}
					else if (type != 539)
					{
						if (type == 541)
						{
							return 1;
						}
						if (type != 549)
						{
							goto IL_177;
						}
						return 2;
					}
				}
				else if (type <= 617)
				{
					if (type - 564 > 1 && type - 593 > 1 && type != 617)
					{
						goto IL_177;
					}
					return 0;
				}
				else
				{
					switch (type)
					{
					case 625:
					case 627:
						break;
					case 626:
					case 628:
					case 629:
						goto IL_177;
					case 630:
					case 631:
						return 0;
					default:
						if (type == 654)
						{
							return 0;
						}
						if (type - 664 > 1)
						{
							goto IL_177;
						}
						return 0;
					}
				}
				if (!fail)
				{
					return 5;
				}
				return 3;
			}
			IL_177:
			if (!fail)
			{
				return 10;
			}
			return 3;
		}

		// Token: 0x06000FDB RID: 4059 RVA: 0x00459444 File Offset: 0x00457644
		public static int KillTile_MakeTileDust(int i, int j, Tile tileCache)
		{
			int num = 0;
			if (tileCache.type == 216)
			{
				num = -1;
			}
			if (tileCache.type == 324)
			{
				if (tileCache.frameY == 0)
				{
					num = 280;
				}
				else
				{
					num = (int)(281 + tileCache.frameX / 18);
				}
			}
			if (tileCache.type == 216)
			{
				num = -1;
			}
			if (tileCache.type == 335)
			{
				num = -1;
			}
			if (tileCache.type == 338)
			{
				num = -1;
			}
			if (tileCache.type == 0)
			{
				num = 0;
			}
			if (tileCache.type == 192)
			{
				num = 3;
			}
			if (tileCache.type == 208)
			{
				num = 126;
			}
			else if (tileCache.type == 408 || tileCache.type == 409)
			{
				num = 265;
			}
			else if (tileCache.type == 669)
			{
				num = 314;
			}
			else if (tileCache.type == 670)
			{
				num = 315;
			}
			else if (tileCache.type == 671)
			{
				num = 316;
			}
			else if (tileCache.type == 672)
			{
				num = 317;
			}
			else if (tileCache.type == 673)
			{
				num = 318;
			}
			else if (tileCache.type == 674)
			{
				num = 319;
			}
			else if (tileCache.type == 675)
			{
				num = 320;
			}
			else if (tileCache.type == 676)
			{
				num = 321;
			}
			if (tileCache.type == 16)
			{
				num = 1;
				if (tileCache.frameX >= 36)
				{
					num = 82;
				}
			}
			else if (tileCache.type == 415 || tileCache.type == 500)
			{
				num = 6;
			}
			else if (tileCache.type == 416 || tileCache.type == 501)
			{
				num = 61;
			}
			else if (tileCache.type == 417 || tileCache.type == 502)
			{
				num = 242;
			}
			else if (tileCache.type == 418 || tileCache.type == 503)
			{
				num = 135;
			}
			else if (tileCache.type == 474)
			{
				num = 18;
			}
			if (tileCache.type == 1 || tileCache.type == 17 || tileCache.type == 38 || tileCache.type == 39 || tileCache.type == 41 || tileCache.type == 43 || tileCache.type == 44 || tileCache.type == 481 || tileCache.type == 482 || tileCache.type == 483 || tileCache.type == 48 || Main.tileStone[(int)tileCache.type] || tileCache.type == 85 || tileCache.type == 90 || tileCache.type == 92 || tileCache.type == 96 || tileCache.type == 97 || tileCache.type == 99 || tileCache.type == 117 || tileCache.type == 130 || tileCache.type == 131 || tileCache.type == 132 || tileCache.type == 135 || tileCache.type == 135 || tileCache.type == 142 || tileCache.type == 143 || tileCache.type == 144 || tileCache.type == 210 || tileCache.type == 207 || tileCache.type == 235 || tileCache.type == 247 || tileCache.type == 272 || tileCache.type == 273 || tileCache.type == 283 || tileCache.type == 410 || tileCache.type == 480 || tileCache.type == 509 || tileCache.type == 618 || tileCache.type == 657 || tileCache.type == 658 || tileCache.type == 677 || tileCache.type == 678 || tileCache.type == 679)
			{
				num = 1;
			}
			if (tileCache.type == 379)
			{
				num = 257;
			}
			if (tileCache.type == 311)
			{
				num = 207;
			}
			if (tileCache.type == 312)
			{
				num = 208;
			}
			if (tileCache.type == 313)
			{
				num = 209;
			}
			if (tileCache.type == 104)
			{
				num = -1;
			}
			if (tileCache.type == 95 || tileCache.type == 98 || tileCache.type == 100 || tileCache.type == 174 || tileCache.type == 173)
			{
				num = 6;
			}
			if (tileCache.type == 30 || tileCache.type == 86 || tileCache.type == 94 || tileCache.type == 106 || tileCache.type == 114 || tileCache.type == 124 || tileCache.type == 128 || tileCache.type == 269)
			{
				num = 7;
			}
			if (tileCache.type == 372)
			{
				num = 242;
			}
			if (tileCache.type == 646)
			{
				num = 29;
			}
			if (tileCache.type == 49)
			{
				num = 29;
			}
			if (tileCache.type == 371)
			{
				num = 243;
			}
			if (tileCache.type == 334)
			{
				num = 7;
			}
			ushort type = tileCache.type;
			if (type > 209)
			{
				if (type > 548)
				{
					if (type <= 638)
					{
						switch (type)
						{
						case 557:
							goto IL_AB5;
						case 558:
						case 559:
						case 561:
						case 562:
						case 563:
						case 566:
						case 568:
						case 569:
						case 570:
						case 571:
						case 573:
						case 574:
						case 575:
						case 576:
						case 577:
						case 578:
						case 580:
						case 581:
						case 582:
							goto IL_CAB;
						case 560:
						case 564:
						case 565:
						case 567:
						case 572:
						case 579:
						case 591:
						case 592:
						case 593:
						case 594:
							goto IL_A6B;
						case 583:
							num = ((WorldGen.genRand.Next(10) == 0) ? 87 : 1);
							goto IL_CAB;
						case 584:
							num = ((WorldGen.genRand.Next(10) == 0) ? 86 : 1);
							goto IL_CAB;
						case 585:
							num = ((WorldGen.genRand.Next(10) == 0) ? 88 : 1);
							goto IL_CAB;
						case 586:
							num = ((WorldGen.genRand.Next(10) == 0) ? 89 : 1);
							goto IL_CAB;
						case 587:
							num = ((WorldGen.genRand.Next(10) == 0) ? 90 : 1);
							goto IL_CAB;
						case 588:
							num = ((WorldGen.genRand.Next(10) == 0) ? 91 : 1);
							goto IL_CAB;
						case 589:
							num = ((WorldGen.genRand.Next(10) == 0) ? 138 : 1);
							goto IL_CAB;
						case 590:
							num = 1;
							goto IL_CAB;
						case 595:
							num = 78;
							goto IL_CAB;
						case 596:
							num = 78;
							goto IL_CAB;
						default:
							switch (type)
							{
							case 613:
							case 614:
							case 621:
							case 622:
							case 623:
							case 624:
							case 630:
							case 631:
								goto IL_A6B;
							case 615:
								num = 78;
								goto IL_CAB;
							case 616:
								num = 78;
								goto IL_CAB;
							case 617:
							case 618:
							case 619:
							case 620:
							case 625:
							case 627:
							case 628:
							case 629:
							case 632:
							case 635:
							case 636:
								goto IL_CAB;
							case 626:
								break;
							case 633:
								num = ((WorldGen.genRand.Next(6) != 0) ? 237 : 36);
								goto IL_CAB;
							case 634:
								num = ((WorldGen.genRand.Next(10) != 0) ? 36 : 31);
								if (WorldGen.genRand.Next(12) == 0)
								{
									num = 6;
									goto IL_CAB;
								}
								goto IL_CAB;
							case 637:
							case 638:
								num = 237;
								goto IL_CAB;
							default:
								goto IL_CAB;
							}
							break;
						}
					}
					else
					{
						if (type == 656)
						{
							goto IL_A6B;
						}
						if (type == 668)
						{
							num = 0;
							goto IL_CAB;
						}
						switch (type)
						{
						case 677:
							goto IL_A8C;
						case 678:
							goto IL_A97;
						case 679:
							goto IL_AA2;
						case 680:
						case 681:
						case 682:
						case 683:
						case 684:
						case 685:
						case 686:
							goto IL_CAB;
						case 687:
							goto IL_AC4;
						case 688:
							goto IL_AE5;
						case 689:
							goto IL_ACF;
						case 690:
							goto IL_ADA;
						case 691:
							break;
						default:
							goto IL_CAB;
						}
					}
					num = 305;
					goto IL_CAB;
				}
				if (type <= 387)
				{
					if (type - 319 > 1 && type - 386 > 1)
					{
						goto IL_CAB;
					}
					goto IL_A6B;
				}
				else
				{
					if (type == 390)
					{
						goto IL_A6B;
					}
					switch (type)
					{
					case 405:
					case 406:
					case 411:
					case 412:
					case 419:
					case 420:
					case 421:
					case 422:
					case 423:
					case 424:
					case 425:
					case 428:
					case 429:
					case 441:
					case 442:
					case 445:
					case 446:
					case 447:
					case 448:
					case 449:
					case 450:
					case 451:
					case 452:
					case 453:
					case 455:
					case 456:
					case 457:
					case 462:
					case 463:
					case 464:
					case 465:
					case 466:
					case 468:
					case 476:
					case 486:
					case 487:
					case 489:
					case 490:
					case 491:
					case 493:
					case 494:
					case 497:
					case 510:
					case 511:
					case 520:
					case 521:
					case 522:
					case 523:
					case 524:
					case 525:
					case 526:
					case 527:
					case 531:
					case 545:
					case 547:
					case 548:
						goto IL_A6B;
					case 407:
						num = 10;
						goto IL_CAB;
					case 408:
					case 409:
					case 410:
					case 413:
					case 414:
					case 415:
					case 416:
					case 417:
					case 418:
					case 426:
					case 427:
					case 430:
					case 431:
					case 432:
					case 433:
					case 434:
					case 435:
					case 436:
					case 437:
					case 438:
					case 439:
					case 440:
					case 443:
					case 444:
					case 458:
					case 459:
					case 460:
					case 461:
					case 467:
					case 469:
					case 470:
					case 471:
					case 474:
					case 475:
					case 477:
					case 478:
					case 479:
					case 480:
					case 484:
					case 485:
					case 488:
					case 492:
					case 495:
					case 496:
					case 499:
					case 500:
					case 501:
					case 502:
					case 503:
					case 504:
					case 505:
					case 506:
					case 507:
					case 508:
					case 509:
					case 518:
					case 519:
					case 528:
					case 529:
					case 530:
					case 532:
					case 533:
					case 534:
					case 536:
					case 538:
					case 539:
					case 542:
					case 543:
					case 544:
						goto IL_CAB;
					case 454:
						num = 139;
						goto IL_CAB;
					case 472:
					case 546:
						break;
					case 473:
						num = 82;
						goto IL_CAB;
					case 481:
						goto IL_A8C;
					case 482:
						goto IL_A97;
					case 483:
						goto IL_AA2;
					case 498:
						num = 30;
						goto IL_CAB;
					case 512:
						num = 93;
						goto IL_CAB;
					case 513:
						num = 94;
						goto IL_CAB;
					case 514:
						num = 95;
						goto IL_CAB;
					case 515:
						num = 96;
						goto IL_CAB;
					case 516:
						num = 97;
						goto IL_CAB;
					case 517:
						goto IL_AC4;
					case 535:
						goto IL_ACF;
					case 537:
						goto IL_ADA;
					case 540:
						goto IL_AE5;
					case 541:
						num = 226;
						goto IL_CAB;
					default:
						goto IL_CAB;
					}
				}
				IL_AB5:
				num = 8;
				goto IL_CAB;
				IL_AC4:
				num = 258;
				goto IL_CAB;
				IL_ACF:
				num = 299;
				goto IL_CAB;
				IL_ADA:
				num = 300;
				goto IL_CAB;
				IL_AE5:
				num = 301;
				goto IL_CAB;
			}
			if (type <= 89)
			{
				if (type <= 44)
				{
					if (type - 10 > 1)
					{
						switch (type)
						{
						case 41:
							goto IL_A8C;
						case 42:
							goto IL_CAB;
						case 43:
							goto IL_A97;
						case 44:
							goto IL_AA2;
						default:
							goto IL_CAB;
						}
					}
				}
				else if (type != 87 && type != 89)
				{
					goto IL_CAB;
				}
			}
			else if (type <= 139)
			{
				if (type != 93 && type != 139)
				{
					goto IL_CAB;
				}
			}
			else if (type != 184)
			{
				if (type != 209)
				{
					goto IL_CAB;
				}
			}
			else
			{
				int num2 = (int)(tileCache.frameX / 22);
				if (num2 == 5)
				{
					num = 258;
					goto IL_CAB;
				}
				if (num2 == 6)
				{
					num = 299;
					goto IL_CAB;
				}
				if (num2 == 7)
				{
					num = 300;
					goto IL_CAB;
				}
				if (num2 == 8)
				{
					num = 301;
					goto IL_CAB;
				}
				if (num2 == 9)
				{
					num = 305;
					goto IL_CAB;
				}
				if (num2 == 10)
				{
					num = 267;
					goto IL_CAB;
				}
				num = 93 + num2;
				goto IL_CAB;
			}
			IL_A6B:
			num = -1;
			goto IL_CAB;
			IL_A8C:
			num = 275;
			goto IL_CAB;
			IL_A97:
			num = 276;
			goto IL_CAB;
			IL_AA2:
			num = 277;
			IL_CAB:
			if (Main.tileMoss[(int)tileCache.type])
			{
				if (tileCache.type == 381)
				{
					num = 258;
				}
				else if (tileCache.type == 534)
				{
					num = 299;
				}
				else if (tileCache.type == 536)
				{
					num = 300;
				}
				else if (tileCache.type == 539)
				{
					num = 301;
				}
				else if (tileCache.type == 625)
				{
					num = 305;
				}
				else if (tileCache.type == 627)
				{
					num = 267;
				}
				else
				{
					num = (int)(tileCache.type - 179 + 93);
				}
			}
			if (tileCache.type == 240)
			{
				int num3 = (int)(tileCache.frameX / 54);
				if (tileCache.frameY >= 54)
				{
					num3 += (int)(36 * (tileCache.frameY / 54));
				}
				num = 7;
				if (num3 == 16 || num3 == 17)
				{
					num = 26;
				}
				if (num3 >= 46 && num3 <= 49)
				{
					num = -1;
				}
			}
			if (tileCache.type == 241)
			{
				num = 1;
			}
			if (tileCache.type == 242)
			{
				num = -1;
			}
			if (tileCache.type == 529)
			{
				int type2 = (int)Main.tile[i, j + 1].type;
				if (type2 == 116)
				{
					num = 47;
				}
				else if (type2 == 234)
				{
					num = 125;
				}
				else if (type2 == 112)
				{
					num = 17;
				}
				else if (i < WorldGen.beachDistance || i > Main.maxTilesX - WorldGen.beachDistance)
				{
					num = 290;
				}
				else
				{
					num = 289;
				}
			}
			if (tileCache.type == 356)
			{
				num = -1;
			}
			if (tileCache.type == 663)
			{
				num = -1;
			}
			if (tileCache.type == 351)
			{
				num = -1;
			}
			if (tileCache.type == 246)
			{
				num = -1;
			}
			if (tileCache.type == 36)
			{
				num = -1;
			}
			if (tileCache.type == 365)
			{
				num = 239;
			}
			if (tileCache.type == 366)
			{
				num = 30;
			}
			if (tileCache.type == 504)
			{
				num = -1;
			}
			if (tileCache.type == 357 || tileCache.type == 367 || tileCache.type == 561)
			{
				num = 236;
			}
			if (tileCache.type == 368 || tileCache.type == 369 || tileCache.type == 576)
			{
				num = 240;
			}
			if (tileCache.type == 170)
			{
				num = 196;
			}
			if (tileCache.type == 315)
			{
				num = 225;
			}
			if (tileCache.type == 641)
			{
				if (WorldGen.genRand.Next(2) == 0)
				{
					num = 243;
				}
				else
				{
					num = 161;
				}
			}
			if (tileCache.type == 659)
			{
				num = 308;
			}
			if (tileCache.type == 667)
			{
				num = 308;
			}
			if (tileCache.type == 346)
			{
				num = 128;
			}
			if (tileCache.type == 347)
			{
				num = 117;
			}
			if (tileCache.type == 348)
			{
				num = 42;
			}
			if (tileCache.type == 350)
			{
				num = 226;
			}
			if (tileCache.type == 370)
			{
				if (WorldGen.genRand.Next(2) == 0)
				{
					num = 6;
				}
				else
				{
					num = 23;
				}
			}
			if (tileCache.type == 171)
			{
				if (WorldGen.genRand.Next(2) == 0)
				{
					num = 196;
				}
				else
				{
					num = -1;
				}
			}
			if (tileCache.type == 326)
			{
				num = 13;
			}
			if (tileCache.type == 327)
			{
				num = 13;
			}
			if (tileCache.type == 345)
			{
				num = 13;
			}
			if (tileCache.type == 458)
			{
				num = 13;
			}
			if (tileCache.type == 459)
			{
				num = 13;
			}
			if (tileCache.type == 336)
			{
				num = 6;
			}
			if (tileCache.type == 340)
			{
				num = 75;
			}
			if (tileCache.type == 341)
			{
				num = 65;
			}
			if (tileCache.type == 342)
			{
				num = 135;
			}
			if (tileCache.type == 343)
			{
				num = 169;
			}
			if (tileCache.type == 344)
			{
				num = 156;
			}
			if (tileCache.type == 328)
			{
				num = 13;
			}
			if (tileCache.type == 329)
			{
				num = 13;
			}
			if (tileCache.type == 507)
			{
				num = 13;
			}
			if (tileCache.type == 508)
			{
				num = 13;
			}
			if (tileCache.type == 562)
			{
				num = -1;
			}
			if (tileCache.type == 571)
			{
				num = 40;
			}
			if (tileCache.type == 563)
			{
				num = -1;
			}
			if (tileCache.type == 330)
			{
				num = 9;
			}
			if (tileCache.type == 331)
			{
				num = 11;
			}
			if (tileCache.type == 332)
			{
				num = 19;
			}
			if (tileCache.type == 333)
			{
				num = 11;
			}
			if (tileCache.type == 101)
			{
				num = -1;
			}
			if (tileCache.type == 19)
			{
				int num4 = (int)(tileCache.frameY / 18);
				if (num4 == 0)
				{
					num = 7;
				}
				else if (num4 == 1)
				{
					num = 77;
				}
				else if (num4 == 2)
				{
					num = 78;
				}
				else if (num4 == 3)
				{
					num = 79;
				}
				else if (num4 == 4)
				{
					num = 26;
				}
				else if (num4 == 5)
				{
					num = 126;
				}
				else if (num4 == 6)
				{
					num = 275;
				}
				else if (num4 == 7)
				{
					num = 277;
				}
				else if (num4 == 8)
				{
					num = 276;
				}
				else if (num4 == 9)
				{
					num = 1;
				}
				else if (num4 == 10)
				{
					num = 214;
				}
				else if (num4 == 11)
				{
					num = 214;
				}
				else if (num4 == 12)
				{
					num = 214;
				}
				else if (num4 == 13)
				{
					num = 109;
				}
				else if (num4 == 14)
				{
					num = 13;
				}
				else if (num4 == 15)
				{
					num = 189;
				}
				else if (num4 == 16)
				{
					num = 191;
				}
				else if (num4 == 17)
				{
					num = 215;
				}
				else if (num4 == 18)
				{
					num = 26;
				}
				else if (num4 == 19)
				{
					num = 214;
				}
				else if (num4 == 20)
				{
					num = 4;
				}
				else if (num4 == 21)
				{
					num = 10;
				}
				else if (num4 == 22)
				{
					num = 32;
				}
				else if (num4 == 23)
				{
					num = 78;
				}
				else if (num4 == 24)
				{
					num = 147;
				}
				else if (num4 == 25)
				{
					num = 40;
				}
				else if (num4 == 26)
				{
					num = 226;
				}
				else if (num4 == 27)
				{
					num = 23;
				}
				else if (num4 == 28)
				{
					num = 240;
				}
				else if (num4 == 29)
				{
					num = 236;
				}
				else if (num4 == 30)
				{
					num = 68 + Main.rand.Next(3);
				}
				else if (num4 == 31)
				{
					num = 10;
				}
				else if (num4 == 32)
				{
					num = 78;
				}
				else if (num4 == 33)
				{
					num = 148;
				}
				else if (num4 == 34)
				{
					num = 5;
				}
				else if (num4 == 35)
				{
					num = 80;
				}
				else if (num4 == 37)
				{
					num = 18;
				}
				else if (num4 == 38)
				{
					num = 6;
				}
				else if (num4 == 39)
				{
					num = 61;
				}
				else if (num4 == 40)
				{
					num = 242;
				}
				else if (num4 == 41)
				{
					num = 135;
				}
				else if (num4 == 42)
				{
					num = 287;
				}
				else if (num4 == 44)
				{
					num = 273;
				}
				else if (num4 == 45)
				{
					num = 243;
				}
				else if (num4 == 46)
				{
					num = 243;
				}
				else if (num4 == 47)
				{
					num = 36;
				}
				else if (num4 == 48)
				{
					num = 226;
				}
				else
				{
					num = 1;
				}
			}
			if (tileCache.type == 79)
			{
				int num5 = (int)(tileCache.frameY / 36);
				if (num5 == 0)
				{
					num = 7;
				}
				else if (num5 == 1)
				{
					num = 77;
				}
				else if (num5 == 2)
				{
					num = 78;
				}
				else if (num5 == 3)
				{
					num = 79;
				}
				else if (num5 == 4)
				{
					num = 126;
				}
				else if (num5 == 8)
				{
					num = 109;
				}
				else if (num5 >= 9)
				{
					num = -1;
				}
				else
				{
					num = 1;
				}
			}
			if (tileCache.type == 18)
			{
				int num6 = (int)(tileCache.frameX / 36);
				if (num6 == 0)
				{
					num = 7;
				}
				else if (num6 == 1)
				{
					num = 77;
				}
				else if (num6 == 2)
				{
					num = 78;
				}
				else if (num6 == 3)
				{
					num = 79;
				}
				else if (num6 == 4)
				{
					num = 26;
				}
				else if (num6 == 5)
				{
					num = 40;
				}
				else if (num6 == 6)
				{
					num = 5;
				}
				else if (num6 == 7)
				{
					num = 26;
				}
				else if (num6 == 8)
				{
					num = 4;
				}
				else if (num6 == 9)
				{
					num = 126;
				}
				else if (num6 == 10)
				{
					num = 148;
				}
				else if (num6 == 11 || num6 == 12 || num6 == 13)
				{
					num = 1;
				}
				else if (num6 == 14)
				{
					num = 109;
				}
				else if (num6 == 15)
				{
					num = 126;
				}
				else
				{
					num = -1;
				}
			}
			if (tileCache.type == 14 || tileCache.type == 87 || tileCache.type == 88 || tileCache.type == 469)
			{
				num = -1;
			}
			if (tileCache.type >= 255 && tileCache.type <= 261)
			{
				int num7 = (int)(tileCache.type - 255);
				num = 86 + num7;
				if (num7 == 6)
				{
					num = 138;
				}
			}
			if (tileCache.type >= 262 && tileCache.type <= 268)
			{
				int num8 = (int)(tileCache.type - 262);
				num = 86 + num8;
				if (num8 == 6)
				{
					num = 138;
				}
			}
			if (tileCache.type == 178)
			{
				int num9 = (int)(tileCache.frameX / 18);
				num = 86 + num9;
				if (num9 == 6)
				{
					num = 138;
				}
			}
			if (tileCache.type == 440)
			{
				switch (tileCache.frameX / 54)
				{
				case 0:
					num = 90;
					break;
				case 1:
					num = 88;
					break;
				case 2:
					num = 89;
					break;
				case 3:
					num = 87;
					break;
				case 4:
					num = 86;
					break;
				case 5:
					num = 91;
					break;
				case 6:
					num = 138;
					break;
				default:
					num = -1;
					break;
				}
				if (tileCache.frameY < 54)
				{
					num = -1;
				}
			}
			type = tileCache.type;
			if (type <= 496)
			{
				switch (type)
				{
				case 426:
				case 427:
					num = 90;
					break;
				case 428:
				case 429:
					break;
				case 430:
				case 435:
					num = 89;
					break;
				case 431:
				case 436:
					num = 88;
					break;
				case 432:
				case 437:
					num = 87;
					break;
				case 433:
				case 438:
					num = 86;
					break;
				case 434:
				case 439:
					num = 91;
					break;
				default:
					if (type == 496)
					{
						num = 109;
					}
					break;
				}
			}
			else if (type != 549)
			{
				if (type == 552)
				{
					num = 32;
				}
			}
			else
			{
				num = 3;
			}
			if (tileCache.type == 186)
			{
				if (tileCache.frameX <= 360)
				{
					num = 26;
				}
				else if (tileCache.frameX <= 846)
				{
					num = 1;
				}
				else if (tileCache.frameX <= 954)
				{
					num = 9;
				}
				else if (tileCache.frameX <= 1062)
				{
					num = 11;
				}
				else if (tileCache.frameX <= 1170)
				{
					num = 10;
				}
				else if (tileCache.frameX <= 1332)
				{
					num = 0;
				}
				else if (tileCache.frameX <= 1386)
				{
					num = 10;
				}
				else
				{
					num = 80;
				}
			}
			if (tileCache.type == 187)
			{
				if (tileCache.frameX <= 144)
				{
					num = 1;
				}
				else if (tileCache.frameX <= 306)
				{
					num = 38;
				}
				else if (tileCache.frameX <= 468)
				{
					num = 36;
				}
				else if (tileCache.frameX <= 738)
				{
					num = 30;
				}
				else if (tileCache.frameX <= 970)
				{
					num = 1;
				}
				else if (tileCache.frameX <= 1132)
				{
					num = 148;
				}
				else if (tileCache.frameX <= 1132)
				{
					num = 155;
				}
				else if (tileCache.frameX <= 1348)
				{
					num = 1;
				}
				else if (tileCache.frameX <= 1564)
				{
					num = 0;
				}
				else if (tileCache.frameX <= 1890)
				{
					num = 250;
				}
				else if (tileCache.frameX <= 2196)
				{
					num = 240;
				}
				else if (tileCache.frameX <= 2520)
				{
					num = 236;
				}
			}
			if (tileCache.type == 647)
			{
				int num10 = (int)(tileCache.frameX / 54);
				if (num10 < 7)
				{
					num = 26;
				}
				else if (num10 < 16)
				{
					num = 1;
				}
				else if (num10 < 18)
				{
					num = 9;
				}
				else if (num10 < 20)
				{
					num = 11;
				}
				else if (num10 < 22)
				{
					num = 10;
				}
				else if (num10 < 26)
				{
					num = 7;
				}
				else if (num10 < 32)
				{
					num = 80;
				}
				else if (num10 < 35)
				{
					num = 80;
				}
			}
			if (tileCache.type == 648)
			{
				int num11 = (int)(tileCache.frameX / 54);
				num11 += (int)(tileCache.frameY / 36 * 35);
				if (num11 < 3)
				{
					num = 1;
				}
				else if (num11 < 6)
				{
					num = 38;
				}
				else if (num11 < 9)
				{
					num = 36;
				}
				else if (num11 < 14)
				{
					num = 30;
				}
				else if (num11 < 17)
				{
					num = 1;
				}
				else if (num11 < 18)
				{
					num = 1;
				}
				else if (num11 < 21)
				{
					num = 148;
				}
				else if (num11 < 29)
				{
					num = 155;
				}
				else if (num11 < 35)
				{
					num = 287;
				}
				else if (num11 < 41)
				{
					num = 240;
				}
				else if (num11 < 47)
				{
					num = 236;
				}
				else if (num11 < 50)
				{
					num = 0;
				}
				else if (num11 < 52)
				{
					num = 2;
				}
				else if (num11 < 55)
				{
					num = 26;
				}
			}
			if (tileCache.type == 105)
			{
				num = 1;
				if (tileCache.frameX >= 1548 && tileCache.frameX <= 1654 && tileCache.frameY < 54)
				{
					num = 148;
				}
			}
			if (tileCache.type == 349)
			{
				num = 1;
			}
			if (tileCache.type == 337 || tileCache.type == 506)
			{
				num = 1;
			}
			if (tileCache.type == 239)
			{
				short num12 = tileCache.frameX / 18;
				if (num12 == 0)
				{
					num = 9;
				}
				if (num12 == 1)
				{
					num = 81;
				}
				if (num12 == 2)
				{
					num = 8;
				}
				if (num12 == 3)
				{
					num = 82;
				}
				if (num12 == 4)
				{
					num = 11;
				}
				if (num12 == 5)
				{
					num = 83;
				}
				if (num12 == 6)
				{
					num = 10;
				}
				if (num12 == 7)
				{
					num = 84;
				}
				if (num12 == 8)
				{
					num = 14;
				}
				if (num12 == 9)
				{
					num = 23;
				}
				if (num12 == 10)
				{
					num = 25;
				}
				if (num12 == 11)
				{
					num = 48;
				}
				if (num12 == 12)
				{
					num = 144;
				}
				if (num12 == 13)
				{
					num = 49;
				}
				if (num12 == 14)
				{
					num = 145;
				}
				if (num12 == 15)
				{
					num = 50;
				}
				if (num12 == 16)
				{
					num = 146;
				}
				if (num12 == 17)
				{
					num = 128;
				}
				if (num12 == 18)
				{
					num = 84;
				}
				if (num12 == 19)
				{
					num = 117;
				}
				if (num12 == 20)
				{
					num = 42;
				}
				if (num12 == 21)
				{
					num = -1;
				}
				if (num12 == 22)
				{
					num = 265;
				}
			}
			if (tileCache.type == 185)
			{
				if (tileCache.frameY == 18)
				{
					int num13 = (int)(tileCache.frameX / 36);
					if (num13 < 6)
					{
						num = 1;
					}
					else if (num13 < 16)
					{
						num = 26;
					}
					else if (num13 == 16)
					{
						num = 9;
					}
					else if (num13 == 17)
					{
						num = 11;
					}
					else if (num13 == 18)
					{
						num = 10;
					}
					else if (num13 == 19)
					{
						num = 86;
					}
					else if (num13 == 20)
					{
						num = 87;
					}
					else if (num13 == 21)
					{
						num = 88;
					}
					else if (num13 == 22)
					{
						num = 89;
					}
					else if (num13 == 23)
					{
						num = 90;
					}
					else if (num13 == 24)
					{
						num = 91;
					}
					else if (num13 < 31)
					{
						num = 80;
					}
					else if (num13 < 33)
					{
						num = 7;
					}
					else if (num13 < 34)
					{
						num = 8;
					}
					else if (num13 < 38)
					{
						num = 30;
					}
					else if (num13 < 41)
					{
						num = 1;
					}
					else if (num13 < 47)
					{
						num = 287;
					}
					else if (num13 < 53)
					{
						num = 240;
					}
					else if (num13 < 59)
					{
						num = 236;
					}
				}
				else
				{
					int num14 = (int)(tileCache.frameX / 18);
					if (num14 < 6)
					{
						num = 1;
					}
					else if (num14 < 12)
					{
						num = 0;
					}
					else if (num14 < 28)
					{
						num = 26;
					}
					else if (num14 < 33)
					{
						num = 1;
					}
					else if (num14 < 36)
					{
						num = 0;
					}
					else if (num14 < 48)
					{
						num = 80;
					}
					else if (num14 < 54)
					{
						num = 30;
					}
					else if (num14 < 60)
					{
						num = 287;
					}
					else if (num14 < 66)
					{
						num = 240;
					}
					else if (num14 < 72)
					{
						num = 236;
					}
					else if (num14 < 73)
					{
						num = 0;
					}
					else if (num14 < 77)
					{
						num = 32;
					}
				}
			}
			if (tileCache.type == 649)
			{
				int num15 = (int)(tileCache.frameX / 36 + tileCache.frameY / 18 * 53);
				if (num15 < 6)
				{
					num = 1;
				}
				else if (num15 < 16)
				{
					num = 26;
				}
				else if (num15 == 16)
				{
					num = 9;
				}
				else if (num15 == 17)
				{
					num = 11;
				}
				else if (num15 == 18)
				{
					num = 10;
				}
				else if (num15 == 19)
				{
					num = 86;
				}
				else if (num15 == 20)
				{
					num = 87;
				}
				else if (num15 == 21)
				{
					num = 88;
				}
				else if (num15 == 22)
				{
					num = 89;
				}
				else if (num15 == 23)
				{
					num = 90;
				}
				else if (num15 == 24)
				{
					num = 91;
				}
				else if (num15 < 31)
				{
					num = 80;
				}
				else if (num15 < 33)
				{
					num = 7;
				}
				else if (num15 < 34)
				{
					num = 8;
				}
				else if (num15 < 38)
				{
					num = 30;
				}
				else if (num15 < 41)
				{
					num = 1;
				}
				else if (num15 < 47)
				{
					num = 287;
				}
				else if (num15 < 53)
				{
					num = 240;
				}
				else if (num15 < 59)
				{
					num = 236;
				}
				else if (num15 < 62)
				{
					num = 0;
				}
				else if (num15 < 65)
				{
					num = 32;
				}
			}
			if (tileCache.type == 650)
			{
				int num16 = (int)(tileCache.frameX / 18);
				if (num16 < 6)
				{
					num = 1;
				}
				else if (num16 < 12)
				{
					num = 0;
				}
				else if (num16 < 28)
				{
					num = 26;
				}
				else if (num16 < 33)
				{
					num = 1;
				}
				else if (num16 < 36)
				{
					num = 0;
				}
				else if (num16 < 48)
				{
					num = 80;
				}
				else if (num16 < 54)
				{
					num = 30;
				}
				else if (num16 < 60)
				{
					num = 287;
				}
				else if (num16 < 66)
				{
					num = 240;
				}
				else if (num16 < 72)
				{
					num = 236;
				}
				else if (num16 < 73)
				{
					num = 0;
				}
				else if (num16 < 77)
				{
					num = 32;
				}
			}
			if (tileCache.type == 237)
			{
				num = 148;
			}
			if (tileCache.type == 157)
			{
				num = 77;
			}
			if (tileCache.type == 158 || tileCache.type == 232 || tileCache.type == 383 || tileCache.type == 575)
			{
				num = 78;
			}
			if (tileCache.type == 159)
			{
				num = 78;
			}
			if (tileCache.type == 15)
			{
				num = -1;
			}
			if (tileCache.type == 191)
			{
				num = 7;
			}
			if (tileCache.type == 5)
			{
				num = 7;
				if (i > 5 && i < Main.maxTilesX - 5)
				{
					int num17 = i;
					int num18 = j;
					if (tileCache.frameX == 66 && tileCache.frameY <= 45)
					{
						num17++;
					}
					if (tileCache.frameX == 88 && tileCache.frameY >= 66 && tileCache.frameY <= 110)
					{
						num17--;
					}
					if (tileCache.frameX == 22 && tileCache.frameY >= 132 && tileCache.frameY <= 176)
					{
						num17--;
					}
					if (tileCache.frameX == 44 && tileCache.frameY >= 132 && tileCache.frameY <= 176)
					{
						num17++;
					}
					if (tileCache.frameX == 44 && tileCache.frameY >= 132 && tileCache.frameY <= 176)
					{
						num17++;
					}
					if (tileCache.frameX == 44 && tileCache.frameY >= 198)
					{
						num17++;
					}
					if (tileCache.frameX == 66 && tileCache.frameY >= 198)
					{
						num17--;
					}
					while (Main.tile[num17, num18] != null && (!Main.tile[num17, num18].active() || !Main.tileSolid[(int)Main.tile[num17, num18].type]))
					{
						num18++;
					}
					if (Main.tile[num17, num18] != null)
					{
						if (Main.tile[num17, num18].active() && Main.tile[num17, num18].type == 23)
						{
							num = 77;
						}
						if (Main.tile[num17, num18].active() && Main.tile[num17, num18].type == 661)
						{
							num = 77;
						}
						if (Main.tile[num17, num18].active() && Main.tile[num17, num18].type == 60)
						{
							num = 78;
						}
						if (Main.tile[num17, num18].active() && Main.tile[num17, num18].type == 70)
						{
							num = 26;
						}
						if (Main.tile[num17, num18].active() && Main.tile[num17, num18].type == 109)
						{
							num = 79;
						}
						if (Main.tile[num17, num18].active() && Main.tile[num17, num18].type == 199)
						{
							num = 121;
						}
						if (Main.tile[num17, num18].active() && Main.tile[num17, num18].type == 662)
						{
							num = 121;
						}
						if (Main.tile[num17, num18].active() && Main.tile[num17, num18].type == 147)
						{
							num = 122;
						}
					}
				}
			}
			if (tileCache.type == 323)
			{
				num = 215;
				if (i > 5 && i < Main.maxTilesX - 5)
				{
					int num19 = j;
					while (Main.tile[i, num19] != null && (!Main.tile[i, num19].active() || !Main.tileSolid[(int)Main.tile[i, num19].type]))
					{
						num19++;
					}
					if (Main.tile[i, num19] != null)
					{
						if (Main.tile[i, num19].active() && Main.tile[i, num19].type == 234)
						{
							num = 121;
						}
						if (Main.tile[i, num19].active() && Main.tile[i, num19].type == 116)
						{
							num = 79;
						}
						if (Main.tile[i, num19].active() && Main.tile[i, num19].type == 112)
						{
							num = 77;
						}
					}
				}
			}
			if (tileCache.type == 137)
			{
				switch (tileCache.frameY / 18)
				{
				default:
					num = 1;
					break;
				case 1:
				case 2:
				case 3:
				case 4:
					num = 148;
					break;
				case 5:
					num = 1;
					break;
				}
			}
			if (tileCache.type == 443)
			{
				num = 1;
			}
			if (tileCache.type == 444)
			{
				num = -1;
			}
			if (tileCache.type == 212)
			{
				num = -1;
			}
			if (tileCache.type == 213)
			{
				num = 129;
			}
			if (tileCache.type == 214)
			{
				num = 1;
			}
			if (tileCache.type == 215)
			{
				num = -6;
			}
			if (tileCache.type == 325)
			{
				num = 81;
			}
			if (tileCache.type == 251)
			{
				num = 189;
			}
			if (tileCache.type == 252)
			{
				num = 190;
			}
			if (tileCache.type == 253)
			{
				num = 191;
			}
			if (tileCache.type == 254)
			{
				if (tileCache.frameX < 72)
				{
					num = 3;
				}
				else if (tileCache.frameX < 108)
				{
					num = 3;
					if (WorldGen.genRand.Next(3) == 0)
					{
						num = 189;
					}
				}
				else if (tileCache.frameX < 144)
				{
					num = 3;
					if (WorldGen.genRand.Next(2) == 0)
					{
						num = 189;
					}
				}
				else
				{
					num = 3;
					if (WorldGen.genRand.Next(4) != 0)
					{
						num = 189;
					}
				}
			}
			if (tileCache.type == 467)
			{
				num = -1;
			}
			if (tileCache.type == 21)
			{
				if (tileCache.frameX >= 1008)
				{
					num = -1;
				}
				else if (tileCache.frameX >= 612)
				{
					num = 11;
				}
				else if (tileCache.frameX >= 576)
				{
					num = 148;
				}
				else if (tileCache.frameX >= 540)
				{
					num = 26;
				}
				else if (tileCache.frameX >= 504)
				{
					num = 126;
				}
				else if (tileCache.frameX >= 468)
				{
					num = 116;
				}
				else if (tileCache.frameX >= 432)
				{
					num = 7;
				}
				else if (tileCache.frameX >= 396)
				{
					num = 11;
				}
				else if (tileCache.frameX >= 360)
				{
					num = 10;
				}
				else if (tileCache.frameX >= 324)
				{
					num = 79;
				}
				else if (tileCache.frameX >= 288)
				{
					num = 78;
				}
				else if (tileCache.frameX >= 252)
				{
					num = 77;
				}
				else if (tileCache.frameX >= 216)
				{
					num = 1;
				}
				else if (tileCache.frameX >= 180)
				{
					num = 7;
				}
				else if (tileCache.frameX >= 108)
				{
					num = 37;
				}
				else if (tileCache.frameX >= 36)
				{
					num = 10;
				}
				else
				{
					num = 7;
				}
			}
			if (tileCache.type == 382)
			{
				num = 3;
			}
			if (tileCache.type == 2 || tileCache.type == 477)
			{
				if (WorldGen.genRand.Next(2) == 0)
				{
					num = 0;
				}
				else
				{
					num = 2;
				}
			}
			if (tileCache.type == 127)
			{
				num = 67;
			}
			if (tileCache.type == 91)
			{
				num = -1;
			}
			if (tileCache.type == 198)
			{
				num = 109;
			}
			if (tileCache.type == 26)
			{
				if (tileCache.frameX >= 54)
				{
					num = 5;
				}
				else
				{
					num = 8;
				}
			}
			if (tileCache.type == 34)
			{
				num = -1;
			}
			if (tileCache.type == 6)
			{
				num = 8;
			}
			if (tileCache.type == 7 || tileCache.type == 47 || tileCache.type == 284 || tileCache.type == 682)
			{
				num = 9;
			}
			if (tileCache.type == 8 || tileCache.type == 45 || tileCache.type == 102 || tileCache.type == 680)
			{
				num = 10;
			}
			if (tileCache.type == 9 || tileCache.type == 42 || tileCache.type == 46 || tileCache.type == 126 || tileCache.type == 136 || tileCache.type == 681)
			{
				num = 11;
			}
			if (tileCache.type == 166 || tileCache.type == 175)
			{
				num = 81;
			}
			if (tileCache.type == 167)
			{
				num = 82;
			}
			if (tileCache.type == 168 || tileCache.type == 176)
			{
				num = 83;
			}
			if (tileCache.type == 169 || tileCache.type == 177)
			{
				num = 84;
			}
			if (tileCache.type == 199 || tileCache.type == 662)
			{
				num = 117;
			}
			if (tileCache.type == 205)
			{
				num = 125;
			}
			if (tileCache.type == 201)
			{
				num = 125;
			}
			if (tileCache.type == 211)
			{
				num = 128;
			}
			if (tileCache.type == 227)
			{
				int num20 = (int)(tileCache.frameX / 34);
				if (num20 == 0 || num20 == 1)
				{
					num = 26;
				}
				else if (num20 == 3)
				{
					num = 3;
				}
				else if (num20 == 2 || num20 == 4 || num20 == 5 || num20 == 6)
				{
					num = 40;
				}
				else if (num20 == 7)
				{
					num = 117;
				}
				else if (num20 == 8)
				{
					num = 17;
				}
				else if (num20 == 9)
				{
					num = 6;
				}
				else if (num20 == 10)
				{
					num = 3;
				}
				else if (num20 == 11)
				{
					num = 26;
				}
			}
			if (tileCache.type == 204 || tileCache.type == 478)
			{
				num = 117;
				if (WorldGen.genRand.Next(2) == 0)
				{
					num = 1;
				}
			}
			if (tileCache.type == 203)
			{
				num = 117;
			}
			if (tileCache.type == 243)
			{
				if (WorldGen.genRand.Next(2) == 0)
				{
					num = 7;
				}
				else
				{
					num = 13;
				}
			}
			if (tileCache.type == 219)
			{
				num = -1;
			}
			if (tileCache.type == 642)
			{
				num = -128;
			}
			if (tileCache.type == 244)
			{
				if (WorldGen.genRand.Next(2) == 0)
				{
					num = 1;
				}
				else
				{
					num = 13;
				}
			}
			if (tileCache.type == 597)
			{
				num = -1;
			}
			else if ((tileCache.type >= 358 && tileCache.type <= 364) || (tileCache.type >= 275 && tileCache.type <= 282) || (tileCache.type == 285 || tileCache.type == 286 || (tileCache.type >= 288 && tileCache.type <= 297)) || (tileCache.type >= 316 && tileCache.type <= 318) || tileCache.type == 298 || tileCache.type == 299 || tileCache.type == 309 || tileCache.type == 310 || tileCache.type == 339 || tileCache.type == 538 || tileCache.type == 413 || tileCache.type == 414 || tileCache.type == 505 || tileCache.type == 521 || tileCache.type == 522 || tileCache.type == 523 || tileCache.type == 524 || tileCache.type == 525 || tileCache.type == 526 || tileCache.type == 527 || tileCache.type == 532 || tileCache.type == 543 || tileCache.type == 544 || tileCache.type == 550 || tileCache.type == 551 || tileCache.type == 533 || tileCache.type == 553 || tileCache.type == 554 || tileCache.type == 555 || tileCache.type == 556 || tileCache.type == 558 || tileCache.type == 559 || tileCache.type == 542 || tileCache.type == 391 || tileCache.type == 394 || tileCache.type == 392 || tileCache.type == 393 || tileCache.type == 568 || tileCache.type == 569 || tileCache.type == 570 || tileCache.type == 582 || tileCache.type == 580 || tileCache.type == 598 || tileCache.type == 599 || tileCache.type == 600 || tileCache.type == 601 || tileCache.type == 602 || tileCache.type == 603 || tileCache.type == 604 || tileCache.type == 605 || tileCache.type == 606 || tileCache.type == 607 || tileCache.type == 608 || tileCache.type == 609 || tileCache.type == 610 || tileCache.type == 611 || tileCache.type == 612 || tileCache.type == 619 || tileCache.type == 620 || tileCache.type == 629 || tileCache.type == 632 || tileCache.type == 640 || tileCache.type == 643 || tileCache.type == 644 || tileCache.type == 645)
			{
				num = 13;
				if (WorldGen.genRand.Next(3) != 0)
				{
					num = -1;
				}
			}
			if (tileCache.type == 13)
			{
				if (tileCache.frameX >= 90)
				{
					num = -1;
				}
				else
				{
					num = 13;
				}
			}
			if (tileCache.type == 189)
			{
				num = 16;
			}
			if (tileCache.type == 460)
			{
				num = 16;
			}
			if (tileCache.type == 530)
			{
				int type3 = (int)Main.tile[i, j + 2 - (int)(tileCache.frameY / 18)].type;
				if (type3 == 116)
				{
					num = 47;
				}
				else if (type3 == 234)
				{
					num = 125;
				}
				else if (type3 == 112)
				{
					num = 17;
				}
				else if (tileCache.frameX < 270)
				{
					num = 40;
				}
				else
				{
					num = 291;
				}
			}
			if (tileCache.type == 518)
			{
				if (tileCache.frameY == 0)
				{
					num = 3;
				}
				else if (tileCache.frameY == 18)
				{
					num = 47;
				}
				else if (tileCache.frameY == 36)
				{
					num = 40;
				}
			}
			else if (tileCache.type == 519)
			{
				if (tileCache.frameY == 0)
				{
					num = 3;
				}
				else if (tileCache.frameY == 18)
				{
					num = 40;
				}
				else if (tileCache.frameY == 36)
				{
					num = 47;
				}
				else if (tileCache.frameY == 54)
				{
					num = 125;
				}
				else if (tileCache.frameY == 72)
				{
					num = 17;
				}
				else if (tileCache.frameY == 90)
				{
					num = 26;
				}
			}
			else if (tileCache.type == 636)
			{
				num = 17;
			}
			else if (tileCache.type == 528)
			{
				num = 26;
			}
			if (tileCache.type == 12)
			{
				num = 12;
			}
			if (tileCache.type == 639)
			{
				num = 48;
			}
			if (tileCache.type == 3 || tileCache.type == 73)
			{
				num = 3;
			}
			if (tileCache.type == 54)
			{
				num = 13;
			}
			if (tileCache.type == 22 || tileCache.type == 140)
			{
				num = 14;
			}
			if (tileCache.type == 78)
			{
				num = 22;
			}
			if (tileCache.type == 28 || tileCache.type == 653)
			{
				num = 22;
				if (tileCache.frameY >= 72 && tileCache.frameY <= 90)
				{
					num = 1;
				}
				if (tileCache.frameY >= 144 && tileCache.frameY <= 234)
				{
					num = 48;
				}
				if (tileCache.frameY >= 252 && tileCache.frameY <= 358)
				{
					num = 85;
				}
				if (tileCache.frameY >= 360 && tileCache.frameY <= 466)
				{
					num = 26;
				}
				if (tileCache.frameY >= 468 && tileCache.frameY <= 574)
				{
					num = 36;
				}
				if (tileCache.frameY >= 576 && tileCache.frameY <= 790)
				{
					num = 18;
				}
				if (tileCache.frameY >= 792 && tileCache.frameY <= 898)
				{
					num = 5;
				}
				if (tileCache.frameY >= 900 && tileCache.frameY <= 1006)
				{
					num = 0;
				}
				if (tileCache.frameY >= 1008 && tileCache.frameY <= 1114)
				{
					num = 148;
				}
				if (tileCache.frameY >= 1116 && tileCache.frameY <= 1222)
				{
					num = 241;
				}
				if (tileCache.frameY >= 1224 && tileCache.frameY <= 1330)
				{
					num = 287;
				}
			}
			if (tileCache.type == 163)
			{
				num = 118;
			}
			if (tileCache.type == 164)
			{
				num = 119;
			}
			if (tileCache.type == 200)
			{
				num = 120;
			}
			if (tileCache.type == 221 || tileCache.type == 248)
			{
				num = 144;
			}
			if (tileCache.type == 222 || tileCache.type == 249)
			{
				num = 145;
			}
			if (tileCache.type == 223 || tileCache.type == 250)
			{
				num = 146;
			}
			if (tileCache.type == 224)
			{
				num = 149;
			}
			if (tileCache.type == 225)
			{
				num = 147;
			}
			if (tileCache.type == 229)
			{
				num = 153;
			}
			if (tileCache.type == 231)
			{
				num = 153;
				if (WorldGen.genRand.Next(3) == 0)
				{
					num = 26;
				}
			}
			if (tileCache.type == 226)
			{
				num = 148;
			}
			if (tileCache.type == 103)
			{
				num = -1;
			}
			if (tileCache.type == 29)
			{
				num = 23;
			}
			if (tileCache.type == 40)
			{
				num = 28;
			}
			if (tileCache.type == 50)
			{
				num = 22;
			}
			if (tileCache.type == 51)
			{
				num = 30;
			}
			if (tileCache.type == 52 || tileCache.type == 353)
			{
				num = 3;
			}
			if (tileCache.type == 53 || tileCache.type == 81 || tileCache.type == 151 || tileCache.type == 202 || tileCache.type == 274 || tileCache.type == 495)
			{
				num = 32;
			}
			if (tileCache.type == 56 || tileCache.type == 152)
			{
				num = 37;
			}
			if (tileCache.type == 75 || tileCache.type == 683)
			{
				num = 109;
			}
			if (tileCache.type == 57 || tileCache.type == 119 || tileCache.type == 141 || tileCache.type == 234 || tileCache.type == 635 || tileCache.type == 654)
			{
				num = 36;
			}
			if (tileCache.type == 59 || tileCache.type == 120)
			{
				num = 38;
			}
			if (tileCache.type == 61 || tileCache.type == 62 || tileCache.type == 74 || tileCache.type == 80 || tileCache.type == 188 || tileCache.type == 233 || tileCache.type == 236 || tileCache.type == 384 || tileCache.type == 652 || tileCache.type == 651)
			{
				num = 40;
			}
			if (tileCache.type == 485)
			{
				num = 32;
			}
			if (tileCache.type == 238)
			{
				if (WorldGen.genRand.Next(3) == 0)
				{
					num = 167;
				}
				else
				{
					num = 166;
				}
			}
			if (tileCache.type == 69)
			{
				num = 7;
			}
			if (tileCache.type == 655)
			{
				num = 166;
			}
			if (tileCache.type == 71 || tileCache.type == 72 || tileCache.type == 190 || tileCache.type == 578)
			{
				num = 26;
			}
			if (tileCache.type == 70)
			{
				num = 17;
			}
			if (tileCache.type == 112)
			{
				num = 14;
			}
			if (tileCache.type == 123)
			{
				num = 53;
			}
			if (tileCache.type == 161)
			{
				num = 80;
			}
			if (tileCache.type == 206)
			{
				num = 80;
			}
			if (tileCache.type == 162)
			{
				num = 80;
			}
			if (tileCache.type == 165)
			{
				switch (tileCache.frameX / 54)
				{
				case 0:
					num = 80;
					break;
				case 1:
					num = 1;
					break;
				case 2:
					num = 30;
					break;
				case 3:
					num = 147;
					break;
				case 4:
					num = 1;
					break;
				case 5:
					num = 14;
					break;
				case 6:
					num = 117;
					break;
				case 7:
					num = 250;
					break;
				case 8:
					num = 240;
					break;
				case 9:
					num = 236;
					break;
				default:
					num = 1;
					break;
				}
			}
			if (tileCache.type == 666)
			{
				num = 322;
			}
			if (tileCache.type == 193)
			{
				num = 4;
			}
			if (tileCache.type == 194)
			{
				num = 26;
			}
			if (tileCache.type == 195)
			{
				num = 5;
			}
			if (tileCache.type == 196)
			{
				num = 108;
			}
			if (tileCache.type == 460)
			{
				num = 108;
			}
			if (tileCache.type == 197)
			{
				num = 4;
			}
			if (tileCache.type == 153)
			{
				num = 26;
			}
			if (tileCache.type == 154)
			{
				num = 32;
			}
			if (tileCache.type == 155)
			{
				num = 2;
			}
			if (tileCache.type == 156)
			{
				num = 1;
			}
			if (tileCache.type == 116 || tileCache.type == 118 || tileCache.type == 147 || tileCache.type == 148)
			{
				num = 51;
			}
			if (tileCache.type == 109 || tileCache.type == 492)
			{
				if (WorldGen.genRand.Next(2) == 0)
				{
					num = 0;
				}
				else
				{
					num = 47;
				}
			}
			if (tileCache.type == 110 || tileCache.type == 113 || tileCache.type == 115)
			{
				num = 47;
			}
			if (tileCache.type == 107 || tileCache.type == 121 || tileCache.type == 685)
			{
				num = 48;
			}
			if (tileCache.type == 108 || tileCache.type == 122 || tileCache.type == 146 || tileCache.type == 686)
			{
				num = 49;
			}
			if (tileCache.type == 111 || tileCache.type == 145 || tileCache.type == 150)
			{
				num = 50;
			}
			if (tileCache.type == 133)
			{
				num = 50;
				if (tileCache.frameX >= 54)
				{
					num = 146;
				}
			}
			if (tileCache.type == 134)
			{
				num = 49;
				if (tileCache.frameX >= 36)
				{
					num = 145;
				}
			}
			if (tileCache.type == 149)
			{
				num = 49;
			}
			if (Main.tileAlch[(int)tileCache.type])
			{
				short num21 = tileCache.frameX / 18;
				if (num21 == 0)
				{
					num = 3;
				}
				if (num21 == 1)
				{
					num = 3;
				}
				if (num21 == 2)
				{
					num = 7;
				}
				if (num21 == 3)
				{
					num = 17;
				}
				if (num21 == 4)
				{
					num = 289;
				}
				if (num21 == 5)
				{
					num = 6;
				}
				if (num21 == 6)
				{
					num = 224;
				}
			}
			if (tileCache.type == 58 || tileCache.type == 76 || tileCache.type == 77 || tileCache.type == 684)
			{
				if (WorldGen.genRand.Next(2) == 0)
				{
					num = 6;
				}
				else
				{
					num = 25;
				}
			}
			if (tileCache.type == 37)
			{
				if (WorldGen.genRand.Next(2) == 0)
				{
					num = 6;
				}
				else
				{
					num = 23;
				}
			}
			if (tileCache.type == 32)
			{
				if (WorldGen.genRand.Next(2) == 0)
				{
					num = 14;
				}
				else
				{
					num = 24;
				}
			}
			if (tileCache.type == 352)
			{
				if (WorldGen.genRand.Next(3) == 0)
				{
					num = 5;
				}
				else
				{
					num = 125;
				}
			}
			if (tileCache.type == 23 || tileCache.type == 24 || tileCache.type == 661)
			{
				if (WorldGen.genRand.Next(2) == 0)
				{
					num = 14;
				}
				else
				{
					num = 17;
				}
			}
			if (tileCache.type == 25 || tileCache.type == 31)
			{
				if (tileCache.type == 31 && tileCache.frameX >= 36)
				{
					num = 5;
				}
				else if (WorldGen.genRand.Next(2) == 0)
				{
					num = 14;
				}
				else
				{
					num = 1;
				}
			}
			if (tileCache.type == 20)
			{
				int num22 = (int)(tileCache.frameX / 54);
				if (num22 == 1)
				{
					num = 122;
				}
				else if (num22 == 2)
				{
					num = 78;
				}
				else if (num22 == 3)
				{
					num = 77;
				}
				else if (num22 == 4)
				{
					num = 121;
				}
				else if (num22 == 5)
				{
					num = 79;
				}
				else
				{
					num = 7;
				}
			}
			if (tileCache.type == 27)
			{
				if (WorldGen.genRand.Next(2) == 0)
				{
					num = 3;
				}
				else
				{
					num = 19;
				}
			}
			if (tileCache.type == 129)
			{
				if (tileCache.frameX >= 324)
				{
				}
				if (tileCache.frameX == 0 || tileCache.frameX == 54 || tileCache.frameX == 108)
				{
					num = 68;
				}
				else if (tileCache.frameX == 18 || tileCache.frameX == 72 || tileCache.frameX == 126)
				{
					num = 69;
				}
				else
				{
					num = 70;
				}
			}
			if (tileCache.type == 385)
			{
				num = WorldGen.genRand.Next(68, 71);
			}
			if (tileCache.type == 4)
			{
				int num23 = (int)MathHelper.Clamp((float)(tileCache.frameY / 22), 0f, (float)(TorchID.Count - 1));
				num = TorchID.Dust[num23];
			}
			if (tileCache.type == 35)
			{
				num = 189;
				if (tileCache.frameX < 36 && WorldGen.genRand.Next(2) == 0)
				{
					num = 6;
				}
			}
			if ((tileCache.type == 34 || tileCache.type == 42) && WorldGen.genRand.Next(2) == 0)
			{
				num = 6;
			}
			if (tileCache.type == 270)
			{
				num = -1;
			}
			if (tileCache.type == 271)
			{
				num = -1;
			}
			if (tileCache.type == 581)
			{
				num = -1;
			}
			if (tileCache.type == 660)
			{
				num = -1;
			}
			if (tileCache.type == 79 || tileCache.type == 90 || tileCache.type == 101)
			{
				num = -1;
			}
			if (tileCache.type == 33 || tileCache.type == 34 || tileCache.type == 42 || tileCache.type == 93 || tileCache.type == 100)
			{
				num = -1;
			}
			if (tileCache.type == 321 || tileCache.type == 574)
			{
				num = 214;
			}
			if (tileCache.type == 322)
			{
				num = 215;
			}
			if (tileCache.type == 635)
			{
				num = 36;
			}
			bool flag = tileCache.type == 178 || tileCache.type == 440;
			type = tileCache.type;
			if (type == 178 || type - 426 <= 1 || type - 430 <= 10)
			{
				flag = true;
			}
			if (num < 0)
			{
				return 6000;
			}
			if (tileCache.type == 627 || tileCache.type == 628 || (tileCache.type == 184 && tileCache.frameX / 22 == 10))
			{
				int num24 = Dust.NewDust(new Vector2((float)(i * 16), (float)(j * 16)), 16, 16, num, 0f, 0f, 0, new Color(Main.DiscoR, Main.DiscoG, Main.DiscoB), 1f);
				Main.dust[num24].noGravity = true;
				Main.dust[num24].noLightEmittence = true;
				return num24;
			}
			if (tileCache.type == 518)
			{
				int num25 = (int)(tileCache.liquid / 16);
				num25 -= 3;
				if (WorldGen.SolidTile(i, j - 1, false) && num25 > 8)
				{
					num25 = 8;
				}
				return Dust.NewDust(new Vector2((float)(i * 16), (float)(j * 16 - num25)), 16, 16, num, 0f, 0f, 0, default(Color), 1f);
			}
			if (tileCache.type == 352 && num == 5)
			{
				int num26 = Dust.NewDust(new Vector2((float)(i * 16), (float)(j * 16)), 16, 16, 5, 0f, 0f, 100, default(Color), 1f);
				Main.dust[num26].scale = 1.5f;
				Main.dust[num26].noGravity = true;
				Main.dust[num26].velocity *= 1.65f;
				Main.dust[num26].fadeIn = 1.6f;
				return num26;
			}
			if (tileCache.type == 160 || tileCache.type == 692)
			{
				int num27 = Dust.NewDust(new Vector2((float)(i * 16), (float)(j * 16)), 16, 16, 66, 0f, 0f, 100, new Color(Main.DiscoR, Main.DiscoG, Main.DiscoB), 0.75f);
				Main.dust[num27].noGravity = true;
				return num27;
			}
			if (tileCache.type == 323)
			{
				int frameY = (int)tileCache.frameY;
				return Dust.NewDust(new Vector2((float)(i * 16 + frameY), (float)(j * 16)), 16, 16, num, 0f, 0f, 0, default(Color), 1f);
			}
			if (tileCache.type == 314)
			{
				int num28 = Dust.NewDust(new Vector2((float)(i * 16), (float)(j * 16)), 16, 16, 213, (float)WorldGen.genRand.Next(-2, 3), (float)WorldGen.genRand.Next(-2, 3), 0, default(Color), 1f);
				Main.dust[num28].noGravity = true;
				Main.dust[num28].fadeIn = Main.dust[num28].scale + 1f + 0.01f * (float)WorldGen.genRand.Next(0, 51);
				Main.dust[num28].noGravity = true;
				return num28;
			}
			if (flag)
			{
				int num29 = Dust.NewDust(new Vector2((float)(i * 16), (float)(j * 16)), 16, 16, num, 0f, 0f, 75, default(Color), 0.75f);
				Main.dust[num29].noLight = true;
				return num29;
			}
			if (tileCache.type == 193 || (tileCache.type == 18 && num == 4) || (tileCache.type == 19 && num == 4))
			{
				return Dust.NewDust(new Vector2((float)(i * 16), (float)(j * 16)), 16, 16, num, 0f, 0f, 75, new Color(0, 80, 255, 100), 0.75f);
			}
			if (tileCache.type == 197)
			{
				return Dust.NewDust(new Vector2((float)(i * 16), (float)(j * 16)), 16, 16, num, 0f, 0f, 75, new Color(97, 200, 255, 100), 0.75f);
			}
			if (tileCache.type == 185 && num >= 86 && num <= 91)
			{
				int num30 = Dust.NewDust(new Vector2((float)(i * 16), (float)(j * 16)), 16, 16, num, 0f, 0f, 75, default(Color), 0.75f);
				Main.dust[num30].noLight = true;
				return num30;
			}
			if (tileCache.type == 4 && num == 66)
			{
				int num31 = Dust.NewDust(new Vector2((float)(i * 16), (float)(j * 16)), 16, 16, num, 0f, 0f, 0, new Color((float)Main.DiscoR / 255f, (float)Main.DiscoG / 255f, (float)Main.DiscoB / 255f), 1f);
				Main.dust[num31].noGravity = true;
				return num31;
			}
			if (num == 139)
			{
				int type4 = num + Main.rand.Next(4);
				return Dust.NewDust(new Vector2((float)(i * 16), (float)(j * 16)), 16, 16, type4, 0f, 0f, 0, default(Color), 1f);
			}
			return Dust.NewDust(new Vector2((float)(i * 16), (float)(j * 16)), 16, 16, num, 0f, 0f, 0, default(Color), 1f);
		}

		// Token: 0x06000FDC RID: 4060 RVA: 0x0045D430 File Offset: 0x0045B630
		public static bool IsOpenDoorAnchorFrame(int x, int y)
		{
			Tile tile = Main.tile[x, y];
			if (!tile.active() || tile.type != 11)
			{
				return false;
			}
			int num = (int)(tile.frameX % 72);
			return num < 18 || num >= 54;
		}

		// Token: 0x06000FDD RID: 4061 RVA: 0x0045D477 File Offset: 0x0045B677
		public static bool IsLockedDoor(int x, int y)
		{
			return WorldGen.IsLockedDoor(Main.tile[x, y]);
		}

		// Token: 0x06000FDE RID: 4062 RVA: 0x0045D48A File Offset: 0x0045B68A
		public static bool IsLockedDoor(Tile t)
		{
			return t.type == 10 && t.frameY >= 594 && t.frameY <= 646 && t.frameX < 54;
		}

		// Token: 0x06000FDF RID: 4063 RVA: 0x0045D4BC File Offset: 0x0045B6BC
		public static void DropDoorItem(int x, int y, int doorStyle)
		{
			int num = 0;
			if (doorStyle == 0)
			{
				num = 25;
			}
			else if (doorStyle == 9)
			{
				num = 837;
			}
			else if (doorStyle == 10)
			{
				num = 912;
			}
			else if (doorStyle == 12)
			{
				num = 1137;
			}
			else if (doorStyle == 13)
			{
				num = 1138;
			}
			else if (doorStyle == 14)
			{
				num = 1139;
			}
			else if (doorStyle == 15)
			{
				num = 1140;
			}
			else if (doorStyle == 16)
			{
				num = 1411;
			}
			else if (doorStyle == 17)
			{
				num = 1412;
			}
			else if (doorStyle == 18)
			{
				num = 1413;
			}
			else if (doorStyle == 19)
			{
				num = 1458;
			}
			else if (doorStyle >= 20 && doorStyle <= 23)
			{
				num = 1709 + doorStyle - 20;
			}
			else if (doorStyle == 24)
			{
				num = 1793;
			}
			else if (doorStyle == 25)
			{
				num = 1815;
			}
			else if (doorStyle == 26)
			{
				num = 1924;
			}
			else if (doorStyle == 27)
			{
				num = 2044;
			}
			else if (doorStyle == 28)
			{
				num = 2265;
			}
			else if (doorStyle == 29)
			{
				num = 2528;
			}
			else if (doorStyle == 30)
			{
				num = 2561;
			}
			else if (doorStyle == 31)
			{
				num = 2576;
			}
			else if (doorStyle == 32)
			{
				num = 2815;
			}
			else if (doorStyle == 33)
			{
				num = 3129;
			}
			else if (doorStyle == 34)
			{
				num = 3131;
			}
			else if (doorStyle == 35)
			{
				num = 3130;
			}
			else if (doorStyle == 36)
			{
				num = 3888;
			}
			else if (doorStyle == 37)
			{
				num = 3941;
			}
			else if (doorStyle == 38)
			{
				num = 3967;
			}
			else if (doorStyle == 39)
			{
				num = 4155;
			}
			else if (doorStyle == 40)
			{
				num = 4176;
			}
			else if (doorStyle == 41)
			{
				num = 4197;
			}
			else if (doorStyle == 42)
			{
				num = 4218;
			}
			else if (doorStyle == 43)
			{
				num = 4307;
			}
			else if (doorStyle == 44)
			{
				num = 4415;
			}
			else if (doorStyle == 45)
			{
				num = 4576;
			}
			else if (doorStyle == 46)
			{
				num = 5158;
			}
			else if (doorStyle == 47)
			{
				num = 5179;
			}
			else if (doorStyle == 48)
			{
				num = 5200;
			}
			else if (doorStyle >= 4 && doorStyle <= 8)
			{
				num = 812 + doorStyle;
			}
			else if (doorStyle != 11)
			{
				num = 649 + doorStyle;
			}
			if (num != 0)
			{
				Item.NewItem(WorldGen.GetItemSource_FromTileBreak(x, y), x * 16, y * 16, 16, 16, num, 1, false, 0, false, false);
			}
		}

		// Token: 0x06000FE0 RID: 4064 RVA: 0x003F9590 File Offset: 0x003F7790
		public static IEntitySource GetItemSource_FromTileBreak(int x, int y)
		{
			return new EntitySource_TileBreak(x, y);
		}

		// Token: 0x06000FE1 RID: 4065 RVA: 0x003F9590 File Offset: 0x003F7790
		public static IEntitySource GetItemSource_FromWallBreak(int x, int y)
		{
			return new EntitySource_TileBreak(x, y);
		}

		// Token: 0x06000FE2 RID: 4066 RVA: 0x003F9599 File Offset: 0x003F7799
		public static IEntitySource GetItemSource_FromTreeShake(int x, int y)
		{
			return new EntitySource_ShakeTree(x, y);
		}

		// Token: 0x06000FE3 RID: 4067 RVA: 0x0045D74C File Offset: 0x0045B94C
		public static bool PlayerLOS(int x, int y)
		{
			Rectangle rectangle = new Rectangle(x * 16, y * 16, 16, 16);
			for (int i = 0; i < 255; i++)
			{
				if (Main.player[i].active)
				{
					Rectangle value = new Rectangle((int)((double)Main.player[i].position.X + (double)Main.player[i].width * 0.5 - (double)NPC.sWidth * 0.6), (int)((double)Main.player[i].position.Y + (double)Main.player[i].height * 0.5 - (double)NPC.sHeight * 0.6), (int)((double)NPC.sWidth * 1.2), (int)((double)NPC.sHeight * 1.2));
					if (rectangle.Intersects(value))
					{
						return true;
					}
				}
			}
			return false;
		}

		// Token: 0x06000FE4 RID: 4068 RVA: 0x0045D844 File Offset: 0x0045BA44
		public static void ChlorophyteDefense(int x, int y)
		{
			if (!Main.remixWorld)
			{
				return;
			}
			if (Main.tile[x, y].type == 23 || Main.tile[x, y].type == 199 || Main.tile[x, y].type == 661 || Main.tile[x, y].type == 662)
			{
				Main.tile[x, y].type = 60;
				WorldGen.SquareTileFrame(x, y, true);
				if (Main.netMode == 2)
				{
					NetMessage.SendTileSquare(-1, x, y, TileChangeType.None);
					return;
				}
			}
			else if (Main.tile[x, y].type == 25 || Main.tile[x, y].type == 203)
			{
				Main.tile[x, y].type = 1;
				WorldGen.SquareTileFrame(x, y, true);
				if (Main.netMode == 2)
				{
					NetMessage.SendTileSquare(-1, x, y, TileChangeType.None);
					return;
				}
			}
			else if (Main.tile[x, y].type == 112 || Main.tile[x, y].type == 234)
			{
				Main.tile[x, y].type = 53;
				WorldGen.SquareTileFrame(x, y, true);
				if (Main.netMode == 2)
				{
					NetMessage.SendTileSquare(-1, x, y, TileChangeType.None);
					return;
				}
			}
			else if (Main.tile[x, y].type == 398 || Main.tile[x, y].type == 399)
			{
				Main.tile[x, y].type = 397;
				WorldGen.SquareTileFrame(x, y, true);
				if (Main.netMode == 2)
				{
					NetMessage.SendTileSquare(-1, x, y, TileChangeType.None);
					return;
				}
			}
			else if (Main.tile[x, y].type == 400 || Main.tile[x, y].type == 401)
			{
				Main.tile[x, y].type = 396;
				WorldGen.SquareTileFrame(x, y, true);
				if (Main.netMode == 2)
				{
					NetMessage.SendTileSquare(-1, x, y, TileChangeType.None);
					return;
				}
			}
			else if (Main.tile[x, y].type == 24 || Main.tile[x, y].type == 201 || Main.tile[x, y].type == 32 || Main.tile[x, y].type == 352 || Main.tile[x, y].type == 636 || Main.tile[x, y].type == 205)
			{
				WorldGen.KillTile(x, y, false, false, false);
				if (Main.netMode == 2)
				{
					NetMessage.SendTileSquare(-1, x, y, TileChangeType.None);
				}
			}
		}

		// Token: 0x06000FE5 RID: 4069 RVA: 0x0045DB0C File Offset: 0x0045BD0C
		public static bool Chlorophyte(int i, int j)
		{
			int num = 40;
			int num2 = 130;
			int num3 = 35;
			int num4 = 85;
			if (Main.remixWorld)
			{
				num += 5;
				num2 *= 15;
				num3 -= 4;
				num4 -= 8;
			}
			else if ((double)j < Main.rockLayer)
			{
				num /= 2;
				num2 /= 2;
				num3 = (int)((double)num3 * 1.5);
				num4 = (int)((double)num4 * 1.5);
			}
			int num5 = 0;
			for (int k = i - num3; k < i + num3; k++)
			{
				for (int l = j - num3; l < j + num3; l++)
				{
					if (WorldGen.InWorld(k, l, 0) && Main.tile[k, l].active() && Main.tile[k, l].type == 211)
					{
						num5++;
					}
				}
			}
			if (num5 > num)
			{
				return false;
			}
			num5 = 0;
			for (int m = i - num4; m < i + num4; m++)
			{
				for (int n = j - num4; n < j + num4; n++)
				{
					if (WorldGen.InWorld(m, n, 0) && Main.tile[m, n].active() && Main.tile[m, n].type == 211)
					{
						num5++;
					}
				}
			}
			return num5 <= num2;
		}

		// Token: 0x06000FE6 RID: 4070 RVA: 0x0045DC58 File Offset: 0x0045BE58
		private static bool nearbyChlorophyte(int i, int j)
		{
			double num = 0.0;
			int num2 = 5;
			if (i <= num2 + 5 || i >= Main.maxTilesX - num2 - 5)
			{
				return false;
			}
			if (j <= num2 + 5 || j >= Main.maxTilesY - num2 - 5)
			{
				return false;
			}
			for (int k = i - num2; k <= i + num2; k++)
			{
				for (int l = j - num2; l <= j + num2; l++)
				{
					if (Main.tile[k, l].active() && (Main.tile[k, l].type == 211 || Main.tile[k, l].type == 346))
					{
						num += 1.0;
						if (num >= 3.0)
						{
							return true;
						}
					}
				}
			}
			if (num > 0.0)
			{
				if (Main.remixWorld)
				{
					if ((double)WorldGen.genRand.Next(-1, 3) < num)
					{
						return true;
					}
				}
				else if ((double)WorldGen.genRand.Next(-1, 4) < num)
				{
					return true;
				}
			}
			return false;
		}

		// Token: 0x06000FE7 RID: 4071 RVA: 0x0045DD50 File Offset: 0x0045BF50
		public static int CountNearBlocksTypes(int i, int j, int radius, int cap = 0, params int[] tiletypes)
		{
			if (tiletypes.Length == 0)
			{
				return 0;
			}
			int value = i - radius;
			int num = i + radius;
			int num2 = j - radius;
			int num3 = j + radius;
			int num4 = Utils.Clamp<int>(value, 0, Main.maxTilesX - 1);
			num = Utils.Clamp<int>(num, 0, Main.maxTilesX - 1);
			num2 = Utils.Clamp<int>(num2, 0, Main.maxTilesY - 1);
			num3 = Utils.Clamp<int>(num3, 0, Main.maxTilesY - 1);
			int num5 = 0;
			for (int k = num4; k <= num; k++)
			{
				for (int l = num2; l <= num3; l++)
				{
					if (Main.tile[k, l].active())
					{
						int m = 0;
						while (m < tiletypes.Length)
						{
							if (tiletypes[m] == (int)Main.tile[k, l].type)
							{
								num5++;
								if (cap > 0 && num5 >= cap)
								{
									return num5;
								}
								break;
							}
							else
							{
								m++;
							}
						}
					}
				}
			}
			return num5;
		}

		// Token: 0x06000FE8 RID: 4072 RVA: 0x0045DE24 File Offset: 0x0045C024
		public static void hardUpdateWorld(int i, int j)
		{
			if (Main.hardMode)
			{
				if (Main.tile[i, j].inActive())
				{
					return;
				}
				int type = (int)Main.tile[i, j].type;
				if (type > 0 && type < (int)TileID.Count && TileID.Sets.CanGrowCrystalShards[type] && ((double)j > Main.rockLayer || Main.remixWorld) && WorldGen.genRand.Next(5) == 0)
				{
					int num = WorldGen.genRand.Next(4);
					int num2 = 0;
					int num3 = 0;
					if (num == 0)
					{
						num2 = -1;
					}
					else if (num == 1)
					{
						num2 = 1;
					}
					else if (num == 0)
					{
						num3 = -1;
					}
					else
					{
						num3 = 1;
					}
					if (!Main.tile[i + num2, j + num3].active())
					{
						int num4 = 0;
						int num5 = 6;
						for (int k = i - num5; k <= i + num5; k++)
						{
							for (int l = j - num5; l <= j + num5; l++)
							{
								if (Main.tile[k, l].active() && Main.tile[k, l].type == 129)
								{
									num4++;
								}
							}
						}
						if (num4 < 2)
						{
							int style = (int)((short)WorldGen.genRand.Next(18));
							if (WorldGen.genRand.Next(50) == 0)
							{
								style = (int)((short)(18 + WorldGen.genRand.Next(6)));
							}
							WorldGen.PlaceTile(i + num2, j + num3, 129, true, false, -1, style);
							NetMessage.SendTileSquare(-1, i + num2, j + num3, TileChangeType.None);
						}
					}
				}
				if ((double)j > (Main.worldSurface + Main.rockLayer) / 2.0 || Main.remixWorld)
				{
					if (type == 60 && WorldGen.genRand.Next(300) == 0)
					{
						int num6 = i + WorldGen.genRand.Next(-10, 11);
						int num7 = j + WorldGen.genRand.Next(-10, 11);
						if (WorldGen.InWorld(num6, num7, 2) && Main.tile[num6, num7].active() && Main.tile[num6, num7].type == 59 && (!Main.tile[num6, num7 - 1].active() || (Main.tile[num6, num7 - 1].type != 5 && Main.tile[num6, num7 - 1].type != 236 && Main.tile[num6, num7 - 1].type != 238)) && WorldGen.Chlorophyte(num6, num7))
						{
							Main.tile[num6, num7].type = 211;
							WorldGen.SquareTileFrame(num6, num7, true);
							if (Main.netMode == 2)
							{
								NetMessage.SendTileSquare(-1, num6, num7, TileChangeType.None);
							}
						}
					}
					if (type == 211 || type == 346)
					{
						int num8 = i;
						int num9 = j;
						if (WorldGen.genRand.Next(3) != 0)
						{
							int num10 = WorldGen.genRand.Next(4);
							if (num10 == 0)
							{
								num8++;
							}
							if (num10 == 1)
							{
								num8--;
							}
							if (num10 == 2)
							{
								num9++;
							}
							if (num10 == 3)
							{
								num9--;
							}
							if (WorldGen.InWorld(num8, num9, 2) && Main.tile[num8, num9].active() && (Main.tile[num8, num9].type == 59 || Main.tile[num8, num9].type == 60) && WorldGen.Chlorophyte(num8, num9))
							{
								Main.tile[num8, num9].type = 211;
								WorldGen.SquareTileFrame(num8, num9, true);
								if (Main.netMode == 2)
								{
									NetMessage.SendTileSquare(-1, num8, num9, TileChangeType.None);
								}
							}
						}
						bool flag = true;
						while (flag)
						{
							flag = false;
							num8 = i + Main.rand.Next(-6, 7);
							num9 = j + Main.rand.Next(-6, 7);
							if (WorldGen.InWorld(num8, num9, 2) && Main.tile[num8, num9].active())
							{
								if (Main.tile[num8, num9].type == 661 || Main.tile[num8, num9].type == 662 || Main.tile[num8, num9].type == 23 || Main.tile[num8, num9].type == 199 || Main.tile[num8, num9].type == 2 || Main.tile[num8, num9].type == 477 || Main.tile[num8, num9].type == 492 || Main.tile[num8, num9].type == 109)
								{
									Main.tile[num8, num9].type = 60;
									WorldGen.SquareTileFrame(num8, num9, true);
									if (Main.netMode == 2)
									{
										NetMessage.SendTileSquare(-1, num8, num9, TileChangeType.None);
									}
									flag = true;
								}
								else if (Main.tile[num8, num9].type == 0)
								{
									Main.tile[num8, num9].type = 59;
									WorldGen.SquareTileFrame(num8, num9, true);
									if (Main.netMode == 2)
									{
										NetMessage.SendTileSquare(-1, num8, num9, TileChangeType.None);
									}
									flag = true;
								}
								else if (Main.tile[num8, num9].type == 25 || Main.tile[num8, num9].type == 203)
								{
									Main.tile[num8, num9].type = 1;
									WorldGen.SquareTileFrame(num8, num9, true);
									if (Main.netMode == 2)
									{
										NetMessage.SendTileSquare(-1, num8, num9, TileChangeType.None);
									}
									flag = true;
								}
								else if (Main.tile[num8, num9].type == 112 || Main.tile[num8, num9].type == 234)
								{
									Main.tile[num8, num9].type = 53;
									WorldGen.SquareTileFrame(num8, num9, true);
									if (Main.netMode == 2)
									{
										NetMessage.SendTileSquare(-1, num8, num9, TileChangeType.None);
									}
									flag = true;
								}
								else if (Main.tile[num8, num9].type == 398 || Main.tile[num8, num9].type == 399)
								{
									Main.tile[num8, num9].type = 397;
									WorldGen.SquareTileFrame(num8, num9, true);
									if (Main.netMode == 2)
									{
										NetMessage.SendTileSquare(-1, num8, num9, TileChangeType.None);
									}
									flag = true;
								}
								else if (Main.tile[num8, num9].type == 400 || Main.tile[num8, num9].type == 401)
								{
									Main.tile[num8, num9].type = 396;
									WorldGen.SquareTileFrame(num8, num9, true);
									if (Main.netMode == 2)
									{
										NetMessage.SendTileSquare(-1, num8, num9, TileChangeType.None);
									}
									flag = true;
								}
								else if (Main.tile[num8, num9].type == 24 || Main.tile[num8, num9].type == 201 || Main.tile[num8, num9].type == 32 || Main.tile[num8, num9].type == 352 || Main.tile[num8, num9].type == 636 || Main.tile[num8, num9].type == 205)
								{
									WorldGen.KillTile(num8, num9, false, false, false);
									if (Main.netMode == 2)
									{
										NetMessage.SendTileSquare(-1, num8, num9, TileChangeType.None);
									}
									flag = true;
								}
							}
						}
					}
				}
				if (NPC.downedPlantBoss && WorldGen.genRand.Next(2) != 0)
				{
					return;
				}
				if (WorldGen.AllowedToSpreadInfections)
				{
					if (type == 23 || type == 25 || type == 32 || type == 112 || type == 163 || type == 400 || type == 398 || type == 636 || type == 661)
					{
						bool flag2 = true;
						while (flag2)
						{
							flag2 = false;
							int num11 = i + WorldGen.genRand.Next(-3, 4);
							int num12 = j + WorldGen.genRand.Next(-3, 4);
							if (WorldGen.InWorld(num11, num12, 10))
							{
								if (WorldGen.nearbyChlorophyte(num11, num12))
								{
									WorldGen.ChlorophyteDefense(num11, num12);
								}
								else if (WorldGen.CountNearBlocksTypes(num11, num12, 2, 1, new int[]
								{
									27
								}) <= 0)
								{
									if (Main.tile[num11, num12].type == 2)
									{
										if (WorldGen.genRand.Next(2) == 0)
										{
											flag2 = true;
										}
										Main.tile[num11, num12].type = 23;
										WorldGen.SquareTileFrame(num11, num12, true);
										NetMessage.SendTileSquare(-1, num11, num12, TileChangeType.None);
									}
									else if (Main.tile[num11, num12].type == 1 || Main.tileMoss[(int)Main.tile[num11, num12].type])
									{
										if (WorldGen.genRand.Next(2) == 0)
										{
											flag2 = true;
										}
										Main.tile[num11, num12].type = 25;
										WorldGen.SquareTileFrame(num11, num12, true);
										NetMessage.SendTileSquare(-1, num11, num12, TileChangeType.None);
									}
									else if (Main.tile[num11, num12].type == 53)
									{
										if (WorldGen.genRand.Next(2) == 0)
										{
											flag2 = true;
										}
										Main.tile[num11, num12].type = 112;
										WorldGen.SquareTileFrame(num11, num12, true);
										NetMessage.SendTileSquare(-1, num11, num12, TileChangeType.None);
									}
									else if (Main.tile[num11, num12].type == 396)
									{
										if (WorldGen.genRand.Next(2) == 0)
										{
											flag2 = true;
										}
										Main.tile[num11, num12].type = 400;
										WorldGen.SquareTileFrame(num11, num12, true);
										NetMessage.SendTileSquare(-1, num11, num12, TileChangeType.None);
									}
									else if (Main.tile[num11, num12].type == 397)
									{
										if (WorldGen.genRand.Next(2) == 0)
										{
											flag2 = true;
										}
										Main.tile[num11, num12].type = 398;
										WorldGen.SquareTileFrame(num11, num12, true);
										NetMessage.SendTileSquare(-1, num11, num12, TileChangeType.None);
									}
									else if (Main.tile[num11, num12].type == 60)
									{
										if (WorldGen.genRand.Next(2) == 0)
										{
											flag2 = true;
										}
										Main.tile[num11, num12].type = 661;
										WorldGen.SquareTileFrame(num11, num12, true);
										NetMessage.SendTileSquare(-1, num11, num12, TileChangeType.None);
									}
									else if (Main.tile[num11, num12].type == 69)
									{
										if (WorldGen.genRand.Next(2) == 0)
										{
											flag2 = true;
										}
										Main.tile[num11, num12].type = 32;
										WorldGen.SquareTileFrame(num11, num12, true);
										NetMessage.SendTileSquare(-1, num11, num12, TileChangeType.None);
									}
									else if (Main.tile[num11, num12].type == 161)
									{
										if (WorldGen.genRand.Next(2) == 0)
										{
											flag2 = true;
										}
										Main.tile[num11, num12].type = 163;
										WorldGen.SquareTileFrame(num11, num12, true);
										NetMessage.SendTileSquare(-1, num11, num12, TileChangeType.None);
									}
								}
							}
						}
					}
					if (type == 199 || type == 200 || type == 201 || type == 203 || type == 205 || type == 234 || type == 352 || type == 401 || type == 399 || type == 662)
					{
						bool flag3 = true;
						while (flag3)
						{
							flag3 = false;
							int num13 = i + WorldGen.genRand.Next(-3, 4);
							int num14 = j + WorldGen.genRand.Next(-3, 4);
							if (WorldGen.InWorld(num13, num14, 10))
							{
								if (WorldGen.nearbyChlorophyte(num13, num14))
								{
									WorldGen.ChlorophyteDefense(num13, num14);
								}
								else if (WorldGen.CountNearBlocksTypes(num13, num14, 2, 1, new int[]
								{
									27
								}) <= 0)
								{
									if (Main.tile[num13, num14].type == 2)
									{
										if (WorldGen.genRand.Next(2) == 0)
										{
											flag3 = true;
										}
										Main.tile[num13, num14].type = 199;
										WorldGen.SquareTileFrame(num13, num14, true);
										NetMessage.SendTileSquare(-1, num13, num14, TileChangeType.None);
									}
									else if (Main.tile[num13, num14].type == 1 || Main.tileMoss[(int)Main.tile[num13, num14].type])
									{
										if (WorldGen.genRand.Next(2) == 0)
										{
											flag3 = true;
										}
										Main.tile[num13, num14].type = 203;
										WorldGen.SquareTileFrame(num13, num14, true);
										NetMessage.SendTileSquare(-1, num13, num14, TileChangeType.None);
									}
									else if (Main.tile[num13, num14].type == 53)
									{
										if (WorldGen.genRand.Next(2) == 0)
										{
											flag3 = true;
										}
										Main.tile[num13, num14].type = 234;
										WorldGen.SquareTileFrame(num13, num14, true);
										NetMessage.SendTileSquare(-1, num13, num14, TileChangeType.None);
									}
									else if (Main.tile[num13, num14].type == 396)
									{
										if (WorldGen.genRand.Next(2) == 0)
										{
											flag3 = true;
										}
										Main.tile[num13, num14].type = 401;
										WorldGen.SquareTileFrame(num13, num14, true);
										NetMessage.SendTileSquare(-1, num13, num14, TileChangeType.None);
									}
									else if (Main.tile[num13, num14].type == 397)
									{
										if (WorldGen.genRand.Next(2) == 0)
										{
											flag3 = true;
										}
										Main.tile[num13, num14].type = 399;
										WorldGen.SquareTileFrame(num13, num14, true);
										NetMessage.SendTileSquare(-1, num13, num14, TileChangeType.None);
									}
									else if (Main.tile[num13, num14].type == 60)
									{
										if (WorldGen.genRand.Next(2) == 0)
										{
											flag3 = true;
										}
										Main.tile[num13, num14].type = 662;
										WorldGen.SquareTileFrame(num13, num14, true);
										NetMessage.SendTileSquare(-1, num13, num14, TileChangeType.None);
									}
									else if (Main.tile[num13, num14].type == 69)
									{
										if (WorldGen.genRand.Next(2) == 0)
										{
											flag3 = true;
										}
										Main.tile[num13, num14].type = 352;
										WorldGen.SquareTileFrame(num13, num14, true);
										NetMessage.SendTileSquare(-1, num13, num14, TileChangeType.None);
									}
									else if (Main.tile[num13, num14].type == 161)
									{
										if (WorldGen.genRand.Next(2) == 0)
										{
											flag3 = true;
										}
										Main.tile[num13, num14].type = 200;
										WorldGen.SquareTileFrame(num13, num14, true);
										NetMessage.SendTileSquare(-1, num13, num14, TileChangeType.None);
									}
								}
							}
						}
					}
					if (type == 109 || type == 110 || type == 113 || type == 115 || type == 116 || type == 117 || type == 164 || type == 402 || type == 403 || type == 492)
					{
						bool flag4 = true;
						while (flag4)
						{
							flag4 = false;
							int num15 = i + WorldGen.genRand.Next(-3, 4);
							int num16 = j + WorldGen.genRand.Next(-3, 4);
							if (WorldGen.InWorld(num15, num16, 10) && WorldGen.CountNearBlocksTypes(num15, num16, 2, 1, new int[]
							{
								27
							}) <= 0)
							{
								if (Main.tile[num15, num16].type == 2)
								{
									if (WorldGen.genRand.Next(2) == 0)
									{
										flag4 = true;
									}
									Main.tile[num15, num16].type = 109;
									WorldGen.SquareTileFrame(num15, num16, true);
									NetMessage.SendTileSquare(-1, num15, num16, TileChangeType.None);
								}
								else if (Main.tile[num15, num16].type == 477)
								{
									if (WorldGen.genRand.Next(2) == 0)
									{
										flag4 = true;
									}
									Main.tile[num15, num16].type = 492;
									WorldGen.SquareTileFrame(num15, num16, true);
									NetMessage.SendTileSquare(-1, num15, num16, TileChangeType.None);
								}
								else if (Main.tile[num15, num16].type == 1 || Main.tileMoss[(int)Main.tile[num15, num16].type])
								{
									if (WorldGen.genRand.Next(2) == 0)
									{
										flag4 = true;
									}
									Main.tile[num15, num16].type = 117;
									WorldGen.SquareTileFrame(num15, num16, true);
									NetMessage.SendTileSquare(-1, num15, num16, TileChangeType.None);
								}
								else if (Main.tile[num15, num16].type == 53)
								{
									if (WorldGen.genRand.Next(2) == 0)
									{
										flag4 = true;
									}
									Main.tile[num15, num16].type = 116;
									WorldGen.SquareTileFrame(num15, num16, true);
									NetMessage.SendTileSquare(-1, num15, num16, TileChangeType.None);
								}
								else if (Main.tile[num15, num16].type == 396)
								{
									if (WorldGen.genRand.Next(2) == 0)
									{
										flag4 = true;
									}
									Main.tile[num15, num16].type = 403;
									WorldGen.SquareTileFrame(num15, num16, true);
									NetMessage.SendTileSquare(-1, num15, num16, TileChangeType.None);
								}
								else if (Main.tile[num15, num16].type == 397)
								{
									if (WorldGen.genRand.Next(2) == 0)
									{
										flag4 = true;
									}
									Main.tile[num15, num16].type = 402;
									WorldGen.SquareTileFrame(num15, num16, true);
									NetMessage.SendTileSquare(-1, num15, num16, TileChangeType.None);
								}
								else if (Main.tile[num15, num16].type == 161)
								{
									if (WorldGen.genRand.Next(2) == 0)
									{
										flag4 = true;
									}
									Main.tile[num15, num16].type = 164;
									WorldGen.SquareTileFrame(num15, num16, true);
									NetMessage.SendTileSquare(-1, num15, num16, TileChangeType.None);
								}
							}
						}
					}
				}
			}
		}

		// Token: 0x06000FE9 RID: 4073 RVA: 0x0045F078 File Offset: 0x0045D278
		public static bool SolidTile(Tile testTile)
		{
			try
			{
				if (testTile == null)
				{
					return true;
				}
				if (testTile.active() && Main.tileSolid[(int)testTile.type] && !Main.tileSolidTop[(int)testTile.type] && !testTile.halfBrick() && testTile.slope() == 0 && !testTile.inActive())
				{
					return true;
				}
			}
			catch
			{
			}
			return false;
		}

		// Token: 0x06000FEA RID: 4074 RVA: 0x0045F0E4 File Offset: 0x0045D2E4
		public static bool TileEmpty(int i, int j)
		{
			return Main.tile[i, j] == null || !Main.tile[i, j].active() || Main.tile[i, j].inActive();
		}

		// Token: 0x06000FEB RID: 4075 RVA: 0x0045F11A File Offset: 0x0045D31A
		public static bool SolidOrSlopedTile(Tile tile)
		{
			return tile != null && tile.active() && Main.tileSolid[(int)tile.type] && !Main.tileSolidTop[(int)tile.type] && !tile.inActive();
		}

		// Token: 0x06000FEC RID: 4076 RVA: 0x0045F14E File Offset: 0x0045D34E
		public static int TileType(int x, int y)
		{
			if (!Main.tile[x, y].active())
			{
				return -1;
			}
			return (int)Main.tile[x, y].type;
		}

		// Token: 0x06000FED RID: 4077 RVA: 0x0045F176 File Offset: 0x0045D376
		public static bool SolidOrSlopedTile(int x, int y)
		{
			return WorldGen.SolidOrSlopedTile(Main.tile[x, y]);
		}

		// Token: 0x06000FEE RID: 4078 RVA: 0x0045F18C File Offset: 0x0045D38C
		public static bool IsRope(int x, int y)
		{
			return Main.tile[x, y] != null && Main.tile[x, y].active() && (Main.tileRope[(int)Main.tile[x, y].type] || ((Main.tile[x, y].type == 314 || TileID.Sets.Platforms[(int)Main.tile[x, y].type]) && Main.tile[x, y - 1] != null && Main.tile[x, y + 1] != null && Main.tile[x, y - 1].active() && Main.tile[x, y + 1].active() && Main.tileRope[(int)Main.tile[x, y - 1].type] && Main.tileRope[(int)Main.tile[x, y + 1].type]));
		}

		// Token: 0x06000FEF RID: 4079 RVA: 0x0045F28E File Offset: 0x0045D48E
		public static bool SolidTile(Point p)
		{
			return WorldGen.SolidTile(p.X, p.Y, false);
		}

		// Token: 0x06000FF0 RID: 4080 RVA: 0x0045F2A4 File Offset: 0x0045D4A4
		public static bool SolidTile(int i, int j, bool noDoors = false)
		{
			try
			{
				if (Main.tile[i, j] == null)
				{
					return true;
				}
				if (Main.tile[i, j].active() && Main.tileSolid[(int)Main.tile[i, j].type] && !Main.tileSolidTop[(int)Main.tile[i, j].type] && !Main.tile[i, j].halfBrick() && Main.tile[i, j].slope() == 0 && !Main.tile[i, j].inActive())
				{
					if (noDoors && Main.tile[i, j].type == 10)
					{
						return false;
					}
					return true;
				}
			}
			catch
			{
			}
			return false;
		}

		// Token: 0x06000FF1 RID: 4081 RVA: 0x0045F380 File Offset: 0x0045D580
		public static bool SolidTile2(Tile testTile)
		{
			try
			{
				if (testTile == null)
				{
					return true;
				}
				if (testTile.active() && Main.tileSolid[(int)testTile.type] && testTile.slope() == 0 && !testTile.halfBrick() && !testTile.inActive())
				{
					return true;
				}
			}
			catch
			{
			}
			return false;
		}

		// Token: 0x06000FF2 RID: 4082 RVA: 0x0045F3E0 File Offset: 0x0045D5E0
		public static bool PlatformProperTopFrame(short frameX)
		{
			int num = (int)frameX / TileObjectData.PlatformFrameWidth();
			return (num >= 0 && num <= 7) || (num >= 12 && num <= 16) || (num >= 25 && num <= 26);
		}

		// Token: 0x06000FF3 RID: 4083 RVA: 0x0045F418 File Offset: 0x0045D618
		public static bool SolidTileAllowBottomSlope(int i, int j)
		{
			try
			{
				Tile tile = Main.tile[i, j];
				if (tile == null)
				{
					return true;
				}
				if (tile.active() && (Main.tileSolid[(int)tile.type] || Main.tileSolidTop[(int)tile.type]) && (!tile.topSlope() || (TileID.Sets.Platforms[(int)tile.type] && WorldGen.PlatformProperTopFrame(tile.frameX))) && !tile.halfBrick() && !tile.inActive())
				{
					return true;
				}
			}
			catch
			{
			}
			return false;
		}

		// Token: 0x06000FF4 RID: 4084 RVA: 0x0045F4AC File Offset: 0x0045D6AC
		public static bool ActiveAndWalkableTile(int i, int j)
		{
			try
			{
				Tile tile = Main.tile[i, j];
				if (tile == null)
				{
					return true;
				}
				if (tile.active() && Main.tileSolid[(int)tile.type] && !tile.inActive())
				{
					return true;
				}
			}
			catch
			{
			}
			return false;
		}

		// Token: 0x06000FF5 RID: 4085 RVA: 0x0045F508 File Offset: 0x0045D708
		public static bool SolidTileAllowTopSlope(int i, int j)
		{
			try
			{
				Tile tile = Main.tile[i, j];
				if (tile == null)
				{
					return true;
				}
				if (tile.active() && (Main.tileSolid[(int)tile.type] || tile.type == 380) && (!tile.bottomSlope() || (TileID.Sets.Platforms[(int)tile.type] && tile.halfBrick())) && !tile.inActive())
				{
					return true;
				}
			}
			catch
			{
			}
			return false;
		}

		// Token: 0x06000FF6 RID: 4086 RVA: 0x0045F590 File Offset: 0x0045D790
		public static bool SolidTileAllowLeftSlope(int i, int j)
		{
			try
			{
				Tile tile = Main.tile[i, j];
				if (tile == null)
				{
					return true;
				}
				if (tile.active() && Main.tileSolid[(int)tile.type] && !tile.rightSlope() && !TileID.Sets.Platforms[(int)tile.type] && !tile.inActive())
				{
					return true;
				}
			}
			catch
			{
			}
			return false;
		}

		// Token: 0x06000FF7 RID: 4087 RVA: 0x0045F604 File Offset: 0x0045D804
		public static bool SolidTileAllowRightSlope(int i, int j)
		{
			try
			{
				Tile tile = Main.tile[i, j];
				if (tile == null)
				{
					return true;
				}
				if (tile.active() && Main.tileSolid[(int)tile.type] && !tile.leftSlope() && !TileID.Sets.Platforms[(int)tile.type] && !tile.inActive())
				{
					return true;
				}
			}
			catch
			{
			}
			return false;
		}

		// Token: 0x06000FF8 RID: 4088 RVA: 0x0045F678 File Offset: 0x0045D878
		public static bool TopEdgeCanBeAttachedTo(int i, int j)
		{
			try
			{
				Tile tile = Main.tile[i, j];
				if (tile == null)
				{
					return true;
				}
				if (tile.active() && (Main.tileSolid[(int)tile.type] || Main.tileSolidTop[(int)tile.type]) && (!tile.topSlope() || (TileID.Sets.Platforms[(int)tile.type] && WorldGen.PlatformProperTopFrame(tile.frameX))) && !tile.halfBrick() && !tile.inActive())
				{
					return true;
				}
			}
			catch
			{
			}
			return false;
		}

		// Token: 0x06000FF9 RID: 4089 RVA: 0x0045F70C File Offset: 0x0045D90C
		public static bool RightEdgeCanBeAttachedTo(int i, int j)
		{
			try
			{
				Tile tile = Main.tile[i, j];
				if (tile == null)
				{
					return true;
				}
				if (tile.active() && Main.tileSolid[(int)tile.type] && !Main.tileSolidTop[(int)tile.type] && !tile.rightSlope() && !tile.halfBrick() && !tile.inActive() && !Main.tileNoAttach[(int)tile.type])
				{
					return true;
				}
			}
			catch
			{
			}
			return false;
		}

		// Token: 0x06000FFA RID: 4090 RVA: 0x0045F794 File Offset: 0x0045D994
		public static bool LeftEdgeCanBeAttachedTo(int i, int j)
		{
			try
			{
				Tile tile = Main.tile[i, j];
				if (tile == null)
				{
					return true;
				}
				if (tile.active() && Main.tileSolid[(int)tile.type] && !Main.tileSolidTop[(int)tile.type] && !tile.leftSlope() && !tile.halfBrick() && !tile.inActive() && !Main.tileNoAttach[(int)tile.type])
				{
					return true;
				}
			}
			catch
			{
			}
			return false;
		}

		// Token: 0x06000FFB RID: 4091 RVA: 0x0045F81C File Offset: 0x0045DA1C
		public static bool BottomEdgeCanBeAttachedTo(int i, int j)
		{
			try
			{
				Tile tile = Main.tile[i, j];
				if (tile == null)
				{
					return true;
				}
				if (tile.active() && Main.tileSolid[(int)tile.type] && !Main.tileSolidTop[(int)tile.type] && !tile.bottomSlope() && !tile.inActive() && !Main.tileNoAttach[(int)tile.type])
				{
					return true;
				}
			}
			catch
			{
			}
			return false;
		}

		// Token: 0x06000FFC RID: 4092 RVA: 0x0045F89C File Offset: 0x0045DA9C
		public static bool SolidTile3(int i, int j)
		{
			return WorldGen.InWorld(i, j, 1) && WorldGen.SolidTile3(Main.tile[i, j]);
		}

		// Token: 0x06000FFD RID: 4093 RVA: 0x0045F8BB File Offset: 0x0045DABB
		public static bool SolidTile3(Tile t)
		{
			return t != null && (t.active() && !t.inActive() && Main.tileSolid[(int)t.type]) && !Main.tileSolidTop[(int)t.type];
		}

		// Token: 0x06000FFE RID: 4094 RVA: 0x0045F8F4 File Offset: 0x0045DAF4
		public static bool SolidTile2(int i, int j)
		{
			try
			{
				if (Main.tile[i, j] == null)
				{
					return true;
				}
				if (Main.tile[i, j].active() && Main.tileSolid[(int)Main.tile[i, j].type] && ((TileID.Sets.Platforms[(int)Main.tile[i, j].type] && (Main.tile[i, j].halfBrick() || Main.tile[i, j].topSlope())) || Main.tile[i, j].slope() == 0) && !Main.tile[i, j].halfBrick() && !Main.tile[i, j].inActive())
				{
					return true;
				}
			}
			catch
			{
			}
			return false;
		}

		// Token: 0x06000FFF RID: 4095 RVA: 0x0045F9DC File Offset: 0x0045DBDC
		public static bool SolidTileNoAttach(int i, int j)
		{
			try
			{
				if (Main.tile[i, j] == null)
				{
					return true;
				}
				if (Main.tile[i, j].active() && Main.tileSolid[(int)Main.tile[i, j].type] && !Main.tileNoAttach[(int)Main.tile[i, j].type] && Main.tile[i, j].slope() == 0 && !Main.tile[i, j].halfBrick() && !Main.tile[i, j].inActive())
				{
					return true;
				}
			}
			catch
			{
			}
			return false;
		}

		// Token: 0x06001000 RID: 4096 RVA: 0x0045FA98 File Offset: 0x0045DC98
		public static void MineHouse(int i, int j)
		{
			if (i < 50 || i > Main.maxTilesX - 50 || j < 50 || j > Main.maxTilesY - 50)
			{
				return;
			}
			int num = WorldGen.genRand.Next(6, 12);
			int num2 = WorldGen.genRand.Next(3, 6);
			int num3 = WorldGen.genRand.Next(15, 30);
			int num4 = WorldGen.genRand.Next(15, 30);
			if (WorldGen.SolidTile(i, j, false))
			{
				return;
			}
			if (Main.tile[i, j].wall > 0)
			{
				return;
			}
			int num5 = j - num;
			int num6 = j + num2;
			for (int k = 0; k < 2; k++)
			{
				bool flag = true;
				int num7 = i;
				int num8 = j;
				int num9 = -1;
				int num10 = num3;
				if (k == 1)
				{
					num9 = 1;
					num10 = num4;
					num7++;
				}
				while (flag)
				{
					if (num8 - num < num5)
					{
						num5 = num8 - num;
					}
					if (num8 + num2 > num6)
					{
						num6 = num8 + num2;
					}
					for (int l = 0; l < 2; l++)
					{
						int num11 = num8;
						bool flag2 = true;
						int num12 = num;
						int num13 = -1;
						if (l == 1)
						{
							num11++;
							num12 = num2;
							num13 = 1;
						}
						while (flag2)
						{
							if (num7 != i && Main.tile[num7 - num9, num11].wall != 27 && (WorldGen.SolidTile(num7 - num9, num11, false) || !Main.tile[num7 - num9, num11].active() || Main.tile[num7 - num9, num11].halfBrick() || Main.tile[num7 - num9, num11].slope() != 0))
							{
								Main.tile[num7 - num9, num11].active(true);
								Main.tile[num7 - num9, num11].type = 30;
							}
							if (WorldGen.SolidTile(num7 - 1, num11, false) || Main.tile[num7 - 1, num11].halfBrick() || Main.tile[num7 - 1, num11].slope() != 0)
							{
								Main.tile[num7 - 1, num11].type = 30;
							}
							if (WorldGen.SolidTile(num7 + 1, num11, false) || Main.tile[num7 + 1, num11].halfBrick() || Main.tile[num7 + 1, num11].slope() != 0)
							{
								Main.tile[num7 + 1, num11].type = 30;
							}
							if (WorldGen.SolidTile(num7, num11, false) || Main.tile[num7, num11].halfBrick() || Main.tile[num7, num11].slope() != 0)
							{
								int num14 = 0;
								if (WorldGen.SolidTile(num7 - 1, num11, false))
								{
									num14++;
								}
								if (WorldGen.SolidTile(num7 + 1, num11, false))
								{
									num14++;
								}
								if (WorldGen.SolidTile(num7, num11 - 1, false))
								{
									num14++;
								}
								if (WorldGen.SolidTile(num7, num11 + 1, false))
								{
									num14++;
								}
								if (num14 < 2)
								{
									Main.tile[num7, num11].active(false);
								}
								else
								{
									flag2 = false;
									Main.tile[num7, num11].type = 30;
								}
							}
							else
							{
								Main.tile[num7, num11].wall = 27;
								Main.tile[num7, num11].liquid = 0;
								Main.tile[num7, num11].lava(false);
							}
							num11 += num13;
							num12--;
							if (num12 <= 0)
							{
								if (!Main.tile[num7, num11].active())
								{
									Main.tile[num7, num11].active(true);
									Main.tile[num7, num11].type = 30;
								}
								flag2 = false;
							}
						}
					}
					num10--;
					num7 += num9;
					if (WorldGen.SolidTile(num7, num8, false))
					{
						int num15 = 0;
						int num16 = 0;
						int num17 = num8;
						bool flag3 = true;
						while (flag3)
						{
							num17--;
							num15++;
							if (WorldGen.SolidTile(num7 - num9, num17, false))
							{
								num15 = 999;
								flag3 = false;
							}
							else if (!WorldGen.SolidTile(num7, num17, false))
							{
								flag3 = false;
							}
						}
						num17 = num8;
						flag3 = true;
						while (flag3)
						{
							num17++;
							num16++;
							if (WorldGen.SolidTile(num7 - num9, num17, false))
							{
								num16 = 999;
								flag3 = false;
							}
							else if (!WorldGen.SolidTile(num7, num17, false))
							{
								flag3 = false;
							}
						}
						if (num16 <= num15)
						{
							if (num16 > num2)
							{
								num10 = 0;
							}
							else
							{
								num8 += num16 + 1;
							}
						}
						else if (num15 > num)
						{
							num10 = 0;
						}
						else
						{
							num8 -= num15 + 1;
						}
					}
					if (num10 <= 0)
					{
						flag = false;
					}
				}
			}
			int num18 = i - num3 - 1;
			int num19 = i + num4 + 2;
			int num20 = num5 - 1;
			int num21 = num6 + 2;
			for (int m = num18; m < num19; m++)
			{
				for (int n = num20; n < num21; n++)
				{
					if (Main.tile[m, n].wall == 27 && !Main.tile[m, n].active())
					{
						if (Main.tile[m - 1, n].wall != 27 && m < i && !WorldGen.SolidTile(m - 1, n, false))
						{
							WorldGen.PlaceTile(m, n, 30, true, false, -1, 0);
							Main.tile[m, n].wall = 0;
						}
						if (Main.tile[m + 1, n].wall != 27 && m > i && !WorldGen.SolidTile(m + 1, n, false))
						{
							WorldGen.PlaceTile(m, n, 30, true, false, -1, 0);
							Main.tile[m, n].wall = 0;
						}
						for (int num22 = m - 1; num22 <= m + 1; num22++)
						{
							for (int num23 = n - 1; num23 <= n + 1; num23++)
							{
								if (WorldGen.SolidTile(num22, num23, false))
								{
									Main.tile[num22, num23].type = 30;
								}
							}
						}
					}
					if (Main.tile[m, n].type == 30 && Main.tile[m - 1, n].wall == 27 && Main.tile[m + 1, n].wall == 27 && (Main.tile[m, n - 1].wall == 27 || Main.tile[m, n - 1].active()) && (Main.tile[m, n + 1].wall == 27 || Main.tile[m, n + 1].active()))
					{
						Main.tile[m, n].active(false);
						Main.tile[m, n].wall = 27;
					}
				}
			}
			for (int num24 = num18; num24 < num19; num24++)
			{
				for (int num25 = num20; num25 < num21; num25++)
				{
					if (Main.tile[num24, num25].type == 30)
					{
						if (Main.tile[num24 - 1, num25].wall == 27 && Main.tile[num24 + 1, num25].wall == 27 && !Main.tile[num24 - 1, num25].active() && !Main.tile[num24 + 1, num25].active())
						{
							Main.tile[num24, num25].active(false);
							Main.tile[num24, num25].wall = 27;
						}
						if (!TileID.Sets.BasicChest[(int)Main.tile[num24, num25 - 1].type] && Main.tile[num24 - 1, num25].wall == 27 && Main.tile[num24 + 1, num25].type == 30 && Main.tile[num24 + 2, num25].wall == 27 && !Main.tile[num24 - 1, num25].active() && !Main.tile[num24 + 2, num25].active())
						{
							Main.tile[num24, num25].active(false);
							Main.tile[num24, num25].wall = 27;
							Main.tile[num24 + 1, num25].active(false);
							Main.tile[num24 + 1, num25].wall = 27;
						}
						if (Main.tile[num24, num25 - 1].wall == 27 && Main.tile[num24, num25 + 1].wall == 27 && !Main.tile[num24, num25 - 1].active() && !Main.tile[num24, num25 + 1].active())
						{
							Main.tile[num24, num25].active(false);
							Main.tile[num24, num25].wall = 27;
						}
					}
				}
			}
			for (int num26 = num18; num26 < num19; num26++)
			{
				for (int num27 = num21; num27 > num20; num27--)
				{
					bool flag4 = false;
					if (Main.tile[num26, num27].active() && Main.tile[num26, num27].type == 30)
					{
						int num28 = -1;
						for (int num29 = 0; num29 < 2; num29++)
						{
							if (!WorldGen.SolidTile(num26 + num28, num27, false) && Main.tile[num26 + num28, num27].wall == 0)
							{
								int num30 = 0;
								int num31 = num27;
								int num32 = num27;
								while (Main.tile[num26, num31].active() && Main.tile[num26, num31].type == 30 && !WorldGen.SolidTile(num26 + num28, num31, false) && Main.tile[num26 + num28, num31].wall == 0)
								{
									num31--;
									num30++;
								}
								num31++;
								int num33 = num31 + 1;
								if (num30 > 4)
								{
									if (WorldGen.genRand.Next(2) == 0)
									{
										num31 = num32 - 1;
										bool flag5 = true;
										for (int num34 = num26 - 2; num34 <= num26 + 2; num34++)
										{
											for (int num35 = num31 - 2; num35 <= num31; num35++)
											{
												if (num34 != num26 && Main.tile[num34, num35].active())
												{
													flag5 = false;
												}
											}
										}
										if (flag5)
										{
											Main.tile[num26, num31].active(false);
											Main.tile[num26, num31 - 1].active(false);
											Main.tile[num26, num31 - 2].active(false);
											WorldGen.PlaceTile(num26, num31, 10, true, false, -1, 0);
											flag4 = true;
										}
									}
									if (!flag4)
									{
										for (int num36 = num33; num36 < num32; num36++)
										{
											Main.tile[num26, num36].type = 124;
										}
									}
								}
							}
							num28 = 1;
						}
					}
					if (flag4)
					{
						break;
					}
				}
			}
			int num37 = WorldGen.genRand.Next(1, 2);
			if (WorldGen.genRand.Next(4) == 0)
			{
				num37 = 0;
			}
			if (WorldGen.genRand.Next(6) == 0)
			{
				num37++;
			}
			if (WorldGen.genRand.Next(10) == 0)
			{
				num37++;
			}
			for (int num38 = 0; num38 < num37; num38++)
			{
				int num39 = 0;
				int num40 = WorldGen.genRand.Next(num18, num19);
				int num41 = WorldGen.genRand.Next(num20, num21);
				while (!Main.wallHouse[(int)Main.tile[num40, num41].wall] || Main.tile[num40, num41].active())
				{
					num39++;
					if (num39 > 1000)
					{
						break;
					}
					num40 = WorldGen.genRand.Next(num18, num19);
					num41 = WorldGen.genRand.Next(num20, num21);
				}
				if (num39 > 1000)
				{
					break;
				}
				int num43;
				int num44;
				int num45;
				int num46;
				for (int num42 = 0; num42 < 2; num42++)
				{
					num43 = num40;
					num44 = num40;
					while (!Main.tile[num43, num41].active() && Main.wallHouse[(int)Main.tile[num43, num41].wall])
					{
						num43--;
					}
					num43++;
					while (!Main.tile[num44, num41].active() && Main.wallHouse[(int)Main.tile[num44, num41].wall])
					{
						num44++;
					}
					num44--;
					i = (num43 + num44) / 2;
					num45 = num41;
					num46 = num41;
					while (!Main.tile[num40, num45].active() && Main.wallHouse[(int)Main.tile[num40, num45].wall])
					{
						num45--;
					}
					num45++;
					while (!Main.tile[num40, num46].active() && Main.wallHouse[(int)Main.tile[num40, num46].wall])
					{
						num46++;
					}
					num46--;
					num41 = (num45 + num46) / 2;
				}
				num43 = num40;
				num44 = num40;
				while (!Main.tile[num43, num41].active() && !Main.tile[num43, num41 - 1].active() && !Main.tile[num43, num41 + 1].active())
				{
					num43--;
				}
				num43++;
				while (!Main.tile[num44, num41].active() && !Main.tile[num44, num41 - 1].active() && !Main.tile[num44, num41 + 1].active())
				{
					num44++;
				}
				num44--;
				num45 = num41;
				num46 = num41;
				while (!Main.tile[num40, num45].active() && !Main.tile[num40 - 1, num45].active() && !Main.tile[num40 + 1, num45].active())
				{
					num45--;
				}
				num45++;
				while (!Main.tile[num40, num46].active() && !Main.tile[num40 - 1, num46].active() && !Main.tile[num40 + 1, num46].active())
				{
					num46++;
				}
				num46--;
				num40 = (num43 + num44) / 2;
				num41 = (num45 + num46) / 2;
				int num47 = num44 - num43;
				int num48 = num46 - num45;
				if (num47 > 7 && num48 > 5)
				{
					int num49 = 0;
					if (WorldGen.nearPicture2(i, num41))
					{
						num49 = -1;
					}
					if (num49 == 0)
					{
						PaintingEntry paintingEntry = WorldGen.RandHousePicture();
						if (!WorldGen.nearPicture(num40, num41))
						{
							WorldGen.PlaceTile(num40, num41, paintingEntry.tileType, true, false, -1, paintingEntry.style);
						}
					}
				}
			}
			for (int num50 = num18; num50 < num19; num50++)
			{
				bool flag6 = true;
				for (int num51 = num20; num51 < num21; num51++)
				{
					for (int num52 = num50 - 3; num52 <= num50 + 3; num52++)
					{
						if (Main.tile[num52, num51].active() && (!WorldGen.SolidTile(num52, num51, false) || Main.tile[num52, num51].type == 10))
						{
							flag6 = false;
						}
					}
				}
				if (flag6)
				{
					for (int num53 = num20; num53 < num21; num53++)
					{
						if (Main.tile[num50, num53].wall == 27 && !Main.tile[num50, num53].active())
						{
							WorldGen.PlaceTile(num50, num53, 124, true, false, -1, 0);
						}
					}
				}
				num50 += WorldGen.genRand.Next(4);
			}
			for (int num54 = 0; num54 < 4; num54++)
			{
				int num55 = WorldGen.genRand.Next(num18 + 2, num19 - 1);
				int num56 = WorldGen.genRand.Next(num20 + 2, num21 - 1);
				while (Main.tile[num55, num56].wall != 27)
				{
					num55 = WorldGen.genRand.Next(num18 + 2, num19 - 1);
					num56 = WorldGen.genRand.Next(num20 + 2, num21 - 1);
				}
				while (Main.tile[num55, num56].active())
				{
					num56--;
				}
				while (!Main.tile[num55, num56].active())
				{
					num56++;
				}
				num56--;
				if (Main.tile[num55, num56].wall == 27)
				{
					if (WorldGen.genRand.Next(3) == 0)
					{
						int num57 = WorldGen.genRand.Next(9);
						if (num57 == 0)
						{
							num57 = 14;
						}
						if (num57 == 1)
						{
							num57 = 16;
						}
						if (num57 == 2)
						{
							num57 = 18;
						}
						if (num57 == 3)
						{
							num57 = 86;
						}
						if (num57 == 4)
						{
							num57 = 87;
						}
						if (num57 == 5)
						{
							num57 = 94;
						}
						if (num57 == 6)
						{
							num57 = 101;
						}
						if (num57 == 7)
						{
							num57 = 104;
						}
						if (num57 == 8)
						{
							num57 = 106;
						}
						WorldGen.PlaceTile(num55, num56, num57, true, false, -1, 0);
					}
					else if (GenVars.statueList != null)
					{
						int num58 = WorldGen.genRand.Next(2, GenVars.statueList.Length);
						WorldGen.PlaceTile(num55, num56, (int)GenVars.statueList[num58].X, true, true, -1, (int)GenVars.statueList[num58].Y);
					}
				}
			}
			for (int num59 = 0; num59 < 40; num59++)
			{
				int num60 = WorldGen.genRand.Next(num18 + 2, num19 - 1);
				int num61 = WorldGen.genRand.Next(num20 + 2, num21 - 1);
				while (Main.tile[num60, num61].wall != 27)
				{
					num60 = WorldGen.genRand.Next(num18 + 2, num19 - 1);
					num61 = WorldGen.genRand.Next(num20 + 2, num21 - 1);
				}
				while (Main.tile[num60, num61].active())
				{
					num61--;
				}
				while (!Main.tile[num60, num61].active())
				{
					num61++;
				}
				num61--;
				if (Main.tile[num60, num61].wall == 27 && WorldGen.genRand.Next(2) == 0)
				{
					int style = WorldGen.genRand.Next(22, 26);
					WorldGen.PlaceTile(num60, num61, 186, true, false, -1, style);
				}
			}
			for (int num62 = 0; num62 < 20; num62++)
			{
				int num63 = WorldGen.genRand.Next(num18 + 2, num19 - 1);
				int num64 = WorldGen.genRand.Next(num20 + 2, num21 - 1);
				while (Main.tile[num63, num64].wall != 27)
				{
					num63 = WorldGen.genRand.Next(num18 + 2, num19 - 1);
					num64 = WorldGen.genRand.Next(num20 + 2, num21 - 1);
				}
				while (Main.tile[num63, num64].active())
				{
					num64--;
				}
				while (!Main.tile[num63, num64].active())
				{
					num64++;
				}
				num64--;
				if (Main.tile[num63, num64].wall == 27 && WorldGen.genRand.Next(2) == 0)
				{
					int x = WorldGen.genRand.Next(31, 34);
					WorldGen.PlaceSmallPile(num63, num64, x, 1, 185);
				}
			}
			for (int num65 = 0; num65 < 15; num65++)
			{
				int num66 = WorldGen.genRand.Next(num18 + 2, num19 - 1);
				int num67 = WorldGen.genRand.Next(num20 + 2, num21 - 1);
				while (Main.tile[num66, num67].wall != 27)
				{
					num66 = WorldGen.genRand.Next(num18 + 2, num19 - 1);
					num67 = WorldGen.genRand.Next(num20 + 2, num21 - 1);
				}
				while (Main.tile[num66, num67].active())
				{
					num67--;
				}
				while (num67 > 0 && !Main.tile[num66, num67 - 1].active())
				{
					num67--;
				}
				if (Main.tile[num66, num67].wall == 27)
				{
					int style2 = 0;
					int num68;
					if (WorldGen.genRand.Next(10) < 9)
					{
						num68 = -1;
					}
					else
					{
						num68 = 34;
						style2 = WorldGen.genRand.Next(6);
					}
					if (num68 > 0)
					{
						WorldGen.PlaceTile(num66, num67, num68, true, false, -1, style2);
						if ((int)Main.tile[num66, num67].type == num68)
						{
							if (num68 == 4)
							{
								Tile tile = Main.tile[num66, num67];
								tile.frameX += 54;
							}
							else
							{
								int num69 = num66;
								int num70 = num67;
								num67 = num70 - (int)(Main.tile[num69, num70].frameY % 54 / 18);
								num66 = (int)(Main.tile[num69, num70].frameX / 18);
								if (num66 > 2)
								{
									num66 -= 3;
								}
								num66 = num69 - num66;
								short num71 = 54;
								if (Main.tile[num66, num67].frameX > 0)
								{
									num71 = -54;
								}
								for (int num72 = num66; num72 < num66 + 3; num72++)
								{
									for (int num73 = num67; num73 < num67 + 3; num73++)
									{
										Tile tile2 = Main.tile[num72, num73];
										tile2.frameX += num71;
									}
								}
							}
						}
					}
				}
			}
		}

		// Token: 0x06001001 RID: 4097 RVA: 0x00461088 File Offset: 0x0045F288
		public static void CountTiles(int X)
		{
			if (X == 0)
			{
				WorldGen.totalEvil = WorldGen.totalEvil2;
				WorldGen.totalBlood = WorldGen.totalBlood2;
				WorldGen.totalSolid = WorldGen.totalSolid2;
				WorldGen.totalGood = WorldGen.totalGood2;
				WorldGen.tGood = (byte)Math.Round((double)WorldGen.totalGood / (double)WorldGen.totalSolid * 100.0);
				WorldGen.tEvil = (byte)Math.Round((double)WorldGen.totalEvil / (double)WorldGen.totalSolid * 100.0);
				WorldGen.tBlood = (byte)Math.Round((double)WorldGen.totalBlood / (double)WorldGen.totalSolid * 100.0);
				if (WorldGen.tGood == 0 && WorldGen.totalGood > 0)
				{
					WorldGen.tGood = 1;
				}
				if (WorldGen.tEvil == 0 && WorldGen.totalEvil > 0)
				{
					WorldGen.tEvil = 1;
				}
				if (WorldGen.tBlood == 0 && WorldGen.totalBlood > 0)
				{
					WorldGen.tBlood = 1;
				}
				if (Main.netMode == 2)
				{
					NetMessage.SendData(57, -1, -1, null, 0, 0f, 0f, 0f, 0, 0, 0);
				}
				WorldGen.totalEvil2 = 0;
				WorldGen.totalSolid2 = 0;
				WorldGen.totalGood2 = 0;
				WorldGen.totalBlood2 = 0;
			}
			ushort num = 0;
			int num2 = 0;
			int num3 = 0;
			int num4 = 0;
			do
			{
				int num5;
				int num6;
				if (num3 == 0)
				{
					num5 = 0;
					num4 = (int)(Main.worldSurface + 1.0);
					num6 = 5;
				}
				else
				{
					num5 = num4;
					num4 = Main.maxTilesY;
					num6 = 1;
				}
				for (int i = num5; i < num4; i++)
				{
					Tile tile = Main.tile[X, i];
					if (tile == null)
					{
						tile = (Main.tile[X, i] = new Tile());
					}
					ushort type = tile.type;
					if (type != 0 || tile.active())
					{
						if (type == num)
						{
							num2 += num6;
						}
						else
						{
							WorldGen.tileCounts[(int)num] += num2;
							num = type;
							num2 = num6;
						}
					}
				}
				WorldGen.tileCounts[(int)num] += num2;
				num2 = 0;
				num3++;
			}
			while (num3 < 2);
			WorldGen.AddUpAlignmentCounts(false);
		}

		// Token: 0x06001002 RID: 4098 RVA: 0x00461274 File Offset: 0x0045F474
		public static void AddUpAlignmentCounts(bool clearCounts = false)
		{
			if (clearCounts)
			{
				WorldGen.totalEvil2 = 0;
				WorldGen.totalSolid2 = 0;
				WorldGen.totalGood2 = 0;
				WorldGen.totalBlood2 = 0;
			}
			for (int i = 0; i < TileID.Sets.HallowCountCollection.Count; i++)
			{
				WorldGen.totalGood2 += WorldGen.tileCounts[TileID.Sets.HallowCountCollection[i]];
			}
			for (int j = 0; j < TileID.Sets.CorruptCountCollection.Count; j++)
			{
				WorldGen.totalEvil2 += WorldGen.tileCounts[TileID.Sets.CorruptCountCollection[j]];
			}
			for (int k = 0; k < TileID.Sets.CrimsonCountCollection.Count; k++)
			{
				WorldGen.totalBlood2 += WorldGen.tileCounts[TileID.Sets.CrimsonCountCollection[k]];
			}
			WorldGen.totalSolid2 += WorldGen.tileCounts[2] + WorldGen.tileCounts[477] + WorldGen.tileCounts[1] + WorldGen.tileCounts[60] + WorldGen.tileCounts[53] + WorldGen.tileCounts[161];
			WorldGen.totalSolid2 += WorldGen.tileCounts[164] + WorldGen.tileCounts[109] + WorldGen.tileCounts[492] + WorldGen.tileCounts[117] + WorldGen.tileCounts[116];
			WorldGen.totalSolid2 += WorldGen.tileCounts[23] + WorldGen.tileCounts[661] + WorldGen.tileCounts[163] + WorldGen.tileCounts[112] + WorldGen.tileCounts[25];
			WorldGen.totalSolid2 += WorldGen.tileCounts[199] + WorldGen.tileCounts[662] + WorldGen.tileCounts[234] + WorldGen.tileCounts[203] + WorldGen.tileCounts[200];
			Array.Clear(WorldGen.tileCounts, 0, WorldGen.tileCounts.Length);
		}

		// Token: 0x06001003 RID: 4099 RVA: 0x00461448 File Offset: 0x0045F648
		public static void plantDye(int i, int j, bool exoticPlant = false)
		{
			UnifiedRandom unifiedRandom = WorldGen.gen ? WorldGen.genRand : Main.rand;
			if (Main.tile[i, j].active())
			{
				if (i < 95 || i > Main.maxTilesX - 95 || j < 95 || j > Main.maxTilesY - 95)
				{
					return;
				}
				int num = 90;
				if (exoticPlant)
				{
					num = 240;
				}
				if (((double)j < Main.worldSurface || WorldGen.remixWorldGen) && (!Main.tile[i, j - 1].active() || Main.tile[i, j - 1].type == 3 || Main.tile[i, j - 1].type == 51 || Main.tile[i, j - 1].type == 61 || Main.tile[i, j - 1].type == 73 || Main.tile[i, j - 1].type == 74 || Main.tile[i, j - 1].type == 184))
				{
					int num2 = Utils.Clamp<int>(i - num, 1, Main.maxTilesX - 1 - 1);
					int num3 = Utils.Clamp<int>(i + num, 1, Main.maxTilesX - 1 - 1);
					int num4 = Utils.Clamp<int>(j - num, 1, Main.maxTilesY - 1 - 1);
					int num5 = Utils.Clamp<int>(j + num, 1, Main.maxTilesY - 1 - 1);
					for (int k = num2; k < num3; k++)
					{
						for (int l = num4; l < num5; l++)
						{
							if (Main.tile[k, l].active() && Main.tile[k, l].type == 227 && (!exoticPlant || Main.tile[k, l].frameX >= 272) && (exoticPlant || Main.tile[k, l].frameX < 272))
							{
								return;
							}
						}
					}
					if (exoticPlant)
					{
						int type = (int)Main.tile[i, j].type;
						bool flag = TileID.Sets.Conversion.Grass[type] || TileID.Sets.Conversion.Moss[type] || type == 0;
						if (Main.tile[i, j - 1].liquid > 0 && (Main.tile[i, j - 1].lava() || Main.tile[i, j - 1].honey()))
						{
							flag = false;
						}
						if (flag)
						{
							WorldGen.PlaceTile(i, j - 1, 227, true, false, -1, WorldGen.genRand.Next(8, 12));
						}
					}
					else if (Main.tile[i, j].type == 2 || Main.tile[i, j].type == 109)
					{
						if (unifiedRandom.Next(4) == 0)
						{
							WorldGen.PlaceTile(i, j - 1, 227, true, false, -1, 4);
						}
						else
						{
							WorldGen.PlaceTile(i, j - 1, 227, true, false, -1, 3);
						}
					}
					else if (Main.tile[i, j].type == 60)
					{
						if (unifiedRandom.Next(2) == 0)
						{
							WorldGen.PlaceTile(i, j - 1, 227, true, false, -1, 2);
						}
						else
						{
							WorldGen.PlaceTile(i, j - 1, 227, true, false, -1, 4);
						}
					}
					else if (Main.tile[i, j].type == 53 && Main.tile[i, j - 1].liquid == 255 && Main.tile[i, j - 2].liquid == 255)
					{
						WorldGen.PlaceTile(i, j - 1, 227, true, false, -1, 2);
					}
					else if (Main.tile[i, j].type == 80 && !Main.tile[i - 1, j - 1].active() && !Main.tile[i + 1, j - 1].active())
					{
						try
						{
							bool flag2 = true;
							for (int m = i - 5; m <= i + 5; m++)
							{
								for (int n = j - 5; n <= j + 15; n++)
								{
									if (Main.tile[m, n].active() && (Main.tile[m, n].type == 112 || Main.tile[m, n].type == 234))
									{
										flag2 = false;
									}
								}
							}
							if (flag2)
							{
								WorldGen.PlaceTile(i, j - 1, 227, true, false, -1, 6);
							}
						}
						catch
						{
						}
					}
				}
				if (((double)j >= Main.worldSurface || WorldGen.remixWorldGen) && j < Main.UnderworldLayer)
				{
					if (!Main.tile[i, j - 1].active() || Main.tile[i, j - 1].type == 3 || Main.tile[i, j - 1].type == 51 || Main.tile[i, j - 1].type == 61 || Main.tile[i, j - 1].type == 73 || Main.tile[i, j - 1].type == 74 || Main.tile[i, j - 1].type == 184)
					{
						int num6 = Utils.Clamp<int>(i - num, 1, Main.maxTilesX - 1 - 1);
						int num7 = Utils.Clamp<int>(i + num, 1, Main.maxTilesX - 1 - 1);
						int num8 = Utils.Clamp<int>(j - num, 1, Main.maxTilesY - 1 - 1);
						int num9 = Utils.Clamp<int>(j + num, 1, Main.maxTilesY - 1 - 1);
						for (int num10 = num6; num10 < num7; num10++)
						{
							for (int num11 = num8; num11 < num9; num11++)
							{
								if (Main.tile[num10, num11].active() && Main.tile[num10, num11].type == 227 && (!exoticPlant || Main.tile[num10, num11].frameX >= 272) && (exoticPlant || Main.tile[num10, num11].frameX < 272))
								{
									return;
								}
							}
						}
						if (exoticPlant)
						{
							int type2 = (int)Main.tile[i, j].type;
							if (TileID.Sets.Conversion.Grass[type2] || TileID.Sets.Conversion.Moss[type2] || type2 == 0)
							{
								WorldGen.PlaceTile(i, j - 1, 227, true, false, -1, WorldGen.genRand.Next(8, 12));
							}
						}
						else if (Main.tile[i, j].type == 60)
						{
							if (unifiedRandom.Next(2) == 0)
							{
								WorldGen.PlaceTile(i, j - 1, 227, true, false, -1, 2);
							}
							else if (unifiedRandom.Next(2) == 0)
							{
								WorldGen.PlaceTile(i, j - 1, 227, true, false, -1, 0);
							}
							else
							{
								WorldGen.PlaceTile(i, j - 1, 227, true, false, -1, 1);
							}
						}
						else if (Main.tile[i, j].type == 0 || Main.tile[i, j].type == 1 || Main.tile[i, j].type == 59)
						{
							if (unifiedRandom.Next(2) == 0)
							{
								WorldGen.PlaceTile(i, j - 1, 227, true, false, -1, 0);
							}
							else
							{
								WorldGen.PlaceTile(i, j - 1, 227, true, false, -1, 1);
							}
						}
						else if (Main.tile[i, j - 1].liquid == 255 && Main.tile[i, j - 2].liquid == 255)
						{
							WorldGen.PlaceTile(i, j - 1, 227, true, false, -1, 5);
						}
					}
					if (!Main.tile[i, j + 1].active() && !exoticPlant)
					{
						for (int num12 = i - num; num12 < i + num; num12++)
						{
							for (int num13 = j - num; num13 < j + num; num13++)
							{
								if (Main.tile[num12, num13].active() && Main.tile[num12, num13].type == 227)
								{
									return;
								}
							}
						}
						if (Main.tile[i, j].type == 0)
						{
							WorldGen.PlaceTile(i, j + 1, 227, true, false, -1, 7);
						}
					}
				}
			}
		}

		// Token: 0x06001004 RID: 4100 RVA: 0x00461CA8 File Offset: 0x0045FEA8
		private static int MossConversion(int thisType, int otherType)
		{
			if (TileID.Sets.tileMossBrick[thisType] && otherType == 38)
			{
				return thisType;
			}
			if (Main.tileMoss[thisType] && otherType == 1)
			{
				return thisType;
			}
			if (thisType == 182)
			{
				return 515;
			}
			if (thisType == 515)
			{
				return 182;
			}
			if (thisType == 180)
			{
				return 513;
			}
			if (thisType == 513)
			{
				return 180;
			}
			if (thisType == 179)
			{
				return 512;
			}
			if (thisType == 512)
			{
				return 179;
			}
			if (thisType == 381)
			{
				return 517;
			}
			if (thisType == 517)
			{
				return 381;
			}
			if (thisType == 534)
			{
				return 535;
			}
			if (thisType == 535)
			{
				return 534;
			}
			if (thisType == 536)
			{
				return 537;
			}
			if (thisType == 537)
			{
				return 536;
			}
			if (thisType == 539)
			{
				return 540;
			}
			if (thisType == 540)
			{
				return 539;
			}
			if (thisType == 625)
			{
				return 626;
			}
			if (thisType == 626)
			{
				return 625;
			}
			if (thisType == 627)
			{
				return 628;
			}
			if (thisType == 628)
			{
				return 627;
			}
			if (thisType == 183)
			{
				return 516;
			}
			if (thisType == 516)
			{
				return 183;
			}
			if (thisType == 181)
			{
				return 514;
			}
			if (thisType == 514)
			{
				return 181;
			}
			return 0;
		}

		// Token: 0x06001005 RID: 4101 RVA: 0x00461E0C File Offset: 0x0046000C
		public static void UpdateWorld()
		{
			if (WorldGen.gen)
			{
				return;
			}
			WorldGen.AllowedToSpreadInfections = true;
			CreativePowers.StopBiomeSpreadPower power = CreativePowerManager.Instance.GetPower<CreativePowers.StopBiomeSpreadPower>();
			if (power != null && power.GetIsUnlocked())
			{
				WorldGen.AllowedToSpreadInfections = !power.Enabled;
			}
			int wallDist = 3;
			Wiring.UpdateMech();
			TileEntity.UpdateStart();
			foreach (TileEntity tileEntity in TileEntity.ByID.Values)
			{
				tileEntity.Update();
			}
			TileEntity.UpdateEnd();
			WorldGen.UpdateLunarApocalypse();
			if (Main.netMode != 1)
			{
				WorldGen.totalD++;
				if (WorldGen.totalD >= 30)
				{
					WorldGen.totalD = 0;
					WorldGen.CountTiles(WorldGen.totalX);
					WorldGen.totalX++;
					if (WorldGen.totalX >= Main.maxTilesX)
					{
						WorldGen.totalX = 0;
					}
				}
			}
			Liquid.skipCount++;
			if (Liquid.skipCount > 1)
			{
				Liquid.UpdateLiquid();
				Liquid.skipCount = 0;
			}
			int worldUpdateRate = WorldGen.GetWorldUpdateRate();
			if (worldUpdateRate == 0)
			{
				return;
			}
			double num = (double)(3E-05f * (float)worldUpdateRate);
			double num2 = (double)(1.5E-05f * (float)worldUpdateRate);
			double num3 = (double)(2.5E-05f * (float)worldUpdateRate);
			bool checkNPCSpawns = false;
			WorldGen.spawnDelay++;
			if (Main.invasionType > 0 || Main.eclipse)
			{
				WorldGen.spawnDelay = 0;
			}
			if (WorldGen.spawnDelay >= 20)
			{
				checkNPCSpawns = true;
				WorldGen.spawnDelay = 0;
				if (WorldGen.prioritizedTownNPCType != 37)
				{
					for (int i = 0; i < 200; i++)
					{
						if (Main.npc[i].active && Main.npc[i].homeless && Main.npc[i].townNPC && Main.npc[i].type != 368)
						{
							WorldGen.prioritizedTownNPCType = Main.npc[i].type;
							break;
						}
					}
				}
			}
			double num4 = (double)(Main.maxTilesX * Main.maxTilesY) * num;
			int num5 = 151;
			int num6 = (int)Utils.Lerp((double)num5, (double)num5 * 2.8, Utils.Clamp<double>((double)Main.maxTilesX / 4200.0 - 1.0, 0.0, 1.0));
			int num7 = 0;
			while ((double)num7 < num4)
			{
				if (Main.rand.Next(num6 * 100) == 0)
				{
					WorldGen.PlantAlch();
				}
				int i2 = WorldGen.genRand.Next(10, Main.maxTilesX - 10);
				int j = WorldGen.genRand.Next(10, (int)Main.worldSurface - 1);
				WorldGen.UpdateWorld_OvergroundTile(i2, j, checkNPCSpawns, wallDist);
				num7++;
			}
			if (Main.remixWorld)
			{
				int num8 = 0;
				while ((double)num8 < (double)(Main.maxTilesX * Main.maxTilesY) * num3)
				{
					int i3 = WorldGen.genRand.Next(10, Main.maxTilesX - 10);
					int j2 = WorldGen.genRand.Next((int)Main.worldSurface - 1, Main.maxTilesY - 20);
					WorldGen.growGrassUnderground = true;
					WorldGen.UpdateWorld_UndergroundTile(i3, j2, checkNPCSpawns, wallDist);
					WorldGen.UpdateWorld_OvergroundTile(i3, j2, checkNPCSpawns, wallDist);
					WorldGen.growGrassUnderground = false;
					num8++;
				}
			}
			else
			{
				int num9 = 0;
				while ((double)num9 < (double)(Main.maxTilesX * Main.maxTilesY) * num2)
				{
					int i4 = WorldGen.genRand.Next(10, Main.maxTilesX - 10);
					int j3 = WorldGen.genRand.Next((int)Main.worldSurface - 1, Main.maxTilesY - 20);
					WorldGen.UpdateWorld_UndergroundTile(i4, j3, checkNPCSpawns, wallDist);
					num9++;
				}
			}
			if (!Main.dayTime || Main.remixWorld)
			{
				for (int k = 0; k < Main.dayRate; k++)
				{
					double num10 = (double)Main.maxTilesX / 4200.0;
					num10 *= (double)Star.starfallBoost;
					if ((double)Main.rand.Next(8000) < 10.0 * num10)
					{
						int num11 = 12;
						int num12 = Main.rand.Next(Main.maxTilesX - 50) + 100;
						num12 *= 16;
						int num13 = Main.rand.Next((int)((double)Main.maxTilesY * 0.05));
						num13 *= 16;
						Vector2 vector = new Vector2((float)num12, (float)num13);
						int num14 = -1;
						if (Main.expertMode && Main.rand.Next(15) == 0)
						{
							int num15 = (int)Player.FindClosest(vector, 1, 1);
							if ((double)Main.player[num15].position.Y < Main.worldSurface * 16.0 && Main.player[num15].afkCounter < 3600)
							{
								int num16 = Main.rand.Next(1, 640);
								vector.X = Main.player[num15].position.X + (float)Main.rand.Next(-num16, num16 + 1);
								num14 = num15;
							}
						}
						if (!Collision.SolidCollision(vector, 16, 16))
						{
							float num17 = (float)Main.rand.Next(-100, 101);
							float num18 = (float)(Main.rand.Next(200) + 100);
							float num19 = (float)Math.Sqrt((double)(num17 * num17 + num18 * num18));
							num19 = (float)num11 / num19;
							num17 *= num19;
							num18 *= num19;
							Projectile.NewProjectile(new EntitySource_ByProjectileSourceId(11), vector.X, vector.Y, num17, num18, 720, 0, 0f, Main.myPlayer, 0f, (float)num14, 0f);
						}
					}
				}
			}
		}

		// Token: 0x06001006 RID: 4102 RVA: 0x00462370 File Offset: 0x00460570
		public static int GetWorldUpdateRate()
		{
			int result = Math.Min(Main.desiredWorldTilesUpdateRate, 24);
			if (CreativePowerManager.Instance.GetPower<CreativePowers.FreezeTime>().Enabled)
			{
				result = 0;
			}
			return result;
		}

		// Token: 0x06001007 RID: 4103 RVA: 0x004623A0 File Offset: 0x004605A0
		private static void UpdateWorld_OvergroundTile(int i, int j, bool checkNPCSpawns, int wallDist)
		{
			int num = i - 1;
			int num2 = i + 2;
			int num3 = j - 1;
			int num4 = j + 2;
			if (num < 10)
			{
				num = 10;
			}
			if (num2 > Main.maxTilesX - 10)
			{
				num2 = Main.maxTilesX - 10;
			}
			if (num3 < 10)
			{
				num3 = 10;
			}
			if (num4 > Main.maxTilesY - 10)
			{
				num4 = Main.maxTilesY - 10;
			}
			if (Main.tile[i, j] == null)
			{
				return;
			}
			if (Main.tile[i, j].type == 655 && !NPC.AnyNPCs(262))
			{
				WorldGen.KillTile(i, j, false, false, false);
				if (Main.netMode == 2)
				{
					NetMessage.SendData(17, -1, -1, null, 0, (float)i, (float)j, 0f, 0, 0, 0);
				}
			}
			if (Main.tile[i, j].type == 85)
			{
				WorldGen.TryGrowingAbigailsFlower(i, j);
			}
			else if (Main.tileAlch[(int)Main.tile[i, j].type])
			{
				WorldGen.GrowAlch(i, j);
			}
			else if ((double)j < Main.worldSurface + 10.0 && (i < WorldGen.beachDistance || i > Main.maxTilesX - WorldGen.beachDistance) && !Main.tile[i, j].active())
			{
				int num5 = 3000;
				num5 -= (int)(Math.Abs(Main.windSpeedCurrent) * 1250f);
				if (Main.raining)
				{
					num5 -= (int)(1250f * Main.maxRaining);
				}
				if (num5 < 300)
				{
					num5 = 300;
				}
				if (WorldGen.genRand.Next(num5) == 0)
				{
					int num6 = j;
					while ((double)num6 < Main.worldSurface + 10.0 && !Main.tile[i, num6].active() && num6 - j < 15)
					{
						num6++;
					}
					if (Main.tile[i, num6].active() && Main.tile[i, num6].type == 53 && WorldGen.SolidTileAllowBottomSlope(i, num6))
					{
						num6--;
						int num7 = WorldGen.genRand.Next(2, 5);
						int num8 = WorldGen.genRand.Next(8, 11);
						int num9 = 0;
						for (int k = i - num8; k <= i + num8; k++)
						{
							for (int l = num6 - num8; l <= num6 + num8; l++)
							{
								if (Main.tile[k, l].active() && (Main.tile[k, l].type == 324 || Main.tile[k, l].type == 81))
								{
									num9++;
								}
							}
						}
						if (num9 < num7)
						{
							if (WorldGen.genRand.Next(2) == 0 && Main.tile[i, num6].liquid >= 230)
							{
								WorldGen.PlaceTile(i, num6, 81, true, false, -1, 0);
								if (Main.netMode == 2 && Main.tile[i, num6].active())
								{
									NetMessage.SendTileSquare(-1, i, num6, TileChangeType.None);
								}
							}
							else
							{
								WorldGen.PlaceTile(i, num6, 324, true, false, -1, WorldGen.RollRandomSeaShellStyle());
								if (Main.netMode == 2 && Main.tile[i, num6].active())
								{
									NetMessage.SendTileSquare(-1, i, num6, TileChangeType.None);
								}
							}
						}
					}
				}
			}
			if ((Main.tile[i, j].type == 596 || Main.tile[i, j].type == 616 || Main.tile[i, j].type == 595 || Main.tile[i, j].type == 615) && (Main.tile[i, j + 1].type == 199 || Main.tile[i, j + 1].type == 23))
			{
				WorldGen.KillTile(i, j, false, false, false);
				if (Main.netMode == 2)
				{
					NetMessage.SendTileSquare(-1, i, j, TileChangeType.None);
				}
			}
			if ((Main.tile[i, j].type == 571 || (Main.tile[i, j].type == 60 && Main.tile[i, j - 1].liquid > 0)) && WorldGen.genRand.Next(5) == 0 && (!Main.tile[i, j - 1].active() || Main.tile[i, j - 1].type == 61 || Main.tile[i, j - 1].type == 74 || Main.tile[i, j - 1].type == 518) && (Main.tile[i, j].type != 60 || WorldGen.genRand.Next(30) == 0) && WorldGen.PlaceBamboo(i, j - 1))
			{
				NetMessage.SendTileSquare(-1, i, j - 1, 1, 2, TileChangeType.None);
			}
			if (Main.tile[i, j].type == 518)
			{
				if (Main.tile[i, j].liquid == 0 || (Main.tile[i, j].liquid / 16 >= 9 && WorldGen.SolidTile(i, j - 1, false)) || (Main.tile[i, j - 1].liquid > 0 && Main.tile[i, j - 1].active()))
				{
					WorldGen.KillTile(i, j, false, false, false);
					if (Main.netMode == 2)
					{
						NetMessage.SendData(17, -1, -1, null, 0, (float)i, (float)j, 0f, 0, 0, 0);
					}
				}
				else
				{
					WorldGen.CheckLilyPad(i, j);
				}
			}
			else if (Main.tile[i, j].type == 519)
			{
				WorldGen.CheckCatTail(i, j);
				if (Main.tile[i, j].active() && WorldGen.genRand.Next(8) == 0)
				{
					WorldGen.GrowCatTail(i, j);
					WorldGen.CheckCatTail(i, j);
				}
			}
			else if (Main.tile[i, j].liquid > 32)
			{
				if (Main.tile[i, j].active())
				{
					if (TileID.Sets.SlowlyDiesInWater[(int)Main.tile[i, j].type])
					{
						WorldGen.KillTile(i, j, false, false, false);
						if (Main.netMode == 2)
						{
							NetMessage.SendData(17, -1, -1, null, 0, (float)i, (float)j, 0f, 0, 0, 0);
						}
					}
					else if (Main.tile[i, j].type == 60)
					{
						WorldGen.UpdateWorld_GrassGrowth(i, j, num, num2, num3, num4, false);
					}
				}
				else if (WorldGen.genRand.Next(600) == 0)
				{
					WorldGen.PlaceTile(i, j, 518, true, false, -1, 0);
					if (Main.netMode == 2)
					{
						NetMessage.SendTileSquare(-1, i, j, TileChangeType.None);
					}
				}
				else if (WorldGen.genRand.Next(600) == 0)
				{
					WorldGen.PlaceTile(i, j, 519, true, false, -1, 0);
					if (Main.netMode == 2)
					{
						NetMessage.SendTileSquare(-1, i, j, TileChangeType.None);
					}
				}
			}
			else if (Main.tile[i, j].nactive())
			{
				WorldGen.hardUpdateWorld(i, j);
				if (Main.rand.Next(3000) == 0)
				{
					WorldGen.plantDye(i, j, false);
				}
				else if (Main.hardMode && ((double)i < (double)Main.maxTilesX * 0.4 || (double)i > (double)Main.maxTilesX * 0.6) && Main.rand.Next(15000) == 0)
				{
					WorldGen.plantDye(i, j, true);
				}
				if (Main.tile[i, j].type == 80)
				{
					if (WorldGen.genRand.Next(15) == 0)
					{
						WorldGen.GrowCactus(i, j);
					}
				}
				else if (Main.tile[i, j].type == 529)
				{
					if (WorldGen.CheckSeaOat(i, j) && WorldGen.genRand.Next(20) == 0)
					{
						WorldGen.GrowSeaOat(i, j);
					}
				}
				else if (TileID.Sets.Conversion.Sand[(int)Main.tile[i, j].type])
				{
					if (!Main.tile[i, num3].active())
					{
						if (WorldGen.genRand.Next(25) == 0)
						{
							WorldGen.PlaceOasisPlant(i, num3, 530);
							if (Main.tile[i, num3].type == 530 && Main.netMode == 2)
							{
								NetMessage.SendTileSquare(-1, i - 1, num3 - 1, 3, 2, TileChangeType.None);
							}
						}
						if (WorldGen.genRand.Next(20) != 0 || !WorldGen.PlantSeaOat(i, num3))
						{
							if (i < WorldGen.oceanDistance || i > Main.maxTilesX - WorldGen.oceanDistance)
							{
								if (WorldGen.genRand.Next(500) == 0)
								{
									int num10 = 7;
									int num11 = 6;
									int num12 = 0;
									for (int m = i - num10; m <= i + num10; m++)
									{
										for (int n = num3 - num10; n <= num3 + num10; n++)
										{
											if (Main.tile[m, n].active() && Main.tile[m, n].type == 81)
											{
												num12++;
											}
										}
									}
									if (num12 < num11 && Main.tile[i, num3].liquid == 255 && Main.tile[i, num3 - 1].liquid == 255 && Main.tile[i, num3 - 2].liquid == 255 && Main.tile[i, num3 - 3].liquid == 255 && Main.tile[i, num3 - 4].liquid == 255)
									{
										WorldGen.PlaceTile(i, num3, 81, true, false, -1, 0);
										if (Main.netMode == 2 && Main.tile[i, num3].active())
										{
											NetMessage.SendTileSquare(-1, i, num3, TileChangeType.None);
										}
									}
								}
							}
							else if (i > WorldGen.beachDistance + 20 && i < Main.maxTilesX - WorldGen.beachDistance - 20 && WorldGen.genRand.Next(300) == 0)
							{
								WorldGen.GrowCactus(i, j);
							}
						}
					}
				}
				else if (Main.tile[i, j].type == 530)
				{
					if (!WorldGen.OasisPlantWaterCheck(i, j, true))
					{
						WorldGen.KillTile(i, j, false, false, false);
						if (Main.netMode == 2)
						{
							NetMessage.SendData(17, -1, -1, null, 0, (float)i, (float)j, 0f, 0, 0, 0);
						}
					}
				}
				else if (Main.tile[i, j].type == 147 || Main.tile[i, j].type == 161 || Main.tile[i, j].type == 163 || Main.tile[i, j].type == 164 || Main.tile[i, j].type == 200)
				{
					if (Main.rand.Next(10) == 0 && !Main.tile[i, j + 1].active() && !Main.tile[i, j + 2].active())
					{
						int num13 = i - 3;
						int num14 = i + 4;
						int num15 = 0;
						for (int num16 = num13; num16 < num14; num16++)
						{
							if (Main.tile[num16, j].type == 165 && Main.tile[num16, j].active())
							{
								num15++;
							}
							if (Main.tile[num16, j + 1].type == 165 && Main.tile[num16, j + 1].active())
							{
								num15++;
							}
							if (Main.tile[num16, j + 2].type == 165 && Main.tile[num16, j + 2].active())
							{
								num15++;
							}
							if (Main.tile[num16, j + 3].type == 165 && Main.tile[num16, j + 3].active())
							{
								num15++;
							}
						}
						if (num15 < 2)
						{
							WorldGen.PlaceTight(i, j + 1, false);
							WorldGen.SquareTileFrame(i, j + 1, true);
							if (Main.netMode == 2 && Main.tile[i, j + 1].active())
							{
								NetMessage.SendTileSquare(-1, i, j + 1, 1, 2, TileChangeType.None);
							}
						}
					}
				}
				else if (Main.tile[i, j].type == 254)
				{
					if (Main.rand.Next((int)((Main.tile[i, j].frameX + 10) / 10)) == 0)
					{
						WorldGen.GrowPumpkin(i, j, 254);
					}
				}
				else if (Main.tile[i, j].type == 78 || Main.tile[i, j].type == 380 || Main.tile[i, j].type == 579)
				{
					if (!Main.tile[i, num3].active() && WorldGen.genRand.Next(2) == 0)
					{
						WorldGen.PlaceTile(i, num3, 3, true, false, -1, 0);
						if (Main.netMode == 2 && Main.tile[i, num3].active())
						{
							NetMessage.SendTileSquare(-1, i, num3, TileChangeType.None);
						}
					}
				}
				else if (TileID.Sets.SpreadOverground[(int)Main.tile[i, j].type])
				{
					WorldGen.UpdateWorld_GrassGrowth(i, j, num, num2, num3, num4, false);
					int type = (int)Main.tile[i, j].type;
					if ((type == 32 || type == 352) && WorldGen.genRand.Next(3) == 0)
					{
						if (type == 32)
						{
							WorldGen.GrowSpike(i, j, 32, 23);
						}
						else
						{
							WorldGen.GrowSpike(i, j, 352, 199);
						}
					}
				}
				else if (Main.tileMoss[(int)Main.tile[i, j].type] || TileID.Sets.tileMossBrick[(int)Main.tile[i, j].type])
				{
					if (WorldGen.genRand.NextDouble() < 0.5)
					{
						int type2 = (int)Main.tile[i, j].type;
						bool flag = false;
						TileColorCache color = Main.tile[i, j].BlockColorAndCoating();
						for (int num17 = num; num17 < num2; num17++)
						{
							for (int num18 = num3; num18 < num4; num18++)
							{
								if ((i != num17 || j != num18) && Main.tile[num17, num18].active() && (Main.tile[num17, num18].type == 1 || Main.tile[num17, num18].type == 38))
								{
									int type3 = (int)Main.tile[num17, num18].type;
									int num19 = WorldGen.MossConversion(type2, type3);
									WorldGen.SpreadGrass(num17, num18, (int)Main.tile[num17, num18].type, num19, false, color);
									if ((int)Main.tile[num17, num18].type == num19)
									{
										WorldGen.SquareTileFrame(num17, num18, true);
										flag = true;
									}
								}
							}
						}
						if (Main.netMode == 2 && flag)
						{
							NetMessage.SendTileSquare(-1, i, j, 3, TileChangeType.None);
						}
						if (WorldGen.genRand.Next(6) == 0)
						{
							int num20 = i;
							int num21 = j;
							int num22 = WorldGen.genRand.Next(4);
							if (num22 == 0)
							{
								num20--;
							}
							else if (num22 == 1)
							{
								num20++;
							}
							else if (num22 == 2)
							{
								num21--;
							}
							else
							{
								num21++;
							}
							if (!Main.tile[num20, num21].active())
							{
								if (WorldGen.PlaceTile(num20, num21, 184, true, false, -1, 0))
								{
									Main.tile[num20, num21].CopyPaintAndCoating(Main.tile[i, j]);
								}
								if (Main.netMode == 2 && Main.tile[num20, num21].active())
								{
									NetMessage.SendTileSquare(-1, num20, num21, TileChangeType.None);
								}
							}
						}
					}
				}
				else if (Main.tile[i, j].type == 20)
				{
					if (WorldGen.genRand.Next(20) == 0)
					{
						WorldGen.AttemptToGrowTreeFromSapling(i, j, false);
					}
				}
				else if (Main.tile[i, j].type == 595)
				{
					if (WorldGen.genRand.Next(5) == 0)
					{
						WorldGen.AttemptToGrowTreeFromSapling(i, j, false);
					}
				}
				else if (Main.tile[i, j].type == 615)
				{
					if (WorldGen.genRand.Next(5) == 0)
					{
						WorldGen.AttemptToGrowTreeFromSapling(i, j, false);
					}
				}
				else if (Main.tile[i, j].type == 3 && WorldGen.genRand.Next(20) == 0)
				{
					if (Main.tile[i, j].frameX != 144)
					{
						Main.tile[i, j].type = 73;
						if (Main.netMode == 2)
						{
							NetMessage.SendTileSquare(-1, i, j, TileChangeType.None);
						}
					}
				}
				else if (Main.tile[i, j].type == 110 && WorldGen.genRand.Next(20) == 0 && Main.tile[i, j].frameX < 144)
				{
					Main.tile[i, j].type = 113;
					if (Main.netMode == 2)
					{
						NetMessage.SendTileSquare(-1, i, j, TileChangeType.None);
					}
				}
			}
			else
			{
				if (Main.tile[i, j].wall == 62 && Main.tile[i, j].liquid == 0)
				{
					WorldGen.GrowWeb(i, j);
				}
				if (checkNPCSpawns)
				{
					WorldGen.TrySpawningTownNPC(i, j);
				}
			}
			if (WorldGen.AllowedToSpreadInfections)
			{
				if (Main.tile[i, j].wall == 81 || Main.tile[i, j].wall == 83 || (Main.tile[i, j].type == 199 && Main.tile[i, j].active()))
				{
					int num23 = i + WorldGen.genRand.Next(-2, 3);
					int num24 = j + WorldGen.genRand.Next(-2, 3);
					if (WorldGen.InWorld(num23, num24, 10) && Main.tile[num23, num24].wall >= 63 && Main.tile[num23, num24].wall <= 68)
					{
						bool flag2 = false;
						for (int num25 = i - wallDist; num25 < i + wallDist; num25++)
						{
							for (int num26 = j - wallDist; num26 < j + wallDist; num26++)
							{
								if (Main.tile[num25, num26].active())
								{
									int type4 = (int)Main.tile[num25, num26].type;
									if (type4 == 199 || type4 == 200 || type4 == 201 || type4 == 203 || type4 == 205 || type4 == 234 || type4 == 352 || type4 == 662)
									{
										flag2 = true;
										break;
									}
								}
							}
						}
						if (flag2)
						{
							Main.tile[num23, num24].wall = 81;
							if (Main.netMode == 2)
							{
								NetMessage.SendTileSquare(-1, num23, num24, TileChangeType.None);
							}
						}
					}
				}
				else if (Main.tile[i, j].wall == 69 || Main.tile[i, j].wall == 3 || (Main.tile[i, j].type == 23 && Main.tile[i, j].active()))
				{
					int num27 = i + WorldGen.genRand.Next(-2, 3);
					int num28 = j + WorldGen.genRand.Next(-2, 3);
					if (WorldGen.InWorld(num27, num28, 10) && Main.tile[num27, num28].wall >= 63 && Main.tile[num27, num28].wall <= 68)
					{
						bool flag3 = false;
						for (int num29 = i - wallDist; num29 < i + wallDist; num29++)
						{
							for (int num30 = j - wallDist; num30 < j + wallDist; num30++)
							{
								if (Main.tile[num29, num30].active())
								{
									int type5 = (int)Main.tile[num29, num30].type;
									if (type5 == 22 || type5 == 23 || type5 == 24 || type5 == 25 || type5 == 32 || type5 == 112 || type5 == 163 || type5 == 636 || type5 == 661)
									{
										flag3 = true;
										break;
									}
								}
							}
						}
						if (flag3)
						{
							Main.tile[num27, num28].wall = 69;
							if (Main.netMode == 2)
							{
								NetMessage.SendTileSquare(-1, num27, num28, TileChangeType.None);
							}
						}
					}
				}
				else if (Main.tile[i, j].wall == 70 || (Main.tile[i, j].type == 109 && Main.tile[i, j].active()))
				{
					int num31 = i + WorldGen.genRand.Next(-2, 3);
					int num32 = j + WorldGen.genRand.Next(-2, 3);
					if ((WorldGen.InWorld(num31, num32, 10) && Main.tile[num31, num32].wall == 63) || Main.tile[num31, num32].wall == 65 || Main.tile[num31, num32].wall == 66 || Main.tile[num31, num32].wall == 68)
					{
						bool flag4 = false;
						for (int num33 = i - wallDist; num33 < i + wallDist; num33++)
						{
							for (int num34 = j - wallDist; num34 < j + wallDist; num34++)
							{
								if (Main.tile[num33, num34].active())
								{
									int type6 = (int)Main.tile[num33, num34].type;
									if (type6 == 109 || type6 == 110 || type6 == 113 || type6 == 115 || type6 == 116 || type6 == 117 || type6 == 164)
									{
										flag4 = true;
										break;
									}
								}
							}
						}
						if (flag4)
						{
							Main.tile[num31, num32].wall = 70;
							if (Main.netMode == 2)
							{
								NetMessage.SendTileSquare(-1, num31, num32, TileChangeType.None);
							}
						}
					}
				}
				WorldGen.SpreadDesertWalls(wallDist, i, j);
			}
			if (Main.tile[i, j].nactive())
			{
				if (Main.tile[i, j].type == 2 || Main.tile[i, j].type == 52 || Main.tile[i, j].type == 382 || (Main.tile[i, j].type == 192 && WorldGen.genRand.Next(10) == 0))
				{
					if (Main.tile[i, j].type == 52 || Main.tile[i, j].type == 382)
					{
					}
					int maxValue = 1;
					if (WorldGen.genRand.Next(maxValue) == 0 && WorldGen.GrowMoreVines(i, j) && !Main.tile[i, j + 1].active() && !Main.tile[i, j + 1].lava())
					{
						bool flag5 = false;
						ushort type7 = 52;
						if (Main.tile[i, j].type == 382)
						{
							type7 = 382;
						}
						else if (Main.tile[i, j].type != 52)
						{
							if (Main.tile[i, j].wall == 68 || Main.tile[i, j].wall == 65 || Main.tile[i, j].wall == 66 || Main.tile[i, j].wall == 63)
							{
								type7 = 382;
							}
							else if (Main.tile[i, j + 1].wall == 68 || Main.tile[i, j + 1].wall == 65 || Main.tile[i, j + 1].wall == 66 || Main.tile[i, j + 1].wall == 63)
							{
								type7 = 382;
							}
							if (Main.remixWorld && WorldGen.genRand.Next(5) == 0)
							{
								type7 = 382;
							}
						}
						for (int num35 = j; num35 > j - 10; num35--)
						{
							if (Main.tile[i, num35].bottomSlope())
							{
								flag5 = false;
								break;
							}
							if (Main.tile[i, num35].active() && Main.tile[i, num35].type == 2 && !Main.tile[i, num35].bottomSlope())
							{
								flag5 = true;
								break;
							}
						}
						if (flag5)
						{
							int num36 = j + 1;
							Main.tile[i, num36].type = type7;
							Main.tile[i, num36].active(true);
							Main.tile[i, num36].CopyPaintAndCoating(Main.tile[i, j]);
							WorldGen.SquareTileFrame(i, num36, true);
							if (Main.netMode == 2)
							{
								NetMessage.SendTileSquare(-1, i, num36, TileChangeType.None);
							}
						}
					}
				}
				else if (Main.tile[i, j].type == 61 && WorldGen.genRand.Next(3) == 0 && Main.tile[i, j].frameX < 144)
				{
					if (Main.rand.Next(4) == 0)
					{
						Main.tile[i, j].frameX = (short)(162 + WorldGen.genRand.Next(8) * 18);
					}
					Main.tile[i, j].type = 74;
					if (Main.netMode == 2)
					{
						NetMessage.SendTileSquare(-1, i, j, TileChangeType.None);
					}
				}
				if ((Main.tile[i, j].type == 60 || Main.tile[i, j].type == 62) && WorldGen.GrowMoreVines(i, j))
				{
					int maxValue2 = 30;
					if (Main.tile[i, j].type == 62)
					{
						maxValue2 = 10;
					}
					if (WorldGen.genRand.Next(maxValue2) == 0 && !Main.tile[i, j + 1].active() && !Main.tile[i, j + 1].lava())
					{
						bool flag6 = false;
						for (int num37 = j; num37 > j - 10; num37--)
						{
							if (Main.tile[i, num37].bottomSlope())
							{
								flag6 = false;
								break;
							}
							if (Main.tile[i, num37].active() && Main.tile[i, num37].type == 60 && !Main.tile[i, num37].bottomSlope())
							{
								flag6 = true;
								break;
							}
						}
						if (flag6)
						{
							int num38 = j + 1;
							Main.tile[i, num38].type = 62;
							Main.tile[i, num38].active(true);
							Main.tile[i, num38].CopyPaintAndCoating(Main.tile[i, j]);
							WorldGen.SquareTileFrame(i, num38, true);
							if (Main.netMode == 2)
							{
								NetMessage.SendTileSquare(-1, i, num38, TileChangeType.None);
							}
						}
					}
				}
				else if ((Main.tile[i, j].type == 70 || Main.tile[i, j].type == 528) && WorldGen.GrowMoreVines(i, j))
				{
					int maxValue3 = 70;
					if (Main.tile[i, j].type == 528)
					{
						maxValue3 = 7;
					}
					if (WorldGen.genRand.Next(maxValue3) == 0 && !Main.tile[i, j + 1].active() && !Main.tile[i, j + 1].lava())
					{
						bool flag7 = false;
						for (int num39 = j; num39 > j - 10; num39--)
						{
							if (Main.tile[i, num39].bottomSlope())
							{
								flag7 = false;
								break;
							}
							if (Main.tile[i, num39].active() && Main.tile[i, num39].type == 70 && !Main.tile[i, num39].bottomSlope())
							{
								flag7 = true;
								break;
							}
						}
						if (flag7)
						{
							int num40 = j + 1;
							Main.tile[i, num40].type = 528;
							Main.tile[i, num40].active(true);
							Main.tile[i, num40].CopyPaintAndCoating(Main.tile[i, j]);
							WorldGen.SquareTileFrame(i, num40, true);
							if (Main.netMode == 2)
							{
								NetMessage.SendTileSquare(-1, i, num40, TileChangeType.None);
							}
						}
					}
				}
				else if ((Main.tile[i, j].type == 109 || Main.tile[i, j].type == 115) && WorldGen.GrowMoreVines(i, j))
				{
					int maxValue4 = 60;
					if (Main.tile[i, j].type == 115)
					{
						maxValue4 = 20;
					}
					if (WorldGen.genRand.Next(maxValue4) == 0 && !Main.tile[i, j + 1].active() && !Main.tile[i, j + 1].lava())
					{
						bool flag8 = false;
						for (int num41 = j; num41 > j - 10; num41--)
						{
							if (Main.tile[i, num41].bottomSlope())
							{
								flag8 = false;
								break;
							}
							if (Main.tile[i, num41].active() && Main.tile[i, num41].type == 109 && !Main.tile[i, num41].bottomSlope())
							{
								flag8 = true;
								break;
							}
						}
						if (flag8)
						{
							int num42 = j + 1;
							Main.tile[i, num42].type = 115;
							Main.tile[i, num42].active(true);
							Main.tile[i, num42].CopyPaintAndCoating(Main.tile[i, j]);
							WorldGen.SquareTileFrame(i, num42, true);
							if (Main.netMode == 2)
							{
								NetMessage.SendTileSquare(-1, i, num42, TileChangeType.None);
							}
						}
					}
				}
				else if ((Main.tile[i, j].type == 23 || Main.tile[i, j].type == 661 || Main.tile[i, j].type == 636) && WorldGen.GrowMoreVines(i, j))
				{
					int maxValue5 = 60;
					if (Main.tile[i, j].type == 636)
					{
						maxValue5 = 20;
					}
					if (WorldGen.genRand.Next(maxValue5) == 0 && !Main.tile[i, j + 1].active() && !Main.tile[i, j + 1].lava())
					{
						bool flag9 = false;
						for (int num43 = j; num43 > j - 10; num43--)
						{
							if (Main.tile[i, num43].bottomSlope())
							{
								flag9 = false;
								break;
							}
							if (Main.tile[i, num43].active() && (Main.tile[i, num43].type == 23 || Main.tile[i, num43].type == 661) && !Main.tile[i, num43].bottomSlope())
							{
								flag9 = true;
								break;
							}
						}
						if (flag9)
						{
							int num44 = j + 1;
							Main.tile[i, num44].type = 636;
							Main.tile[i, num44].active(true);
							Main.tile[i, num44].CopyPaintAndCoating(Main.tile[i, j]);
							WorldGen.SquareTileFrame(i, num44, true);
							if (Main.netMode == 2)
							{
								NetMessage.SendTileSquare(-1, i, num44, TileChangeType.None);
							}
						}
					}
				}
				else if ((Main.tile[i, j].type == 199 || Main.tile[i, j].type == 662 || Main.tile[i, j].type == 205) && WorldGen.GrowMoreVines(i, j))
				{
					int maxValue6 = 60;
					if (Main.tile[i, j].type == 205)
					{
						maxValue6 = 20;
					}
					if (WorldGen.genRand.Next(maxValue6) == 0 && !Main.tile[i, j + 1].active() && !Main.tile[i, j + 1].lava())
					{
						bool flag10 = false;
						for (int num45 = j; num45 > j - 10; num45--)
						{
							if (Main.tile[i, num45].bottomSlope())
							{
								flag10 = false;
								break;
							}
							if (Main.tile[i, num45].active() && (Main.tile[i, num45].type == 199 || Main.tile[i, num45].type == 662) && !Main.tile[i, num45].bottomSlope())
							{
								flag10 = true;
								break;
							}
						}
						if (flag10)
						{
							int num46 = j + 1;
							Main.tile[i, num46].type = 205;
							Main.tile[i, num46].active(true);
							Main.tile[i, num46].CopyPaintAndCoating(Main.tile[i, j]);
							WorldGen.SquareTileFrame(i, num46, true);
							if (Main.netMode == 2)
							{
								NetMessage.SendTileSquare(-1, i, num46, TileChangeType.None);
							}
						}
					}
				}
				else if ((Main.tile[i, j].type == 633 || Main.tile[i, j].type == 638) && WorldGen.GrowMoreVines(i, j))
				{
					int maxValue7 = 70;
					if (Main.tile[i, j].type == 638)
					{
						maxValue7 = 7;
					}
					if (WorldGen.genRand.Next(maxValue7) == 0 && !Main.tile[i, j + 1].active() && !Main.tile[i, j + 1].lava())
					{
						bool flag11 = false;
						for (int num47 = j; num47 > j - 10; num47--)
						{
							if (Main.tile[i, num47].bottomSlope())
							{
								flag11 = false;
								break;
							}
							if (Main.tile[i, num47].active() && Main.tile[i, num47].type == 633 && !Main.tile[i, num47].bottomSlope())
							{
								flag11 = true;
								break;
							}
						}
						if (flag11)
						{
							int num48 = j + 1;
							Main.tile[i, num48].type = 638;
							Main.tile[i, num48].active(true);
							Main.tile[i, num48].CopyPaintAndCoating(Main.tile[i, j]);
							WorldGen.SquareTileFrame(i, num48, true);
							if (Main.netMode == 2)
							{
								NetMessage.SendTileSquare(-1, i, num48, TileChangeType.None);
							}
						}
					}
				}
			}
			if (!Main.remixWorld && Main.dontStarveWorld && (float)Main.rand.Next(200) < 100f * Main.maxRaining && Main.maxRaining >= 0.2f)
			{
				WorldGen.DontStarveTryWateringTile(i, j);
			}
		}

		// Token: 0x06001008 RID: 4104 RVA: 0x004647F8 File Offset: 0x004629F8
		public static bool AttemptToGrowTreeFromSapling(int x, int y, bool underground)
		{
			if (Main.netMode == 1)
			{
				return false;
			}
			if (!WorldGen.InWorld(x, y, 2))
			{
				return false;
			}
			Tile tile = Main.tile[x, y];
			if (tile == null || !tile.active())
			{
				return false;
			}
			ushort type = tile.type;
			if (type <= 590)
			{
				if (type == 20)
				{
					int num = (int)(tile.frameX / 54);
					bool flag;
					if (num - 6 > 3)
					{
						if (num == 10)
						{
							flag = WorldGen.TryGrowingTreeByType(634, x, y);
						}
						else
						{
							if (underground)
							{
								return false;
							}
							flag = WorldGen.GrowTree(x, y);
						}
					}
					else
					{
						if (underground)
						{
							return false;
						}
						flag = WorldGen.GrowPalmTree(x, y);
					}
					if (flag && WorldGen.PlayerLOS(x, y))
					{
						WorldGen.TreeGrowFXCheck(x, y);
					}
					return flag;
				}
				if (type == 590)
				{
					if (!underground)
					{
						return false;
					}
					int num = (int)(tile.frameX / 54);
					int treeTileType = 587;
					switch (num)
					{
					case 0:
						treeTileType = 583;
						break;
					case 1:
						treeTileType = 584;
						break;
					case 2:
						treeTileType = 585;
						break;
					case 3:
						treeTileType = 586;
						break;
					case 4:
						treeTileType = 587;
						break;
					case 5:
						treeTileType = 588;
						break;
					case 6:
						treeTileType = 589;
						break;
					}
					bool flag = WorldGen.TryGrowingTreeByType(treeTileType, x, y);
					if (flag && WorldGen.PlayerLOS(x, y))
					{
						WorldGen.TreeGrowFXCheck(x, y);
					}
					return flag;
				}
			}
			else
			{
				if (type == 595)
				{
					int num = (int)(tile.frameX / 54);
					int treeTileType = 596;
					if (num == 0)
					{
						treeTileType = 596;
					}
					bool flag = WorldGen.TryGrowingTreeByType(treeTileType, x, y);
					if (flag && WorldGen.PlayerLOS(x, y))
					{
						WorldGen.TreeGrowFXCheck(x, y);
					}
					return flag;
				}
				if (type == 615)
				{
					int num = (int)(tile.frameX / 54);
					int treeTileType = 616;
					if (num == 0)
					{
						treeTileType = 616;
					}
					bool flag = WorldGen.TryGrowingTreeByType(treeTileType, x, y);
					if (flag && WorldGen.PlayerLOS(x, y))
					{
						WorldGen.TreeGrowFXCheck(x, y);
					}
					return flag;
				}
			}
			return false;
		}

		// Token: 0x06001009 RID: 4105 RVA: 0x004649D0 File Offset: 0x00462BD0
		public static void DontStarveTryWateringTile(int x, int y)
		{
			Tile tile = Main.tile[x, y];
			if (!tile.active())
			{
				return;
			}
			if (!TileObjectData.CheckWaterDeath(tile))
			{
				return;
			}
			if (WorldGen.IsSafeFromRain(x, y))
			{
				return;
			}
			if (WorldGen.HasAnyWireNearby(x, y, 0))
			{
				return;
			}
			if (WorldGen.TryToggleLight(x, y, new bool?(false), false))
			{
				return;
			}
			WorldGen.KillTile(x, y, false, false, false);
			if (Main.netMode == 2)
			{
				NetMessage.SendData(17, -1, -1, null, 0, (float)x, (float)y, 0f, 0, 0, 0);
			}
		}

		// Token: 0x0600100A RID: 4106 RVA: 0x00464A4C File Offset: 0x00462C4C
		public static bool HasAnyWireNearby(int sourceX, int sourceY, int boxSpread)
		{
			int num = Utils.Clamp<int>(sourceX - boxSpread, 0, Main.maxTilesX - 1);
			int num2 = Utils.Clamp<int>(sourceX + boxSpread, 0, Main.maxTilesX - 1);
			int num3 = Utils.Clamp<int>(sourceY - boxSpread, 0, Main.maxTilesY - 1);
			int num4 = Utils.Clamp<int>(sourceY + boxSpread, 0, Main.maxTilesY - 1);
			for (int i = num; i <= num2; i++)
			{
				for (int j = num3; j <= num4; j++)
				{
					Tile tile = Main.tile[i, j];
					if (tile != null && (tile.wire() || tile.wire2() || tile.wire3() || tile.wire4()))
					{
						return true;
					}
				}
			}
			return false;
		}

		// Token: 0x0600100B RID: 4107 RVA: 0x00464AF4 File Offset: 0x00462CF4
		public static bool IsSafeFromRain(int startX, int startY)
		{
			Vector2D vector2D = -Rain.GetRainFallVelocity().SafeNormalize(new Vector2(0f, 1f)).ToVector2D();
			Vector2D vector2D2 = new Vector2D((double)startX, (double)startY) * 16.0 + Vector2D.One * 8.0;
			double num = 85.0;
			DelegateMethods.CheckResultOut = false;
			Utils.PlotTileLine(vector2D2, vector2D2 + vector2D * 16.0 * num, 4.0, new Utils.TileActionAttempt(DelegateMethods.CheckStopForSolids));
			return DelegateMethods.CheckResultOut;
		}

		// Token: 0x0600100C RID: 4108 RVA: 0x00464BA0 File Offset: 0x00462DA0
		public static bool TryToggleLight(int x, int y, bool? forcedState, bool skipWires)
		{
			Tile tile = Main.tile[x, y];
			if (!tile.active())
			{
				return false;
			}
			ushort type = tile.type;
			if (type <= 126)
			{
				if (type <= 42)
				{
					if (type <= 33)
					{
						if (type == 4)
						{
							Wiring.ToggleTorch(x, y, tile, forcedState);
							return true;
						}
						if (type == 33)
						{
							goto IL_FE;
						}
					}
					else
					{
						if (type == 34)
						{
							Wiring.ToggleChandelier(x, y, tile, forcedState, skipWires);
							return true;
						}
						if (type == 42)
						{
							Wiring.ToggleHangingLantern(x, y, tile, forcedState, skipWires);
							return true;
						}
					}
				}
				else if (type <= 95)
				{
					if (type == 49)
					{
						goto IL_FE;
					}
					switch (type)
					{
					case 92:
						Wiring.ToggleLampPost(x, y, tile, forcedState, skipWires);
						return true;
					case 93:
						Wiring.ToggleLamp(x, y, tile, forcedState, skipWires);
						return true;
					case 95:
						goto IL_115;
					}
				}
				else if (type == 100 || type == 126)
				{
					goto IL_115;
				}
			}
			else if (type <= 215)
			{
				if (type <= 173)
				{
					if (type == 149)
					{
						Wiring.ToggleHolidayLight(x, y, tile, forcedState);
						return true;
					}
					if (type == 173)
					{
						goto IL_115;
					}
				}
				else
				{
					if (type == 174)
					{
						goto IL_FE;
					}
					if (type == 215)
					{
						Wiring.ToggleCampFire(x, y, tile, forcedState, skipWires);
						return true;
					}
				}
			}
			else if (type <= 405)
			{
				if (type == 372)
				{
					goto IL_FE;
				}
				if (type == 405)
				{
					Wiring.ToggleFirePlace(x, y, tile, forcedState, skipWires);
					return true;
				}
			}
			else
			{
				if (type == 564)
				{
					goto IL_115;
				}
				if (type == 646)
				{
					goto IL_FE;
				}
			}
			return false;
			IL_FE:
			Wiring.ToggleCandle(x, y, tile, forcedState);
			return true;
			IL_115:
			Wiring.Toggle2x2Light(x, y, tile, forcedState, skipWires);
			return true;
		}

		// Token: 0x0600100D RID: 4109 RVA: 0x00464D14 File Offset: 0x00462F14
		private static bool HasValidGroundForAbigailsFlowerBelowSpot(int x, int y)
		{
			if (!WorldGen.InWorld(x, y, 2))
			{
				return false;
			}
			Tile tile = Main.tile[x, y + 1];
			if (tile == null || !tile.active())
			{
				return false;
			}
			ushort type = tile.type;
			return type >= 0 && type < TileID.Count && (type == 70 || type == 633 || TileID.Sets.Conversion.Grass[(int)type]) && WorldGen.SolidTileAllowBottomSlope(x, y + 1);
		}

		// Token: 0x0600100E RID: 4110 RVA: 0x00464D80 File Offset: 0x00462F80
		private static bool TryGrowingAbigailsFlower(int i, int j)
		{
			if (Main.rand.Next(30) != 0)
			{
				return false;
			}
			int num = 1;
			if (Main.dontStarveWorld)
			{
				num = 2;
			}
			for (int k = 0; k < num; k++)
			{
				int num2 = WorldGen.genRand.Next(Math.Max(10, i - 10), Math.Min(Main.maxTilesX - 10, i + 10));
				int num3 = WorldGen.genRand.Next(Math.Max(10, j - 10), Math.Min(Main.maxTilesY - 10, j + 10));
				if (WorldGen.HasValidGroundForAbigailsFlowerBelowSpot(num2, num3) && WorldGen.NoNearbyAbigailsFlower(num2, num3) && WorldGen.PlaceTile(num2, num3, 624, true, false, -1, 0))
				{
					if (Main.netMode == 2 && Main.tile[num2, num3] != null && Main.tile[num2, num3].active())
					{
						NetMessage.SendTileSquare(-1, num2, num3, TileChangeType.None);
					}
					return true;
				}
			}
			return false;
		}

		// Token: 0x0600100F RID: 4111 RVA: 0x00464E64 File Offset: 0x00463064
		private static bool NoNearbyAbigailsFlower(int i, int j)
		{
			int num = Utils.Clamp<int>(i - 120, 10, Main.maxTilesX - 1 - 10);
			int num2 = Utils.Clamp<int>(i + 120, 10, Main.maxTilesX - 1 - 10);
			int num3 = Utils.Clamp<int>(j - 120, 10, Main.maxTilesY - 1 - 10);
			int num4 = Utils.Clamp<int>(j + 120, 10, Main.maxTilesY - 1 - 10);
			for (int k = num; k <= num2; k++)
			{
				for (int l = num3; l <= num4; l++)
				{
					Tile tile = Main.tile[k, l];
					if (tile.active() && tile.type == 624)
					{
						return false;
					}
				}
			}
			return true;
		}

		// Token: 0x06001010 RID: 4112 RVA: 0x00464F0C File Offset: 0x0046310C
		private static bool HasValidGroundForGlowTulipBelowSpot(int x, int y)
		{
			if (!WorldGen.InWorld(x, y, 2))
			{
				return false;
			}
			Tile tile = Main.tile[x, y + 1];
			if (tile == null || !tile.active())
			{
				return false;
			}
			ushort type = tile.type;
			return type >= 0 && type < TileID.Count && (type == 0 || type == 70 || type == 633 || type == 59 || type == 225 || TileID.Sets.Conversion.Grass[(int)type] || TileID.Sets.Conversion.Stone[(int)type] || Main.tileMoss[(int)type]) && WorldGen.SolidTileAllowBottomSlope(x, y + 1);
		}

		// Token: 0x06001011 RID: 4113 RVA: 0x00464F9C File Offset: 0x0046319C
		private static bool TryGrowingGlowTulip(int i, int j)
		{
			int num = 5;
			for (int k = 0; k < num; k++)
			{
				int num2 = WorldGen.genRand.Next(Math.Max(10, i - 10), Math.Min(Main.maxTilesX - 10, i + 10));
				int num3 = WorldGen.genRand.Next(Math.Max(10, j - 10), Math.Min(Main.maxTilesY - 10, j + 10));
				if (WorldGen.HasValidGroundForGlowTulipBelowSpot(num2, num3) && WorldGen.NoNearbyGlowTulips(num2, num3))
				{
					WorldGen.PlaceTile(num2, num3, 656, true, false, -1, 0);
					Tile tile = Main.tile[num2, num3];
					if (tile.active() && tile.type == 656)
					{
						if (!WorldGen.generatingWorld && Main.netMode == 2 && Main.tile[num2, num3] != null && Main.tile[num2, num3].active())
						{
							NetMessage.SendTileSquare(-1, num2, num3, TileChangeType.None);
						}
						return true;
					}
				}
			}
			return false;
		}

		// Token: 0x06001012 RID: 4114 RVA: 0x00465090 File Offset: 0x00463290
		private static bool NoNearbyGlowTulips(int i, int j)
		{
			int num = Utils.Clamp<int>(i - 120, 10, Main.maxTilesX - 1 - 10);
			int num2 = Utils.Clamp<int>(i + 120, 10, Main.maxTilesX - 1 - 10);
			int num3 = Utils.Clamp<int>(j - 120, 10, Main.maxTilesY - 1 - 10);
			int num4 = Utils.Clamp<int>(j + 120, 10, Main.maxTilesY - 1 - 10);
			for (int k = num; k <= num2; k++)
			{
				for (int l = num3; l <= num4; l++)
				{
					Tile tile = Main.tile[k, l];
					if (tile.active() && tile.type == 656)
					{
						return false;
					}
				}
			}
			return true;
		}

		// Token: 0x06001013 RID: 4115 RVA: 0x00465138 File Offset: 0x00463338
		private static void UpdateWorld_UndergroundTile(int i, int j, bool checkNPCSpawns, int wallDist)
		{
			int num = i - 1;
			int num2 = i + 2;
			int num3 = j - 1;
			int num4 = j + 2;
			if (num < 10)
			{
				num = 10;
			}
			if (num2 > Main.maxTilesX - 10)
			{
				num2 = Main.maxTilesX - 10;
			}
			if (num3 < 10)
			{
				num3 = 10;
			}
			if (num4 > Main.maxTilesY - 10)
			{
				num4 = Main.maxTilesY - 10;
			}
			if (Main.tile[i, j] != null)
			{
				if (Main.tile[i, j].type == 655 && !NPC.AnyNPCs(262))
				{
					WorldGen.KillTile(i, j, false, false, false);
					if (Main.netMode == 2)
					{
						NetMessage.SendData(17, -1, -1, null, 0, (float)i, (float)j, 0f, 0, 0, 0);
					}
				}
				if (Main.tileAlch[(int)Main.tile[i, j].type])
				{
					WorldGen.GrowAlch(i, j);
				}
				else if (Main.tile[i, j].nactive())
				{
					WorldGen.hardUpdateWorld(i, j);
					if (Main.rand.Next(2500) == 0)
					{
						WorldGen.plantDye(i, j, false);
					}
					else if (Main.hardMode && Main.rand.Next(10000) == 0)
					{
						WorldGen.plantDye(i, j, true);
					}
					if (Main.tile[i, j].type == 519)
					{
						WorldGen.CheckCatTail(i, j);
						if (Main.tile[i, j].active() && WorldGen.genRand.Next(2) == 0)
						{
							WorldGen.GrowCatTail(i, j);
							WorldGen.CheckCatTail(i, j);
						}
					}
					if (Main.tile[i, j].type == 549)
					{
						WorldGen.GrowCheckSeaweed(i, j);
					}
					else if (Main.tile[i, j].type == 53 && !Main.tile[i, j].topSlope() && !Main.tile[i, j].halfBrick() && !Main.tile[i, j - 1].active() && WorldGen.genRand.Next(20) == 0)
					{
						WorldGen.GrowCheckSeaweed(i, j);
					}
					else if (TileID.Sets.SpreadUnderground[(int)Main.tile[i, j].type])
					{
						WorldGen.UpdateWorld_GrassGrowth(i, j, num, num2, num3, num4, true);
						int type = (int)Main.tile[i, j].type;
						if ((type == 32 || type == 352) && WorldGen.genRand.Next(3) == 0)
						{
							if (type == 32)
							{
								WorldGen.GrowSpike(i, j, 32, 23);
							}
							else
							{
								WorldGen.GrowSpike(i, j, 352, 199);
							}
						}
					}
					else if (Main.tile[i, j].type == 61 && WorldGen.genRand.Next(3) == 0)
					{
						if (Main.tile[i, j].frameX < 144)
						{
							if (Main.rand.Next(4) == 0)
							{
								Main.tile[i, j].frameX = (short)(162 + WorldGen.genRand.Next(8) * 18);
							}
							Main.tile[i, j].type = 74;
							if (Main.netMode == 2)
							{
								NetMessage.SendTileSquare(-1, i, j, TileChangeType.None);
							}
						}
					}
					else if ((Main.tile[i, j].type == 60 || Main.tile[i, j].type == 62) && WorldGen.genRand.Next(5) == 0 && WorldGen.GrowMoreVines(i, j))
					{
						if (!Main.tile[i, j + 1].active() && !Main.tile[i, j + 1].lava())
						{
							bool flag = false;
							for (int k = j; k > j - 10; k--)
							{
								if (Main.tile[i, k].bottomSlope())
								{
									flag = false;
									break;
								}
								if (Main.tile[i, k].active() && Main.tile[i, k].type == 60 && !Main.tile[i, k].bottomSlope())
								{
									flag = true;
									break;
								}
							}
							if (flag)
							{
								int num5 = j + 1;
								Main.tile[i, num5].type = 62;
								Main.tile[i, num5].active(true);
								WorldGen.SquareTileFrame(i, num5, true);
								Main.tile[i, num5].CopyPaintAndCoating(Main.tile[i, num5 - 1]);
								if (Main.netMode == 2)
								{
									NetMessage.SendTileSquare(-1, i, num5, TileChangeType.None);
								}
							}
						}
					}
					else if ((Main.tile[i, j].type == 633 || Main.tile[i, j].type == 638) && WorldGen.GrowMoreVines(i, j))
					{
						if (!Main.tile[i, j + 1].active() && !Main.tile[i, j + 1].lava())
						{
							int maxValue = 70;
							if (Main.tile[i, j].type == 638)
							{
								maxValue = 7;
							}
							if (WorldGen.genRand.Next(maxValue) == 0)
							{
								bool flag2 = false;
								for (int l = j; l > j - 10; l--)
								{
									if (Main.tile[i, l].bottomSlope())
									{
										flag2 = false;
										break;
									}
									if (Main.tile[i, l].active() && Main.tile[i, l].type == 633 && !Main.tile[i, l].bottomSlope())
									{
										flag2 = true;
										break;
									}
								}
								if (flag2)
								{
									int num6 = j + 1;
									Main.tile[i, num6].type = 638;
									Main.tile[i, num6].active(true);
									Main.tile[i, num6].CopyPaintAndCoating(Main.tile[i, num6 - 1]);
									WorldGen.SquareTileFrame(i, num6, true);
									if (Main.netMode == 2)
									{
										NetMessage.SendTileSquare(-1, i, num6, TileChangeType.None);
									}
								}
							}
						}
					}
					else if ((Main.tile[i, j].type == 70 || Main.tile[i, j].type == 528) && WorldGen.GrowMoreVines(i, j))
					{
						if (!Main.tile[i, j + 1].active() && !Main.tile[i, j + 1].lava())
						{
							int maxValue2 = 70;
							if (Main.tile[i, j].type == 528)
							{
								maxValue2 = 7;
							}
							if (WorldGen.genRand.Next(maxValue2) == 0)
							{
								bool flag3 = false;
								for (int m = j; m > j - 10; m--)
								{
									if (Main.tile[i, m].bottomSlope())
									{
										flag3 = false;
										break;
									}
									if (Main.tile[i, m].active() && Main.tile[i, m].type == 70 && !Main.tile[i, m].bottomSlope())
									{
										flag3 = true;
										break;
									}
								}
								if (flag3)
								{
									int num7 = j + 1;
									Main.tile[i, num7].type = 528;
									Main.tile[i, num7].active(true);
									Main.tile[i, num7].CopyPaintAndCoating(Main.tile[i, num7 - 1]);
									WorldGen.SquareTileFrame(i, num7, true);
									if (Main.netMode == 2)
									{
										NetMessage.SendTileSquare(-1, i, num7, TileChangeType.None);
									}
								}
							}
						}
					}
					else if ((Main.tile[i, j].type == 661 || Main.tile[i, j].type == 636) && WorldGen.GrowMoreVines(i, j))
					{
						if (!Main.tile[i, j + 1].active() && !Main.tile[i, j + 1].lava())
						{
							int maxValue3 = 70;
							if (Main.tile[i, j].type == 636)
							{
								maxValue3 = 7;
							}
							if (WorldGen.genRand.Next(maxValue3) == 0)
							{
								bool flag4 = false;
								for (int n = j; n > j - 10; n--)
								{
									if (Main.tile[i, n].bottomSlope())
									{
										flag4 = false;
										break;
									}
									if (Main.tile[i, n].active() && Main.tile[i, n].type == 661 && !Main.tile[i, n].bottomSlope())
									{
										flag4 = true;
										break;
									}
								}
								if (flag4)
								{
									int num8 = j + 1;
									Main.tile[i, num8].type = 636;
									Main.tile[i, num8].active(true);
									Main.tile[i, num8].CopyPaintAndCoating(Main.tile[i, num8 - 1]);
									WorldGen.SquareTileFrame(i, num8, true);
									if (Main.netMode == 2)
									{
										NetMessage.SendTileSquare(-1, i, num8, TileChangeType.None);
									}
								}
							}
						}
					}
					else if ((Main.tile[i, j].type == 662 || Main.tile[i, j].type == 205) && WorldGen.GrowMoreVines(i, j))
					{
						if (!Main.tile[i, j + 1].active() && !Main.tile[i, j + 1].lava())
						{
							int maxValue4 = 70;
							if (Main.tile[i, j].type == 205)
							{
								maxValue4 = 7;
							}
							if (WorldGen.genRand.Next(maxValue4) == 0)
							{
								bool flag5 = false;
								for (int num9 = j; num9 > j - 10; num9--)
								{
									if (Main.tile[i, num9].bottomSlope())
									{
										flag5 = false;
										break;
									}
									if (Main.tile[i, num9].active() && Main.tile[i, num9].type == 662 && !Main.tile[i, num9].bottomSlope())
									{
										flag5 = true;
										break;
									}
								}
								if (flag5)
								{
									int num10 = j + 1;
									Main.tile[i, num10].type = 205;
									Main.tile[i, num10].active(true);
									Main.tile[i, num10].CopyPaintAndCoating(Main.tile[i, num10 - 1]);
									WorldGen.SquareTileFrame(i, num10, true);
									if (Main.netMode == 2)
									{
										NetMessage.SendTileSquare(-1, i, num10, TileChangeType.None);
									}
								}
							}
						}
					}
					else if ((Main.tile[i, j].type == 60 || Main.tile[i, j].type == 62) && WorldGen.genRand.Next(80) == 0 && !WorldGen.PlayerLOS(i, j))
					{
						bool flag6 = true;
						int num11 = j;
						if (Main.tile[i, j].type == 60)
						{
							num11++;
						}
						for (int num12 = i; num12 < i + 2; num12++)
						{
							int num13 = num11 - 1;
							if (!WorldGen.AnchorValid(Framing.GetTileSafely(num12, num13), AnchorType.SolidTile) || Main.tile[num12, num13].bottomSlope())
							{
								flag6 = false;
							}
							if (Main.tile[num12, num13].liquid > 0 || Main.wallHouse[(int)Main.tile[num12, num13].wall])
							{
								flag6 = false;
							}
							if (!flag6)
							{
								break;
							}
							for (int num14 = num11; num14 < num11 + 2; num14++)
							{
								if ((Main.tile[num12, num14].active() && (!Main.tileCut[(int)Main.tile[num12, num14].type] || Main.tile[num12, num14].type == 444)) || Main.tile[num12, num14].lava())
								{
									flag6 = false;
								}
								if (!flag6)
								{
									break;
								}
							}
							if (!flag6)
							{
								break;
							}
						}
						if (flag6 && WorldGen.CountNearBlocksTypes(i, j, 20, 1, new int[]
						{
							444
						}) > 0)
						{
							flag6 = false;
						}
						if (flag6)
						{
							for (int num15 = i; num15 < i + 2; num15++)
							{
								Main.tile[num15, num11 - 1].slope(0);
								Main.tile[num15, num11 - 1].halfBrick(false);
								for (int num16 = num11; num16 < num11 + 2; num16++)
								{
									if (Main.tile[num15, num16].active())
									{
										WorldGen.KillTile(num15, num16, false, false, false);
									}
								}
							}
							for (int num17 = i; num17 < i + 2; num17++)
							{
								for (int num18 = num11; num18 < num11 + 2; num18++)
								{
									Main.tile[num17, num18].active(true);
									Main.tile[num17, num18].type = 444;
									Main.tile[num17, num18].frameX = (short)((num17 - i) * 18);
									Main.tile[num17, num18].frameY = (short)((num18 - num11) * 18);
								}
							}
							if (Main.netMode == 2)
							{
								NetMessage.SendTileSquare(-1, i, num11 - 1, 2, 3, TileChangeType.None);
							}
						}
					}
					else if (Main.tile[i, j].type == 396 && WorldGen.genRand.Next(80) == 0 && !WorldGen.PlayerLOS(i, j))
					{
						bool flag7 = true;
						int num19 = j - 1;
						for (int num20 = i; num20 < i + 2; num20++)
						{
							int num21 = num19 + 1;
							if (!WorldGen.AnchorValid(Framing.GetTileSafely(num20, num21), AnchorType.SolidTile) || Main.tile[num20, num21].topSlope())
							{
								flag7 = false;
							}
							if (Main.tile[num20, num21].liquid > 0 || Main.wallHouse[(int)Main.tile[num20, num21].wall])
							{
								flag7 = false;
							}
							if (!flag7)
							{
								break;
							}
							for (int num22 = num19 - 2; num22 < num19; num22++)
							{
								if ((Main.tile[num20, num22].active() && (!Main.tileCut[(int)Main.tile[num20, num22].type] || Main.tile[num20, num22].type == 485)) || Main.tile[num20, num22].lava())
								{
									flag7 = false;
								}
								if (!flag7)
								{
									break;
								}
							}
							if (!flag7)
							{
								break;
							}
						}
						if (flag7 && WorldGen.CountNearBlocksTypes(i, j, 20, 1, new int[]
						{
							485
						}) > 0)
						{
							flag7 = false;
						}
						if (flag7)
						{
							bool flag8 = true;
							for (int num23 = -1; num23 >= -3; num23--)
							{
								if (Main.tile[i, j + num23].active())
								{
									flag8 = false;
									break;
								}
							}
							if (flag8)
							{
								WorldGen.PlaceTile(i, j - 1, 485, true, false, -1, WorldGen.genRand.Next(4));
								if (Main.netMode == 2)
								{
									NetMessage.SendTileSquare(-1, i, j - 2, 2, 2, TileChangeType.None);
								}
							}
						}
					}
					else if (Main.tile[i, j].type == 69)
					{
						WorldGen.GrowSpike(i, j, 69, 60);
					}
					else if (Main.tile[i, j].type == 147 || Main.tile[i, j].type == 161 || Main.tile[i, j].type == 163 || Main.tile[i, j].type == 164 || Main.tile[i, j].type == 200)
					{
						if (Main.rand.Next(10) == 0 && !Main.tile[i, j + 1].active() && !Main.tile[i, j + 2].active())
						{
							int num24 = i - 3;
							int num25 = i + 4;
							int num26 = 0;
							for (int num27 = num24; num27 < num25; num27++)
							{
								if (Main.tile[num27, j].type == 165 && Main.tile[num27, j].active())
								{
									num26++;
								}
								if (Main.tile[num27, j + 1].type == 165 && Main.tile[num27, j + 1].active())
								{
									num26++;
								}
								if (Main.tile[num27, j + 2].type == 165 && Main.tile[num27, j + 2].active())
								{
									num26++;
								}
								if (Main.tile[num27, j + 3].type == 165 && Main.tile[num27, j + 3].active())
								{
									num26++;
								}
							}
							if (num26 < 2)
							{
								WorldGen.PlaceTight(i, j + 1, false);
								WorldGen.SquareTileFrame(i, j + 1, true);
								if (Main.netMode == 2 && Main.tile[i, j + 1].active())
								{
									NetMessage.SendTileSquare(-1, i, j + 1, 1, 2, TileChangeType.None);
								}
							}
						}
					}
					else if (Main.tileMoss[(int)Main.tile[i, j].type] || TileID.Sets.tileMossBrick[(int)Main.tile[i, j].type])
					{
						int type2 = (int)Main.tile[i, j].type;
						bool flag9 = false;
						TileColorCache color = Main.tile[i, j].BlockColorAndCoating();
						for (int num28 = num; num28 < num2; num28++)
						{
							for (int num29 = num3; num29 < num4; num29++)
							{
								if ((i != num28 || j != num29) && Main.tile[num28, num29].active() && (Main.tile[num28, num29].type == 1 || Main.tile[num28, num29].type == 38))
								{
									int type3 = (int)Main.tile[num28, num29].type;
									int num30 = WorldGen.MossConversion(type2, type3);
									WorldGen.SpreadGrass(num28, num29, (int)Main.tile[num28, num29].type, num30, false, color);
									if ((int)Main.tile[num28, num29].type == num30)
									{
										WorldGen.SquareTileFrame(num28, num29, true);
										flag9 = true;
									}
								}
							}
						}
						if (Main.netMode == 2 && flag9)
						{
							NetMessage.SendTileSquare(-1, i, j, 3, TileChangeType.None);
						}
						if (WorldGen.genRand.Next(6) == 0)
						{
							int num31 = i;
							int num32 = j;
							int num33 = WorldGen.genRand.Next(4);
							if (num33 == 0)
							{
								num31--;
							}
							else if (num33 == 1)
							{
								num31++;
							}
							else if (num33 == 2)
							{
								num32--;
							}
							else
							{
								num32++;
							}
							if (!Main.tile[num31, num32].active())
							{
								if (WorldGen.PlaceTile(num31, num32, 184, true, false, -1, 0))
								{
									Main.tile[num31, num32].CopyPaintAndCoating(Main.tile[i, j]);
								}
								if (Main.netMode == 2 && Main.tile[num31, num32].active())
								{
									NetMessage.SendTileSquare(-1, num31, num32, TileChangeType.None);
								}
							}
						}
					}
					else if (Main.tile[i, j].type == 20)
					{
						if (WorldGen.genRand.Next(5) == 0)
						{
							WorldGen.AttemptToGrowTreeFromSapling(i, j, true);
						}
					}
					else if (Main.tile[i, j].type == 590)
					{
						if (WorldGen.genRand.Next(5) == 0)
						{
							WorldGen.AttemptToGrowTreeFromSapling(i, j, true);
						}
					}
					else if (Main.tile[i, j].type == 595)
					{
						if (WorldGen.genRand.Next(5) == 0)
						{
							WorldGen.AttemptToGrowTreeFromSapling(i, j, true);
						}
					}
					else if (Main.tile[i, j].type == 615 && WorldGen.genRand.Next(5) == 0)
					{
						WorldGen.AttemptToGrowTreeFromSapling(i, j, true);
					}
				}
				else
				{
					if (Main.tile[i, j].wall == 62 && Main.tile[i, j].liquid == 0)
					{
						WorldGen.GrowWeb(i, j);
					}
					if (checkNPCSpawns)
					{
						WorldGen.TrySpawningTownNPC(i, j);
					}
				}
				if (WorldGen.AllowedToSpreadInfections)
				{
					if (Main.tile[i, j].wall == 81 || Main.tile[i, j].wall == 83 || (Main.tile[i, j].type == 199 && Main.tile[i, j].active()))
					{
						int num34 = i + WorldGen.genRand.Next(-2, 3);
						int num35 = j + WorldGen.genRand.Next(-2, 3);
						if (WorldGen.InWorld(num34, num35, 10) && Main.tile[num34, num35].wall >= 63 && Main.tile[num34, num35].wall <= 68)
						{
							bool flag10 = false;
							for (int num36 = i - wallDist; num36 < i + wallDist; num36++)
							{
								for (int num37 = j - wallDist; num37 < j + wallDist; num37++)
								{
									if (Main.tile[num36, num37].active())
									{
										int type4 = (int)Main.tile[num36, num37].type;
										if (type4 == 199 || type4 == 200 || type4 == 201 || type4 == 203 || type4 == 205 || type4 == 234 || type4 == 352 || type4 == 662)
										{
											flag10 = true;
											break;
										}
									}
								}
							}
							if (flag10)
							{
								Main.tile[num34, num35].wall = 81;
								if (Main.netMode == 2)
								{
									NetMessage.SendTileSquare(-1, num34, num35, TileChangeType.None);
								}
							}
						}
					}
					else if (Main.tile[i, j].wall == 69 || Main.tile[i, j].wall == 3 || (Main.tile[i, j].type == 23 && Main.tile[i, j].active()))
					{
						int num38 = i + WorldGen.genRand.Next(-2, 3);
						int num39 = j + WorldGen.genRand.Next(-2, 3);
						if (WorldGen.InWorld(num38, num39, 10) && Main.tile[num38, num39].wall >= 63 && Main.tile[num38, num39].wall <= 68)
						{
							bool flag11 = false;
							for (int num40 = i - wallDist; num40 < i + wallDist; num40++)
							{
								for (int num41 = j - wallDist; num41 < j + wallDist; num41++)
								{
									if (Main.tile[num40, num41].active())
									{
										int type5 = (int)Main.tile[num40, num41].type;
										if (type5 == 22 || type5 == 23 || type5 == 24 || type5 == 25 || type5 == 32 || type5 == 112 || type5 == 163 || type5 == 636 || type5 == 661)
										{
											flag11 = true;
											break;
										}
									}
								}
							}
							if (flag11)
							{
								Main.tile[num38, num39].wall = 69;
								if (Main.netMode == 2)
								{
									NetMessage.SendTileSquare(-1, num38, num39, TileChangeType.None);
								}
							}
						}
					}
					else if (Main.tile[i, j].wall == 70 || (Main.tile[i, j].type == 109 && Main.tile[i, j].active()))
					{
						int num42 = i + WorldGen.genRand.Next(-2, 3);
						int num43 = j + WorldGen.genRand.Next(-2, 3);
						if ((WorldGen.InWorld(num42, num43, 10) && Main.tile[num42, num43].wall == 63) || Main.tile[num42, num43].wall == 65 || Main.tile[num42, num43].wall == 66 || Main.tile[num42, num43].wall == 68)
						{
							bool flag12 = false;
							for (int num44 = i - wallDist; num44 < i + wallDist; num44++)
							{
								for (int num45 = j - wallDist; num45 < j + wallDist; num45++)
								{
									if (Main.tile[num44, num45].active())
									{
										int type6 = (int)Main.tile[num44, num45].type;
										if (type6 == 109 || type6 == 110 || type6 == 113 || type6 == 115 || type6 == 116 || type6 == 117 || type6 == 164)
										{
											flag12 = true;
											break;
										}
									}
								}
							}
							if (flag12)
							{
								Main.tile[num42, num43].wall = 70;
								if (Main.netMode == 2)
								{
									NetMessage.SendTileSquare(-1, num42, num43, TileChangeType.None);
								}
							}
						}
					}
					WorldGen.SpreadDesertWalls(wallDist, i, j);
				}
				if (Main.tile[i, j].nactive())
				{
					if (Main.tile[i, j].type == 61 && WorldGen.genRand.Next(3) == 0 && Main.tile[i, j].frameX < 144)
					{
						if (Main.rand.Next(4) == 0)
						{
							Main.tile[i, j].frameX = (short)(162 + WorldGen.genRand.Next(8) * 18);
						}
						Main.tile[i, j].type = 74;
						if (Main.netMode == 2)
						{
							NetMessage.SendTileSquare(-1, i, j, TileChangeType.None);
						}
					}
					if ((Main.tile[i, j].type == 60 || Main.tile[i, j].type == 62) && WorldGen.GrowMoreVines(i, j))
					{
						int maxValue5 = 30;
						if (Main.tile[i, j].type == 62)
						{
							maxValue5 = 10;
						}
						if (WorldGen.genRand.Next(maxValue5) == 0 && !Main.tile[i, j + 1].active() && !Main.tile[i, j + 1].lava())
						{
							bool flag13 = false;
							for (int num46 = j; num46 > j - 10; num46--)
							{
								if (Main.tile[i, num46].bottomSlope())
								{
									flag13 = false;
									break;
								}
								if (Main.tile[i, num46].active() && Main.tile[i, num46].type == 60 && !Main.tile[i, num46].bottomSlope())
								{
									flag13 = true;
									break;
								}
							}
							if (flag13)
							{
								int num47 = j + 1;
								Main.tile[i, num47].type = 62;
								Main.tile[i, num47].active(true);
								Main.tile[i, num47].CopyPaintAndCoating(Main.tile[i, num47 - 1]);
								WorldGen.SquareTileFrame(i, num47, true);
								if (Main.netMode == 2)
								{
									NetMessage.SendTileSquare(-1, i, num47, TileChangeType.None);
									return;
								}
							}
						}
					}
					else if ((Main.tile[i, j].type == 633 || Main.tile[i, j].type == 638) && WorldGen.GrowMoreVines(i, j))
					{
						int maxValue6 = 70;
						if (Main.tile[i, j].type == 638)
						{
							maxValue6 = 7;
						}
						if (WorldGen.genRand.Next(maxValue6) == 0 && !Main.tile[i, j + 1].active() && !Main.tile[i, j + 1].lava())
						{
							bool flag14 = false;
							for (int num48 = j; num48 > j - 10; num48--)
							{
								if (Main.tile[i, num48].bottomSlope())
								{
									flag14 = false;
									break;
								}
								if (Main.tile[i, num48].active() && Main.tile[i, num48].type == 633 && !Main.tile[i, num48].bottomSlope())
								{
									flag14 = true;
									break;
								}
							}
							if (flag14)
							{
								int num49 = j + 1;
								Main.tile[i, num49].type = 638;
								Main.tile[i, num49].active(true);
								Main.tile[i, num49].CopyPaintAndCoating(Main.tile[i, num49 - 1]);
								WorldGen.SquareTileFrame(i, num49, true);
								if (Main.netMode == 2)
								{
									NetMessage.SendTileSquare(-1, i, num49, TileChangeType.None);
									return;
								}
							}
						}
					}
					else if ((Main.tile[i, j].type == 70 || Main.tile[i, j].type == 528) && WorldGen.GrowMoreVines(i, j))
					{
						int maxValue7 = 70;
						if (Main.tile[i, j].type == 528)
						{
							maxValue7 = 7;
						}
						if (WorldGen.genRand.Next(maxValue7) == 0 && !Main.tile[i, j + 1].active() && !Main.tile[i, j + 1].lava())
						{
							bool flag15 = false;
							for (int num50 = j; num50 > j - 10; num50--)
							{
								if (Main.tile[i, num50].bottomSlope())
								{
									flag15 = false;
									break;
								}
								if (Main.tile[i, num50].active() && Main.tile[i, num50].type == 70 && !Main.tile[i, num50].bottomSlope())
								{
									flag15 = true;
									break;
								}
							}
							if (flag15)
							{
								int num51 = j + 1;
								Main.tile[i, num51].type = 528;
								Main.tile[i, num51].active(true);
								Main.tile[i, num51].CopyPaintAndCoating(Main.tile[i, num51 - 1]);
								WorldGen.SquareTileFrame(i, num51, true);
								if (Main.netMode == 2)
								{
									NetMessage.SendTileSquare(-1, i, num51, TileChangeType.None);
								}
							}
						}
					}
				}
			}
		}

		// Token: 0x06001014 RID: 4116 RVA: 0x00467024 File Offset: 0x00465224
		private static void GrowWeb(int i, int j)
		{
			if (WorldGen.genRand.Next(10) != 0)
			{
				return;
			}
			int num = WorldGen.genRand.Next(2, 4);
			int num2 = i - num;
			int num3 = i + num;
			int num4 = j - num;
			int num5 = j + num;
			bool flag = false;
			for (int k = num2; k <= num3; k++)
			{
				for (int l = num4; l <= num5; l++)
				{
					if (WorldGen.SolidTile(k, l, false))
					{
						flag = true;
						break;
					}
				}
			}
			if (flag && !Main.tile[i, j].active())
			{
				WorldGen.PlaceTile(i, j, 51, true, false, -1, 0);
				WorldGen.TileFrame(i, j, true, false);
				if (Main.netMode == 2)
				{
					NetMessage.SendTileSquare(-1, i, j, 1, TileChangeType.None);
				}
			}
		}

		// Token: 0x06001015 RID: 4117 RVA: 0x004670D0 File Offset: 0x004652D0
		public static bool GeneratePlanteraBulbOnAllMechsDefeated()
		{
			bool flag = (double)Main.dungeonX > (double)Main.maxTilesX * 0.5;
			int num = (int)(flag ? ((double)Main.maxTilesX * 0.15) : ((double)Main.maxTilesX * 0.65));
			int num2 = (int)(flag ? ((double)Main.maxTilesX * 0.35) : ((double)Main.maxTilesX * 0.85));
			int num3 = (int)Main.worldSurface;
			int underworldLayer = Main.UnderworldLayer;
			int width = num2 - num;
			int height = underworldLayer - num3;
			Rectangle rectangle = new Rectangle(num, num3, width, height);
			int i = 2500;
			while (i > 0)
			{
				bool flag2 = i < 500;
				bool flag3 = i < 200;
				i--;
				Point point = new Point(rectangle.X + WorldGen.genRand.Next(rectangle.Width), rectangle.Y + WorldGen.genRand.Next(rectangle.Height));
				Tile tile = Main.tile[point.X, point.Y];
				int num4 = 500;
				bool flag4 = false;
				while (!flag4)
				{
					num4--;
					if (num4 <= 0)
					{
						flag4 = true;
					}
					point.Y--;
					if (point.Y < rectangle.Y)
					{
						break;
					}
					tile = Main.tile[point.X, point.Y];
					if (tile != null && (flag3 || tile.active()))
					{
						if (tile.type == 60)
						{
							flag4 = true;
						}
						else if (flag2 && tile.type == 59)
						{
							flag4 = true;
						}
					}
				}
				if (tile != null)
				{
					bool flag5 = tile.active() || flag3;
					bool flag6 = tile.type == 60 || (flag2 && tile.type == 59);
					if (flag5 && flag6)
					{
						if (WorldGen.AttemptToGeneratePlanteraBulbAt(point.X, point.Y - 1, flag2))
						{
							return true;
						}
						if (WorldGen.AttemptToGeneratePlanteraBulbAt(point.X - 1, point.Y - 1, flag2))
						{
							return true;
						}
						if (WorldGen.AttemptToGeneratePlanteraBulbAt(point.X + 1, point.Y - 1, flag2))
						{
							return true;
						}
					}
				}
			}
			return false;
		}

		// Token: 0x06001016 RID: 4118 RVA: 0x004672FC File Offset: 0x004654FC
		private static bool AttemptToGeneratePlanteraBulbAt(int i, int j, bool forceBulb)
		{
			if (forceBulb)
			{
				int num = 0;
				for (int k = -2; k < 2; k++)
				{
					for (int l = -2; l < 2; l++)
					{
						int num2 = i + k;
						int num3 = j + l;
						Tile tile = Main.tile[num2, num3];
						if (tile.type == 59 || tile.type == 60)
						{
							num++;
						}
						else if (tile.active())
						{
							num--;
						}
						if (WorldGen.IsAContainer(tile) || tile.type == 226 || tile.type == 237 || tile.type == 10 || tile.type == 11 || tile.type == 26 || tile.type == 16 || tile.type == 15 || tile.type == 14 || tile.type == 104 || TileID.Sets.Paintings[(int)tile.type] || tile.type == 158 || tile.type == 105 || tile.type == 531 || tile.type == 349 || tile.type == 138 || tile.type == 664 || tile.type == 665 || tile.type == 137 || tile.type == 443 || tile.type == 12 || tile.type == 665 || tile.type == 314)
						{
							num = -1;
							break;
						}
					}
					if (num <= -1)
					{
						break;
					}
				}
				if (num < 12)
				{
					return false;
				}
				for (int m = -2; m < 2; m++)
				{
					for (int n = -2; n < 2; n++)
					{
						int num4 = i + m;
						int num5 = j + n;
						bool flag = m == -2 || m == 1 || n == -2 || n == 1;
						Tile tile2 = Main.tile[num4, num5];
						tile2.ClearTile();
						if (flag)
						{
							tile2.type = 60;
							tile2.active(true);
						}
						WorldGen.SquareTileFrame(num4, num5, true);
					}
				}
				WorldGen.PlaceJunglePlant(i, j, 238, 0, 0);
				if (Main.tile[i, j].type == 238)
				{
					WorldGen.SquareTileFrame(i, j, true);
					WorldGen.SquareTileFrame(i + 2, j, true);
					WorldGen.SquareTileFrame(i - 1, j, true);
					if (Main.netMode == 2)
					{
						NetMessage.SendTileSquare(-1, i, j, 8, TileChangeType.None);
					}
					return true;
				}
			}
			else
			{
				WorldGen.PlaceJunglePlant(i, j, 238, 0, 0);
				if (Main.tile[i, j].type == 238)
				{
					WorldGen.SquareTileFrame(i, j, true);
					WorldGen.SquareTileFrame(i + 2, j, true);
					WorldGen.SquareTileFrame(i - 1, j, true);
					if (Main.netMode == 2)
					{
						NetMessage.SendTileSquare(-1, i, j, 5, TileChangeType.None);
					}
					return true;
				}
			}
			return false;
		}

		// Token: 0x06001017 RID: 4119 RVA: 0x004675FC File Offset: 0x004657FC
		private static void UpdateWorld_GrassGrowth(int i, int j, int minI, int maxI, int minJ, int maxJ, bool underground)
		{
			if (!WorldGen.InWorld(i, j, 10))
			{
				return;
			}
			if (underground)
			{
				int type = (int)Main.tile[i, j].type;
				int num = -1;
				int num2 = -1;
				int num3 = -1;
				int maxValue = 1;
				int num4 = type;
				int num5 = -1;
				if (type <= 70)
				{
					if (type != 23)
					{
						if (type != 60)
						{
							if (type == 70)
							{
								num = 59;
								num3 = 71;
								maxValue = 10;
							}
						}
						else
						{
							num = 59;
							num3 = 61;
							maxValue = 10;
						}
					}
					else
					{
						num = 0;
						num2 = 59;
						num4 = 23;
						num5 = 661;
						num3 = 24;
						maxValue = 2;
						if (!WorldGen.AllowedToSpreadInfections)
						{
							return;
						}
					}
				}
				else if (type <= 633)
				{
					if (type != 199)
					{
						if (type == 633)
						{
							num = 57;
							num3 = 637;
							maxValue = 2;
						}
					}
					else
					{
						num = 0;
						num2 = 59;
						num4 = 199;
						num5 = 662;
						num3 = 201;
						maxValue = 2;
						if (!WorldGen.AllowedToSpreadInfections)
						{
							return;
						}
					}
				}
				else if (type != 661)
				{
					if (type == 662)
					{
						num = 59;
						num2 = 0;
						num4 = 662;
						num5 = 199;
						num3 = 201;
						maxValue = 2;
						if (!WorldGen.AllowedToSpreadInfections)
						{
							return;
						}
					}
				}
				else
				{
					num = 59;
					num2 = 0;
					num4 = 661;
					num5 = 23;
					num3 = 24;
					maxValue = 2;
					if (!WorldGen.AllowedToSpreadInfections)
					{
						return;
					}
				}
				bool flag = false;
				if (num3 != -1 && !Main.tile[i, minJ].active() && WorldGen.genRand.Next(maxValue) == 0)
				{
					flag = true;
					if (WorldGen.PlaceTile(i, minJ, num3, true, false, -1, 0))
					{
						Main.tile[i, minJ].CopyPaintAndCoating(Main.tile[i, j]);
					}
					if (Main.netMode == 2 && Main.tile[i, minJ].active())
					{
						NetMessage.SendTileSquare(-1, i, minJ, TileChangeType.None);
					}
				}
				if (num != -1)
				{
					bool flag2 = false;
					TileColorCache color = Main.tile[i, j].BlockColorAndCoating();
					for (int k = minI; k < maxI; k++)
					{
						for (int l = minJ; l < maxJ; l++)
						{
							if (WorldGen.InWorld(k, l, 10) && (i != k || j != l) && Main.tile[k, l].active())
							{
								if ((int)Main.tile[k, l].type == num)
								{
									WorldGen.SpreadGrass(k, l, num, num4, false, color);
									if ((int)Main.tile[k, l].type == num4)
									{
										WorldGen.SquareTileFrame(k, l, true);
										flag2 = true;
									}
								}
								else if (num2 > -1 && num5 > -1 && (int)Main.tile[k, l].type == num2)
								{
									WorldGen.SpreadGrass(k, l, num2, num5, false, color);
									if ((int)Main.tile[k, l].type == num5)
									{
										WorldGen.SquareTileFrame(k, l, true);
										flag2 = true;
									}
								}
							}
						}
					}
					if (Main.netMode == 2 && flag2)
					{
						NetMessage.SendTileSquare(-1, i, j, 3, TileChangeType.None);
					}
				}
				if (type == 60)
				{
					if (!flag && WorldGen.genRand.Next(25) == 0 && Main.tile[i, minJ].liquid == 0)
					{
						if (Main.hardMode && NPC.downedMechBoss1 && NPC.downedMechBoss2 && NPC.downedMechBoss3 && WorldGen.genRand.Next(60) == 0)
						{
							bool flag3 = true;
							int num6 = 150;
							for (int m = i - num6; m < i + num6; m += 2)
							{
								for (int n = j - num6; n < j + num6; n += 2)
								{
									if (m > 1 && m < Main.maxTilesX - 2 && n > 1 && n < Main.maxTilesY - 2 && Main.tile[m, n].active() && Main.tile[m, n].type == 238)
									{
										flag3 = false;
										break;
									}
								}
							}
							if (flag3)
							{
								WorldGen.PlaceJunglePlant(i, minJ, 238, 0, 0);
								WorldGen.SquareTileFrame(i, minJ, true);
								WorldGen.SquareTileFrame(i + 2, minJ, true);
								WorldGen.SquareTileFrame(i - 1, minJ, true);
								if (Main.tile[i, minJ].type == 238 && Main.netMode == 2)
								{
									NetMessage.SendTileSquare(-1, i, minJ, 5, TileChangeType.None);
								}
							}
						}
						int maxValue2 = Main.expertMode ? 30 : 40;
						if (Main.hardMode && NPC.downedMechBossAny && WorldGen.genRand.Next(maxValue2) == 0)
						{
							bool flag4 = true;
							int num7 = 60;
							if (Main.expertMode)
							{
								num7 -= 10;
							}
							for (int num8 = i - num7; num8 < i + num7; num8 += 2)
							{
								for (int num9 = j - num7; num9 < j + num7; num9 += 2)
								{
									if (num8 > 1 && num8 < Main.maxTilesX - 2 && num9 > 1 && num9 < Main.maxTilesY - 2 && Main.tile[num8, num9].active() && Main.tile[num8, num9].type == 236)
									{
										flag4 = false;
										break;
									}
								}
							}
							if (flag4)
							{
								WorldGen.PlaceJunglePlant(i, minJ, 236, WorldGen.genRand.Next(3), 0);
								WorldGen.SquareTileFrame(i, minJ, true);
								WorldGen.SquareTileFrame(i + 1, minJ + 1, true);
								if (Main.tile[i, minJ].type == 236 && Main.netMode == 2)
								{
									NetMessage.SendTileSquare(-1, i, minJ, 4, TileChangeType.None);
									return;
								}
							}
						}
						else
						{
							WorldGen.PlaceJunglePlant(i, minJ, 233, WorldGen.genRand.Next(8), 0);
							if (Main.tile[i, minJ].type == 233)
							{
								if (Main.netMode == 2)
								{
									NetMessage.SendTileSquare(-1, i, minJ, 4, TileChangeType.None);
									return;
								}
								WorldGen.PlaceJunglePlant(i, minJ, 233, WorldGen.genRand.Next(12), 1);
								if (Main.tile[i, minJ].type == 233 && Main.netMode == 2)
								{
									NetMessage.SendTileSquare(-1, i, minJ, 3, TileChangeType.None);
									return;
								}
							}
						}
					}
				}
				else if (type == 70)
				{
					if (Main.tile[i, j - 1].liquid > 0)
					{
						WorldGen.PlaceCatTail(i, j - 1);
					}
					if (WorldGen.genRand.Next(250) == 0 && WorldGen.GrowTree(i, j) && WorldGen.PlayerLOS(i, j))
					{
						WorldGen.TreeGrowFXCheck(i, j - 1);
						return;
					}
				}
			}
			else
			{
				int num10 = (int)Main.tile[i, j].type;
				if (num10 == 2 || num10 == 23 || num10 == 32 || num10 == 109 || num10 == 199 || num10 == 352 || num10 == 477 || num10 == 492 || num10 == 661 || num10 == 662)
				{
					if (Main.halloween && WorldGen.genRand.Next(75) == 0 && (num10 == 2 || num10 == 109))
					{
						int num11 = 100;
						int num12 = 0;
						for (int num13 = i - num11; num13 < i + num11; num13 += 2)
						{
							for (int num14 = j - num11; num14 < j + num11; num14 += 2)
							{
								if (num13 > 1 && num13 < Main.maxTilesX - 2 && num14 > 1 && num14 < Main.maxTilesY - 2 && Main.tile[num13, num14].active() && Main.tile[num13, num14].type == 254)
								{
									num12++;
								}
							}
						}
						if (num12 < 6)
						{
							WorldGen.PlacePumpkin(i, minJ);
							if (Main.netMode == 2 && Main.tile[i, minJ].type == 254)
							{
								NetMessage.SendTileSquare(-1, i - 1, minJ - 1, 2, 2, TileChangeType.None);
							}
						}
					}
					if (!Main.tile[i, minJ].active() && Main.tile[i, minJ].liquid == 0)
					{
						int num15 = -1;
						if (num10 == 2 && WorldGen.genRand.Next(12) == 0)
						{
							num15 = 3;
						}
						else if (num10 == 23 && WorldGen.genRand.Next(10) == 0)
						{
							num15 = 24;
						}
						else if (num10 == 199 && WorldGen.genRand.Next(10) == 0)
						{
							num15 = 201;
						}
						else if (num10 == 661 && WorldGen.genRand.Next(10) == 0)
						{
							num15 = 24;
						}
						else if (num10 == 662 && WorldGen.genRand.Next(10) == 0)
						{
							num15 = 201;
						}
						else if (num10 == 109 && WorldGen.genRand.Next(10) == 0)
						{
							num15 = 110;
						}
						else if (num10 == 633 && WorldGen.genRand.Next(10) == 0)
						{
							num15 = 637;
						}
						if (num15 != -1 && WorldGen.PlaceTile(i, minJ, num15, true, false, -1, 0))
						{
							Main.tile[i, minJ].CopyPaintAndCoating(Main.tile[i, j]);
							if (Main.netMode == 2)
							{
								NetMessage.SendTileSquare(-1, i, minJ, TileChangeType.None);
							}
						}
					}
					bool flag5 = false;
					if (num10 == 32)
					{
						num10 = 23;
						if (!WorldGen.AllowedToSpreadInfections)
						{
							return;
						}
					}
					else if (num10 == 352)
					{
						num10 = 199;
						if (!WorldGen.AllowedToSpreadInfections)
						{
							return;
						}
					}
					else if (num10 == 477)
					{
						num10 = 2;
					}
					else if (num10 == 492)
					{
						num10 = 109;
					}
					int grass = num10;
					int num16 = -1;
					if (num10 == 23 || num10 == 661)
					{
						grass = 23;
						num16 = 661;
					}
					if (num10 == 199 || num10 == 662)
					{
						grass = 199;
						num16 = 662;
					}
					bool flag6 = WorldGen.AllowedToSpreadInfections && (num10 == 23 || num10 == 199 || num10 == 109 || num10 == 492 || num10 == 661 || num10 == 662) && WorldGen.InWorld(i, j, 10);
					for (int num17 = minI; num17 < maxI; num17++)
					{
						for (int num18 = minJ; num18 < maxJ; num18++)
						{
							if (WorldGen.InWorld(num17, num18, 10) && (i != num17 || j != num18) && Main.tile[num17, num18].active())
							{
								int type2 = (int)Main.tile[num17, num18].type;
								if (flag6 || type2 == 0 || (num16 != -1 && type2 == 59))
								{
									TileColorCache color2 = Main.tile[i, j].BlockColorAndCoating();
									if (type2 == 0 || (num16 > -1 && type2 == 59) || ((num10 == 23 || num10 == 661 || num10 == 199 || num10 == 662) && (type2 == 2 || type2 == 109 || type2 == 477 || type2 == 492)))
									{
										WorldGen.SpreadGrass(num17, num18, 0, grass, false, color2);
										if (num16 > -1)
										{
											WorldGen.SpreadGrass(num17, num18, 59, num16, false, color2);
										}
										if (WorldGen.AllowedToSpreadInfections && (num10 == 23 || num10 == 199 || num10 == 661 || num10 == 662))
										{
											WorldGen.SpreadGrass(num17, num18, 2, grass, false, color2);
											WorldGen.SpreadGrass(num17, num18, 109, grass, false, color2);
											WorldGen.SpreadGrass(num17, num18, 477, grass, false, color2);
											WorldGen.SpreadGrass(num17, num18, 492, grass, false, color2);
											if (num16 > -1)
											{
												WorldGen.SpreadGrass(num17, num18, 60, num16, false, color2);
											}
										}
										if ((int)Main.tile[num17, num18].type == num10 || (num16 > -1 && (int)Main.tile[num17, num18].type == num16))
										{
											WorldGen.SquareTileFrame(num17, num18, true);
											flag5 = true;
										}
									}
									if (type2 == 0 || ((num10 == 109 || num10 == 492) && (type2 == 2 || type2 == 477 || type2 == 23 || type2 == 199)))
									{
										WorldGen.SpreadGrass(num17, num18, 0, grass, false, color2);
										if (num10 == 109)
										{
											WorldGen.SpreadGrass(num17, num18, 2, grass, false, color2);
										}
										if (num10 == 492)
										{
											WorldGen.SpreadGrass(num17, num18, 477, grass, false, color2);
										}
										else if (num10 == 109)
										{
											WorldGen.SpreadGrass(num17, num18, 477, 492, false, color2);
										}
										if ((num10 == 492 || num10 == 109) && WorldGen.AllowedToSpreadInfections)
										{
											WorldGen.SpreadGrass(num17, num18, 23, 109, false, color2);
										}
										if ((num10 == 492 || num10 == 109) && WorldGen.AllowedToSpreadInfections)
										{
											WorldGen.SpreadGrass(num17, num18, 199, 109, false, color2);
										}
										if ((int)Main.tile[num17, num18].type == num10)
										{
											WorldGen.SquareTileFrame(num17, num18, true);
											flag5 = true;
										}
									}
								}
							}
						}
					}
					if (Main.netMode == 2 && flag5)
					{
						NetMessage.SendTileSquare(-1, i, j, 3, TileChangeType.None);
						return;
					}
				}
				else if (num10 == 70)
				{
					if (!Main.tile[i, j].inActive())
					{
						if (!Main.tile[i, minJ].active() && WorldGen.genRand.Next(10) == 0)
						{
							WorldGen.PlaceTile(i, minJ, 71, true, false, -1, 0);
							if (Main.tile[i, minJ].active())
							{
								Main.tile[i, minJ].CopyPaintAndCoating(Main.tile[i, j]);
							}
							if (Main.netMode == 2 && Main.tile[i, minJ].active())
							{
								NetMessage.SendTileSquare(-1, i, minJ, TileChangeType.None);
							}
						}
						if (WorldGen.genRand.Next(300) == 0)
						{
							bool flag7 = WorldGen.PlayerLOS(i, j);
							if (WorldGen.GrowTree(i, j) && flag7)
							{
								WorldGen.TreeGrowFXCheck(i, j - 1);
							}
						}
					}
					bool flag8 = false;
					TileColorCache color3 = Main.tile[i, j].BlockColorAndCoating();
					for (int num19 = minI; num19 < maxI; num19++)
					{
						for (int num20 = minJ; num20 < maxJ; num20++)
						{
							if ((i != num19 || j != num20) && Main.tile[num19, num20].active() && Main.tile[num19, num20].type == 59)
							{
								WorldGen.SpreadGrass(num19, num20, 59, num10, false, color3);
								if ((int)Main.tile[num19, num20].type == num10)
								{
									WorldGen.SquareTileFrame(num19, num20, true);
									flag8 = true;
								}
							}
						}
					}
					if (Main.netMode == 2 && flag8)
					{
						NetMessage.SendTileSquare(-1, i, j, 3, TileChangeType.None);
						return;
					}
				}
				else if (num10 == 60)
				{
					if (!Main.tile[i, minJ].active() && WorldGen.genRand.Next(7) == 0)
					{
						WorldGen.PlaceTile(i, minJ, 61, true, false, -1, 0);
						if (Main.tile[i, minJ].active())
						{
							Main.tile[i, minJ].CopyPaintAndCoating(Main.tile[i, j]);
						}
						if (Main.netMode == 2 && Main.tile[i, minJ].active())
						{
							NetMessage.SendTileSquare(-1, i, minJ, TileChangeType.None);
						}
					}
					else if (WorldGen.genRand.Next(500) == 0 && (!Main.tile[i, minJ].active() || Main.tile[i, minJ].type == 61 || Main.tile[i, minJ].type == 74 || Main.tile[i, minJ].type == 69))
					{
						if (WorldGen.GrowTree(i, j) && WorldGen.PlayerLOS(i, j))
						{
							WorldGen.TreeGrowFXCheck(i, j - 1);
						}
					}
					else if (WorldGen.genRand.Next(25) == 0 && Main.tile[i, minJ].liquid == 0)
					{
						WorldGen.PlaceJunglePlant(i, minJ, 233, WorldGen.genRand.Next(8), 0);
						if (Main.tile[i, minJ].type == 233)
						{
							if (Main.netMode == 2)
							{
								NetMessage.SendTileSquare(-1, i, minJ, 4, TileChangeType.None);
							}
							else
							{
								WorldGen.PlaceJunglePlant(i, minJ, 233, WorldGen.genRand.Next(12), 1);
								if (Main.tile[i, minJ].type == 233 && Main.netMode == 2)
								{
									NetMessage.SendTileSquare(-1, i, minJ, 3, TileChangeType.None);
								}
							}
						}
					}
					bool flag9 = false;
					TileColorCache color4 = Main.tile[i, j].BlockColorAndCoating();
					for (int num21 = minI; num21 < maxI; num21++)
					{
						for (int num22 = minJ; num22 < maxJ; num22++)
						{
							if ((i != num21 || j != num22) && Main.tile[num21, num22].active() && Main.tile[num21, num22].type == 59)
							{
								WorldGen.SpreadGrass(num21, num22, 59, num10, false, color4);
								if ((int)Main.tile[num21, num22].type == num10)
								{
									WorldGen.SquareTileFrame(num21, num22, true);
									flag9 = true;
								}
							}
						}
					}
					if (Main.netMode == 2 && flag9)
					{
						NetMessage.SendTileSquare(-1, i, j, 3, TileChangeType.None);
						return;
					}
				}
				else if (num10 == 633)
				{
					if (!Main.tile[i, minJ].active() && WorldGen.genRand.Next(10) == 0)
					{
						WorldGen.PlaceTile(i, minJ, 637, true, false, -1, 0);
						if (Main.tile[i, minJ].active())
						{
							Main.tile[i, minJ].CopyPaintAndCoating(Main.tile[i, j]);
						}
						if (Main.netMode == 2 && Main.tile[i, minJ].active())
						{
							NetMessage.SendTileSquare(-1, i, minJ, TileChangeType.None);
						}
					}
					TileColorCache color5 = Main.tile[i, j].BlockColorAndCoating();
					bool flag10 = false;
					for (int num23 = minI; num23 < maxI; num23++)
					{
						for (int num24 = minJ; num24 < maxJ; num24++)
						{
							if ((i != num23 || j != num24) && Main.tile[num23, num24].active() && Main.tile[num23, num24].type == 57)
							{
								WorldGen.SpreadGrass(num23, num24, 57, num10, false, color5);
								if ((int)Main.tile[num23, num24].type == num10)
								{
									WorldGen.SquareTileFrame(num23, num24, true);
									flag10 = true;
								}
							}
						}
					}
					if (Main.netMode == 2 && flag10)
					{
						NetMessage.SendTileSquare(-1, i, j, 3, TileChangeType.None);
					}
				}
			}
		}

		// Token: 0x06001018 RID: 4120 RVA: 0x00468864 File Offset: 0x00466A64
		private static void TrySpawningTownNPC(int x, int y)
		{
			bool flag = Main.tileSolid[379];
			Main.tileSolid[379] = true;
			if (WorldGen.prioritizedTownNPCType > 0)
			{
				if (Main.tile[x, y].wall == 34)
				{
					if (Main.rand.Next(4) == 0)
					{
						WorldGen.SpawnTownNPC(x, y);
					}
				}
				else
				{
					WorldGen.SpawnTownNPC(x, y);
				}
			}
			Main.tileSolid[379] = flag;
		}

		// Token: 0x06001019 RID: 4121 RVA: 0x004688D4 File Offset: 0x00466AD4
		public static void SpreadDesertWalls(int wallDist, int i, int j)
		{
			if (!WorldGen.InWorld(i, j, 10))
			{
				return;
			}
			if (WallID.Sets.Conversion.Sandstone[(int)Main.tile[i, j].wall] || (Main.tile[i, j].active() && TileID.Sets.Conversion.Sandstone[(int)Main.tile[i, j].type]) || WallID.Sets.Conversion.HardenedSand[(int)Main.tile[i, j].wall])
			{
				int num = 0;
				int wall = (int)Main.tile[i, j].wall;
				int type = (int)Main.tile[i, j].type;
				if (WallID.Sets.Corrupt[wall] || TileID.Sets.Corrupt[type])
				{
					num = 1;
				}
				if (WallID.Sets.Hallow[wall] || TileID.Sets.Hallow[type])
				{
					num = 2;
				}
				if (WallID.Sets.Crimson[wall] || TileID.Sets.Crimson[type])
				{
					num = 3;
				}
				if (num != 0)
				{
					int num2 = i + WorldGen.genRand.Next(-2, 3);
					int num3 = j + WorldGen.genRand.Next(-2, 3);
					bool flag = false;
					if (WallID.Sets.Conversion.PureSand[(int)Main.tile[num2, num3].wall])
					{
						if (num == 3)
						{
							for (int k = i - wallDist; k < i + wallDist; k++)
							{
								for (int l = j - wallDist; l < j + wallDist; l++)
								{
									if (Main.tile[k, l].active() && TileID.Sets.Crimson[(int)Main.tile[k, l].type])
									{
										flag = true;
										break;
									}
								}
								if (flag)
								{
									break;
								}
							}
						}
						else if (num == 2)
						{
							for (int m = i - wallDist; m < i + wallDist; m++)
							{
								for (int n = j - wallDist; n < j + wallDist; n++)
								{
									if (Main.tile[m, n].active() && TileID.Sets.Hallow[(int)Main.tile[m, n].type])
									{
										flag = true;
										break;
									}
								}
								if (flag)
								{
									break;
								}
							}
						}
						else if (num == 1)
						{
							for (int num4 = i - wallDist; num4 < i + wallDist; num4++)
							{
								for (int num5 = j - wallDist; num5 < j + wallDist; num5++)
								{
									if (Main.tile[num4, num5].active() && TileID.Sets.Corrupt[(int)Main.tile[num4, num5].type])
									{
										flag = true;
										break;
									}
								}
								if (flag)
								{
									break;
								}
							}
						}
					}
					if (flag)
					{
						ushort? num6 = null;
						if (WallID.Sets.Conversion.Sandstone[(int)Main.tile[num2, num3].wall])
						{
							switch (num)
							{
							case 1:
								num6 = new ushort?(220);
								break;
							case 2:
								num6 = new ushort?(222);
								break;
							case 3:
								num6 = new ushort?(221);
								break;
							}
						}
						if (WallID.Sets.Conversion.HardenedSand[(int)Main.tile[num2, num3].wall])
						{
							switch (num)
							{
							case 1:
								num6 = new ushort?(217);
								break;
							case 2:
								num6 = new ushort?(219);
								break;
							case 3:
								num6 = new ushort?(218);
								break;
							}
						}
						if (num6 != null && Main.tile[num2, num3].wall != num6.Value)
						{
							Main.tile[num2, num3].wall = num6.Value;
							if (Main.netMode == 2)
							{
								NetMessage.SendTileSquare(-1, num2, num3, TileChangeType.None);
							}
						}
					}
				}
			}
		}

		// Token: 0x0600101A RID: 4122 RVA: 0x00468C40 File Offset: 0x00466E40
		public static void PlaceWall(int i, int j, int type, bool mute = false)
		{
			if (i <= 1 || j <= 1 || i >= Main.maxTilesX - 2 || j >= Main.maxTilesY - 2)
			{
				return;
			}
			if (Main.tile[i, j] == null)
			{
				Main.tile[i, j] = new Tile();
			}
			if (Main.tile[i, j].wall == 0)
			{
				Main.tile[i, j].wall = (ushort)type;
				WorldGen.SquareWallFrame(i, j, true);
				if (!mute)
				{
					SoundEngine.PlaySound(0, i * 16, j * 16, 1, 1f, 0f);
				}
			}
		}

		// Token: 0x0600101B RID: 4123 RVA: 0x00468CD4 File Offset: 0x00466ED4
		public static void SpreadGrass(int i, int j, int dirt = 0, int grass = 2, bool repeat = true, TileColorCache color = default(TileColorCache))
		{
			try
			{
				if (WorldGen.InWorld(i, j, 10))
				{
					if (Main.tile[i, j].active() && (int)Main.tile[i, j].type == dirt)
					{
						if (WorldGen.gen && (grass == 199 || grass == 23))
						{
							int num = WorldGen.beachDistance;
							if (!WorldGen.tenthAnniversaryWorldGen && (double)i > (double)Main.maxTilesX * 0.45 && (double)i <= (double)Main.maxTilesX * 0.55)
							{
								return;
							}
							if (i < num || i >= Main.maxTilesX - num)
							{
								return;
							}
						}
						else if ((WorldGen.gen || (grass != 199 && grass != 23 && grass != 661 && grass != 662)) && ((int)Main.tile[i, j].type != dirt || !Main.tile[i, j].active() || ((double)j >= Main.worldSurface && dirt == 0)) && !WorldGen.growGrassUnderground)
						{
							return;
						}
						int num2 = i - 1;
						int num3 = i + 2;
						int num4 = j - 1;
						int num5 = j + 2;
						if (num2 < 0)
						{
							num2 = 0;
						}
						if (num3 > Main.maxTilesX)
						{
							num3 = Main.maxTilesX;
						}
						if (num4 < 0)
						{
							num4 = 0;
						}
						if (num5 > Main.maxTilesY)
						{
							num5 = Main.maxTilesY;
						}
						bool flag = true;
						for (int k = num2; k < num3; k++)
						{
							for (int l = num4; l < num5; l++)
							{
								if (!Main.tile[k, l].active() || !Main.tileSolid[(int)Main.tile[k, l].type])
								{
									flag = false;
								}
								if (Main.tile[k, l].lava() && Main.tile[k, l].liquid > 0)
								{
									flag = true;
									break;
								}
							}
						}
						if (!flag && TileID.Sets.CanBeClearedDuringGeneration[(int)Main.tile[i, j].type])
						{
							if ((grass != 23 && grass != 661) || Main.tile[i, j - 1].type != 27)
							{
								if ((grass != 199 && grass != 662) || Main.tile[i, j - 1].type != 27)
								{
									if (grass != 109 || Main.tile[i, j - 1].type != 27)
									{
										Main.tile[i, j].type = (ushort)grass;
										Main.tile[i, j].UseBlockColors(color);
										for (int m = num2; m < num3; m++)
										{
											for (int n = num4; n < num5; n++)
											{
												if (Main.tile[m, n].active() && (int)Main.tile[m, n].type == dirt)
												{
													try
													{
														if (repeat && WorldGen.grassSpread < 1000)
														{
															WorldGen.grassSpread++;
															WorldGen.SpreadGrass(m, n, dirt, grass, true, default(TileColorCache));
															WorldGen.grassSpread--;
														}
													}
													catch
													{
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
			catch
			{
			}
		}

		// Token: 0x0600101C RID: 4124 RVA: 0x00469034 File Offset: 0x00467234
		public static void ChasmRunnerSideways(int i, int j, int direction, int steps)
		{
			double num = (double)steps;
			Vector2D vector2D;
			vector2D.X = (double)i;
			vector2D.Y = (double)j;
			Vector2D vector2D2;
			vector2D2.X = (double)WorldGen.genRand.Next(10, 21) * 0.1 * (double)direction;
			vector2D2.Y = (double)WorldGen.genRand.Next(-10, 10) * 0.01;
			double num2 = (double)(WorldGen.genRand.Next(5) + 7);
			while (num2 > 0.0)
			{
				if (num > 0.0)
				{
					num2 += (double)WorldGen.genRand.Next(3);
					num2 -= (double)WorldGen.genRand.Next(3);
					if (num2 < 7.0)
					{
						num2 = 7.0;
					}
					if (num2 > 20.0)
					{
						num2 = 20.0;
					}
					if (num == 1.0 && num2 < 10.0)
					{
						num2 = 10.0;
					}
				}
				else
				{
					num2 -= (double)WorldGen.genRand.Next(4);
				}
				if (vector2D.Y > Main.rockLayer && num > 0.0)
				{
					num = 0.0;
				}
				num -= 1.0;
				int num3 = (int)(vector2D.X - num2 * 0.5);
				int num4 = (int)(vector2D.X + num2 * 0.5);
				int num5 = (int)(vector2D.Y - num2 * 0.5);
				int num6 = (int)(vector2D.Y + num2 * 0.5);
				if (num3 < 0)
				{
					num3 = 0;
				}
				if (num4 > Main.maxTilesX - 1)
				{
					num4 = Main.maxTilesX - 1;
				}
				if (num5 < 0)
				{
					num5 = 0;
				}
				if (num6 > Main.maxTilesY)
				{
					num6 = Main.maxTilesY;
				}
				for (int k = num3; k < num4; k++)
				{
					for (int l = num5; l < num6; l++)
					{
						if (Math.Abs((double)k - vector2D.X) + Math.Abs((double)l - vector2D.Y) < num2 * 0.5 * (1.0 + (double)WorldGen.genRand.Next(-10, 11) * 0.015) && Main.tile[k, l].type != 31 && Main.tile[k, l].type != 22)
						{
							Main.tile[k, l].active(false);
						}
					}
				}
				vector2D += vector2D2;
				vector2D2.Y += (double)WorldGen.genRand.Next(-10, 10) * 0.1;
				if (vector2D.Y < (double)(j - 20))
				{
					vector2D2.Y += (double)WorldGen.genRand.Next(20) * 0.01;
				}
				if (vector2D.Y > (double)(j + 20))
				{
					vector2D2.Y -= (double)WorldGen.genRand.Next(20) * 0.01;
				}
				if (vector2D2.Y < -0.5)
				{
					vector2D2.Y = -0.5;
				}
				if (vector2D2.Y > 0.5)
				{
					vector2D2.Y = 0.5;
				}
				vector2D2.X += (double)WorldGen.genRand.Next(-10, 11) * 0.01;
				if (direction == -1)
				{
					if (vector2D2.X > -0.5)
					{
						vector2D2.X = -0.5;
					}
					if (vector2D2.X < -2.0)
					{
						vector2D2.X = -2.0;
					}
				}
				else if (direction == 1)
				{
					if (vector2D2.X < 0.5)
					{
						vector2D2.X = 0.5;
					}
					if (vector2D2.X > 2.0)
					{
						vector2D2.X = 2.0;
					}
				}
				num3 = (int)(vector2D.X - num2 * 1.1);
				num4 = (int)(vector2D.X + num2 * 1.1);
				num5 = (int)(vector2D.Y - num2 * 1.1);
				num6 = (int)(vector2D.Y + num2 * 1.1);
				if (num3 < 1)
				{
					num3 = 1;
				}
				if (num4 > Main.maxTilesX - 1)
				{
					num4 = Main.maxTilesX - 1;
				}
				if (num5 < 0)
				{
					num5 = 0;
				}
				if (num6 > Main.maxTilesY)
				{
					num6 = Main.maxTilesY;
				}
				for (int m = num3; m < num4; m++)
				{
					for (int n = num5; n < num6; n++)
					{
						if (Math.Abs((double)m - vector2D.X) + Math.Abs((double)n - vector2D.Y) < num2 * 1.1 * (1.0 + (double)WorldGen.genRand.Next(-10, 11) * 0.015) && Main.tile[m, n].wall != 3)
						{
							if (Main.tile[m, n].type != 25 && n > j + WorldGen.genRand.Next(3, 20))
							{
								Main.tile[m, n].active(true);
							}
							Main.tile[m, n].active(true);
							if (Main.tile[m, n].type != 31 && Main.tile[m, n].type != 22)
							{
								Main.tile[m, n].type = 25;
							}
							if (Main.tile[m, n].wall == 2)
							{
								Main.tile[m, n].wall = 0;
							}
						}
					}
				}
				for (int num7 = num3; num7 < num4; num7++)
				{
					for (int num8 = num5; num8 < num6; num8++)
					{
						if (Math.Abs((double)num7 - vector2D.X) + Math.Abs((double)num8 - vector2D.Y) < num2 * 1.1 * (1.0 + (double)WorldGen.genRand.Next(-10, 11) * 0.015) && Main.tile[num7, num8].wall != 3)
						{
							if (Main.tile[num7, num8].type != 31 && Main.tile[num7, num8].type != 22)
							{
								Main.tile[num7, num8].type = 25;
							}
							Main.tile[num7, num8].active(true);
							WorldGen.PlaceWall(num7, num8, 3, true);
						}
					}
				}
			}
			if (WorldGen.genRand.Next(3) == 0)
			{
				int num9 = (int)vector2D.X;
				int num10 = (int)vector2D.Y;
				while (!Main.tile[num9, num10].active())
				{
					num10++;
				}
				WorldGen.TileRunner(num9, num10, (double)WorldGen.genRand.Next(2, 6), WorldGen.genRand.Next(3, 7), 22, false, 0.0, 0.0, false, true, -1);
			}
		}

		// Token: 0x0600101D RID: 4125 RVA: 0x0046979C File Offset: 0x0046799C
		public static void CrimStart(int i, int j)
		{
			int crimDir = 1;
			int num = j;
			if ((double)num > Main.worldSurface)
			{
				num = (int)Main.worldSurface;
			}
			while (!WorldGen.SolidTile(i, num, false))
			{
				num++;
			}
			int num2 = num;
			Vector2D vector2D;
			vector2D..ctor((double)i, (double)num);
			Vector2D vector2D2;
			vector2D2..ctor((double)WorldGen.genRand.Next(-20, 21) * 0.1, (double)WorldGen.genRand.Next(20, 201) * 0.01);
			if (vector2D2.X < 0.0)
			{
				crimDir = -1;
			}
			double num3 = (double)WorldGen.genRand.Next(15, 26);
			bool flag = true;
			int num4 = 0;
			while (flag)
			{
				num3 += (double)WorldGen.genRand.Next(-50, 51) * 0.01;
				if (num3 < 15.0)
				{
					num3 = 15.0;
				}
				if (num3 > 25.0)
				{
					num3 = 25.0;
				}
				int num5 = (int)(vector2D.X - num3 / 2.0);
				while ((double)num5 < vector2D.X + num3 / 2.0)
				{
					int num6 = (int)(vector2D.Y - num3 / 2.0);
					while ((double)num6 < vector2D.Y + num3 / 2.0)
					{
						if (num6 > num2)
						{
							if (Math.Abs((double)num5 - vector2D.X) + Math.Abs((double)num6 - vector2D.Y) < num3 * 0.3)
							{
								Main.tile[num5, num6].active(false);
								Main.tile[num5, num6].wall = 83;
							}
							else if (Math.Abs((double)num5 - vector2D.X) + Math.Abs((double)num6 - vector2D.Y) < num3 * 0.8 && Main.tile[num5, num6].wall != 83)
							{
								Main.tile[num5, num6].active(true);
								Main.tile[num5, num6].type = 203;
								if (Math.Abs((double)num5 - vector2D.X) + Math.Abs((double)num6 - vector2D.Y) < num3 * 0.6)
								{
									Main.tile[num5, num6].wall = 83;
								}
							}
						}
						else if (Math.Abs((double)num5 - vector2D.X) + Math.Abs((double)num6 - vector2D.Y) < num3 * 0.3 && Main.tile[num5, num6].active())
						{
							Main.tile[num5, num6].active(false);
							Main.tile[num5, num6].wall = 83;
						}
						num6++;
					}
					num5++;
				}
				if (vector2D.X > (double)(i + 50))
				{
					num4 = -100;
				}
				if (vector2D.X < (double)(i - 50))
				{
					num4 = 100;
				}
				if (num4 < 0)
				{
					vector2D2.X -= (double)WorldGen.genRand.Next(20, 51) * 0.01;
				}
				else if (num4 > 0)
				{
					vector2D2.X += (double)WorldGen.genRand.Next(20, 51) * 0.01;
				}
				else
				{
					vector2D2.X += (double)WorldGen.genRand.Next(-50, 51) * 0.01;
				}
				vector2D2.Y += (double)WorldGen.genRand.Next(-50, 51) * 0.01;
				if (vector2D2.Y < 0.25)
				{
					vector2D2.Y = 0.25;
				}
				if (vector2D2.Y > 2.0)
				{
					vector2D2.Y = 2.0;
				}
				if (vector2D2.X < -2.0)
				{
					vector2D2.X = -2.0;
				}
				if (vector2D2.X > 2.0)
				{
					vector2D2.X = 2.0;
				}
				vector2D += vector2D2;
				if (vector2D.Y > Main.worldSurface + 100.0)
				{
					flag = false;
				}
			}
			num3 = (double)WorldGen.genRand.Next(40, 55);
			for (int k = 0; k < 50; k++)
			{
				int num7 = (int)vector2D.X + WorldGen.genRand.Next(-20, 21);
				int num8 = (int)vector2D.Y + WorldGen.genRand.Next(-20, 21);
				int num9 = (int)((double)num7 - num3 / 2.0);
				while ((double)num9 < (double)num7 + num3 / 2.0)
				{
					int num10 = (int)((double)num8 - num3 / 2.0);
					while ((double)num10 < (double)num8 + num3 / 2.0)
					{
						double num11 = (double)Math.Abs(num9 - num7);
						double num12 = (double)Math.Abs(num10 - num8);
						double num13 = 1.0 + (double)WorldGen.genRand.Next(-20, 21) * 0.01;
						double num14 = 1.0 + (double)WorldGen.genRand.Next(-20, 21) * 0.01;
						double num15 = num11 * num13;
						num12 *= num14;
						double num16 = Math.Sqrt(num15 * num15 + num12 * num12);
						if (num16 < num3 * 0.25)
						{
							Main.tile[num9, num10].active(false);
							Main.tile[num9, num10].wall = 83;
						}
						else if (num16 < num3 * 0.4 && Main.tile[num9, num10].wall != 83)
						{
							Main.tile[num9, num10].active(true);
							Main.tile[num9, num10].type = 203;
							if (num16 < num3 * 0.35)
							{
								Main.tile[num9, num10].wall = 83;
							}
						}
						num10++;
					}
					num9++;
				}
			}
			int num17 = WorldGen.genRand.Next(5, 9);
			Vector2D[] array = new Vector2D[num17];
			for (int l = 0; l < num17; l++)
			{
				int num18 = (int)vector2D.X;
				int num19 = (int)vector2D.Y;
				int num20 = 0;
				bool flag2 = true;
				Vector2D vector2D3;
				vector2D3..ctor((double)WorldGen.genRand.Next(-20, 21) * 0.15, (double)WorldGen.genRand.Next(0, 21) * 0.15);
				while (flag2)
				{
					vector2D3..ctor((double)WorldGen.genRand.Next(-20, 21) * 0.15, (double)WorldGen.genRand.Next(0, 21) * 0.15);
					while (Math.Abs(vector2D3.X) + Math.Abs(vector2D3.Y) < 1.5)
					{
						vector2D3..ctor((double)WorldGen.genRand.Next(-20, 21) * 0.15, (double)WorldGen.genRand.Next(0, 21) * 0.15);
					}
					flag2 = false;
					for (int m = 0; m < l; m++)
					{
						if (vector2D2.X > array[m].X - 0.75 && vector2D2.X < array[m].X + 0.75 && vector2D2.Y > array[m].Y - 0.75 && vector2D2.Y < array[m].Y + 0.75)
						{
							flag2 = true;
							num20++;
							break;
						}
					}
					if (num20 > 10000)
					{
						break;
					}
				}
				array[l] = vector2D3;
				WorldGen.CrimVein(new Vector2D((double)num18, (double)num19), vector2D3);
			}
			int num21 = Main.maxTilesX;
			int num22 = 0;
			vector2D.X = (double)i;
			vector2D.Y = (double)num2;
			num3 = (double)WorldGen.genRand.Next(25, 35);
			double num23 = (double)WorldGen.genRand.Next(0, 6);
			for (int n = 0; n < 50; n++)
			{
				if (num23 > 0.0)
				{
					double num24 = (double)WorldGen.genRand.Next(10, 30) * 0.01;
					num23 -= num24;
					vector2D.Y -= num24;
				}
				int num25 = (int)vector2D.X + WorldGen.genRand.Next(-2, 3);
				int num26 = (int)vector2D.Y + WorldGen.genRand.Next(-2, 3);
				int num27 = (int)((double)num25 - num3 / 2.0);
				while ((double)num27 < (double)num25 + num3 / 2.0)
				{
					int num28 = (int)((double)num26 - num3 / 2.0);
					while ((double)num28 < (double)num26 + num3 / 2.0)
					{
						double num29 = (double)Math.Abs(num27 - num25);
						double num30 = (double)Math.Abs(num28 - num26);
						double num31 = 1.0 + (double)WorldGen.genRand.Next(-20, 21) * 0.005;
						double num32 = 1.0 + (double)WorldGen.genRand.Next(-20, 21) * 0.005;
						double num33 = num29 * num31;
						num30 *= num32;
						double num34 = Math.Sqrt(num33 * num33 + num30 * num30);
						if (num34 < num3 * 0.2 * ((double)WorldGen.genRand.Next(90, 111) * 0.01))
						{
							Main.tile[num27, num28].active(false);
							Main.tile[num27, num28].wall = 83;
						}
						else if (num34 < num3 * 0.45)
						{
							if (num27 < num21)
							{
								num21 = num27;
							}
							if (num27 > num22)
							{
								num22 = num27;
							}
							if (Main.tile[num27, num28].wall != 83)
							{
								Main.tile[num27, num28].active(true);
								Main.tile[num27, num28].type = 203;
								if (num34 < num3 * 0.35)
								{
									Main.tile[num27, num28].wall = 83;
								}
							}
						}
						num28++;
					}
					num27++;
				}
			}
			for (int num35 = num21; num35 <= num22; num35++)
			{
				int num36 = num2;
				while ((Main.tile[num35, num36].type == 203 && Main.tile[num35, num36].active()) || Main.tile[num35, num36].wall == 83)
				{
					num36++;
				}
				int num37 = WorldGen.genRand.Next(15, 20);
				while (!Main.tile[num35, num36].active() && num37 > 0 && Main.tile[num35, num36].wall != 83)
				{
					num37--;
					Main.tile[num35, num36].type = 203;
					Main.tile[num35, num36].active(true);
					num36++;
				}
			}
			WorldGen.CrimEnt(vector2D, crimDir);
		}

		// Token: 0x0600101E RID: 4126 RVA: 0x0046A380 File Offset: 0x00468580
		public static void CrimPlaceHearts()
		{
			for (int i = 0; i < WorldGen.heartCount; i++)
			{
				int num = WorldGen.genRand.Next(16, 21);
				int x = WorldGen.heartPos[i].X;
				int y = WorldGen.heartPos[i].Y;
				for (int j = x - num / 2; j < x + num / 2; j++)
				{
					for (int k = y - num / 2; k < y + num / 2; k++)
					{
						double num2 = (double)Math.Abs(j - x);
						double num3 = (double)Math.Abs(k - y);
						if (Math.Sqrt(num2 * num2 + num3 * num3) < (double)num * 0.4)
						{
							Main.tile[j, k].active(true);
							Main.tile[j, k].type = 203;
							Main.tile[j, k].wall = 83;
						}
					}
				}
			}
			for (int l = 0; l < WorldGen.heartCount; l++)
			{
				int num = WorldGen.genRand.Next(10, 14);
				int x2 = WorldGen.heartPos[l].X;
				int y2 = WorldGen.heartPos[l].Y;
				for (int m = x2 - num / 2; m < x2 + num / 2; m++)
				{
					for (int n = y2 - num / 2; n < y2 + num / 2; n++)
					{
						double num4 = (double)Math.Abs(m - x2);
						double num5 = (double)Math.Abs(n - y2);
						if (Math.Sqrt(num4 * num4 + num5 * num5) < (double)num * 0.3)
						{
							Main.tile[m, n].active(false);
							Main.tile[m, n].wall = 83;
						}
					}
				}
			}
			for (int num6 = 0; num6 < WorldGen.heartCount; num6++)
			{
				WorldGen.AddShadowOrb(WorldGen.heartPos[num6].X, WorldGen.heartPos[num6].Y);
			}
		}

		// Token: 0x0600101F RID: 4127 RVA: 0x0046A5A0 File Offset: 0x004687A0
		public static void CrimEnt(Vector2D position, int crimDir)
		{
			double num = 0.0;
			double num2 = (double)WorldGen.genRand.Next(6, 11);
			bool flag = true;
			Vector2D vector2D;
			vector2D..ctor(2.0, (double)WorldGen.genRand.Next(-20, 0) * 0.01);
			vector2D.X *= (double)(-(double)crimDir);
			while (flag)
			{
				num += 1.0;
				if (num >= 20.0)
				{
					flag = false;
				}
				num2 += (double)WorldGen.genRand.Next(-10, 11) * 0.02;
				if (num2 < 6.0)
				{
					num2 = 6.0;
				}
				if (num2 > 10.0)
				{
					num2 = 10.0;
				}
				int num3 = (int)(position.X - num2 / 2.0);
				while ((double)num3 < position.X + num2 / 2.0)
				{
					int num4 = (int)(position.Y - num2 / 2.0);
					while ((double)num4 < position.Y + num2 / 2.0)
					{
						double num5 = Math.Abs((double)num3 - position.X);
						double num6 = Math.Abs((double)num4 - position.Y);
						if (Math.Sqrt(num5 * num5 + num6 * num6) < num2 * 0.5 && Main.tile[num3, num4].active() && Main.tile[num3, num4].type == 203)
						{
							Main.tile[num3, num4].active(false);
							flag = true;
							num = 0.0;
						}
						num4++;
					}
					num3++;
				}
				position += vector2D;
			}
		}

		// Token: 0x06001020 RID: 4128 RVA: 0x0046A774 File Offset: 0x00468974
		public static void CrimVein(Vector2D position, Vector2D velocity)
		{
			double num = (double)WorldGen.genRand.Next(15, 26);
			bool flag = true;
			Vector2D vector2D = velocity;
			Vector2D vector2D2 = position;
			int num2 = WorldGen.genRand.Next(100, 150);
			if (velocity.Y < 0.0)
			{
				num2 -= 25;
			}
			while (flag)
			{
				num += (double)WorldGen.genRand.Next(-50, 51) * 0.02;
				if (num < 15.0)
				{
					num = 15.0;
				}
				if (num > 25.0)
				{
					num = 25.0;
				}
				int num3 = (int)(position.X - num / 2.0);
				while ((double)num3 < position.X + num / 2.0)
				{
					int num4 = (int)(position.Y - num / 2.0);
					while ((double)num4 < position.Y + num / 2.0)
					{
						double num5 = Math.Abs((double)num3 - position.X);
						double num6 = Math.Abs((double)num4 - position.Y);
						double num7 = Math.Sqrt(num5 * num5 + num6 * num6);
						if (num7 < num * 0.2)
						{
							Main.tile[num3, num4].active(false);
							Main.tile[num3, num4].wall = 83;
						}
						else if (num7 < num * 0.5 && Main.tile[num3, num4].wall != 83)
						{
							Main.tile[num3, num4].active(true);
							Main.tile[num3, num4].type = 203;
							if (num7 < num * 0.4)
							{
								Main.tile[num3, num4].wall = 83;
							}
						}
						num4++;
					}
					num3++;
				}
				velocity.X += (double)WorldGen.genRand.Next(-50, 51) * 0.05;
				velocity.Y += (double)WorldGen.genRand.Next(-50, 51) * 0.05;
				if (velocity.Y < vector2D.Y - 0.75)
				{
					velocity.Y = vector2D.Y - 0.75;
				}
				if (velocity.Y > vector2D.Y + 0.75)
				{
					velocity.Y = vector2D.Y + 0.75;
				}
				if (velocity.X < vector2D.X - 0.75)
				{
					velocity.X = vector2D.X - 0.75;
				}
				if (velocity.X > vector2D.X + 0.75)
				{
					velocity.X = vector2D.X + 0.75;
				}
				position += velocity;
				if (Math.Abs(position.X - vector2D2.X) + Math.Abs(position.Y - vector2D2.Y) > (double)num2)
				{
					flag = false;
				}
			}
			WorldGen.heartPos[WorldGen.heartCount] = position.ToPoint();
			WorldGen.heartCount++;
		}

		// Token: 0x06001021 RID: 4129 RVA: 0x0046AAC8 File Offset: 0x00468CC8
		public static void ChasmRunner(int i, int j, int steps, bool makeOrb = false)
		{
			bool flag = false;
			bool flag2 = false;
			bool flag3 = false;
			if (!makeOrb)
			{
				flag2 = true;
			}
			double num = (double)steps;
			Vector2D vector2D;
			vector2D.X = (double)i;
			vector2D.Y = (double)j;
			Vector2D vector2D2;
			vector2D2.X = (double)WorldGen.genRand.Next(-10, 11) * 0.1;
			vector2D2.Y = (double)WorldGen.genRand.Next(11) * 0.2 + 0.5;
			int num2 = 5;
			double num3 = (double)(WorldGen.genRand.Next(5) + 7);
			while (num3 > 0.0)
			{
				if (num > 0.0)
				{
					num3 += (double)WorldGen.genRand.Next(3);
					num3 -= (double)WorldGen.genRand.Next(3);
					if (num3 < 7.0)
					{
						num3 = 7.0;
					}
					if (num3 > 20.0)
					{
						num3 = 20.0;
					}
					if (num == 1.0 && num3 < 10.0)
					{
						num3 = 10.0;
					}
				}
				else if (vector2D.Y > Main.worldSurface + 45.0)
				{
					num3 -= (double)WorldGen.genRand.Next(4);
				}
				if (vector2D.Y > Main.rockLayer && num > 0.0)
				{
					num = 0.0;
				}
				num -= 1.0;
				if (!flag && vector2D.Y > Main.worldSurface + 20.0)
				{
					flag = true;
					WorldGen.ChasmRunnerSideways((int)vector2D.X, (int)vector2D.Y, -1, WorldGen.genRand.Next(20, 40));
					WorldGen.ChasmRunnerSideways((int)vector2D.X, (int)vector2D.Y, 1, WorldGen.genRand.Next(20, 40));
				}
				int num4;
				int num5;
				int num6;
				int num7;
				if (num > (double)num2)
				{
					num4 = (int)(vector2D.X - num3 * 0.5);
					num5 = (int)(vector2D.X + num3 * 0.5);
					num6 = (int)(vector2D.Y - num3 * 0.5);
					num7 = (int)(vector2D.Y + num3 * 0.5);
					if (num4 < 0)
					{
						num4 = 0;
					}
					if (num5 > Main.maxTilesX - 1)
					{
						num5 = Main.maxTilesX - 1;
					}
					if (num6 < 0)
					{
						num6 = 0;
					}
					if (num7 > Main.maxTilesY)
					{
						num7 = Main.maxTilesY;
					}
					for (int k = num4; k < num5; k++)
					{
						for (int l = num6; l < num7; l++)
						{
							if (Math.Abs((double)k - vector2D.X) + Math.Abs((double)l - vector2D.Y) < num3 * 0.5 * (1.0 + (double)WorldGen.genRand.Next(-10, 11) * 0.015) && Main.tile[k, l].type != 31 && Main.tile[k, l].type != 22)
							{
								Main.tile[k, l].active(false);
							}
						}
					}
				}
				if (num <= 2.0 && vector2D.Y < Main.worldSurface + 45.0)
				{
					num = 2.0;
				}
				if (num <= 0.0)
				{
					if (!flag2)
					{
						flag2 = true;
						WorldGen.AddShadowOrb((int)vector2D.X, (int)vector2D.Y);
					}
					else if (!flag3)
					{
						flag3 = false;
						bool flag4 = false;
						int num8 = 0;
						while (!flag4)
						{
							int num9 = WorldGen.genRand.Next((int)vector2D.X - 25, (int)vector2D.X + 25);
							int num10 = WorldGen.genRand.Next((int)vector2D.Y - 50, (int)vector2D.Y);
							if (num9 < 5)
							{
								num9 = 5;
							}
							if (num9 > Main.maxTilesX - 5)
							{
								num9 = Main.maxTilesX - 5;
							}
							if (num10 < 5)
							{
								num10 = 5;
							}
							if (num10 > Main.maxTilesY - 5)
							{
								num10 = Main.maxTilesY - 5;
							}
							if ((double)num10 > Main.worldSurface)
							{
								if (!WorldGen.IsTileNearby(num9, num10, 26, 3))
								{
									WorldGen.Place3x2(num9, num10, 26, 0);
								}
								if (Main.tile[num9, num10].type == 26)
								{
									flag4 = true;
								}
								else
								{
									num8++;
									if (num8 >= 10000)
									{
										flag4 = true;
									}
								}
							}
							else
							{
								flag4 = true;
							}
						}
					}
				}
				vector2D += vector2D2;
				vector2D2.X += (double)WorldGen.genRand.Next(-10, 11) * 0.01;
				if (vector2D2.X > 0.3)
				{
					vector2D2.X = 0.3;
				}
				if (vector2D2.X < -0.3)
				{
					vector2D2.X = -0.3;
				}
				num4 = (int)(vector2D.X - num3 * 1.1);
				num5 = (int)(vector2D.X + num3 * 1.1);
				num6 = (int)(vector2D.Y - num3 * 1.1);
				num7 = (int)(vector2D.Y + num3 * 1.1);
				if (num4 < 1)
				{
					num4 = 1;
				}
				if (num5 > Main.maxTilesX - 1)
				{
					num5 = Main.maxTilesX - 1;
				}
				if (num6 < 0)
				{
					num6 = 0;
				}
				if (num7 > Main.maxTilesY)
				{
					num7 = Main.maxTilesY;
				}
				for (int m = num4; m < num5; m++)
				{
					for (int n = num6; n < num7; n++)
					{
						if (Math.Abs((double)m - vector2D.X) + Math.Abs((double)n - vector2D.Y) < num3 * 1.1 * (1.0 + (double)WorldGen.genRand.Next(-10, 11) * 0.015))
						{
							if (Main.tile[m, n].type != 25 && n > j + WorldGen.genRand.Next(3, 20))
							{
								Main.tile[m, n].active(true);
							}
							if (steps <= num2)
							{
								Main.tile[m, n].active(true);
							}
							if (Main.tile[m, n].type != 31)
							{
								Main.tile[m, n].type = 25;
							}
						}
					}
				}
				for (int num11 = num4; num11 < num5; num11++)
				{
					for (int num12 = num6; num12 < num7; num12++)
					{
						if (Math.Abs((double)num11 - vector2D.X) + Math.Abs((double)num12 - vector2D.Y) < num3 * 1.1 * (1.0 + (double)WorldGen.genRand.Next(-10, 11) * 0.015))
						{
							if (Main.tile[num11, num12].type != 31)
							{
								Main.tile[num11, num12].type = 25;
							}
							if (steps <= num2)
							{
								Main.tile[num11, num12].active(true);
							}
							if (num12 > j + WorldGen.genRand.Next(3, 20))
							{
								Main.tile[num11, num12].wall = 3;
							}
						}
					}
				}
			}
		}

		// Token: 0x06001022 RID: 4130 RVA: 0x0046B234 File Offset: 0x00469434
		public static void SpawnPlanteraThorns(Vector2 position)
		{
			if (Main.netMode == 1)
			{
				return;
			}
			int num = Main.rand.Next(3, 6);
			for (int i = 0; i < num; i++)
			{
				int j = Main.rand.Next(15, 31);
				int num2 = (int)(position.X / 16f);
				int num3 = (int)(position.Y / 16f);
				int num4 = 0;
				int num5 = 0;
				if (Main.rand.Next(2) == 0)
				{
					if (Main.rand.Next(2) == 0)
					{
						num4 = 1;
					}
					else
					{
						num4 = -1;
					}
				}
				else if (Main.rand.Next(2) == 0)
				{
					num5 = 1;
				}
				else
				{
					num5 = -1;
				}
				while (j > 0)
				{
					j--;
					if (!Main.tile[num2, num3].active())
					{
						WorldGen.PlaceTile(num2, num3, 655, false, false, -1, 0);
						if (Main.tile[num2, num3].active() && Main.netMode == 2)
						{
							NetMessage.SendTileSquare(-1, num2, num3, TileChangeType.None);
						}
					}
					num2 += num4;
					num3 += num5;
					if (!WorldGen.InWorld(num2, num3, 0))
					{
						return;
					}
					if (Main.rand.Next(5) == 0)
					{
						if (num5 == 0)
						{
							num4 = 0;
							if (Main.rand.Next(2) == 0)
							{
								num5 = 1;
							}
							else
							{
								num5 = -1;
							}
						}
						else
						{
							num5 = 0;
							if (Main.rand.Next(2) == 0)
							{
								num4 = 1;
							}
							else
							{
								num4 = -1;
							}
						}
					}
				}
			}
		}

		// Token: 0x06001023 RID: 4131 RVA: 0x0046B394 File Offset: 0x00469594
		public static void GERunner(int i, int j, double speedX = 0.0, double speedY = 0.0, bool good = true)
		{
			int num = 0;
			for (int k = 20; k < Main.maxTilesX - 20; k++)
			{
				for (int l = 20; l < Main.maxTilesY - 20; l++)
				{
					if (Main.tile[k, l].active() && Main.tile[k, l].type == 225)
					{
						num++;
					}
				}
			}
			bool flag = false;
			if (num > 200000)
			{
				flag = true;
			}
			int num2 = WorldGen.genRand.Next(200, 250);
			double num3 = (double)Main.maxTilesX / 4200.0;
			num2 = (int)((double)num2 * num3);
			double num4 = (double)num2;
			Vector2D vector2D;
			vector2D.X = (double)i;
			vector2D.Y = (double)j;
			Vector2D vector2D2;
			vector2D2.X = (double)WorldGen.genRand.Next(-10, 11) * 0.1;
			vector2D2.Y = (double)WorldGen.genRand.Next(-10, 11) * 0.1;
			if (speedX != 0.0 || speedY != 0.0)
			{
				vector2D2.X = speedX;
				vector2D2.Y = speedY;
			}
			bool flag2 = true;
			while (flag2)
			{
				int num5 = (int)(vector2D.X - num4 * 0.5);
				int num6 = (int)(vector2D.X + num4 * 0.5);
				int num7 = (int)(vector2D.Y - num4 * 0.5);
				int num8 = (int)(vector2D.Y + num4 * 0.5);
				if (num5 < 0)
				{
					num5 = 0;
				}
				if (num6 > Main.maxTilesX)
				{
					num6 = Main.maxTilesX;
				}
				if (num7 < 0)
				{
					num7 = 0;
				}
				if (num8 > Main.maxTilesY - 5)
				{
					num8 = Main.maxTilesY - 5;
				}
				for (int m = num5; m < num6; m++)
				{
					for (int n = num7; n < num8; n++)
					{
						if (Math.Abs((double)m - vector2D.X) + Math.Abs((double)n - vector2D.Y) < (double)num2 * 0.5 * (1.0 + (double)WorldGen.genRand.Next(-10, 11) * 0.015))
						{
							if (good)
							{
								if (Main.tile[m, n].wall == 63 || Main.tile[m, n].wall == 65 || Main.tile[m, n].wall == 66 || Main.tile[m, n].wall == 68 || Main.tile[m, n].wall == 69 || Main.tile[m, n].wall == 81)
								{
									Main.tile[m, n].wall = 70;
								}
								else if (Main.tile[m, n].wall == 216)
								{
									Main.tile[m, n].wall = 219;
								}
								else if (Main.tile[m, n].wall == 187)
								{
									Main.tile[m, n].wall = 222;
								}
								else if (Main.tile[m, n].wall == 3 || Main.tile[m, n].wall == 83)
								{
									Main.tile[m, n].wall = 28;
								}
								if (flag && Main.tile[m, n].type == 225)
								{
									Main.tile[m, n].type = 117;
									WorldGen.SquareTileFrame(m, n, true);
								}
								else if (flag && Main.tile[m, n].type == 230)
								{
									Main.tile[m, n].type = 402;
									WorldGen.SquareTileFrame(m, n, true);
								}
								else if (Main.tile[m, n].type == 2)
								{
									Main.tile[m, n].type = 109;
									WorldGen.SquareTileFrame(m, n, true);
								}
								else if (Main.tile[m, n].type == 1 || Main.tile[m, n].type == 25 || Main.tile[m, n].type == 203)
								{
									Main.tile[m, n].type = 117;
									WorldGen.SquareTileFrame(m, n, true);
								}
								else if (Main.tile[m, n].type == 53 || Main.tile[m, n].type == 123 || Main.tile[m, n].type == 112 || Main.tile[m, n].type == 234)
								{
									Main.tile[m, n].type = 116;
									WorldGen.SquareTileFrame(m, n, true);
								}
								else if (Main.tile[m, n].type == 661 || Main.tile[m, n].type == 662)
								{
									Main.tile[m, n].type = 60;
									WorldGen.SquareTileFrame(m, n, true);
								}
								else if (Main.tile[m, n].type == 23 || Main.tile[m, n].type == 199)
								{
									Main.tile[m, n].type = 109;
									WorldGen.SquareTileFrame(m, n, true);
								}
								else if (Main.tile[m, n].type == 161 || Main.tile[m, n].type == 163 || Main.tile[m, n].type == 200)
								{
									Main.tile[m, n].type = 164;
									WorldGen.SquareTileFrame(m, n, true);
								}
								else if (Main.tile[m, n].type == 396)
								{
									Main.tile[m, n].type = 403;
									WorldGen.SquareTileFrame(m, n, true);
								}
								else if (Main.tile[m, n].type == 397)
								{
									Main.tile[m, n].type = 402;
									WorldGen.SquareTileFrame(m, n, true);
								}
							}
							else if (WorldGen.crimson)
							{
								if (Main.tile[m, n].wall == 63 || Main.tile[m, n].wall == 65 || Main.tile[m, n].wall == 66 || Main.tile[m, n].wall == 68)
								{
									Main.tile[m, n].wall = 81;
								}
								else if (Main.tile[m, n].wall == 216)
								{
									Main.tile[m, n].wall = 218;
								}
								else if (Main.tile[m, n].wall == 187)
								{
									Main.tile[m, n].wall = 221;
								}
								if (flag && Main.tile[m, n].type == 225)
								{
									Main.tile[m, n].type = 203;
									WorldGen.SquareTileFrame(m, n, true);
								}
								else if (flag && Main.tile[m, n].type == 230)
								{
									Main.tile[m, n].type = 399;
									WorldGen.SquareTileFrame(m, n, true);
								}
								else if (Main.tile[m, n].type == 60 || Main.tile[m, n].type == 661)
								{
									Main.tile[m, n].type = 662;
									WorldGen.SquareTileFrame(m, n, true);
								}
								else if (Main.tile[m, n].type == 2 || Main.tile[m, n].type == 109)
								{
									Main.tile[m, n].type = 199;
									WorldGen.SquareTileFrame(m, n, true);
								}
								else if (Main.tile[m, n].type == 1 || Main.tile[m, n].type == 117)
								{
									Main.tile[m, n].type = 203;
									WorldGen.SquareTileFrame(m, n, true);
								}
								else if (Main.tile[m, n].type == 53 || Main.tile[m, n].type == 123 || Main.tile[m, n].type == 116)
								{
									Main.tile[m, n].type = 234;
									WorldGen.SquareTileFrame(m, n, true);
								}
								else if (Main.tile[m, n].type == 161 || Main.tile[m, n].type == 164)
								{
									Main.tile[m, n].type = 200;
									WorldGen.SquareTileFrame(m, n, true);
								}
								else if (Main.tile[m, n].type == 396)
								{
									Main.tile[m, n].type = 401;
									WorldGen.SquareTileFrame(m, n, true);
								}
								else if (Main.tile[m, n].type == 397)
								{
									Main.tile[m, n].type = 399;
									WorldGen.SquareTileFrame(m, n, true);
								}
							}
							else
							{
								if (Main.tile[m, n].wall == 63 || Main.tile[m, n].wall == 65 || Main.tile[m, n].wall == 66 || Main.tile[m, n].wall == 68)
								{
									Main.tile[m, n].wall = 69;
								}
								else if (Main.tile[m, n].wall == 216)
								{
									Main.tile[m, n].wall = 217;
								}
								else if (Main.tile[m, n].wall == 187)
								{
									Main.tile[m, n].wall = 220;
								}
								if (flag && Main.tile[m, n].type == 225)
								{
									Main.tile[m, n].type = 25;
									WorldGen.SquareTileFrame(m, n, true);
								}
								else if (flag && Main.tile[m, n].type == 230)
								{
									Main.tile[m, n].type = 398;
									WorldGen.SquareTileFrame(m, n, true);
								}
								else if (Main.tile[m, n].type == 60 || Main.tile[m, n].type == 662)
								{
									Main.tile[m, n].type = 661;
									WorldGen.SquareTileFrame(m, n, true);
								}
								else if (Main.tile[m, n].type == 2 || Main.tile[m, n].type == 109)
								{
									Main.tile[m, n].type = 23;
									WorldGen.SquareTileFrame(m, n, true);
								}
								else if (Main.tile[m, n].type == 1 || Main.tile[m, n].type == 117)
								{
									Main.tile[m, n].type = 25;
									WorldGen.SquareTileFrame(m, n, true);
								}
								else if (Main.tile[m, n].type == 53 || Main.tile[m, n].type == 123 || Main.tile[m, n].type == 116)
								{
									Main.tile[m, n].type = 112;
									WorldGen.SquareTileFrame(m, n, true);
								}
								else if (Main.tile[m, n].type == 161 || Main.tile[m, n].type == 164)
								{
									Main.tile[m, n].type = 163;
									WorldGen.SquareTileFrame(m, n, true);
								}
								else if (Main.tile[m, n].type == 396)
								{
									Main.tile[m, n].type = 400;
									WorldGen.SquareTileFrame(m, n, true);
								}
								else if (Main.tile[m, n].type == 397)
								{
									Main.tile[m, n].type = 398;
									WorldGen.SquareTileFrame(m, n, true);
								}
							}
						}
					}
				}
				vector2D += vector2D2;
				vector2D2.X += (double)WorldGen.genRand.Next(-10, 11) * 0.05;
				if (vector2D2.X > speedX + 1.0)
				{
					vector2D2.X = speedX + 1.0;
				}
				if (vector2D2.X < speedX - 1.0)
				{
					vector2D2.X = speedX - 1.0;
				}
				if (vector2D.X < (double)(-(double)num2) || vector2D.Y < (double)(-(double)num2) || vector2D.X > (double)(Main.maxTilesX + num2) || vector2D.Y > (double)(Main.maxTilesY + num2))
				{
					flag2 = false;
				}
			}
		}

		// Token: 0x06001024 RID: 4132 RVA: 0x0046C288 File Offset: 0x0046A488
		private static bool badOceanCaveTiles(int x, int y)
		{
			return Main.tile[x, y].wall == 83 || Main.tile[x, y].wall == 3 || Main.wallDungeon[(int)Main.tile[x, y].wall] || Main.tile[x, y].type == 203 || Main.tile[x, y].type == 25 || Main.tileDungeon[(int)Main.tile[x, y].type] || Main.tile[x, y].type == 26 || Main.tile[x, y].type == 31;
		}

		// Token: 0x06001025 RID: 4133 RVA: 0x0046C350 File Offset: 0x0046A550
		public static void oceanCave(int i, int j)
		{
			if (GenVars.numOceanCaveTreasure >= GenVars.maxOceanCaveTreasure)
			{
				GenVars.numOceanCaveTreasure = 0;
			}
			Vector2D vector2D;
			vector2D.X = (double)i;
			vector2D.Y = (double)j;
			Vector2D vector2D2;
			if (i < Main.maxTilesX / 2)
			{
				vector2D2.X = 0.25 + WorldGen.genRand.NextDouble() * 0.25;
			}
			else
			{
				vector2D2.X = -0.35 - WorldGen.genRand.NextDouble() * 0.5;
			}
			vector2D2.Y = 0.4 + WorldGen.genRand.NextDouble() * 0.25;
			ushort num = 264;
			ushort num2 = 53;
			ushort num3 = 397;
			double num4 = (double)WorldGen.genRand.Next(17, 25);
			double num5 = (double)WorldGen.genRand.Next(600, 800);
			double num6 = 4.0;
			bool flag = true;
			while (num4 > num6 && num5 > 0.0)
			{
				bool flag2 = true;
				bool flag3 = true;
				bool flag4 = true;
				if (vector2D.X > (double)(WorldGen.beachDistance - 50) && vector2D.X < (double)(Main.maxTilesX - WorldGen.beachDistance + 50))
				{
					num4 *= 0.96;
					num5 *= 0.96;
				}
				if (num4 < num6 + 2.0 || num5 < 20.0)
				{
					flag4 = false;
				}
				if (flag)
				{
					num4 -= 0.01 + WorldGen.genRand.NextDouble() * 0.01;
					num5 -= 0.5;
				}
				else
				{
					num4 -= 0.02 + WorldGen.genRand.NextDouble() * 0.02;
					num5 -= 1.0;
				}
				if (flag4)
				{
					GenVars.oceanCaveTreasure[GenVars.numOceanCaveTreasure].X = (int)vector2D.X;
					GenVars.oceanCaveTreasure[GenVars.numOceanCaveTreasure].Y = (int)vector2D.Y;
				}
				int num7 = (int)(vector2D.X - num4 * 3.0);
				int num8 = (int)(vector2D.X + num4 * 3.0);
				int num9 = (int)(vector2D.Y - num4 * 3.0);
				int num10 = (int)(vector2D.Y + num4 * 3.0);
				if (num7 < 1)
				{
					num7 = 1;
				}
				if (num8 > Main.maxTilesX - 1)
				{
					num8 = Main.maxTilesX - 1;
				}
				if (num9 < 1)
				{
					num9 = 1;
				}
				if (num10 > Main.maxTilesY - 1)
				{
					num10 = Main.maxTilesY - 1;
				}
				for (int k = num7; k < num8; k++)
				{
					for (int l = num9; l < num10; l++)
					{
						if (!WorldGen.badOceanCaveTiles(k, l))
						{
							double num11 = new Vector2D(Math.Abs((double)k - vector2D.X), Math.Abs((double)l - vector2D.Y)).Length();
							if (flag4 && num11 < num4 * 0.5 + 1.0)
							{
								Main.tile[k, l].type = num;
								Main.tile[k, l].active(false);
							}
							else if (num11 < num4 * 1.5 + 1.0 && Main.tile[k, l].type != num)
							{
								if ((double)l < vector2D.Y)
								{
									if ((vector2D2.X < 0.0 && (double)k < vector2D.X) || (vector2D2.X > 0.0 && (double)k > vector2D.X))
									{
										if (num11 < num4 * 1.1 + 1.0)
										{
											Main.tile[k, l].type = num3;
											if (Main.tile[k, l].liquid == 255)
											{
												Main.tile[k, l].wall = 0;
											}
										}
										else if (Main.tile[k, l].type != num3)
										{
											Main.tile[k, l].type = num2;
										}
									}
								}
								else if ((vector2D2.X < 0.0 && k < i) || (vector2D2.X > 0.0 && k > i))
								{
									if (Main.tile[k, l].liquid == 255)
									{
										Main.tile[k, l].wall = 0;
									}
									Main.tile[k, l].type = num2;
									Main.tile[k, l].active(true);
									if (k == (int)vector2D.X && flag2)
									{
										flag2 = false;
										int num12 = 50 + WorldGen.genRand.Next(3);
										int num13 = 43 + WorldGen.genRand.Next(3);
										int num14 = 20 + WorldGen.genRand.Next(3);
										int num15 = k;
										int num16 = k + num14;
										if (vector2D2.X < 0.0)
										{
											num15 = k - num14;
											num16 = k;
										}
										if (num5 < 100.0)
										{
											num12 = (int)((double)num12 * (num5 / 100.0));
											num13 = (int)((double)num13 * (num5 / 100.0));
											num14 = (int)((double)num14 * (num5 / 100.0));
										}
										if (num4 < num6 + 5.0)
										{
											double num17 = (num4 - num6) / 5.0;
											num12 = (int)((double)num12 * num17);
											num13 = (int)((double)num13 * num17);
											num14 = (int)((double)num14 * num17);
										}
										for (int m = num15; m <= num16; m++)
										{
											int num18 = l;
											while (num18 < l + num12 && !WorldGen.badOceanCaveTiles(m, num18))
											{
												if (num18 > l + num13)
												{
													if (WorldGen.SolidTile(m, num18, false) && Main.tile[m, num18].type != num2)
													{
														break;
													}
													Main.tile[m, num18].type = num3;
												}
												else
												{
													Main.tile[m, num18].type = num2;
												}
												Main.tile[m, num18].active(true);
												if (WorldGen.genRand.Next(3) == 0)
												{
													Main.tile[m - 1, num18].type = num2;
													Main.tile[m - 1, num18].active(true);
												}
												if (WorldGen.genRand.Next(3) == 0)
												{
													Main.tile[m + 1, num18].type = num2;
													Main.tile[m + 1, num18].active(true);
												}
												num18++;
											}
										}
									}
								}
							}
							if (num11 < num4 * 1.3 + 1.0 && l > j - 10)
							{
								Main.tile[k, l].liquid = byte.MaxValue;
							}
							if (flag3 && k == (int)vector2D.X && (double)l > vector2D.Y)
							{
								flag3 = false;
								int num19 = 100;
								int num20 = 2;
								for (int n = k - num20; n <= k + num20; n++)
								{
									for (int num21 = l; num21 < l + num19; num21++)
									{
										if (!WorldGen.badOceanCaveTiles(n, num21))
										{
											Main.tile[n, num21].liquid = byte.MaxValue;
										}
									}
								}
							}
						}
					}
				}
				vector2D += vector2D2;
				vector2D2.X += WorldGen.genRand.NextDouble() * 0.1 - 0.05;
				vector2D2.Y += WorldGen.genRand.NextDouble() * 0.1 - 0.05;
				if (flag)
				{
					if (vector2D.Y > (Main.worldSurface * 2.0 + Main.rockLayer) / 3.0 && vector2D.Y > (double)(j + 30))
					{
						flag = false;
					}
					vector2D2.Y = Utils.Clamp<double>(vector2D2.Y, 0.35, 1.0);
				}
				else
				{
					if (vector2D.X < (double)(Main.maxTilesX / 2))
					{
						if (vector2D2.X < 0.5)
						{
							vector2D2.X += 0.02;
						}
					}
					else if (vector2D2.X > -0.5)
					{
						vector2D2.X -= 0.02;
					}
					if (!flag4)
					{
						if (vector2D2.Y < 0.0)
						{
							vector2D2.Y *= 0.95;
						}
						vector2D2.Y += 0.04;
					}
					else if (vector2D.Y < (Main.worldSurface * 4.0 + Main.rockLayer) / 5.0)
					{
						if (vector2D2.Y < 0.0)
						{
							vector2D2.Y *= 0.97;
						}
						vector2D2.Y += 0.02;
					}
					else if (vector2D2.Y > -0.1)
					{
						vector2D2.Y *= 0.99;
						vector2D2.Y -= 0.01;
					}
					vector2D2.Y = Utils.Clamp<double>(vector2D2.Y, -1.0, 1.0);
				}
				if (vector2D.X < (double)(Main.maxTilesX / 2))
				{
					vector2D2.X = Utils.Clamp<double>(vector2D2.X, 0.1, 1.0);
				}
				else
				{
					vector2D2.X = Utils.Clamp<double>(vector2D2.X, -1.0, -0.1);
				}
			}
			GenVars.numOceanCaveTreasure++;
		}

		// Token: 0x06001026 RID: 4134 RVA: 0x0046CD94 File Offset: 0x0046AF94
		public static void WavyCaverer(int startX, int startY, double waveStrengthScalar, double wavePercentScalar, int steps, int type)
		{
			Vector2D vector2D;
			vector2D..ctor((double)startX, (double)startY);
			bool flag = startX > Main.maxTilesX / 2;
			int num = 2 + WorldGen.genRand.Next(2);
			int num2 = 15 + WorldGen.genRand.Next(11);
			int num3 = 1 + WorldGen.genRand.Next(2);
			int num4 = (int)Math.Ceiling((double)num2 / (double)num3);
			double num5 = 1.0;
			double num6 = 1.0;
			int num7 = (int)(-1.0 + WorldGen.genRand.NextDouble() * 3.0);
			int num8 = num;
			int num9 = 0;
			for (int i = 0; i < steps; i++)
			{
				bool flag2 = i < num4;
				bool flag3 = i >= steps - num4;
				vector2D.X += (double)(flag ? -1 : 1);
				if (!flag2 && !flag3)
				{
					num9++;
					num5 = Math.Min(2.0, Math.Max(0.5, num5 + (-0.5 + WorldGen.genRand.NextDouble()) * 0.25));
					num6 = Math.Min(1.1, Math.Max(0.9, num6 + (-0.5 + WorldGen.genRand.NextDouble()) * 0.02));
				}
				double num10 = Math.Sin((double)num9 * 0.1 * num6 * wavePercentScalar) * num5 * waveStrengthScalar;
				vector2D.Y = (double)startY + num10 + (double)(num9 * num7);
				int num11 = num8;
				if (flag2)
				{
					num8 = Math.Min(num2, num8 + num3);
				}
				else if (flag3)
				{
					num8 = Math.Max(num, num8 - num3);
				}
				vector2D.Y -= (double)((num11 + num8) / 4);
				for (int j = 0; j < num8; j++)
				{
					int num12 = (int)vector2D.X;
					int num13 = (int)vector2D.Y + j;
					if (WorldGen.InWorld(num12, num13, 20))
					{
						if (type >= 0)
						{
							WorldGen.PlaceTile(num12, num13, type, true, true, -1, 0);
						}
						else
						{
							WorldGen.KillTile(num12, num13, false, false, false);
						}
					}
				}
			}
		}

		// Token: 0x06001027 RID: 4135 RVA: 0x0046CFC8 File Offset: 0x0046B1C8
		public static void TileRunner(int i, int j, double strength, int steps, int type, bool addTile = false, double speedX = 0.0, double speedY = 0.0, bool noYChange = false, bool overRide = true, int ignoreTileType = -1)
		{
			if (!GenVars.mudWall)
			{
				if (WorldGen.drunkWorldGen)
				{
					strength *= 1.0 + (double)WorldGen.genRand.Next(-80, 81) * 0.01;
					steps = (int)((double)steps * (1.0 + (double)WorldGen.genRand.Next(-80, 81) * 0.01));
				}
				else if (WorldGen.remixWorldGen)
				{
					strength *= 1.0 + (double)WorldGen.genRand.Next(-50, 51) * 0.01;
				}
				else if (WorldGen.getGoodWorldGen && type != 57)
				{
					strength *= 1.0 + (double)WorldGen.genRand.Next(-80, 81) * 0.015;
					steps += WorldGen.genRand.Next(3);
				}
			}
			double num = strength;
			double num2 = (double)steps;
			Vector2D vector2D;
			vector2D.X = (double)i;
			vector2D.Y = (double)j;
			Vector2D vector2D2;
			vector2D2.X = (double)WorldGen.genRand.Next(-10, 11) * 0.1;
			vector2D2.Y = (double)WorldGen.genRand.Next(-10, 11) * 0.1;
			if (speedX != 0.0 || speedY != 0.0)
			{
				vector2D2.X = speedX;
				vector2D2.Y = speedY;
			}
			bool flag = type == 368;
			bool flag2 = type == 367;
			bool lava = false;
			if (WorldGen.getGoodWorldGen && WorldGen.genRand.Next(4) == 0)
			{
				lava = true;
			}
			while (num > 0.0 && num2 > 0.0)
			{
				if (WorldGen.drunkWorldGen && WorldGen.genRand.Next(30) == 0)
				{
					vector2D.X += (double)WorldGen.genRand.Next(-100, 101) * 0.05;
					vector2D.Y += (double)WorldGen.genRand.Next(-100, 101) * 0.05;
				}
				if (vector2D.Y < 0.0 && num2 > 0.0 && type == 59)
				{
					num2 = 0.0;
				}
				num = strength * (num2 / (double)steps);
				num2 -= 1.0;
				int num3 = (int)(vector2D.X - num * 0.5);
				int num4 = (int)(vector2D.X + num * 0.5);
				int num5 = (int)(vector2D.Y - num * 0.5);
				int num6 = (int)(vector2D.Y + num * 0.5);
				if (num3 < 1)
				{
					num3 = 1;
				}
				if (num4 > Main.maxTilesX - 1)
				{
					num4 = Main.maxTilesX - 1;
				}
				if (num5 < 1)
				{
					num5 = 1;
				}
				if (num6 > Main.maxTilesY - 1)
				{
					num6 = Main.maxTilesY - 1;
				}
				for (int k = num3; k < num4; k++)
				{
					if (k < WorldGen.beachDistance + 50 || k >= Main.maxTilesX - WorldGen.beachDistance - 50)
					{
						lava = false;
					}
					for (int l = num5; l < num6; l++)
					{
						if ((!WorldGen.drunkWorldGen || l >= Main.maxTilesY - 300 || type != 57) && (ignoreTileType < 0 || !Main.tile[k, l].active() || (int)Main.tile[k, l].type != ignoreTileType) && Math.Abs((double)k - vector2D.X) + Math.Abs((double)l - vector2D.Y) < strength * 0.5 * (1.0 + (double)WorldGen.genRand.Next(-10, 11) * 0.015))
						{
							if (GenVars.mudWall && (double)l > Main.worldSurface && Main.tile[k, l - 1].wall != 2 && l < Main.maxTilesY - 210 - WorldGen.genRand.Next(3) && Math.Abs((double)k - vector2D.X) + Math.Abs((double)l - vector2D.Y) < strength * 0.45 * (1.0 + (double)WorldGen.genRand.Next(-10, 11) * 0.01))
							{
								if (l > GenVars.lavaLine - WorldGen.genRand.Next(0, 4) - 50)
								{
									if (Main.tile[k, l - 1].wall != 64 && Main.tile[k, l + 1].wall != 64 && Main.tile[k - 1, l].wall != 64 && Main.tile[k + 1, l].wall != 64)
									{
										WorldGen.PlaceWall(k, l, 15, true);
									}
								}
								else if (Main.tile[k, l - 1].wall != 15 && Main.tile[k, l + 1].wall != 15 && Main.tile[k - 1, l].wall != 15 && Main.tile[k + 1, l].wall != 15)
								{
									WorldGen.PlaceWall(k, l, 64, true);
								}
							}
							if (type < 0)
							{
								if (Main.tile[k, l].type != 53)
								{
									if (type == -2 && Main.tile[k, l].active() && (l < GenVars.waterLine || l > GenVars.lavaLine))
									{
										Main.tile[k, l].liquid = byte.MaxValue;
										Main.tile[k, l].lava(lava);
										if (WorldGen.remixWorldGen)
										{
											if (l > GenVars.lavaLine && ((double)l < Main.rockLayer - 80.0 || l > Main.maxTilesY - 350) && !WorldGen.oceanDepths(k, l))
											{
												Main.tile[k, l].lava(true);
											}
										}
										else if (l > GenVars.lavaLine)
										{
											Main.tile[k, l].lava(true);
										}
									}
									Main.tile[k, l].active(false);
								}
							}
							else
							{
								if (flag && Math.Abs((double)k - vector2D.X) + Math.Abs((double)l - vector2D.Y) < strength * 0.3 * (1.0 + (double)WorldGen.genRand.Next(-10, 11) * 0.01))
								{
									WorldGen.PlaceWall(k, l, 180, true);
								}
								if (flag2 && Math.Abs((double)k - vector2D.X) + Math.Abs((double)l - vector2D.Y) < strength * 0.3 * (1.0 + (double)WorldGen.genRand.Next(-10, 11) * 0.01))
								{
									WorldGen.PlaceWall(k, l, 178, true);
								}
								if (overRide || !Main.tile[k, l].active())
								{
									Tile tile = Main.tile[k, l];
									bool flag3 = Main.tileStone[type] && tile.type != 1;
									if (!TileID.Sets.CanBeClearedDuringGeneration[(int)tile.type])
									{
										flag3 = true;
									}
									ushort type2 = tile.type;
									if (type2 <= 147)
									{
										if (type2 <= 45)
										{
											if (type2 != 1)
											{
												if (type2 == 45)
												{
													goto IL_835;
												}
											}
											else if (type == 59 && (double)l < Main.worldSurface + (double)WorldGen.genRand.Next(-50, 50))
											{
												flag3 = true;
											}
										}
										else if (type2 != 53)
										{
											if (type2 == 147)
											{
												goto IL_835;
											}
										}
										else
										{
											if (type == 59 && GenVars.UndergroundDesertLocation.Contains(k, l))
											{
												flag3 = true;
											}
											if (type == 40)
											{
												flag3 = true;
											}
											if ((double)l < Main.worldSurface && type != 59)
											{
												flag3 = true;
											}
										}
									}
									else if (type2 <= 196)
									{
										if (type2 - 189 <= 1 || type2 == 196)
										{
											goto IL_835;
										}
									}
									else if (type2 - 367 > 1)
									{
										if (type2 - 396 > 1)
										{
											if (type2 == 460)
											{
												goto IL_835;
											}
										}
										else
										{
											flag3 = !TileID.Sets.Ore[type];
										}
									}
									else if (type == 59)
									{
										flag3 = true;
									}
									IL_877:
									if (!flag3)
									{
										tile.type = (ushort)type;
										goto IL_885;
									}
									goto IL_885;
									IL_835:
									flag3 = true;
									goto IL_877;
								}
								IL_885:
								if (addTile)
								{
									Main.tile[k, l].active(true);
									Main.tile[k, l].liquid = 0;
									Main.tile[k, l].lava(false);
								}
								if (noYChange && (double)l < Main.worldSurface && type != 59)
								{
									Main.tile[k, l].wall = 2;
								}
								if (type == 59 && l > GenVars.waterLine && Main.tile[k, l].liquid > 0)
								{
									Main.tile[k, l].lava(false);
									Main.tile[k, l].liquid = 0;
								}
							}
						}
					}
				}
				vector2D += vector2D2;
				if ((!WorldGen.drunkWorldGen || WorldGen.genRand.Next(3) != 0) && num > 50.0)
				{
					vector2D += vector2D2;
					num2 -= 1.0;
					vector2D2.Y += (double)WorldGen.genRand.Next(-10, 11) * 0.05;
					vector2D2.X += (double)WorldGen.genRand.Next(-10, 11) * 0.05;
					if (num > 100.0)
					{
						vector2D += vector2D2;
						num2 -= 1.0;
						vector2D2.Y += (double)WorldGen.genRand.Next(-10, 11) * 0.05;
						vector2D2.X += (double)WorldGen.genRand.Next(-10, 11) * 0.05;
						if (num > 150.0)
						{
							vector2D += vector2D2;
							num2 -= 1.0;
							vector2D2.Y += (double)WorldGen.genRand.Next(-10, 11) * 0.05;
							vector2D2.X += (double)WorldGen.genRand.Next(-10, 11) * 0.05;
							if (num > 200.0)
							{
								vector2D += vector2D2;
								num2 -= 1.0;
								vector2D2.Y += (double)WorldGen.genRand.Next(-10, 11) * 0.05;
								vector2D2.X += (double)WorldGen.genRand.Next(-10, 11) * 0.05;
								if (num > 250.0)
								{
									vector2D += vector2D2;
									num2 -= 1.0;
									vector2D2.Y += (double)WorldGen.genRand.Next(-10, 11) * 0.05;
									vector2D2.X += (double)WorldGen.genRand.Next(-10, 11) * 0.05;
									if (num > 300.0)
									{
										vector2D += vector2D2;
										num2 -= 1.0;
										vector2D2.Y += (double)WorldGen.genRand.Next(-10, 11) * 0.05;
										vector2D2.X += (double)WorldGen.genRand.Next(-10, 11) * 0.05;
										if (num > 400.0)
										{
											vector2D += vector2D2;
											num2 -= 1.0;
											vector2D2.Y += (double)WorldGen.genRand.Next(-10, 11) * 0.05;
											vector2D2.X += (double)WorldGen.genRand.Next(-10, 11) * 0.05;
											if (num > 500.0)
											{
												vector2D += vector2D2;
												num2 -= 1.0;
												vector2D2.Y += (double)WorldGen.genRand.Next(-10, 11) * 0.05;
												vector2D2.X += (double)WorldGen.genRand.Next(-10, 11) * 0.05;
												if (num > 600.0)
												{
													vector2D += vector2D2;
													num2 -= 1.0;
													vector2D2.Y += (double)WorldGen.genRand.Next(-10, 11) * 0.05;
													vector2D2.X += (double)WorldGen.genRand.Next(-10, 11) * 0.05;
													if (num > 700.0)
													{
														vector2D += vector2D2;
														num2 -= 1.0;
														vector2D2.Y += (double)WorldGen.genRand.Next(-10, 11) * 0.05;
														vector2D2.X += (double)WorldGen.genRand.Next(-10, 11) * 0.05;
														if (num > 800.0)
														{
															vector2D += vector2D2;
															num2 -= 1.0;
															vector2D2.Y += (double)WorldGen.genRand.Next(-10, 11) * 0.05;
															vector2D2.X += (double)WorldGen.genRand.Next(-10, 11) * 0.05;
															if (num > 900.0)
															{
																vector2D += vector2D2;
																num2 -= 1.0;
																vector2D2.Y += (double)WorldGen.genRand.Next(-10, 11) * 0.05;
																vector2D2.X += (double)WorldGen.genRand.Next(-10, 11) * 0.05;
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
				vector2D2.X += (double)WorldGen.genRand.Next(-10, 11) * 0.05;
				if (WorldGen.drunkWorldGen)
				{
					vector2D2.X += (double)WorldGen.genRand.Next(-10, 11) * 0.25;
				}
				if (vector2D2.X > 1.0)
				{
					vector2D2.X = 1.0;
				}
				if (vector2D2.X < -1.0)
				{
					vector2D2.X = -1.0;
				}
				if (!noYChange)
				{
					vector2D2.Y += (double)WorldGen.genRand.Next(-10, 11) * 0.05;
					if (vector2D2.Y > 1.0)
					{
						vector2D2.Y = 1.0;
					}
					if (vector2D2.Y < -1.0)
					{
						vector2D2.Y = -1.0;
					}
				}
				else if (type != 59 && num < 3.0)
				{
					if (vector2D2.Y > 1.0)
					{
						vector2D2.Y = 1.0;
					}
					if (vector2D2.Y < -1.0)
					{
						vector2D2.Y = -1.0;
					}
				}
				if (type == 59 && !noYChange)
				{
					if (vector2D2.Y > 0.5)
					{
						vector2D2.Y = 0.5;
					}
					if (vector2D2.Y < -0.5)
					{
						vector2D2.Y = -0.5;
					}
					if (vector2D.Y < Main.rockLayer + 100.0)
					{
						vector2D2.Y = 1.0;
					}
					if (vector2D.Y > (double)(Main.maxTilesY - 300))
					{
						vector2D2.Y = -1.0;
					}
				}
			}
		}

		// Token: 0x06001028 RID: 4136 RVA: 0x0046E080 File Offset: 0x0046C280
		public static void DirtyRockRunner(int i, int j)
		{
			double num = (double)WorldGen.genRand.Next(2, 6);
			double num2 = (double)WorldGen.genRand.Next(5, 50);
			double num3 = num2;
			Vector2D vector2D;
			vector2D.X = (double)i;
			vector2D.Y = (double)j;
			Vector2D vector2D2;
			vector2D2.X = (double)WorldGen.genRand.Next(-10, 11) * 0.1;
			vector2D2.Y = (double)WorldGen.genRand.Next(-10, 11) * 0.1;
			while (num > 0.0 && num3 > 0.0)
			{
				double num4 = num * (num3 / num2);
				num3 -= 1.0;
				int num5 = (int)(vector2D.X - num4 * 0.5);
				int num6 = (int)(vector2D.X + num4 * 0.5);
				int num7 = (int)(vector2D.Y - num4 * 0.5);
				int num8 = (int)(vector2D.Y + num4 * 0.5);
				if (num5 < 0)
				{
					num5 = 0;
				}
				if (num6 > Main.maxTilesX)
				{
					num6 = Main.maxTilesX;
				}
				if (num7 < 0)
				{
					num7 = 0;
				}
				if (num8 > Main.maxTilesY)
				{
					num8 = Main.maxTilesY;
				}
				for (int k = num5; k < num6; k++)
				{
					for (int l = num7; l < num8; l++)
					{
						if (Math.Abs((double)k - vector2D.X) + Math.Abs((double)l - vector2D.Y) < num * 0.5 * (1.0 + (double)WorldGen.genRand.Next(-10, 11) * 0.015) && Main.tile[k, l].wall == 2)
						{
							Main.tile[k, l].wall = 59;
						}
					}
				}
				vector2D += vector2D2;
				vector2D2.X += (double)WorldGen.genRand.Next(-10, 11) * 0.05;
				if (vector2D2.X > 1.0)
				{
					vector2D2.X = 1.0;
				}
				if (vector2D2.X < -1.0)
				{
					vector2D2.X = -1.0;
				}
				vector2D2.Y += (double)WorldGen.genRand.Next(-10, 11) * 0.05;
				if (vector2D2.Y > 1.0)
				{
					vector2D2.Y = 1.0;
				}
				if (vector2D2.Y < -1.0)
				{
					vector2D2.Y = -1.0;
				}
			}
		}

		// Token: 0x06001029 RID: 4137 RVA: 0x0046E33C File Offset: 0x0046C53C
		public static void MudWallRunner(int i, int j)
		{
			double num = (double)WorldGen.genRand.Next(8, 21);
			double num2 = (double)WorldGen.genRand.Next(8, 33);
			double num3 = num2;
			Vector2D vector2D;
			vector2D.X = (double)i;
			vector2D.Y = (double)j;
			Vector2D vector2D2;
			vector2D2.X = (double)WorldGen.genRand.Next(-10, 11) * 0.1;
			vector2D2.Y = (double)WorldGen.genRand.Next(-10, 11) * 0.1;
			while (num > 0.0 && num3 > 0.0)
			{
				double num4 = num * (num3 / num2);
				num3 -= 1.0;
				int num5 = (int)(vector2D.X - num4 * 0.5);
				int num6 = (int)(vector2D.X + num4 * 0.5);
				int num7 = (int)(vector2D.Y - num4 * 0.5);
				int num8 = (int)(vector2D.Y + num4 * 0.5);
				if (num5 < 0)
				{
					num5 = 0;
				}
				if (num6 > Main.maxTilesX)
				{
					num6 = Main.maxTilesX;
				}
				if (num7 < 0)
				{
					num7 = 0;
				}
				if (num8 > Main.maxTilesY)
				{
					num8 = Main.maxTilesY;
				}
				for (int k = num5; k < num6; k++)
				{
					for (int l = num7; l < num8; l++)
					{
						if (Math.Abs((double)k - vector2D.X) + Math.Abs((double)l - vector2D.Y) < num * 0.5 * (1.0 + (double)WorldGen.genRand.Next(-10, 11) * 0.015) && (double)l > Main.worldSurface)
						{
							Main.tile[k, l].wall = 0;
						}
					}
				}
				vector2D += vector2D2;
				vector2D2.X += (double)WorldGen.genRand.Next(-10, 11) * 0.05;
				if (vector2D2.X > 1.0)
				{
					vector2D2.X = 1.0;
				}
				if (vector2D2.X < -1.0)
				{
					vector2D2.X = -1.0;
				}
				vector2D2.Y += (double)WorldGen.genRand.Next(-10, 11) * 0.05;
				if (vector2D2.Y > 1.0)
				{
					vector2D2.Y = 1.0;
				}
				if (vector2D2.Y < -1.0)
				{
					vector2D2.Y = -1.0;
				}
			}
		}

		// Token: 0x0600102A RID: 4138 RVA: 0x0046E5E8 File Offset: 0x0046C7E8
		public static void SnowCloudIsland(int i, int j)
		{
			double num = (double)WorldGen.genRand.Next(100, 150);
			double num2 = (double)WorldGen.genRand.Next(20, 30);
			int num3 = i;
			int num4 = i;
			int num5 = i;
			int num6 = j;
			Vector2D vector2D;
			vector2D.X = (double)i;
			vector2D.Y = (double)j;
			Vector2D vector2D2;
			vector2D2.X = (double)WorldGen.genRand.Next(-20, 21) * 0.2;
			while (vector2D2.X > -2.0 && vector2D2.X < 2.0)
			{
				vector2D2.X = (double)WorldGen.genRand.Next(-20, 21) * 0.2;
			}
			vector2D2.Y = (double)WorldGen.genRand.Next(-20, -10) * 0.02;
			while (num > 0.0 && num2 > 0.0)
			{
				num -= (double)WorldGen.genRand.Next(4);
				num2 -= 1.0;
				int num7 = (int)(vector2D.X - num * 0.5);
				int num8 = (int)(vector2D.X + num * 0.5);
				int num9 = (int)(vector2D.Y - num * 0.5);
				int num10 = (int)(vector2D.Y + num * 0.5);
				if (num7 < 0)
				{
					num7 = 0;
				}
				if (num8 > Main.maxTilesX)
				{
					num8 = Main.maxTilesX;
				}
				if (num9 < 0)
				{
					num9 = 0;
				}
				if (num10 > Main.maxTilesY)
				{
					num10 = Main.maxTilesY;
				}
				double num11 = num * (double)WorldGen.genRand.Next(80, 120) * 0.01;
				double num12 = vector2D.Y + 1.0;
				for (int k = num7; k < num8; k++)
				{
					if (WorldGen.genRand.Next(2) == 0)
					{
						num12 += (double)WorldGen.genRand.Next(-1, 2);
					}
					if (num12 < vector2D.Y)
					{
						num12 = vector2D.Y;
					}
					if (num12 > vector2D.Y + 2.0)
					{
						num12 = vector2D.Y + 2.0;
					}
					for (int l = num9; l < num10; l++)
					{
						if ((double)l > num12)
						{
							double num13 = Math.Abs((double)k - vector2D.X);
							double num14 = Math.Abs((double)l - vector2D.Y) * 3.0;
							if (Math.Sqrt(num13 * num13 + num14 * num14) < num11 * 0.4)
							{
								if (k < num3)
								{
									num3 = k;
								}
								if (k > num4)
								{
									num4 = k;
								}
								if (l < num5)
								{
									num5 = l;
								}
								if (l > num6)
								{
									num6 = l;
								}
								Main.tile[k, l].active(true);
								Main.tile[k, l].type = 189;
								WorldGen.SquareTileFrame(k, l, true);
							}
						}
					}
				}
				vector2D += vector2D2;
				vector2D2.X += (double)WorldGen.genRand.Next(-20, 21) * 0.05;
				if (vector2D2.X > 1.0)
				{
					vector2D2.X = 1.0;
				}
				if (vector2D2.X < -1.0)
				{
					vector2D2.X = -1.0;
				}
				if (vector2D2.Y > 0.2)
				{
					vector2D2.Y = -0.2;
				}
				if (vector2D2.Y < -0.2)
				{
					vector2D2.Y = -0.2;
				}
			}
			int m = num3;
			int num16;
			for (m += WorldGen.genRand.Next(5); m < num4; m += WorldGen.genRand.Next(num16, (int)((double)num16 * 1.5)))
			{
				int num15 = num6;
				while (!Main.tile[m, num15].active())
				{
					num15--;
				}
				num15 += WorldGen.genRand.Next(-3, 4);
				num16 = WorldGen.genRand.Next(4, 8);
				int num17 = 189;
				if (WorldGen.genRand.Next(4) == 0)
				{
					num17 = 460;
				}
				for (int n = m - num16; n <= m + num16; n++)
				{
					for (int num18 = num15 - num16; num18 <= num15 + num16; num18++)
					{
						if (num18 > num5)
						{
							double num19 = (double)Math.Abs(n - m);
							double num20 = (double)(Math.Abs(num18 - num15) * 2);
							if (Math.Sqrt(num19 * num19 + num20 * num20) < (double)(num16 + WorldGen.genRand.Next(2)))
							{
								Main.tile[n, num18].active(true);
								Main.tile[n, num18].type = (ushort)num17;
								WorldGen.SquareTileFrame(n, num18, true);
							}
						}
					}
				}
			}
			num = (double)WorldGen.genRand.Next(80, 95);
			num2 = (double)WorldGen.genRand.Next(10, 15);
			vector2D.X = (double)i;
			vector2D.Y = (double)num5;
			vector2D2.X = (double)WorldGen.genRand.Next(-20, 21) * 0.2;
			while (vector2D2.X > -2.0 && vector2D2.X < 2.0)
			{
				vector2D2.X = (double)WorldGen.genRand.Next(-20, 21) * 0.2;
			}
			vector2D2.Y = (double)WorldGen.genRand.Next(-20, -10) * 0.02;
			while (num > 0.0 && num2 > 0.0)
			{
				num -= (double)WorldGen.genRand.Next(4);
				num2 -= 1.0;
				int num7 = (int)(vector2D.X - num * 0.5);
				int num8 = (int)(vector2D.X + num * 0.5);
				int num9 = num5 - 1;
				int num10 = (int)(vector2D.Y + num * 0.5);
				if (num7 < 0)
				{
					num7 = 0;
				}
				if (num8 > Main.maxTilesX)
				{
					num8 = Main.maxTilesX;
				}
				if (num9 < 0)
				{
					num9 = 0;
				}
				if (num10 > Main.maxTilesY)
				{
					num10 = Main.maxTilesY;
				}
				double num11 = num * (double)WorldGen.genRand.Next(80, 120) * 0.01;
				double num21 = vector2D.Y + 1.0;
				for (int num22 = num7; num22 < num8; num22++)
				{
					if (WorldGen.genRand.Next(2) == 0)
					{
						num21 += (double)WorldGen.genRand.Next(-1, 2);
					}
					if (num21 < vector2D.Y)
					{
						num21 = vector2D.Y;
					}
					if (num21 > vector2D.Y + 2.0)
					{
						num21 = vector2D.Y + 2.0;
					}
					for (int num23 = num9; num23 < num10; num23++)
					{
						if ((double)num23 > num21)
						{
							double num24 = Math.Abs((double)num22 - vector2D.X);
							double num25 = Math.Abs((double)num23 - vector2D.Y) * 3.0;
							if (Math.Sqrt(num24 * num24 + num25 * num25) < num11 * 0.4 && Main.tile[num22, num23].type == 189)
							{
								Main.tile[num22, num23].type = 147;
								WorldGen.SquareTileFrame(num22, num23, true);
							}
						}
					}
				}
				vector2D += vector2D2;
				vector2D2.X += (double)WorldGen.genRand.Next(-20, 21) * 0.05;
				if (vector2D2.X > 1.0)
				{
					vector2D2.X = 1.0;
				}
				if (vector2D2.X < -1.0)
				{
					vector2D2.X = -1.0;
				}
				if (vector2D2.Y > 0.2)
				{
					vector2D2.Y = -0.2;
				}
				if (vector2D2.Y < -0.2)
				{
					vector2D2.Y = -0.2;
				}
			}
			int num26 = num3;
			num26 += WorldGen.genRand.Next(5);
			while (num26 < num4)
			{
				int num27 = num6;
				while ((!Main.tile[num26, num27].active() || Main.tile[num26, num27].type != 0) && num26 < num4)
				{
					num27--;
					if (num27 < num5)
					{
						num27 = num6;
						num26 += WorldGen.genRand.Next(1, 4);
					}
				}
				if (num26 < num4)
				{
					num27 += WorldGen.genRand.Next(0, 4);
					int num28 = WorldGen.genRand.Next(2, 5);
					int num29 = 189;
					for (int num30 = num26 - num28; num30 <= num26 + num28; num30++)
					{
						for (int num31 = num27 - num28; num31 <= num27 + num28; num31++)
						{
							if (num31 > num5)
							{
								double num32 = (double)Math.Abs(num30 - num26);
								double num33 = (double)(Math.Abs(num31 - num27) * 2);
								if (Math.Sqrt(num32 * num32 + num33 * num33) < (double)num28)
								{
									Main.tile[num30, num31].type = (ushort)num29;
									WorldGen.SquareTileFrame(num30, num31, true);
								}
							}
						}
					}
					num26 += WorldGen.genRand.Next(num28, (int)((double)num28 * 1.5));
				}
			}
			for (int num34 = num3 - 20; num34 <= num4 + 20; num34++)
			{
				for (int num35 = num5 - 20; num35 <= num6 + 20; num35++)
				{
					bool flag = true;
					for (int num36 = num34 - 1; num36 <= num34 + 1; num36++)
					{
						for (int num37 = num35 - 1; num37 <= num35 + 1; num37++)
						{
							if (!Main.tile[num36, num37].active())
							{
								flag = false;
							}
						}
					}
					if (flag)
					{
						Main.tile[num34, num35].wall = 73;
						WorldGen.SquareWallFrame(num34, num35, true);
					}
				}
			}
			for (int num38 = num3; num38 <= num4; num38++)
			{
				int num39 = num5 - 10;
				while (!Main.tile[num38, num39 + 1].active())
				{
					num39++;
				}
				if (num39 < num6 && Main.tile[num38, num39 + 1].type == 189)
				{
					if (WorldGen.genRand.Next(10) == 0)
					{
						int num40 = WorldGen.genRand.Next(1, 3);
						for (int num41 = num38 - num40; num41 <= num38 + num40; num41++)
						{
							if (Main.tile[num41, num39].type == 189 && WorldGen.WillWaterPlacedHereStayPut(num41, num39))
							{
								Main.tile[num41, num39].active(false);
								Main.tile[num41, num39].liquid = byte.MaxValue;
								Main.tile[num41, num39].lava(false);
								WorldGen.SquareTileFrame(num38, num39, true);
							}
							if (Main.tile[num41, num39 + 1].type == 189 && WorldGen.WillWaterPlacedHereStayPut(num41, num39 + 1))
							{
								Main.tile[num41, num39 + 1].active(false);
								Main.tile[num41, num39 + 1].liquid = byte.MaxValue;
								Main.tile[num41, num39 + 1].lava(false);
								WorldGen.SquareTileFrame(num38, num39 + 1, true);
							}
							if (num41 > num38 - num40 && num41 < num38 + 2 && Main.tile[num41, num39 + 2].type == 189 && WorldGen.WillWaterPlacedHereStayPut(num41, num39 + 2))
							{
								Main.tile[num41, num39 + 2].active(false);
								Main.tile[num41, num39 + 2].liquid = byte.MaxValue;
								Main.tile[num41, num39 + 2].lava(false);
								WorldGen.SquareTileFrame(num38, num39 + 2, true);
							}
						}
					}
					if (WorldGen.genRand.Next(5) == 0 && WorldGen.WillWaterPlacedHereStayPut(num38, num39))
					{
						Main.tile[num38, num39].liquid = byte.MaxValue;
					}
					Main.tile[num38, num39].lava(false);
					WorldGen.SquareTileFrame(num38, num39, true);
				}
			}
			int num42 = WorldGen.genRand.Next(4);
			for (int num43 = 0; num43 <= num42; num43++)
			{
				int num44 = WorldGen.genRand.Next(num3 - 5, num4 + 5);
				int num45 = num5 - WorldGen.genRand.Next(20, 40);
				int num46 = WorldGen.genRand.Next(4, 8);
				int num47 = 189;
				if (WorldGen.genRand.Next(2) == 0)
				{
					num47 = 460;
				}
				for (int num48 = num44 - num46; num48 <= num44 + num46; num48++)
				{
					for (int num49 = num45 - num46; num49 <= num45 + num46; num49++)
					{
						double num50 = (double)Math.Abs(num48 - num44);
						double num51 = (double)(Math.Abs(num49 - num45) * 2);
						if (Math.Sqrt(num50 * num50 + num51 * num51) < (double)(num46 + WorldGen.genRand.Next(-1, 2)))
						{
							Main.tile[num48, num49].active(true);
							Main.tile[num48, num49].type = (ushort)num47;
							WorldGen.SquareTileFrame(num48, num49, true);
						}
					}
				}
				for (int num52 = num44 - num46 + 2; num52 <= num44 + num46 - 2; num52++)
				{
					int num53 = num45 - num46;
					while (!Main.tile[num52, num53].active())
					{
						num53++;
					}
					if (WorldGen.WillWaterPlacedHereStayPut(num52, num53))
					{
						Main.tile[num52, num53].active(false);
						Main.tile[num52, num53].liquid = byte.MaxValue;
						WorldGen.SquareTileFrame(num52, num53, true);
					}
				}
			}
		}

		// Token: 0x0600102B RID: 4139 RVA: 0x0046F428 File Offset: 0x0046D628
		public static void DesertCloudIsland(int i, int j)
		{
			double num = (double)WorldGen.genRand.Next(100, 150);
			double num2 = (double)WorldGen.genRand.Next(20, 30);
			int num3 = i;
			int num4 = i;
			int num5 = i;
			int num6 = j;
			Vector2D vector2D;
			vector2D.X = (double)i;
			vector2D.Y = (double)j;
			Vector2D vector2D2;
			vector2D2.X = (double)WorldGen.genRand.Next(-20, 21) * 0.2;
			while (vector2D2.X > -2.0 && vector2D2.X < 2.0)
			{
				vector2D2.X = (double)WorldGen.genRand.Next(-20, 21) * 0.2;
			}
			vector2D2.Y = (double)WorldGen.genRand.Next(-20, -10) * 0.02;
			while (num > 0.0 && num2 > 0.0)
			{
				num -= (double)WorldGen.genRand.Next(4);
				num2 -= 1.0;
				int num7 = (int)(vector2D.X - num * 0.5);
				int num8 = (int)(vector2D.X + num * 0.5);
				int num9 = (int)(vector2D.Y - num * 0.5);
				int num10 = (int)(vector2D.Y + num * 0.5);
				if (num7 < 0)
				{
					num7 = 0;
				}
				if (num8 > Main.maxTilesX)
				{
					num8 = Main.maxTilesX;
				}
				if (num9 < 0)
				{
					num9 = 0;
				}
				if (num10 > Main.maxTilesY)
				{
					num10 = Main.maxTilesY;
				}
				double num11 = num * (double)WorldGen.genRand.Next(80, 120) * 0.01;
				double num12 = vector2D.Y + 1.0;
				for (int k = num7; k < num8; k++)
				{
					if (WorldGen.genRand.Next(2) == 0)
					{
						num12 += (double)WorldGen.genRand.Next(-1, 2);
					}
					if (num12 < vector2D.Y)
					{
						num12 = vector2D.Y;
					}
					if (num12 > vector2D.Y + 2.0)
					{
						num12 = vector2D.Y + 2.0;
					}
					for (int l = num9; l < num10; l++)
					{
						if ((double)l > num12)
						{
							double num13 = Math.Abs((double)k - vector2D.X);
							double num14 = Math.Abs((double)l - vector2D.Y) * 3.0;
							if (Math.Sqrt(num13 * num13 + num14 * num14) < num11 * 0.4)
							{
								if (k < num3)
								{
									num3 = k;
								}
								if (k > num4)
								{
									num4 = k;
								}
								if (l < num5)
								{
									num5 = l;
								}
								if (l > num6)
								{
									num6 = l;
								}
								Main.tile[k, l].active(true);
								Main.tile[k, l].type = 189;
								WorldGen.SquareTileFrame(k, l, true);
							}
						}
					}
				}
				vector2D += vector2D2;
				vector2D2.X += (double)WorldGen.genRand.Next(-20, 21) * 0.05;
				if (vector2D2.X > 1.0)
				{
					vector2D2.X = 1.0;
				}
				if (vector2D2.X < -1.0)
				{
					vector2D2.X = -1.0;
				}
				if (vector2D2.Y > 0.2)
				{
					vector2D2.Y = -0.2;
				}
				if (vector2D2.Y < -0.2)
				{
					vector2D2.Y = -0.2;
				}
			}
			int m = num3;
			int num16;
			for (m += WorldGen.genRand.Next(5); m < num4; m += WorldGen.genRand.Next(num16, (int)((double)num16 * 1.5)))
			{
				int num15 = num6;
				while (!Main.tile[m, num15].active())
				{
					num15--;
				}
				num15 += WorldGen.genRand.Next(-3, 4);
				num16 = WorldGen.genRand.Next(4, 8);
				int num17 = 189;
				if (WorldGen.genRand.Next(4) == 0)
				{
					num17 = 196;
				}
				for (int n = m - num16; n <= m + num16; n++)
				{
					for (int num18 = num15 - num16; num18 <= num15 + num16; num18++)
					{
						if (num18 > num5)
						{
							double num19 = (double)Math.Abs(n - m);
							double num20 = (double)(Math.Abs(num18 - num15) * 2);
							if (Math.Sqrt(num19 * num19 + num20 * num20) < (double)(num16 + WorldGen.genRand.Next(2)))
							{
								Main.tile[n, num18].active(true);
								Main.tile[n, num18].type = (ushort)num17;
								WorldGen.SquareTileFrame(n, num18, true);
							}
						}
					}
				}
			}
			num = (double)WorldGen.genRand.Next(80, 95);
			num2 = (double)WorldGen.genRand.Next(10, 15);
			vector2D.X = (double)i;
			vector2D.Y = (double)num5;
			vector2D2.X = (double)WorldGen.genRand.Next(-20, 21) * 0.2;
			while (vector2D2.X > -2.0 && vector2D2.X < 2.0)
			{
				vector2D2.X = (double)WorldGen.genRand.Next(-20, 21) * 0.2;
			}
			vector2D2.Y = (double)WorldGen.genRand.Next(-20, -10) * 0.02;
			while (num > 0.0 && num2 > 0.0)
			{
				num -= (double)WorldGen.genRand.Next(4);
				num2 -= 1.0;
				int num7 = (int)(vector2D.X - num * 0.5);
				int num8 = (int)(vector2D.X + num * 0.5);
				int num9 = num5 - 1;
				int num10 = (int)(vector2D.Y + num * 0.5);
				if (num7 < 0)
				{
					num7 = 0;
				}
				if (num8 > Main.maxTilesX)
				{
					num8 = Main.maxTilesX;
				}
				if (num9 < 0)
				{
					num9 = 0;
				}
				if (num10 > Main.maxTilesY)
				{
					num10 = Main.maxTilesY;
				}
				double num11 = num * (double)WorldGen.genRand.Next(80, 120) * 0.01;
				double num21 = vector2D.Y + 1.0;
				for (int num22 = num7; num22 < num8; num22++)
				{
					if (WorldGen.genRand.Next(2) == 0)
					{
						num21 += (double)WorldGen.genRand.Next(-1, 2);
					}
					if (num21 < vector2D.Y)
					{
						num21 = vector2D.Y;
					}
					if (num21 > vector2D.Y + 2.0)
					{
						num21 = vector2D.Y + 2.0;
					}
					for (int num23 = num9; num23 < num10; num23++)
					{
						if ((double)num23 > num21)
						{
							double num24 = Math.Abs((double)num22 - vector2D.X);
							double num25 = Math.Abs((double)num23 - vector2D.Y) * 3.0;
							if (Math.Sqrt(num24 * num24 + num25 * num25) < num11 * 0.4 && Main.tile[num22, num23].type == 189)
							{
								Main.tile[num22, num23].type = 53;
								WorldGen.SquareTileFrame(num22, num23, true);
							}
						}
					}
				}
				vector2D += vector2D2;
				vector2D2.X += (double)WorldGen.genRand.Next(-20, 21) * 0.05;
				if (vector2D2.X > 1.0)
				{
					vector2D2.X = 1.0;
				}
				if (vector2D2.X < -1.0)
				{
					vector2D2.X = -1.0;
				}
				if (vector2D2.Y > 0.2)
				{
					vector2D2.Y = -0.2;
				}
				if (vector2D2.Y < -0.2)
				{
					vector2D2.Y = -0.2;
				}
			}
			int num26 = num3;
			num26 += WorldGen.genRand.Next(5);
			while (num26 < num4)
			{
				int num27 = num6;
				while ((!Main.tile[num26, num27].active() || Main.tile[num26, num27].type != 0) && num26 < num4)
				{
					num27--;
					if (num27 < num5)
					{
						num27 = num6;
						num26 += WorldGen.genRand.Next(1, 4);
					}
				}
				if (num26 < num4)
				{
					num27 += WorldGen.genRand.Next(0, 4);
					int num28 = WorldGen.genRand.Next(2, 5);
					int num29 = 189;
					for (int num30 = num26 - num28; num30 <= num26 + num28; num30++)
					{
						for (int num31 = num27 - num28; num31 <= num27 + num28; num31++)
						{
							if (num31 > num5)
							{
								double num32 = (double)Math.Abs(num30 - num26);
								double num33 = (double)(Math.Abs(num31 - num27) * 2);
								if (Math.Sqrt(num32 * num32 + num33 * num33) < (double)num28)
								{
									Main.tile[num30, num31].type = (ushort)num29;
									WorldGen.SquareTileFrame(num30, num31, true);
								}
							}
						}
					}
					num26 += WorldGen.genRand.Next(num28, (int)((double)num28 * 1.5));
				}
			}
			for (int num34 = num3 - 20; num34 <= num4 + 20; num34++)
			{
				for (int num35 = num5 - 20; num35 <= num6 + 20; num35++)
				{
					bool flag = true;
					for (int num36 = num34 - 1; num36 <= num34 + 1; num36++)
					{
						for (int num37 = num35 - 1; num37 <= num35 + 1; num37++)
						{
							if (!Main.tile[num36, num37].active())
							{
								flag = false;
							}
						}
					}
					if (flag)
					{
						Main.tile[num34, num35].wall = 73;
						WorldGen.SquareWallFrame(num34, num35, true);
					}
				}
			}
			for (int num38 = num3; num38 <= num4; num38++)
			{
				int num39 = num5 - 10;
				while (!Main.tile[num38, num39 + 1].active())
				{
					num39++;
				}
				if (num39 < num6 && Main.tile[num38, num39 + 1].type == 189)
				{
					if (WorldGen.genRand.Next(10) == 0)
					{
						int num40 = WorldGen.genRand.Next(1, 3);
						for (int num41 = num38 - num40; num41 <= num38 + num40; num41++)
						{
							if (Main.tile[num41, num39].type == 189 && WorldGen.WillWaterPlacedHereStayPut(num41, num39))
							{
								Main.tile[num41, num39].active(false);
								Main.tile[num41, num39].liquid = byte.MaxValue;
								Main.tile[num41, num39].lava(false);
								WorldGen.SquareTileFrame(num38, num39, true);
							}
							if (Main.tile[num41, num39 + 1].type == 189 && WorldGen.WillWaterPlacedHereStayPut(num41, num39 + 1))
							{
								Main.tile[num41, num39 + 1].active(false);
								Main.tile[num41, num39 + 1].liquid = byte.MaxValue;
								Main.tile[num41, num39 + 1].lava(false);
								WorldGen.SquareTileFrame(num38, num39 + 1, true);
							}
							if (num41 > num38 - num40 && num41 < num38 + 2 && Main.tile[num41, num39 + 2].type == 189 && WorldGen.WillWaterPlacedHereStayPut(num41, num39 + 2))
							{
								Main.tile[num41, num39 + 2].active(false);
								Main.tile[num41, num39 + 2].liquid = byte.MaxValue;
								Main.tile[num41, num39 + 2].lava(false);
								WorldGen.SquareTileFrame(num38, num39 + 2, true);
							}
						}
					}
					if (WorldGen.genRand.Next(5) == 0 && WorldGen.WillWaterPlacedHereStayPut(num38, num39))
					{
						Main.tile[num38, num39].liquid = byte.MaxValue;
					}
					Main.tile[num38, num39].lava(false);
					WorldGen.SquareTileFrame(num38, num39, true);
				}
			}
			int num42 = WorldGen.genRand.Next(4);
			for (int num43 = 0; num43 <= num42; num43++)
			{
				int num44 = WorldGen.genRand.Next(num3 - 5, num4 + 5);
				int num45 = num5 - WorldGen.genRand.Next(20, 40);
				int num46 = WorldGen.genRand.Next(4, 8);
				int num47 = 189;
				if (WorldGen.genRand.Next(2) == 0)
				{
					num47 = 196;
				}
				for (int num48 = num44 - num46; num48 <= num44 + num46; num48++)
				{
					for (int num49 = num45 - num46; num49 <= num45 + num46; num49++)
					{
						double num50 = (double)Math.Abs(num48 - num44);
						double num51 = (double)(Math.Abs(num49 - num45) * 2);
						if (Math.Sqrt(num50 * num50 + num51 * num51) < (double)(num46 + WorldGen.genRand.Next(-1, 2)))
						{
							Main.tile[num48, num49].active(true);
							Main.tile[num48, num49].type = (ushort)num47;
							WorldGen.SquareTileFrame(num48, num49, true);
						}
					}
				}
				for (int num52 = num44 - num46 + 2; num52 <= num44 + num46 - 2; num52++)
				{
					int num53 = num45 - num46;
					while (!Main.tile[num52, num53].active())
					{
						num53++;
					}
					if (WorldGen.WillWaterPlacedHereStayPut(num52, num53))
					{
						Main.tile[num52, num53].active(false);
						Main.tile[num52, num53].liquid = byte.MaxValue;
						WorldGen.SquareTileFrame(num52, num53, true);
					}
				}
			}
		}

		// Token: 0x0600102C RID: 4140 RVA: 0x00470264 File Offset: 0x0046E464
		public static void CloudIsland(int i, int j)
		{
			double num = (double)WorldGen.genRand.Next(100, 150);
			double num2 = (double)WorldGen.genRand.Next(20, 30);
			int num3 = i;
			int num4 = i;
			int num5 = i;
			int num6 = j;
			Vector2D vector2D;
			vector2D.X = (double)i;
			vector2D.Y = (double)j;
			Vector2D vector2D2;
			vector2D2.X = (double)WorldGen.genRand.Next(-20, 21) * 0.2;
			while (vector2D2.X > -2.0 && vector2D2.X < 2.0)
			{
				vector2D2.X = (double)WorldGen.genRand.Next(-20, 21) * 0.2;
			}
			vector2D2.Y = (double)WorldGen.genRand.Next(-20, -10) * 0.02;
			while (num > 0.0 && num2 > 0.0)
			{
				num -= (double)WorldGen.genRand.Next(4);
				num2 -= 1.0;
				int num7 = (int)(vector2D.X - num * 0.5);
				int num8 = (int)(vector2D.X + num * 0.5);
				int num9 = (int)(vector2D.Y - num * 0.5);
				int num10 = (int)(vector2D.Y + num * 0.5);
				if (num7 < 0)
				{
					num7 = 0;
				}
				if (num8 > Main.maxTilesX)
				{
					num8 = Main.maxTilesX;
				}
				if (num9 < 0)
				{
					num9 = 0;
				}
				if (num10 > Main.maxTilesY)
				{
					num10 = Main.maxTilesY;
				}
				double num11 = num * (double)WorldGen.genRand.Next(80, 120) * 0.01;
				double num12 = vector2D.Y + 1.0;
				for (int k = num7; k < num8; k++)
				{
					if (WorldGen.genRand.Next(2) == 0)
					{
						num12 += (double)WorldGen.genRand.Next(-1, 2);
					}
					if (num12 < vector2D.Y)
					{
						num12 = vector2D.Y;
					}
					if (num12 > vector2D.Y + 2.0)
					{
						num12 = vector2D.Y + 2.0;
					}
					for (int l = num9; l < num10; l++)
					{
						if ((double)l > num12)
						{
							double num13 = Math.Abs((double)k - vector2D.X);
							double num14 = Math.Abs((double)l - vector2D.Y) * 3.0;
							if (Math.Sqrt(num13 * num13 + num14 * num14) < num11 * 0.4)
							{
								if (k < num3)
								{
									num3 = k;
								}
								if (k > num4)
								{
									num4 = k;
								}
								if (l < num5)
								{
									num5 = l;
								}
								if (l > num6)
								{
									num6 = l;
								}
								Main.tile[k, l].active(true);
								Main.tile[k, l].type = 189;
								WorldGen.SquareTileFrame(k, l, true);
							}
						}
					}
				}
				vector2D += vector2D2;
				vector2D2.X += (double)WorldGen.genRand.Next(-20, 21) * 0.05;
				if (vector2D2.X > 1.0)
				{
					vector2D2.X = 1.0;
				}
				if (vector2D2.X < -1.0)
				{
					vector2D2.X = -1.0;
				}
				if (vector2D2.Y > 0.2)
				{
					vector2D2.Y = -0.2;
				}
				if (vector2D2.Y < -0.2)
				{
					vector2D2.Y = -0.2;
				}
			}
			int m = num3;
			int num16;
			for (m += WorldGen.genRand.Next(5); m < num4; m += WorldGen.genRand.Next(num16, (int)((double)num16 * 1.5)))
			{
				int num15 = num6;
				while (!Main.tile[m, num15].active())
				{
					num15--;
				}
				num15 += WorldGen.genRand.Next(-3, 4);
				num16 = WorldGen.genRand.Next(4, 8);
				int num17 = 189;
				if (WorldGen.genRand.Next(4) == 0)
				{
					num17 = 196;
				}
				for (int n = m - num16; n <= m + num16; n++)
				{
					for (int num18 = num15 - num16; num18 <= num15 + num16; num18++)
					{
						if (num18 > num5)
						{
							double num19 = (double)Math.Abs(n - m);
							double num20 = (double)(Math.Abs(num18 - num15) * 2);
							if (Math.Sqrt(num19 * num19 + num20 * num20) < (double)(num16 + WorldGen.genRand.Next(2)))
							{
								Main.tile[n, num18].active(true);
								Main.tile[n, num18].type = (ushort)num17;
								WorldGen.SquareTileFrame(n, num18, true);
							}
						}
					}
				}
			}
			num = (double)WorldGen.genRand.Next(80, 95);
			num2 = (double)WorldGen.genRand.Next(10, 15);
			vector2D.X = (double)i;
			vector2D.Y = (double)num5;
			vector2D2.X = (double)WorldGen.genRand.Next(-20, 21) * 0.2;
			while (vector2D2.X > -2.0 && vector2D2.X < 2.0)
			{
				vector2D2.X = (double)WorldGen.genRand.Next(-20, 21) * 0.2;
			}
			vector2D2.Y = (double)WorldGen.genRand.Next(-20, -10) * 0.02;
			while (num > 0.0 && num2 > 0.0)
			{
				num -= (double)WorldGen.genRand.Next(4);
				num2 -= 1.0;
				int num7 = (int)(vector2D.X - num * 0.5);
				int num8 = (int)(vector2D.X + num * 0.5);
				int num9 = num5 - 1;
				int num10 = (int)(vector2D.Y + num * 0.5);
				if (num7 < 0)
				{
					num7 = 0;
				}
				if (num8 > Main.maxTilesX)
				{
					num8 = Main.maxTilesX;
				}
				if (num9 < 0)
				{
					num9 = 0;
				}
				if (num10 > Main.maxTilesY)
				{
					num10 = Main.maxTilesY;
				}
				double num11 = num * (double)WorldGen.genRand.Next(80, 120) * 0.01;
				double num21 = vector2D.Y + 1.0;
				for (int num22 = num7; num22 < num8; num22++)
				{
					if (WorldGen.genRand.Next(2) == 0)
					{
						num21 += (double)WorldGen.genRand.Next(-1, 2);
					}
					if (num21 < vector2D.Y)
					{
						num21 = vector2D.Y;
					}
					if (num21 > vector2D.Y + 2.0)
					{
						num21 = vector2D.Y + 2.0;
					}
					for (int num23 = num9; num23 < num10; num23++)
					{
						if ((double)num23 > num21)
						{
							double num24 = Math.Abs((double)num22 - vector2D.X);
							double num25 = Math.Abs((double)num23 - vector2D.Y) * 3.0;
							if (Math.Sqrt(num24 * num24 + num25 * num25) < num11 * 0.4 && Main.tile[num22, num23].type == 189)
							{
								Main.tile[num22, num23].type = 0;
								WorldGen.SquareTileFrame(num22, num23, true);
							}
						}
					}
				}
				vector2D += vector2D2;
				vector2D2.X += (double)WorldGen.genRand.Next(-20, 21) * 0.05;
				if (vector2D2.X > 1.0)
				{
					vector2D2.X = 1.0;
				}
				if (vector2D2.X < -1.0)
				{
					vector2D2.X = -1.0;
				}
				if (vector2D2.Y > 0.2)
				{
					vector2D2.Y = -0.2;
				}
				if (vector2D2.Y < -0.2)
				{
					vector2D2.Y = -0.2;
				}
			}
			int num26 = num3;
			num26 += WorldGen.genRand.Next(5);
			while (num26 < num4)
			{
				int num27 = num6;
				while ((!Main.tile[num26, num27].active() || Main.tile[num26, num27].type != 0) && num26 < num4)
				{
					num27--;
					if (num27 < num5)
					{
						num27 = num6;
						num26 += WorldGen.genRand.Next(1, 4);
					}
				}
				if (num26 < num4)
				{
					num27 += WorldGen.genRand.Next(0, 4);
					int num28 = WorldGen.genRand.Next(2, 5);
					int num29 = 189;
					for (int num30 = num26 - num28; num30 <= num26 + num28; num30++)
					{
						for (int num31 = num27 - num28; num31 <= num27 + num28; num31++)
						{
							if (num31 > num5)
							{
								double num32 = (double)Math.Abs(num30 - num26);
								double num33 = (double)(Math.Abs(num31 - num27) * 2);
								if (Math.Sqrt(num32 * num32 + num33 * num33) < (double)num28)
								{
									Main.tile[num30, num31].type = (ushort)num29;
									WorldGen.SquareTileFrame(num30, num31, true);
								}
							}
						}
					}
					num26 += WorldGen.genRand.Next(num28, (int)((double)num28 * 1.5));
				}
			}
			for (int num34 = num3 - 20; num34 <= num4 + 20; num34++)
			{
				for (int num35 = num5 - 20; num35 <= num6 + 20; num35++)
				{
					bool flag = true;
					for (int num36 = num34 - 1; num36 <= num34 + 1; num36++)
					{
						for (int num37 = num35 - 1; num37 <= num35 + 1; num37++)
						{
							if (!Main.tile[num36, num37].active())
							{
								flag = false;
							}
						}
					}
					if (flag)
					{
						Main.tile[num34, num35].wall = 73;
						WorldGen.SquareWallFrame(num34, num35, true);
					}
				}
			}
			for (int num38 = num3; num38 <= num4; num38++)
			{
				int num39 = num5 - 10;
				while (!Main.tile[num38, num39 + 1].active())
				{
					num39++;
				}
				if (num39 < num6 && Main.tile[num38, num39 + 1].type == 189)
				{
					if (WorldGen.genRand.Next(10) == 0)
					{
						int num40 = WorldGen.genRand.Next(1, 3);
						for (int num41 = num38 - num40; num41 <= num38 + num40; num41++)
						{
							if (Main.tile[num41, num39].type == 189 && WorldGen.WillWaterPlacedHereStayPut(num41, num39))
							{
								Main.tile[num41, num39].active(false);
								Main.tile[num41, num39].liquid = byte.MaxValue;
								Main.tile[num41, num39].lava(false);
								WorldGen.SquareTileFrame(num38, num39, true);
							}
							if (Main.tile[num41, num39 + 1].type == 189 && WorldGen.WillWaterPlacedHereStayPut(num41, num39 + 1))
							{
								Main.tile[num41, num39 + 1].active(false);
								Main.tile[num41, num39 + 1].liquid = byte.MaxValue;
								Main.tile[num41, num39 + 1].lava(false);
								WorldGen.SquareTileFrame(num38, num39 + 1, true);
							}
							if (num41 > num38 - num40 && num41 < num38 + 2 && Main.tile[num41, num39 + 2].type == 189 && WorldGen.WillWaterPlacedHereStayPut(num41, num39 + 2))
							{
								Main.tile[num41, num39 + 2].active(false);
								Main.tile[num41, num39 + 2].liquid = byte.MaxValue;
								Main.tile[num41, num39 + 2].lava(false);
								WorldGen.SquareTileFrame(num38, num39 + 2, true);
							}
						}
					}
					if (WorldGen.genRand.Next(5) == 0 && WorldGen.WillWaterPlacedHereStayPut(num38, num39))
					{
						Main.tile[num38, num39].liquid = byte.MaxValue;
					}
					Main.tile[num38, num39].lava(false);
					WorldGen.SquareTileFrame(num38, num39, true);
				}
			}
			int num42 = WorldGen.genRand.Next(4);
			for (int num43 = 0; num43 <= num42; num43++)
			{
				int num44 = WorldGen.genRand.Next(num3 - 5, num4 + 5);
				int num45 = num5 - WorldGen.genRand.Next(20, 40);
				int num46 = WorldGen.genRand.Next(4, 8);
				int num47 = 189;
				if (WorldGen.genRand.Next(2) == 0)
				{
					num47 = 196;
				}
				for (int num48 = num44 - num46; num48 <= num44 + num46; num48++)
				{
					for (int num49 = num45 - num46; num49 <= num45 + num46; num49++)
					{
						double num50 = (double)Math.Abs(num48 - num44);
						double num51 = (double)(Math.Abs(num49 - num45) * 2);
						if (Math.Sqrt(num50 * num50 + num51 * num51) < (double)(num46 + WorldGen.genRand.Next(-1, 2)))
						{
							Main.tile[num48, num49].active(true);
							Main.tile[num48, num49].type = (ushort)num47;
							WorldGen.SquareTileFrame(num48, num49, true);
						}
					}
				}
				for (int num52 = num44 - num46 + 2; num52 <= num44 + num46 - 2; num52++)
				{
					int num53 = num45 - num46;
					while (!Main.tile[num52, num53].active())
					{
						num53++;
					}
					if (WorldGen.WillWaterPlacedHereStayPut(num52, num53))
					{
						Main.tile[num52, num53].active(false);
						Main.tile[num52, num53].liquid = byte.MaxValue;
						WorldGen.SquareTileFrame(num52, num53, true);
					}
				}
			}
		}

		// Token: 0x0600102D RID: 4141 RVA: 0x004710A0 File Offset: 0x0046F2A0
		public static bool WillWaterPlacedHereStayPut(int x, int y)
		{
			return ((Main.tile[x, y + 1].active() && Main.tileSolid[(int)Main.tile[x, y + 1].type] && !Main.tileSolidTop[(int)Main.tile[x, y + 1].type]) || Main.tile[x, y + 1].liquid == byte.MaxValue) && ((Main.tile[x - 1, y].active() && Main.tileSolid[(int)Main.tile[x - 1, y].type] && !Main.tileSolidTop[(int)Main.tile[x - 1, y].type]) || Main.tile[x - 1, y].liquid == byte.MaxValue) && ((Main.tile[x + 1, y].active() && Main.tileSolid[(int)Main.tile[x + 1, y].type] && !Main.tileSolidTop[(int)Main.tile[x + 1, y].type]) || Main.tile[x + 1, y].liquid == byte.MaxValue);
		}

		// Token: 0x0600102E RID: 4142 RVA: 0x004711E4 File Offset: 0x0046F3E4
		public static void CloudLake(int i, int j)
		{
			double num = (double)WorldGen.genRand.Next(100, 150);
			double num2 = (double)WorldGen.genRand.Next(20, 30);
			int num3 = i;
			int num4 = i;
			int num5 = i;
			int num6 = j;
			Vector2D vector2D;
			vector2D.X = (double)i;
			vector2D.Y = (double)j;
			Vector2D vector2D2;
			vector2D2.X = (double)WorldGen.genRand.Next(-20, 21) * 0.2;
			while (vector2D2.X > -2.0 && vector2D2.X < 2.0)
			{
				vector2D2.X = (double)WorldGen.genRand.Next(-20, 21) * 0.2;
			}
			vector2D2.Y = (double)WorldGen.genRand.Next(-20, -10) * 0.02;
			while (num > 0.0 && num2 > 0.0)
			{
				num -= (double)WorldGen.genRand.Next(4);
				num2 -= 1.0;
				int num7 = (int)(vector2D.X - num * 0.5);
				int num8 = (int)(vector2D.X + num * 0.5);
				int num9 = (int)(vector2D.Y - num * 0.5);
				int num10 = (int)(vector2D.Y + num * 0.5);
				if (num7 < 0)
				{
					num7 = 0;
				}
				if (num8 > Main.maxTilesX)
				{
					num8 = Main.maxTilesX;
				}
				if (num9 < 0)
				{
					num9 = 0;
				}
				if (num10 > Main.maxTilesY)
				{
					num10 = Main.maxTilesY;
				}
				double num11 = num * (double)WorldGen.genRand.Next(80, 120) * 0.01;
				double num12 = vector2D.Y + 1.0;
				for (int k = num7; k < num8; k++)
				{
					if (WorldGen.genRand.Next(2) == 0)
					{
						num12 += (double)WorldGen.genRand.Next(-1, 2);
					}
					if (num12 < vector2D.Y)
					{
						num12 = vector2D.Y;
					}
					if (num12 > vector2D.Y + 2.0)
					{
						num12 = vector2D.Y + 2.0;
					}
					for (int l = num9; l < num10; l++)
					{
						if ((double)l > num12)
						{
							double num13 = Math.Abs((double)k - vector2D.X);
							double num14 = Math.Abs((double)l - vector2D.Y) * 3.0;
							if (Math.Sqrt(num13 * num13 + num14 * num14) < num11 * 0.4)
							{
								if (k < num3)
								{
									num3 = k;
								}
								if (k > num4)
								{
									num4 = k;
								}
								if (l < num5)
								{
									num5 = l;
								}
								if (l > num6)
								{
									num6 = l;
								}
								Main.tile[k, l].active(true);
								Main.tile[k, l].type = 189;
								WorldGen.SquareTileFrame(k, l, true);
							}
						}
					}
				}
				vector2D += vector2D2;
				vector2D2.X += (double)WorldGen.genRand.Next(-20, 21) * 0.05;
				if (vector2D2.X > 1.0)
				{
					vector2D2.X = 1.0;
				}
				if (vector2D2.X < -1.0)
				{
					vector2D2.X = -1.0;
				}
				if (vector2D2.Y > 0.2)
				{
					vector2D2.Y = -0.2;
				}
				if (vector2D2.Y < -0.2)
				{
					vector2D2.Y = -0.2;
				}
			}
			int m = num3;
			int num16;
			for (m += WorldGen.genRand.Next(5); m < num4; m += WorldGen.genRand.Next(num16, (int)((double)num16 * 1.5)))
			{
				int num15 = num6;
				while (!Main.tile[m, num15].active())
				{
					num15--;
				}
				num15 += WorldGen.genRand.Next(-3, 4);
				num16 = WorldGen.genRand.Next(4, 8);
				int num17 = 189;
				if (WorldGen.genRand.Next(4) == 0)
				{
					num17 = 196;
				}
				for (int n = m - num16; n <= m + num16; n++)
				{
					for (int num18 = num15 - num16; num18 <= num15 + num16; num18++)
					{
						if (num18 > num5)
						{
							double num19 = (double)Math.Abs(n - m);
							double num20 = (double)(Math.Abs(num18 - num15) * 2);
							if (Math.Sqrt(num19 * num19 + num20 * num20) < (double)(num16 + WorldGen.genRand.Next(2)))
							{
								Main.tile[n, num18].active(true);
								Main.tile[n, num18].type = (ushort)num17;
								WorldGen.SquareTileFrame(n, num18, true);
							}
						}
					}
				}
			}
			num = (double)WorldGen.genRand.Next(80, 95);
			num2 = (double)WorldGen.genRand.Next(10, 15);
			vector2D.X = (double)i;
			vector2D.Y = (double)num5;
			vector2D2.X = (double)WorldGen.genRand.Next(-20, 21) * 0.2;
			while (vector2D2.X > -2.0 && vector2D2.X < 2.0)
			{
				vector2D2.X = (double)WorldGen.genRand.Next(-20, 21) * 0.2;
			}
			vector2D2.Y = (double)WorldGen.genRand.Next(-20, -10) * 0.02;
			while (num > 0.0 && num2 > 0.0)
			{
				num -= (double)WorldGen.genRand.Next(4);
				num2 -= 1.0;
				int num7 = (int)(vector2D.X - num * 0.5);
				int num8 = (int)(vector2D.X + num * 0.5);
				int num9 = num5 - 1;
				int num10 = (int)(vector2D.Y + num * 0.5);
				if (num7 < 0)
				{
					num7 = 0;
				}
				if (num8 > Main.maxTilesX)
				{
					num8 = Main.maxTilesX;
				}
				if (num9 < 0)
				{
					num9 = 0;
				}
				if (num10 > Main.maxTilesY)
				{
					num10 = Main.maxTilesY;
				}
				double num11 = num * (double)WorldGen.genRand.Next(80, 120) * 0.01;
				double num21 = vector2D.Y + 1.0;
				for (int num22 = num7; num22 < num8; num22++)
				{
					if (WorldGen.genRand.Next(2) == 0)
					{
						num21 += (double)WorldGen.genRand.Next(-1, 2);
					}
					if (num21 < vector2D.Y)
					{
						num21 = vector2D.Y;
					}
					if (num21 > vector2D.Y + 2.0)
					{
						num21 = vector2D.Y + 2.0;
					}
					for (int num23 = num9; num23 < num10; num23++)
					{
						if ((double)num23 > num21 - 2.0)
						{
							double num24 = Math.Abs((double)num22 - vector2D.X);
							double num25 = Math.Abs((double)num23 - vector2D.Y) * 3.0;
							if (Math.Sqrt(num24 * num24 + num25 * num25) < num11 * 0.4 && Main.tile[num22, num23].type == 189)
							{
								Main.tile[num22, num23].active(false);
								if ((double)num23 > num21 + 1.0)
								{
									if (WorldGen.WillWaterPlacedHereStayPut(num22, num23))
									{
										Main.tile[num22, num23].liquid = byte.MaxValue;
									}
									Main.tile[num22, num23].honey(false);
									Main.tile[num22, num23].lava(false);
								}
							}
						}
					}
				}
				vector2D += vector2D2;
				vector2D2.X += (double)WorldGen.genRand.Next(-20, 21) * 0.05;
				if (vector2D2.X > 1.0)
				{
					vector2D2.X = 1.0;
				}
				if (vector2D2.X < -1.0)
				{
					vector2D2.X = -1.0;
				}
				if (vector2D2.Y > 0.2)
				{
					vector2D2.Y = -0.2;
				}
				if (vector2D2.Y < 0.0)
				{
					vector2D2.Y = 0.0;
				}
			}
			for (int num26 = num3 - 20; num26 <= num4 + 20; num26++)
			{
				for (int num27 = num5 - 20; num27 <= num6 + 20; num27++)
				{
					bool flag = true;
					for (int num28 = num26 - 1; num28 <= num26 + 1; num28++)
					{
						for (int num29 = num27 - 1; num29 <= num27 + 1; num29++)
						{
							if (!Main.tile[num28, num29].active())
							{
								flag = false;
							}
						}
					}
					if (flag)
					{
						Main.tile[num26, num27].wall = 73;
					}
				}
			}
			for (int num30 = num3; num30 <= num4; num30++)
			{
				int num31 = num5 - 10;
				while (!Main.tile[num30, num31 + 1].active())
				{
					num31++;
				}
				if (num31 < num6 && Main.tile[num30, num31 + 1].type == 189)
				{
					if (WorldGen.genRand.Next(10) == 0)
					{
						int num32 = WorldGen.genRand.Next(1, 3);
						for (int num33 = num30 - num32; num33 <= num30 + num32; num33++)
						{
							if (Main.tile[num33, num31].type == 189 && WorldGen.WillWaterPlacedHereStayPut(num33, num31))
							{
								Main.tile[num33, num31].active(false);
								Main.tile[num33, num31].liquid = byte.MaxValue;
								Main.tile[num33, num31].lava(false);
								WorldGen.SquareTileFrame(num30, num31, true);
							}
							if (Main.tile[num33, num31 + 1].type == 189 && WorldGen.WillWaterPlacedHereStayPut(num33, num31 + 1))
							{
								Main.tile[num33, num31 + 1].active(false);
								Main.tile[num33, num31 + 1].liquid = byte.MaxValue;
								Main.tile[num33, num31 + 1].lava(false);
								WorldGen.SquareTileFrame(num30, num31 + 1, true);
							}
							if (num33 > num30 - num32 && num33 < num30 + 2 && Main.tile[num33, num31 + 2].type == 189 && WorldGen.WillWaterPlacedHereStayPut(num33, num31 + 2))
							{
								Main.tile[num33, num31 + 2].active(false);
								Main.tile[num33, num31 + 2].liquid = byte.MaxValue;
								Main.tile[num33, num31 + 2].lava(false);
								WorldGen.SquareTileFrame(num30, num31 + 2, true);
							}
						}
					}
					if (WorldGen.genRand.Next(5) == 0 && WorldGen.WillWaterPlacedHereStayPut(num30, num31))
					{
						Main.tile[num30, num31].liquid = byte.MaxValue;
					}
					Main.tile[num30, num31].lava(false);
					WorldGen.SquareTileFrame(num30, num31, true);
				}
			}
			int num34 = WorldGen.genRand.Next(1, 4);
			for (int num35 = 0; num35 <= num34; num35++)
			{
				int num36 = WorldGen.genRand.Next(num3 - 5, num4 + 5);
				int num37 = num5 - WorldGen.genRand.Next(20, 40);
				int num38 = WorldGen.genRand.Next(4, 8);
				int num39 = 189;
				if (WorldGen.genRand.Next(4) != 0)
				{
					num39 = 196;
				}
				for (int num40 = num36 - num38; num40 <= num36 + num38; num40++)
				{
					for (int num41 = num37 - num38; num41 <= num37 + num38; num41++)
					{
						double num42 = (double)Math.Abs(num40 - num36);
						double num43 = (double)(Math.Abs(num41 - num37) * 2);
						if (Math.Sqrt(num42 * num42 + num43 * num43) < (double)(num38 + WorldGen.genRand.Next(-1, 2)))
						{
							Main.tile[num40, num41].active(true);
							Main.tile[num40, num41].type = (ushort)num39;
							WorldGen.SquareTileFrame(num40, num41, true);
						}
					}
				}
				for (int num44 = num36 - num38 + 2; num44 <= num36 + num38 - 2; num44++)
				{
					int num45 = num37 - num38;
					while (!Main.tile[num44, num45].active())
					{
						num45++;
					}
					if (WorldGen.WillWaterPlacedHereStayPut(num44, num45))
					{
						Main.tile[num44, num45].active(false);
						Main.tile[num44, num45].liquid = byte.MaxValue;
						WorldGen.SquareTileFrame(num44, num45, true);
					}
				}
			}
		}

		// Token: 0x0600102F RID: 4143 RVA: 0x00471F2C File Offset: 0x0047012C
		public static void FloatingIsland(int i, int j)
		{
			double num = (double)WorldGen.genRand.Next(80, 120);
			double num2 = (double)WorldGen.genRand.Next(20, 25);
			Vector2D vector2D;
			vector2D.X = (double)i;
			vector2D.Y = (double)j;
			Vector2D vector2D2;
			vector2D2.X = (double)WorldGen.genRand.Next(-20, 21) * 0.2;
			while (vector2D2.X > -2.0 && vector2D2.X < 2.0)
			{
				vector2D2.X = (double)WorldGen.genRand.Next(-20, 21) * 0.2;
			}
			vector2D2.Y = (double)WorldGen.genRand.Next(-20, -10) * 0.02;
			while (num > 0.0 && num2 > 0.0)
			{
				num -= (double)WorldGen.genRand.Next(4);
				num2 -= 1.0;
				int num3 = (int)(vector2D.X - num * 0.5);
				int num4 = (int)(vector2D.X + num * 0.5);
				int num5 = (int)(vector2D.Y - num * 0.5);
				int num6 = (int)(vector2D.Y + num * 0.5);
				if (num3 < 0)
				{
					num3 = 0;
				}
				if (num4 > Main.maxTilesX)
				{
					num4 = Main.maxTilesX;
				}
				if (num5 < 0)
				{
					num5 = 0;
				}
				if (num6 > Main.maxTilesY)
				{
					num6 = Main.maxTilesY;
				}
				double num7 = num * (double)WorldGen.genRand.Next(80, 120) * 0.01;
				double num8 = vector2D.Y + 1.0;
				for (int k = num3; k < num4; k++)
				{
					if (WorldGen.genRand.Next(2) == 0)
					{
						num8 += (double)WorldGen.genRand.Next(-1, 2);
					}
					if (num8 < vector2D.Y)
					{
						num8 = vector2D.Y;
					}
					if (num8 > vector2D.Y + 2.0)
					{
						num8 = vector2D.Y + 2.0;
					}
					for (int l = num5; l < num6; l++)
					{
						if ((double)l > num8)
						{
							double num9 = Math.Abs((double)k - vector2D.X);
							double num10 = Math.Abs((double)l - vector2D.Y) * 2.0;
							if (Math.Sqrt(num9 * num9 + num10 * num10) < num7 * 0.4)
							{
								Main.tile[k, l].active(true);
								if (Main.tile[k, l].type == 59)
								{
									Main.tile[k, l].type = 0;
								}
							}
						}
					}
				}
				num3 = (int)(vector2D.X - num * 0.4);
				num4 = (int)(vector2D.X + num * 0.4);
				num5 = (int)(vector2D.Y - num * 0.4);
				num6 = (int)(vector2D.Y + num * 0.4);
				if (num3 < 0)
				{
					num3 = 0;
				}
				if (num4 > Main.maxTilesX)
				{
					num4 = Main.maxTilesX;
				}
				if (num5 < 0)
				{
					num5 = 0;
				}
				if (num6 > Main.maxTilesY)
				{
					num6 = Main.maxTilesY;
				}
				num7 = num * (double)WorldGen.genRand.Next(80, 120) * 0.01;
				for (int m = num3; m < num4; m++)
				{
					for (int n = num5; n < num6; n++)
					{
						if ((double)n > vector2D.Y + 2.0)
						{
							double num11 = Math.Abs((double)m - vector2D.X);
							double num12 = Math.Abs((double)n - vector2D.Y) * 2.0;
							if (Math.Sqrt(num11 * num11 + num12 * num12) < num7 * 0.4)
							{
								Main.tile[m, n].wall = 2;
							}
						}
					}
				}
				vector2D += vector2D2;
				vector2D2.Y += (double)WorldGen.genRand.Next(-10, 11) * 0.05;
				if (vector2D2.X > 1.0)
				{
					vector2D2.X = 1.0;
				}
				if (vector2D2.X < -1.0)
				{
					vector2D2.X = -1.0;
				}
				if (vector2D2.Y > 0.2)
				{
					vector2D2.Y = -0.2;
				}
				if (vector2D2.Y < -0.2)
				{
					vector2D2.Y = -0.2;
				}
			}
		}

		// Token: 0x06001030 RID: 4144 RVA: 0x004723E4 File Offset: 0x004705E4
		public static void Caverer(int X, int Y)
		{
			int num = WorldGen.genRand.Next(2);
			if (num == 0)
			{
				int num2 = WorldGen.genRand.Next(7, 9);
				double num3 = (double)WorldGen.genRand.Next(100) * 0.01;
				double num4 = 1.0 - num3;
				if (WorldGen.genRand.Next(2) == 0)
				{
					num3 = -num3;
				}
				if (WorldGen.genRand.Next(2) == 0)
				{
					num4 = -num4;
				}
				Vector2D vector2D;
				vector2D..ctor((double)X, (double)Y);
				for (int i = 0; i < num2; i++)
				{
					vector2D = WorldGen.digTunnel(vector2D.X, vector2D.Y, num3, num4, WorldGen.genRand.Next(6, 20), WorldGen.genRand.Next(4, 9), false);
					num3 += (double)WorldGen.genRand.Next(-20, 21) * 0.1;
					num4 += (double)WorldGen.genRand.Next(-20, 21) * 0.1;
					if (num3 < -1.5)
					{
						num3 = -1.5;
					}
					if (num3 > 1.5)
					{
						num3 = 1.5;
					}
					if (num4 < -1.5)
					{
						num4 = -1.5;
					}
					if (num4 > 1.5)
					{
						num4 = 1.5;
					}
					double num5 = (double)WorldGen.genRand.Next(100) * 0.01;
					double num6 = 1.0 - num5;
					if (WorldGen.genRand.Next(2) == 0)
					{
						num5 = -num5;
					}
					if (WorldGen.genRand.Next(2) == 0)
					{
						num6 = -num6;
					}
					Vector2D vector2D2 = WorldGen.digTunnel(vector2D.X, vector2D.Y, num5, num6, WorldGen.genRand.Next(30, 50), WorldGen.genRand.Next(3, 6), false);
					WorldGen.TileRunner((int)vector2D2.X, (int)vector2D2.Y, (double)WorldGen.genRand.Next(10, 20), WorldGen.genRand.Next(5, 10), -1, false, 0.0, 0.0, false, true, -1);
				}
				return;
			}
			if (num == 1)
			{
				int num7 = WorldGen.genRand.Next(15, 30);
				double num8 = (double)WorldGen.genRand.Next(100) * 0.01;
				double num9 = 1.0 - num8;
				if (WorldGen.genRand.Next(2) == 0)
				{
					num8 = -num8;
				}
				if (WorldGen.genRand.Next(2) == 0)
				{
					num9 = -num9;
				}
				Vector2D vector2D3;
				vector2D3..ctor((double)X, (double)Y);
				for (int j = 0; j < num7; j++)
				{
					vector2D3 = WorldGen.digTunnel(vector2D3.X, vector2D3.Y, num8, num9, WorldGen.genRand.Next(5, 15), WorldGen.genRand.Next(2, 6), true);
					num8 += (double)WorldGen.genRand.Next(-20, 21) * 0.1;
					num9 += (double)WorldGen.genRand.Next(-20, 21) * 0.1;
					if (num8 < -1.5)
					{
						num8 = -1.5;
					}
					if (num8 > 1.5)
					{
						num8 = 1.5;
					}
					if (num9 < -1.5)
					{
						num9 = -1.5;
					}
					if (num9 > 1.5)
					{
						num9 = 1.5;
					}
				}
			}
		}

		// Token: 0x06001031 RID: 4145 RVA: 0x00472754 File Offset: 0x00470954
		public static Vector2D digTunnel(double X, double Y, double xDir, double yDir, int Steps, int Size, bool Wet = false)
		{
			double num = X;
			double num2 = Y;
			try
			{
				double num3 = 0.0;
				double num4 = 0.0;
				double num5 = (double)Size;
				num = Utils.Clamp<double>(num, num5 + 1.0, (double)Main.maxTilesX - num5 - 1.0);
				num2 = Utils.Clamp<double>(num2, num5 + 1.0, (double)Main.maxTilesY - num5 - 1.0);
				for (int i = 0; i < Steps; i++)
				{
					int num6 = (int)(num - num5);
					while ((double)num6 <= num + num5)
					{
						int num7 = (int)(num2 - num5);
						while ((double)num7 <= num2 + num5)
						{
							if (Math.Abs((double)num6 - num) + Math.Abs((double)num7 - num2) < num5 * (1.0 + (double)WorldGen.genRand.Next(-10, 11) * 0.005) && num6 >= 0 && num6 < Main.maxTilesX && num7 >= 0 && num7 < Main.maxTilesY)
							{
								Main.tile[num6, num7].active(false);
								if (Wet)
								{
									Main.tile[num6, num7].liquid = byte.MaxValue;
								}
							}
							num7++;
						}
						num6++;
					}
					num5 += (double)WorldGen.genRand.Next(-50, 51) * 0.03;
					if (num5 < (double)Size * 0.6)
					{
						num5 = (double)Size * 0.6;
					}
					if (num5 > (double)(Size * 2))
					{
						num5 = (double)(Size * 2);
					}
					num3 += (double)WorldGen.genRand.Next(-20, 21) * 0.01;
					num4 += (double)WorldGen.genRand.Next(-20, 21) * 0.01;
					if (num3 < -1.0)
					{
						num3 = -1.0;
					}
					if (num3 > 1.0)
					{
						num3 = 1.0;
					}
					if (num4 < -1.0)
					{
						num4 = -1.0;
					}
					if (num4 > 1.0)
					{
						num4 = 1.0;
					}
					num += (xDir + num3) * 0.6;
					num2 += (yDir + num4) * 0.6;
				}
			}
			catch
			{
			}
			return new Vector2D(num, num2);
		}

		// Token: 0x06001032 RID: 4146 RVA: 0x004729D0 File Offset: 0x00470BD0
		public static void IslandHouse(int i, int j, int islandStyle)
		{
			bool flag = WorldGen.crimson;
			if (WorldGen.drunkWorldGen)
			{
				flag = ((GenVars.crimsonLeft && i < Main.maxTilesX / 2) || (!GenVars.crimsonLeft && i > Main.maxTilesX / 2));
			}
			byte type = 202;
			byte wall = 82;
			Vector2D vector2D;
			vector2D..ctor((double)i, (double)j);
			int num = 1;
			if (WorldGen.genRand.Next(2) == 0)
			{
				num = -1;
			}
			int num2 = WorldGen.genRand.Next(7, 12);
			int num3 = WorldGen.genRand.Next(5, 7);
			vector2D.X = (double)(i + (num2 + 2) * num);
			for (int k = j - 15; k < j + 30; k++)
			{
				if (Main.tile[(int)vector2D.X, k].active())
				{
					vector2D.Y = (double)(k - 1);
					break;
				}
			}
			vector2D.X = (double)i;
			int num4 = (int)(vector2D.X - (double)num2 - 1.0);
			int num5 = (int)(vector2D.X + (double)num2 + 1.0);
			int num6 = (int)(vector2D.Y - (double)num3 - 1.0);
			int num7 = (int)(vector2D.Y + 2.0);
			if (num4 < 0)
			{
				num4 = 0;
			}
			if (num5 > Main.maxTilesX)
			{
				num5 = Main.maxTilesX;
			}
			if (num6 < 0)
			{
				num6 = 0;
			}
			if (num7 > Main.maxTilesY)
			{
				num7 = Main.maxTilesY;
			}
			for (int l = num4; l <= num5; l++)
			{
				for (int m = num6 - 1; m < num7 + 1; m++)
				{
					if (m != num6 - 1 || (l != num4 && l != num5))
					{
						Main.tile[l, m].active(true);
						Main.tile[l, m].liquid = 0;
						Main.tile[l, m].type = (ushort)type;
						Main.tile[l, m].wall = 0;
						Main.tile[l, m].halfBrick(false);
						Main.tile[l, m].slope(0);
					}
				}
			}
			num4 = (int)(vector2D.X - (double)num2);
			num5 = (int)(vector2D.X + (double)num2);
			num6 = (int)(vector2D.Y - (double)num3);
			num7 = (int)(vector2D.Y + 1.0);
			if (num4 < 0)
			{
				num4 = 0;
			}
			if (num5 > Main.maxTilesX)
			{
				num5 = Main.maxTilesX;
			}
			if (num6 < 0)
			{
				num6 = 0;
			}
			if (num7 > Main.maxTilesY)
			{
				num7 = Main.maxTilesY;
			}
			for (int n = num4; n <= num5; n++)
			{
				for (int num8 = num6; num8 < num7; num8++)
				{
					if ((num8 != num6 || (n != num4 && n != num5)) && Main.tile[n, num8].wall == 0)
					{
						Main.tile[n, num8].active(false);
						Main.tile[n, num8].wall = (ushort)wall;
					}
				}
			}
			int num9 = i + (num2 + 1) * num;
			int num10 = (int)vector2D.Y;
			for (int num11 = num9 - 2; num11 <= num9 + 2; num11++)
			{
				Main.tile[num11, num10].active(false);
				Main.tile[num11, num10 - 1].active(false);
				Main.tile[num11, num10 - 2].active(false);
			}
			if (WorldGen.remixWorldGen)
			{
				if (flag)
				{
					WorldGen.PlaceTile(num9, num10, 10, true, false, -1, 5);
				}
				else
				{
					WorldGen.PlaceTile(num9, num10, 10, true, false, -1, 38);
				}
			}
			else
			{
				WorldGen.PlaceTile(num9, num10, 10, true, false, -1, 9);
			}
			num9 = i + (num2 + 1) * -num - num;
			for (int num12 = num6; num12 <= num7 + 1; num12++)
			{
				Main.tile[num9, num12].active(true);
				Main.tile[num9, num12].liquid = 0;
				Main.tile[num9, num12].type = (ushort)type;
				Main.tile[num9, num12].wall = 0;
				Main.tile[num9, num12].halfBrick(false);
				Main.tile[num9, num12].slope(0);
			}
			int contain = 0;
			int num13 = GenVars.skyIslandHouseCount;
			if (num13 > 3)
			{
				num13 = WorldGen.genRand.Next(4);
			}
			if (num13 == 0)
			{
				contain = 159;
			}
			else if (num13 == 1)
			{
				contain = 65;
			}
			else if (num13 == 2)
			{
				contain = 158;
			}
			else if (num13 == 3)
			{
				contain = 2219;
			}
			if (WorldGen.getGoodWorldGen)
			{
				WorldGen.AddBuriedChest(i, num10 - 3, contain, false, 2, false, 0);
			}
			else
			{
				WorldGen.AddBuriedChest(i, num10 - 3, contain, false, 13, false, 0);
			}
			if (islandStyle > 0)
			{
				for (int num14 = 0; num14 < 100000; num14++)
				{
					int num15 = i + WorldGen.genRand.Next(-50, 51);
					int num16 = num10 + WorldGen.genRand.Next(21);
					if ((num14 >= 50000 || Main.tile[num15, num16].type != 202) && !Main.tile[num15, num16].active())
					{
						WorldGen.Place2xX(num15, num16, 207, islandStyle);
						if (Main.tile[num15, num16].active())
						{
							WorldGen.SwitchFountain(num15, num16);
							break;
						}
					}
				}
			}
			GenVars.skyIslandHouseCount++;
			if (!WorldGen.remixWorldGen)
			{
				int num17 = i - num2 / 2 + 1;
				int num18 = i + num2 / 2 - 1;
				int num19 = 1;
				if (num2 > 10)
				{
					num19 = 2;
				}
				int num20 = (num6 + num7) / 2 - 1;
				for (int num21 = num17 - num19; num21 <= num17 + num19; num21++)
				{
					for (int num22 = num20 - 1; num22 <= num20 + 1; num22++)
					{
						Main.tile[num21, num22].wall = 21;
					}
				}
				for (int num23 = num18 - num19; num23 <= num18 + num19; num23++)
				{
					for (int num24 = num20 - 1; num24 <= num20 + 1; num24++)
					{
						Main.tile[num23, num24].wall = 21;
					}
				}
			}
			int num25 = i + (num2 / 2 + 1) * -num;
			if (WorldGen.remixWorldGen)
			{
				if (flag)
				{
					WorldGen.PlaceTile(num25, num7 - 1, 14, true, false, -1, 5);
					WorldGen.PlaceTile(num25 - 2, num7 - 1, 15, true, false, 0, 8);
					WorldGen.PlaceTile(num25 + 2, num7 - 1, 15, true, false, 0, 8);
				}
				else
				{
					WorldGen.PlaceTile(num25, num7 - 1, 469, true, false, -1, 2);
					WorldGen.PlaceTile(num25 - 2, num7 - 1, 15, true, false, 0, 38);
					WorldGen.PlaceTile(num25 + 2, num7 - 1, 15, true, false, 0, 38);
				}
			}
			else
			{
				WorldGen.PlaceTile(num25, num7 - 1, 14, true, false, -1, 7);
				WorldGen.PlaceTile(num25 - 2, num7 - 1, 15, true, false, 0, 10);
				WorldGen.PlaceTile(num25 + 2, num7 - 1, 15, true, false, 0, 10);
			}
			Tile tile = Main.tile[num25 - 2, num7 - 1];
			tile.frameX += 18;
			Tile tile2 = Main.tile[num25 - 2, num7 - 2];
			tile2.frameX += 18;
			if (!WorldGen.remixWorldGen)
			{
				int i2 = num4 + 1;
				int j2 = num6;
				WorldGen.PlaceTile(i2, j2, 91, true, false, -1, WorldGen.genRand.Next(7, 10));
				i2 = num5 - 1;
				j2 = num6;
				WorldGen.PlaceTile(i2, j2, 91, true, false, -1, WorldGen.genRand.Next(7, 10));
				if (num > 0)
				{
					i2 = num4;
					j2 = num6 + 1;
				}
				else
				{
					i2 = num5;
					j2 = num6 + 1;
				}
				WorldGen.PlaceTile(i2, j2, 91, true, false, -1, WorldGen.genRand.Next(7, 10));
			}
			if (islandStyle == 1)
			{
				int num26 = WorldGen.genRand.Next(3, 6);
				for (int num27 = 0; num27 < 100000; num27++)
				{
					int num28 = i + WorldGen.genRand.Next(-50, 51);
					int num29 = num10 + WorldGen.genRand.Next(-10, 21);
					if (!Main.tile[num28, num29].active())
					{
						WorldGen.GrowPalmTree(num28, num29 + 1);
						if (Main.tile[num28, num29].active())
						{
							num26--;
						}
					}
					if (num26 <= 0)
					{
						break;
					}
				}
			}
		}

		// Token: 0x06001033 RID: 4147 RVA: 0x00473240 File Offset: 0x00471440
		public static void Mountinater(int i, int j)
		{
			double num = (double)WorldGen.genRand.Next(80, 120);
			double num2 = num;
			double num3 = (double)WorldGen.genRand.Next(40, 55);
			if (WorldGen.remixWorldGen)
			{
				num2 *= 1.5;
				num3 *= 1.5;
			}
			Vector2D vector2D;
			vector2D.X = (double)i;
			vector2D.Y = (double)j + num3 / 2.0;
			Vector2D vector2D2;
			vector2D2.X = (double)WorldGen.genRand.Next(-10, 11) * 0.1;
			vector2D2.Y = (double)WorldGen.genRand.Next(-20, -10) * 0.1;
			while (num > 0.0 && num3 > 0.0)
			{
				num -= (double)WorldGen.genRand.Next(4);
				num3 -= 1.0;
				int num4 = (int)(vector2D.X - num * 0.5);
				int num5 = (int)(vector2D.X + num * 0.5);
				int num6 = (int)(vector2D.Y - num * 0.5);
				int num7 = (int)(vector2D.Y + num * 0.5);
				if (num4 < 0)
				{
					num4 = 0;
				}
				if (num5 > Main.maxTilesX)
				{
					num5 = Main.maxTilesX;
				}
				if (num6 < 0)
				{
					num6 = 0;
				}
				if (num7 > Main.maxTilesY)
				{
					num7 = Main.maxTilesY;
				}
				num2 = num * (double)WorldGen.genRand.Next(80, 120) * 0.01;
				for (int k = num4; k < num5; k++)
				{
					for (int l = num6; l < num7; l++)
					{
						double num8 = Math.Abs((double)k - vector2D.X);
						double num9 = Math.Abs((double)l - vector2D.Y);
						if (Math.Sqrt(num8 * num8 + num9 * num9) < num2 * 0.4 && !Main.tile[k, l].active())
						{
							Main.tile[k, l].active(true);
							Main.tile[k, l].type = 0;
						}
					}
				}
				vector2D += vector2D2;
				vector2D2.X += (double)WorldGen.genRand.Next(-10, 11) * 0.05;
				vector2D2.Y += (double)WorldGen.genRand.Next(-10, 11) * 0.05;
				if (vector2D2.X > 0.5)
				{
					vector2D2.X = 0.5;
				}
				if (vector2D2.X < -0.5)
				{
					vector2D2.X = -0.5;
				}
				if (vector2D2.Y > -0.5)
				{
					vector2D2.Y = -0.5;
				}
				if (vector2D2.Y < -1.5)
				{
					vector2D2.Y = -1.5;
				}
			}
		}

		// Token: 0x06001034 RID: 4148 RVA: 0x00473550 File Offset: 0x00471750
		public static void MakeWateryIceThing(int i, int j)
		{
			if (Main.tile[i, j].liquid > 0 && !Main.tile[i, j].active() && (!Main.tile[i, j].lava() || Main.remixWorld))
			{
				int num = j;
				while (!Main.tile[i, num].active() && Main.tile[i, num].liquid > 0)
				{
					num++;
					if (num > Main.maxTilesY - 50)
					{
						return;
					}
				}
				if (Main.tile[i, num].type == 147 || Main.tile[i, num].type == 161)
				{
					num--;
					while (Main.tile[i, num].liquid > 0)
					{
						num--;
						if (num < 10)
						{
							return;
						}
					}
					if (Main.tile[i, num].active())
					{
						return;
					}
					num++;
					if (Main.tile[i, num].active())
					{
						return;
					}
					int num2 = i;
					while (!Main.tile[num2, num].active() && Main.tile[num2, num].liquid > 0 && Main.tile[num2, num - 1].liquid == 0 && !Main.tile[num2, num - 1].active() && !Main.tile[num2 - 1, num].halfBrick())
					{
						WorldGen.PlaceTile(num2, num, 162, true, false, -1, 0);
						num2--;
					}
					num2 = i + 1;
					while (!Main.tile[num2, num].active() && Main.tile[num2, num].liquid > 0 && Main.tile[num2, num - 1].liquid == 0 && !Main.tile[num2, num - 1].active() && !Main.tile[num2 + 1, num].halfBrick())
					{
						WorldGen.PlaceTile(num2, num, 162, true, false, -1, 0);
						num2++;
					}
				}
			}
		}

		// Token: 0x06001035 RID: 4149 RVA: 0x00473768 File Offset: 0x00471968
		public static void Lakinater(int i, int j, double strengthMultiplier = 1.0)
		{
			double num = (double)WorldGen.genRand.Next(25, 50) * strengthMultiplier;
			double num2 = num;
			double num3 = (double)WorldGen.genRand.Next(30, 80);
			if (WorldGen.genRand.Next(5) == 0)
			{
				num *= 1.5;
				num2 *= 1.5;
				num3 *= 1.2;
			}
			Vector2D vector2D;
			vector2D.X = (double)i;
			vector2D.Y = (double)j - num3 * 0.3;
			Vector2D vector2D2;
			vector2D2.X = (double)WorldGen.genRand.Next(-10, 11) * 0.1;
			vector2D2.Y = (double)WorldGen.genRand.Next(-20, -10) * 0.1;
			while (num > 0.0 && num3 > 0.0)
			{
				if (vector2D.Y + num2 * 0.5 > Main.worldSurface)
				{
					num3 = 0.0;
				}
				num -= (double)WorldGen.genRand.Next(3);
				num3 -= 1.0;
				int num4 = (int)(vector2D.X - num * 0.5);
				int num5 = (int)(vector2D.X + num * 0.5);
				int num6 = (int)(vector2D.Y - num * 0.5);
				int num7 = (int)(vector2D.Y + num * 0.5);
				if (num4 < 0)
				{
					num4 = 0;
				}
				if (num5 > Main.maxTilesX)
				{
					num5 = Main.maxTilesX;
				}
				if (num6 < 0)
				{
					num6 = 0;
				}
				if (num7 > Main.maxTilesY)
				{
					num7 = Main.maxTilesY;
				}
				num2 = num * (double)WorldGen.genRand.Next(80, 120) * 0.01;
				for (int k = num4; k < num5; k++)
				{
					for (int l = num6; l < num7; l++)
					{
						double num8 = Math.Abs((double)k - vector2D.X);
						double num9 = Math.Abs((double)l - vector2D.Y);
						if (Math.Sqrt(num8 * num8 + num9 * num9) < num2 * 0.4)
						{
							if (Main.tile[k, l].active())
							{
								Main.tile[k, l].liquid = byte.MaxValue;
							}
							Main.tile[k, l].active(false);
						}
					}
				}
				vector2D += vector2D2;
				vector2D2.X += (double)WorldGen.genRand.Next(-10, 11) * 0.05;
				vector2D2.Y += (double)WorldGen.genRand.Next(-10, 11) * 0.05;
				if (vector2D2.X > 0.5)
				{
					vector2D2.X = 0.5;
				}
				if (vector2D2.X < -0.5)
				{
					vector2D2.X = -0.5;
				}
				if (vector2D2.Y > 1.5)
				{
					vector2D2.Y = 1.5;
				}
				if (vector2D2.Y < 0.5)
				{
					vector2D2.Y = 0.5;
				}
			}
		}

		// Token: 0x06001036 RID: 4150 RVA: 0x00473AB8 File Offset: 0x00471CB8
		public static void SonOfLakinater(int i, int j, double strengthMultiplier = 1.0)
		{
			bool lava = false;
			if (WorldGen.getGoodWorldGen && WorldGen.genRand.Next(3) == 0)
			{
				lava = true;
			}
			double num = (double)WorldGen.genRand.Next(15, 31) * strengthMultiplier;
			double num2 = (double)WorldGen.genRand.Next(30, 61);
			if (WorldGen.genRand.Next(5) == 0)
			{
				num *= 1.3;
				num2 *= 1.3;
			}
			if (WorldGen.drunkWorldGen)
			{
				num *= 1.3;
				num2 *= 1.3;
			}
			Vector2D vector2D;
			vector2D.X = (double)i;
			vector2D.Y = (double)j;
			double num3 = WorldGen.genRand.NextDouble() * 0.002;
			Vector2D vector2D2;
			if (WorldGen.genRand.Next(4) != 0)
			{
				vector2D2.X = (double)WorldGen.genRand.Next(-15, 16) * 0.01;
			}
			else
			{
				vector2D2.X = (double)WorldGen.genRand.Next(-50, 51) * 0.01;
				num3 = WorldGen.genRand.NextDouble() * 0.004 + 0.001;
			}
			vector2D2.Y = (double)WorldGen.genRand.Next(101) * 0.01;
			double num4 = num2;
			while (num > 3.0 && num2 > 0.0)
			{
				num -= (double)WorldGen.genRand.Next(11) * 0.1;
				num2 -= 1.0;
				int num5 = (int)(vector2D.X - num * 4.0);
				int num6 = (int)(vector2D.X + num * 4.0);
				int num7 = (int)(vector2D.Y - num * 3.0);
				int num8 = (int)(vector2D.Y + num * 2.0);
				if (num5 < 0)
				{
					num5 = 0;
				}
				if (num6 > Main.maxTilesX)
				{
					num6 = Main.maxTilesX;
				}
				if (num7 < 0)
				{
					num7 = 0;
				}
				if (num8 > Main.maxTilesY)
				{
					num8 = Main.maxTilesY;
				}
				double num9 = num;
				for (int k = num5; k < num6; k++)
				{
					for (int l = num7; l < num8; l++)
					{
						double num10 = Math.Abs((double)k - vector2D.X) * 0.6;
						double num11 = Math.Abs((double)l - vector2D.Y) * 1.4;
						double value = Math.Abs((double)k - vector2D.X) * 0.3;
						double value2 = Math.Abs((double)l - vector2D.Y) * 5.0;
						num10 = Utils.Lerp(num10, value, num2 / num4);
						num11 = Utils.Lerp(num11, value2, num2 / num4);
						double num12 = Math.Sqrt(num10 * num10 + num11 * num11);
						int num13 = j + 5;
						if (num12 < num9 * 0.4)
						{
							if (l >= j)
							{
								if (l <= j + 1)
								{
									if (WorldGen.WillWaterPlacedHereStayPut(k, l))
									{
										Main.tile[k, l].liquid = byte.MaxValue;
										Main.tile[k, l].lava(lava);
									}
								}
								else
								{
									Main.tile[k, l].liquid = byte.MaxValue;
									Main.tile[k, l].lava(lava);
								}
							}
							Main.tile[k, l].active(false);
							if (!WorldGen.gen)
							{
								WorldGen.SquareTileFrame(k, l, true);
							}
							if (Main.tile[k, l].type == 59 || Main.tile[k, l].type == 60)
							{
								WorldGen.SpreadGrass(k - 1, l, 59, 60, true, default(TileColorCache));
								WorldGen.SpreadGrass(k + 1, l, 59, 60, true, default(TileColorCache));
								WorldGen.SpreadGrass(k, l + 1, 59, 60, true, default(TileColorCache));
							}
						}
						else if (l > j + 1 && num12 < num9 && Main.tile[k, l].liquid == 0)
						{
							if (Math.Abs((double)k - vector2D.X) * 0.8 < num9 && Main.tile[k, l].wall > 0 && Main.tile[k - 1, l].wall > 0 && Main.tile[k + 1, l].wall > 0 && Main.tile[k, l + 1].wall > 0)
							{
								Main.tile[k, l].active(true);
							}
						}
						else if (l < j && num2 == num4 - 1.0 && (double)l > GenVars.worldSurfaceLow - 20.0 && !TileID.Sets.Clouds[(int)Main.tile[k, l].type])
						{
							num10 = (double)Math.Abs(k - i) * 0.7;
							num11 = (double)Math.Abs(l - num13) * 1.35;
							num12 = Math.Sqrt(num10 * num10 + num11 * num11);
							double num14 = num9 * 0.4;
							double num15 = (double)Math.Abs(k - i) / (double)(num6 - i);
							num15 = 1.0 - num15;
							num15 *= 2.3;
							num15 *= num15;
							num15 *= num15;
							if (l < num13 && num10 < num14 + (double)Math.Abs(l - num13) * 0.5 * num15)
							{
								Main.tile[k, l].active(false);
								if (Main.tile[k, l].type == 59 || Main.tile[k, l].type == 60)
								{
									WorldGen.SpreadGrass(k - 1, l, 59, 60, true, default(TileColorCache));
									WorldGen.SpreadGrass(k + 1, l, 59, 60, true, default(TileColorCache));
									WorldGen.SpreadGrass(k, l + 1, 59, 60, true, default(TileColorCache));
								}
							}
						}
					}
				}
				vector2D += vector2D2;
				vector2D2.X += (double)WorldGen.genRand.Next(-100, 101) * num3;
				vector2D2.Y += (double)WorldGen.genRand.Next(-100, 101) * 0.01;
				if (vector2D2.X > 1.0)
				{
					vector2D2.X = 1.0;
				}
				if (vector2D2.X < -1.0)
				{
					vector2D2.X = -1.0;
				}
				if (vector2D2.Y > 1.0)
				{
					vector2D2.Y = 1.0;
				}
				double num16 = 0.5 * (1.0 - num2 / num4);
				if (vector2D2.Y < num16)
				{
					vector2D2.Y = num16;
				}
			}
		}

		// Token: 0x06001037 RID: 4151 RVA: 0x00474220 File Offset: 0x00472420
		public static void ShroomPatch(int i, int j)
		{
			double num = (double)WorldGen.genRand.Next(80, 100);
			double num2 = (double)WorldGen.genRand.Next(20, 26);
			double num3 = (double)Main.maxTilesX / 4200.0;
			if (WorldGen.getGoodWorldGen && !Main.remixWorld)
			{
				num3 *= 1.5;
			}
			num *= num3;
			num2 *= num3;
			double num4 = num2 - 1.0;
			Vector2D vector2D;
			vector2D.X = (double)i;
			vector2D.Y = (double)j - num2 * 0.3;
			Vector2D vector2D2;
			vector2D2.X = (double)WorldGen.genRand.Next(-100, 101) * 0.005;
			vector2D2.Y = (double)WorldGen.genRand.Next(-200, -100) * 0.005;
			while (num > 0.0 && num2 > 0.0)
			{
				num -= (double)WorldGen.genRand.Next(3);
				num2 -= 1.0;
				int num5 = (int)(vector2D.X - num * 0.5);
				int num6 = (int)(vector2D.X + num * 0.5);
				int num7 = (int)(vector2D.Y - num * 0.5);
				int num8 = (int)(vector2D.Y + num * 0.5);
				if (num5 < 0)
				{
					num5 = 0;
				}
				if (num6 > Main.maxTilesX)
				{
					num6 = Main.maxTilesX;
				}
				if (num7 < 0)
				{
					num7 = 0;
				}
				if (num8 > Main.maxTilesY)
				{
					num8 = Main.maxTilesY;
				}
				double num9 = num * (double)WorldGen.genRand.Next(80, 120) * 0.01;
				for (int k = num5; k < num6; k++)
				{
					for (int l = num7; l < num8; l++)
					{
						double num10 = Math.Abs((double)k - vector2D.X);
						double num11 = Math.Abs(((double)l - vector2D.Y) * 2.3);
						double num12 = Math.Sqrt(num10 * num10 + num11 * num11);
						if (num12 < num9 * 0.8 && Main.tile[k, l].lava())
						{
							Main.tile[k, l].liquid = 0;
						}
						if (num12 < num9 * 0.2 && (double)l < vector2D.Y)
						{
							Main.tile[k, l].active(false);
							if (Main.tile[k, l].wall > 0)
							{
								Main.tile[k, l].wall = 80;
							}
						}
						else if (num12 < num9 * 0.4 * (0.95 + WorldGen.genRand.NextDouble() * 0.1))
						{
							Main.tile[k, l].type = 59;
							if (num2 == num4 && (double)l > vector2D.Y)
							{
								Main.tile[k, l].active(true);
							}
							if (Main.tile[k, l].wall > 0)
							{
								Main.tile[k, l].wall = 80;
							}
						}
					}
				}
				vector2D += vector2D2;
				vector2D.X += vector2D2.X;
				vector2D2.X += (double)WorldGen.genRand.Next(-100, 110) * 0.005;
				vector2D2.Y -= (double)WorldGen.genRand.Next(110) * 0.005;
				if (vector2D2.X > -0.5 && vector2D2.X < 0.5)
				{
					if (vector2D2.X < 0.0)
					{
						vector2D2.X = -0.5;
					}
					else
					{
						vector2D2.X = 0.5;
					}
				}
				if (vector2D2.X > 0.5)
				{
					vector2D2.X = 0.5;
				}
				if (vector2D2.X < -0.5)
				{
					vector2D2.X = -0.5;
				}
				if (vector2D2.Y > 0.5)
				{
					vector2D2.Y = 0.5;
				}
				if (vector2D2.Y < -0.5)
				{
					vector2D2.Y = -0.5;
				}
				for (int m = 0; m < 2; m++)
				{
					int num13 = (int)vector2D.X + WorldGen.genRand.Next(-20, 20);
					int num14 = (int)vector2D.Y + WorldGen.genRand.Next(0, 20);
					while (!Main.tile[num13, num14].active() && Main.tile[num13, num14].type != 59)
					{
						num13 = (int)vector2D.X + WorldGen.genRand.Next(-20, 20);
						num14 = (int)vector2D.Y + WorldGen.genRand.Next(0, 20);
					}
					int num15 = WorldGen.genRand.Next(10, 20);
					int steps = WorldGen.genRand.Next(10, 20);
					WorldGen.TileRunner(num13, num14, (double)num15, steps, 59, false, 0.0, 2.0, true, true, -1);
				}
			}
		}

		// Token: 0x06001038 RID: 4152 RVA: 0x00474798 File Offset: 0x00472998
		public static void Cavinator(int i, int j, int steps)
		{
			double num = (double)WorldGen.genRand.Next(7, 15);
			int num2 = 1;
			if (WorldGen.genRand.Next(2) == 0)
			{
				num2 = -1;
			}
			Vector2D vector2D;
			vector2D.X = (double)i;
			vector2D.Y = (double)j;
			int k = WorldGen.genRand.Next(20, 40);
			Vector2D vector2D2;
			vector2D2.Y = (double)WorldGen.genRand.Next(10, 20) * 0.01;
			vector2D2.X = (double)num2;
			while (k > 0)
			{
				k--;
				int num3 = (int)(vector2D.X - num * 0.5);
				int num4 = (int)(vector2D.X + num * 0.5);
				int num5 = (int)(vector2D.Y - num * 0.5);
				int num6 = (int)(vector2D.Y + num * 0.5);
				if (num3 < 0)
				{
					num3 = 0;
				}
				if (num4 > Main.maxTilesX)
				{
					num4 = Main.maxTilesX;
				}
				if (num5 < 0)
				{
					num5 = 0;
				}
				if (num6 > Main.maxTilesY)
				{
					num6 = Main.maxTilesY;
				}
				double num7 = num * (double)WorldGen.genRand.Next(80, 120) * 0.01;
				for (int l = num3; l < num4; l++)
				{
					for (int m = num5; m < num6; m++)
					{
						double num8 = Math.Abs((double)l - vector2D.X);
						double num9 = Math.Abs((double)m - vector2D.Y);
						if (Math.Sqrt(num8 * num8 + num9 * num9) < num7 * 0.4 && TileID.Sets.CanBeClearedDuringGeneration[(int)Main.tile[l, m].type] && Main.tile[l, m].type != 53)
						{
							Main.tile[l, m].active(false);
						}
					}
				}
				vector2D += vector2D2;
				vector2D2.X += (double)WorldGen.genRand.Next(-10, 11) * 0.05;
				vector2D2.Y += (double)WorldGen.genRand.Next(-10, 11) * 0.05;
				if (vector2D2.X > (double)num2 + 0.5)
				{
					vector2D2.X = (double)num2 + 0.5;
				}
				if (vector2D2.X < (double)num2 - 0.5)
				{
					vector2D2.X = (double)num2 - 0.5;
				}
				if (vector2D2.Y > 2.0)
				{
					vector2D2.Y = 2.0;
				}
				if (vector2D2.Y < 0.0)
				{
					vector2D2.Y = 0.0;
				}
			}
			if (steps > 0 && (double)((int)vector2D.Y) < Main.rockLayer + 50.0)
			{
				WorldGen.Cavinator((int)vector2D.X, (int)vector2D.Y, steps - 1);
			}
		}

		// Token: 0x06001039 RID: 4153 RVA: 0x00474A94 File Offset: 0x00472C94
		public static void CaveOpenater(int i, int j)
		{
			double num = (double)WorldGen.genRand.Next(7, 12);
			int num2 = 1;
			if (WorldGen.genRand.Next(2) == 0)
			{
				num2 = -1;
			}
			if (WorldGen.genRand.Next(10) != 0)
			{
				if (i < Main.maxTilesX / 2)
				{
					num2 = 1;
				}
				else
				{
					num2 = -1;
				}
			}
			Vector2D vector2D;
			vector2D.X = (double)i;
			vector2D.Y = (double)j;
			int k = 100;
			Vector2D vector2D2;
			vector2D2.Y = 0.0;
			vector2D2.X = (double)num2;
			while (k > 0)
			{
				Tile tile = Main.tile[(int)vector2D.X, (int)vector2D.Y];
				if (tile.wall == 0 || (tile.active() && !TileID.Sets.CanBeClearedDuringGeneration[(int)tile.type]))
				{
					k = 0;
				}
				k--;
				int num3 = (int)(vector2D.X - num * 0.5);
				int num4 = (int)(vector2D.X + num * 0.5);
				int num5 = (int)(vector2D.Y - num * 0.5);
				int num6 = (int)(vector2D.Y + num * 0.5);
				if (num3 < 0)
				{
					num3 = 0;
				}
				if (num4 > Main.maxTilesX)
				{
					num4 = Main.maxTilesX;
				}
				if (num5 < 0)
				{
					num5 = 0;
				}
				if (num6 > Main.maxTilesY)
				{
					num6 = Main.maxTilesY;
				}
				double num7 = num * (double)WorldGen.genRand.Next(80, 120) * 0.01;
				for (int l = num3; l < num4; l++)
				{
					for (int m = num5; m < num6; m++)
					{
						double num8 = Math.Abs((double)l - vector2D.X);
						double num9 = Math.Abs((double)m - vector2D.Y);
						if (Math.Sqrt(num8 * num8 + num9 * num9) < num7 * 0.4 && TileID.Sets.CanBeClearedDuringGeneration[(int)Main.tile[l, m].type])
						{
							Main.tile[l, m].active(false);
						}
					}
				}
				vector2D += vector2D2;
				vector2D2.X += (double)WorldGen.genRand.Next(-10, 11) * 0.05;
				vector2D2.Y += (double)WorldGen.genRand.Next(-10, 11) * 0.05;
				if (vector2D2.X > (double)num2 + 0.5)
				{
					vector2D2.X = (double)num2 + 0.5;
				}
				if (vector2D2.X < (double)num2 - 0.5)
				{
					vector2D2.X = (double)num2 - 0.5;
				}
				if (vector2D2.Y > 0.0)
				{
					vector2D2.Y = 0.0;
				}
				if (vector2D2.Y < -0.5)
				{
					vector2D2.Y = -0.5;
				}
			}
		}

		// Token: 0x0600103A RID: 4154 RVA: 0x00474D7F File Offset: 0x00472F7F
		public static void DiamondTileFrame(int i, int j)
		{
			WorldGen.TileFrame(i - 1, j, false, false);
			WorldGen.TileFrame(i, j - 1, false, false);
			WorldGen.TileFrame(i, j + 1, false, false);
			WorldGen.TileFrame(i + 1, j, false, false);
		}

		// Token: 0x0600103B RID: 4155 RVA: 0x00474DB0 File Offset: 0x00472FB0
		public static void SquareTileFrame(int i, int j, bool resetFrame = true)
		{
			WorldGen.TileFrame(i - 1, j - 1, false, false);
			WorldGen.TileFrame(i - 1, j, false, false);
			WorldGen.TileFrame(i - 1, j + 1, false, false);
			WorldGen.TileFrame(i, j - 1, false, false);
			WorldGen.TileFrame(i, j, resetFrame, false);
			WorldGen.TileFrame(i, j + 1, false, false);
			WorldGen.TileFrame(i + 1, j - 1, false, false);
			WorldGen.TileFrame(i + 1, j, false, false);
			WorldGen.TileFrame(i + 1, j + 1, false, false);
		}

		// Token: 0x0600103C RID: 4156 RVA: 0x00474E28 File Offset: 0x00473028
		public static void SquareWallFrame(int i, int j, bool resetFrame = true)
		{
			Framing.WallFrame(i - 1, j - 1, false);
			Framing.WallFrame(i - 1, j, false);
			Framing.WallFrame(i - 1, j + 1, false);
			Framing.WallFrame(i, j - 1, false);
			Framing.WallFrame(i, j, resetFrame);
			Framing.WallFrame(i, j + 1, false);
			Framing.WallFrame(i + 1, j - 1, false);
			Framing.WallFrame(i + 1, j, false);
			Framing.WallFrame(i + 1, j + 1, false);
		}

		// Token: 0x0600103D RID: 4157 RVA: 0x00474E98 File Offset: 0x00473098
		public static void SectionTileFrameWithCheck(int startX, int startY, int endX, int endY)
		{
			int sectionX = Netplay.GetSectionX(startX);
			int sectionY = Netplay.GetSectionY(startY);
			int sectionX2 = Netplay.GetSectionX(endX);
			int sectionY2 = Netplay.GetSectionY(endY);
			for (int i = sectionX; i <= sectionX2; i++)
			{
				for (int j = sectionY; j <= sectionY2; j++)
				{
					if (Main.sectionManager.SectionLoaded(i, j) && !Main.sectionManager.SectionFramed(i, j))
					{
						WorldGen.SectionTileFrame(i, j, i, j);
						if (!Main.sectionManager.AnyUnfinishedSections)
						{
							return;
						}
					}
				}
			}
		}

		// Token: 0x0600103E RID: 4158 RVA: 0x00474F14 File Offset: 0x00473114
		public static void RefreshSections(int startX, int startY, int endX, int endY)
		{
			int sectionX = Netplay.GetSectionX(startX);
			int sectionY = Netplay.GetSectionY(startY);
			int sectionX2 = Netplay.GetSectionX(endX);
			int sectionY2 = Netplay.GetSectionY(endY);
			for (int i = sectionX; i <= sectionX2; i++)
			{
				for (int j = sectionY; j <= sectionY2; j++)
				{
					if (Main.sectionManager.SectionNeedsRefresh(i, j))
					{
						WorldGen.RefreshSection(i, j);
					}
				}
			}
		}

		// Token: 0x0600103F RID: 4159 RVA: 0x00474F70 File Offset: 0x00473170
		public static void RefreshSection(int sectionX, int sectionY)
		{
			int num;
			int num2;
			int num3;
			int num4;
			WorldGen.GetSectionBounds(sectionX, sectionY, sectionX, sectionY, out num, out num2, out num3, out num4);
			WorldGen.noMapUpdate = true;
			int num5 = 0;
			int num6 = 0;
			for (int i = num3; i < num4; i += 50)
			{
				for (int j = num; j < num2; j += 200)
				{
					WorldGen.RefreshStrip(j, i, Math.Min(j + 200, num2), Math.Min(i + 50, num4), ref num5, ref num6);
				}
			}
			WorldGen.noMapUpdate = false;
			Main.sectionManager.SetSectionAsRefreshed(sectionX, sectionY);
		}

		// Token: 0x06001040 RID: 4160 RVA: 0x00474FF8 File Offset: 0x004731F8
		public static void RefreshStrip(int xStart, int yStart, int xEnd, int yEnd, ref int totalEcho, ref int totalFramed)
		{
			int num = xStart - 1;
			int num2 = yStart - 1;
			int num3 = xEnd - xStart;
			int num4 = yEnd - yStart;
			if (num4 > 50 || num3 > 200)
			{
				throw new IndexOutOfRangeException();
			}
			int num5 = 0;
			Vertical64BitStrips vertical64BitStrips = WorldGen.bitStrip;
			for (int i = 1; i <= num3; i++)
			{
				Bits64 value = default(Bits64);
				for (int j = 1; j <= num4; j++)
				{
					Tile tile = Main.tile[num + i, num2 + j];
					if (tile != null && (tile.invisibleBlock() || tile.invisibleWall()))
					{
						num5++;
						value[j] = true;
					}
				}
				vertical64BitStrips[i] = value;
			}
			if (num5 == 0)
			{
				return;
			}
			vertical64BitStrips.Expand3x3();
			for (int k = 0; k < num3 + 2; k++)
			{
				Bits64 bits = vertical64BitStrips[k];
				if (!bits.IsEmpty)
				{
					for (int l = 0; l < num4 + 2; l++)
					{
						if (bits[l])
						{
							totalFramed++;
							WorldGen.Reframe(num + k, num2 + l, false);
						}
					}
				}
			}
			vertical64BitStrips.Clear();
			totalEcho += num5;
		}

		// Token: 0x06001041 RID: 4161 RVA: 0x0047511A File Offset: 0x0047331A
		public static void Reframe(int x, int y, bool resetFrame = false)
		{
			WorldGen.TileFrame(x, y, resetFrame, true);
			Framing.WallFrame(x, y, resetFrame);
		}

		// Token: 0x06001042 RID: 4162 RVA: 0x00475130 File Offset: 0x00473330
		public static void SectionTileFrame(int sectionStartX, int sectionStartY, int sectionEndXInclusive, int sectionEndYInclusive)
		{
			Main.mapTime = Main.mapTimeMax + 10;
			WorldGen.noMapUpdate = true;
			int num;
			int num2;
			int num3;
			int num4;
			WorldGen.GetSectionBounds(sectionStartX, sectionStartY, sectionEndXInclusive, sectionEndYInclusive, out num, out num2, out num3, out num4);
			for (int i = num - 1; i < num2 + 1; i++)
			{
				for (int j = num3 - 1; j < num4 + 1; j++)
				{
					if (Main.tile[i, j] == null)
					{
						Main.tile[i, j] = new Tile();
					}
					WorldGen.Reframe(i, j, true);
				}
			}
			for (int k = sectionStartX; k <= sectionEndXInclusive; k++)
			{
				for (int l = sectionStartY; l <= sectionEndYInclusive; l++)
				{
					Main.sectionManager.SetSectionFramed(k, l);
				}
			}
			WorldGen.noMapUpdate = false;
		}

		// Token: 0x06001043 RID: 4163 RVA: 0x004751EC File Offset: 0x004733EC
		public static void GetSectionBounds(int sectionStartX, int sectionStartY, int sectionEndXInclusive, int sectionEndYInclusive, out int tileStartX, out int tileEndX, out int tileStartY, out int tileEndY)
		{
			tileStartX = sectionStartX * 200;
			tileEndX = (sectionEndXInclusive + 1) * 200;
			tileStartY = sectionStartY * 150;
			tileEndY = (sectionEndYInclusive + 1) * 150;
			if (tileStartX < 1)
			{
				tileStartX = 1;
			}
			if (tileStartY < 1)
			{
				tileStartY = 1;
			}
			if (tileStartX > Main.maxTilesX - 2)
			{
				tileStartX = Main.maxTilesX - 2;
			}
			if (tileStartY > Main.maxTilesY - 2)
			{
				tileStartY = Main.maxTilesY - 2;
			}
			if (tileEndX > Main.maxTilesX - 2)
			{
				tileEndX = Main.maxTilesX - 2;
			}
			if (tileEndY > Main.maxTilesY - 2)
			{
				tileEndY = Main.maxTilesY - 2;
			}
		}

		// Token: 0x06001044 RID: 4164 RVA: 0x00475294 File Offset: 0x00473494
		public static void RangeFrame(int startX, int startY, int endX, int endY)
		{
			int num = endX + 1;
			int num2 = endY + 1;
			for (int i = startX - 1; i < num + 1; i++)
			{
				for (int j = startY - 1; j < num2 + 1; j++)
				{
					WorldGen.TileFrame(i, j, false, false);
					Framing.WallFrame(i, j, false);
				}
			}
		}

		// Token: 0x06001045 RID: 4165 RVA: 0x004752E4 File Offset: 0x004734E4
		public static void WaterCheck()
		{
			Liquid.tilesIgnoreWater(true);
			Liquid.numLiquid = 0;
			LiquidBuffer.numLiquidBuffer = 0;
			for (int i = 1; i < Main.maxTilesX - 1; i++)
			{
				for (int j = Main.maxTilesY - 2; j > 0; j--)
				{
					Tile tile = Main.tile[i, j];
					tile.checkingLiquid(false);
					if (tile.liquid > 0 && tile.nactive() && Main.tileSolid[(int)tile.type] && !Main.tileSolidTop[(int)tile.type])
					{
						tile.liquid = 0;
					}
					else if (tile.liquid > 0)
					{
						if (tile.active())
						{
							if (tile.lava())
							{
								if (TileObjectData.CheckLavaDeath(tile))
								{
									WorldGen.KillTile(i, j, false, false, false);
								}
							}
							else if (TileObjectData.CheckWaterDeath(tile))
							{
								WorldGen.KillTile(i, j, false, false, false);
							}
						}
						Tile tile2 = Main.tile[i, j + 1];
						if ((!tile2.nactive() || !Main.tileSolid[(int)tile2.type] || Main.tileSolidTop[(int)tile2.type]) && tile2.liquid < 255)
						{
							if (tile2.liquid > 250)
							{
								tile2.liquid = byte.MaxValue;
							}
							else
							{
								Liquid.AddWater(i, j);
							}
						}
						Tile tile3 = Main.tile[i - 1, j];
						Tile tile4 = Main.tile[i + 1, j];
						if ((!tile3.nactive() || !Main.tileSolid[(int)tile3.type] || Main.tileSolidTop[(int)tile3.type]) && tile3.liquid != tile.liquid)
						{
							Liquid.AddWater(i, j);
						}
						else if ((!tile4.nactive() || !Main.tileSolid[(int)tile4.type] || Main.tileSolidTop[(int)tile4.type]) && tile4.liquid != tile.liquid)
						{
							Liquid.AddWater(i, j);
						}
						if (tile.lava())
						{
							if (tile3.liquid > 0 && !tile3.lava())
							{
								Liquid.AddWater(i, j);
							}
							else if (tile4.liquid > 0 && !tile4.lava())
							{
								Liquid.AddWater(i, j);
							}
							else if (Main.tile[i, j - 1].liquid > 0 && !Main.tile[i, j - 1].lava())
							{
								Liquid.AddWater(i, j);
							}
							else if (tile2.liquid > 0 && !tile2.lava())
							{
								Liquid.AddWater(i, j);
							}
						}
					}
				}
			}
			Liquid.tilesIgnoreWater(false);
		}

		// Token: 0x06001046 RID: 4166 RVA: 0x00475554 File Offset: 0x00473754
		public static void EveryTileFrame()
		{
			Stopwatch stopwatch = new Stopwatch();
			stopwatch.Start();
			WorldGen.noLiquidCheck = true;
			WorldGen.noTileActions = true;
			for (int i = 0; i < Main.maxTilesX; i++)
			{
				float num = (float)i / (float)Main.maxTilesX;
				Main.statusText = string.Concat(new object[]
				{
					Lang.gen[55].Value,
					" ",
					(int)(num * 100f + 1f),
					"%"
				});
				for (int j = 0; j < Main.maxTilesY; j++)
				{
					if (Main.tile[i, j].active())
					{
						WorldGen.TileFrame(i, j, true, false);
					}
					if (Main.tile[i, j].wall > 0)
					{
						Framing.WallFrame(i, j, true);
					}
				}
			}
			WorldGen.noLiquidCheck = false;
			WorldGen.noTileActions = false;
			long elapsedMilliseconds = stopwatch.ElapsedMilliseconds;
		}

		// Token: 0x06001047 RID: 4167 RVA: 0x0047563C File Offset: 0x0047383C
		public static void PlantCheck(int x, int y)
		{
			x = Utils.Clamp<int>(x, 1, Main.maxTilesX - 2);
			y = Utils.Clamp<int>(y, 1, Main.maxTilesY - 2);
			for (int i = x - 1; i <= x + 1; i++)
			{
				for (int j = y - 1; j <= y + 1; j++)
				{
					if (Main.tile[i, j] == null)
					{
						return;
					}
				}
			}
			int num = -1;
			int num2 = (int)Main.tile[x, y].type;
			int num3 = x - 1;
			int num4 = x + 1;
			int maxTilesX = Main.maxTilesX;
			int num5 = y - 1;
			if (y + 1 >= Main.maxTilesY)
			{
				num = num2;
			}
			if (x - 1 >= 0 && Main.tile[x - 1, y] != null && Main.tile[x - 1, y].nactive())
			{
				ushort type = Main.tile[x - 1, y].type;
			}
			if (x + 1 < Main.maxTilesX && Main.tile[x + 1, y] != null && Main.tile[x + 1, y].nactive())
			{
				ushort type2 = Main.tile[x + 1, y].type;
			}
			if (y - 1 >= 0 && Main.tile[x, y - 1] != null && Main.tile[x, y - 1].nactive())
			{
				ushort type3 = Main.tile[x, y - 1].type;
			}
			if (y + 1 < Main.maxTilesY && Main.tile[x, y + 1] != null && Main.tile[x, y + 1].nactive() && !Main.tile[x, y + 1].halfBrick() && Main.tile[x, y + 1].slope() == 0)
			{
				num = (int)Main.tile[x, y + 1].type;
			}
			if (x - 1 >= 0 && y - 1 >= 0 && Main.tile[x - 1, y - 1] != null && Main.tile[x - 1, y - 1].nactive())
			{
				ushort type4 = Main.tile[x - 1, y - 1].type;
			}
			if (x + 1 < Main.maxTilesX && y - 1 >= 0 && Main.tile[x + 1, y - 1] != null && Main.tile[x + 1, y - 1].nactive())
			{
				ushort type5 = Main.tile[x + 1, y - 1].type;
			}
			if (x - 1 >= 0 && y + 1 < Main.maxTilesY && Main.tile[x - 1, y + 1] != null && Main.tile[x - 1, y + 1].nactive())
			{
				ushort type6 = Main.tile[x - 1, y + 1].type;
			}
			if (x + 1 < Main.maxTilesX && y + 1 < Main.maxTilesY && Main.tile[x + 1, y + 1] != null && Main.tile[x + 1, y + 1].nactive())
			{
				ushort type7 = Main.tile[x + 1, y + 1].type;
			}
			if ((num2 == 3 && num != 2 && num != 477 && num != 78 && num != 380 && num != 579) || (num2 == 73 && num != 2 && num != 477 && num != 78 && num != 380 && num != 579) || (num2 == 24 && num != 23 && num != 661) || (num2 == 61 && num != 60) || (num2 == 74 && num != 60) || (num2 == 71 && num != 70) || (num2 == 110 && num != 109 && num != 492) || (num2 == 113 && num != 109 && num != 492) || (num2 == 201 && num != 199 && num != 662) || (num2 == 637 && num != 633))
			{
				bool flag = false;
				if (num2 == 3 || num2 == 110 || num2 == 24)
				{
					flag = (Main.tile[x, y].frameX == 144);
				}
				if (num2 == 201)
				{
					flag = (Main.tile[x, y].frameX == 270);
				}
				if ((num2 == 3 || num2 == 73) && num != 2 && num != 477 && Main.tile[x, y].frameX >= 162)
				{
					Main.tile[x, y].frameX = 126;
				}
				if (num2 == 74 && num != 60 && Main.tile[x, y].frameX >= 162)
				{
					Main.tile[x, y].frameX = 126;
				}
				if (num == 23 || num == 661)
				{
					num2 = 24;
					if (Main.tile[x, y].frameX >= 162)
					{
						Main.tile[x, y].frameX = 126;
					}
				}
				else if (num == 2 || num == 477)
				{
					if (num2 == 113)
					{
						num2 = 73;
					}
					else
					{
						num2 = 3;
					}
				}
				else if (num == 109 || num == 492)
				{
					if (num2 == 73)
					{
						num2 = 113;
					}
					else
					{
						num2 = 110;
					}
				}
				else if (num == 199 || num == 662)
				{
					num2 = 201;
				}
				else if (num == 60)
				{
					num2 = 61;
					while (Main.tile[x, y].frameX > 126)
					{
						Tile tile = Main.tile[x, y];
						tile.frameX -= 126;
					}
				}
				else if (num == 70)
				{
					num2 = 71;
					while (Main.tile[x, y].frameX > 72)
					{
						Tile tile2 = Main.tile[x, y];
						tile2.frameX -= 72;
					}
				}
				if (num2 != (int)Main.tile[x, y].type)
				{
					Main.tile[x, y].type = (ushort)num2;
					if (flag)
					{
						Main.tile[x, y].frameX = 144;
						if (num2 == 201)
						{
							Main.tile[x, y].frameX = 270;
						}
					}
					return;
				}
				WorldGen.KillTile(x, y, false, false, false);
			}
		}

		// Token: 0x06001048 RID: 4168 RVA: 0x00475C4C File Offset: 0x00473E4C
		public static bool CanPoundTile(int x, int y)
		{
			if (Main.tile[x, y] == null)
			{
				Main.tile[x, y] = new Tile();
			}
			if (Main.tile[x, y - 1] == null)
			{
				Main.tile[x, y - 1] = new Tile();
			}
			if (Main.tile[x, y + 1] == null)
			{
				Main.tile[x, y + 1] = new Tile();
			}
			ushort type = Main.tile[x, y].type;
			if (type <= 232)
			{
				if (type <= 48)
				{
					if (type != 10 && type != 48)
					{
						goto IL_DC;
					}
				}
				else if (type - 137 > 1 && type != 232)
				{
					goto IL_DC;
				}
			}
			else if (type <= 388)
			{
				if (type != 380 && type - 387 > 1)
				{
					goto IL_DC;
				}
			}
			else if (type != 476 && type != 484 && type - 664 > 1)
			{
				goto IL_DC;
			}
			return false;
			IL_DC:
			if (WorldGen.gen)
			{
				if (Main.tile[x, y].type == 190)
				{
					return false;
				}
				if (Main.tile[x, y].type == 30)
				{
					return false;
				}
			}
			if (Main.tile[x, y - 1].active())
			{
				type = Main.tile[x, y - 1].type;
				if (type <= 237)
				{
					if (type <= 77)
					{
						if (type != 21 && type != 26 && type != 77)
						{
							goto IL_1B5;
						}
					}
					else if (type != 88 && type != 235 && type != 237)
					{
						goto IL_1B5;
					}
				}
				else if (type <= 470)
				{
					if (type != 441 && type - 467 > 1 && type != 470)
					{
						goto IL_1B5;
					}
				}
				else if (type != 475 && type != 488 && type != 597)
				{
					goto IL_1B5;
				}
				return false;
			}
			IL_1B5:
			return WorldGen.CanKillTile(x, y);
		}

		// Token: 0x06001049 RID: 4169 RVA: 0x00475E18 File Offset: 0x00474018
		public static bool SlopeTile(int i, int j, int slope = 0, bool noEffects = false)
		{
			if (!WorldGen.CanPoundTile(i, j))
			{
				return false;
			}
			Main.tile[i, j].halfBrick(false);
			Main.tile[i, j].slope((byte)slope);
			if (!WorldGen.gen)
			{
				if (!noEffects)
				{
					WorldGen.KillTile(i, j, true, true, false);
				}
				SoundEngine.PlaySound(0, i * 16, j * 16, 1, 1f, 0f);
				WorldGen.SquareTileFrame(i, j, true);
				if (Main.tile[i, j].slope() == 0)
				{
					Rectangle rectangle = new Rectangle(i * 16, j * 16, 16, 16);
					for (int k = 0; k < 255; k++)
					{
						if (Main.player[k].active && !Main.player[k].dead && rectangle.Intersects(new Rectangle((int)Main.player[k].position.X, (int)Main.player[k].position.Y, Main.player[k].width, Main.player[k].height)))
						{
							Main.player[k].gfxOffY += Main.player[k].position.Y + (float)Main.player[k].height - (float)rectangle.Y;
							Main.player[k].position.Y = (float)(rectangle.Y - Main.player[k].height);
						}
					}
				}
			}
			return true;
		}

		// Token: 0x0600104A RID: 4170 RVA: 0x00475F9C File Offset: 0x0047419C
		public static bool PoundTile(int i, int j)
		{
			if (!WorldGen.CanPoundTile(i, j))
			{
				return false;
			}
			if (!Main.tile[i, j].halfBrick())
			{
				Main.tile[i, j].halfBrick(true);
			}
			else
			{
				Main.tile[i, j].halfBrick(false);
			}
			if (!WorldGen.gen)
			{
				WorldGen.KillTile(i, j, true, true, false);
				SoundEngine.PlaySound(0, i * 16, j * 16, 1, 1f, 0f);
				WorldGen.SquareTileFrame(i, j, true);
				if (!Main.tile[i, j].halfBrick())
				{
					Rectangle rectangle = new Rectangle(i * 16, j * 16, 16, 16);
					for (int k = 0; k < 255; k++)
					{
						if (Main.player[k].active && !Main.player[k].dead && rectangle.Intersects(new Rectangle((int)Main.player[k].position.X, (int)Main.player[k].position.Y, Main.player[k].width, Main.player[k].height)))
						{
							Main.player[k].gfxOffY += Main.player[k].position.Y + (float)Main.player[k].height - (float)rectangle.Y;
							Main.player[k].position.Y = (float)(rectangle.Y - Main.player[k].height);
						}
					}
				}
			}
			return true;
		}

		// Token: 0x0600104B RID: 4171 RVA: 0x00476130 File Offset: 0x00474330
		public static void PoundPlatform(int x, int y)
		{
			if (Main.tile[x, y].halfBrick())
			{
				WorldGen.PoundTile(x, y);
				if (Main.netMode == 1)
				{
					NetMessage.SendData(17, -1, -1, null, 7, (float)x, (float)y, 1f, 0, 0, 0);
					return;
				}
			}
			else
			{
				int num = 1;
				int slope = 2;
				if (TileID.Sets.Platforms[(int)Main.tile[x + 1, y - 1].type] || TileID.Sets.Platforms[(int)Main.tile[x - 1, y + 1].type] || (WorldGen.SolidTile(x + 1, y, false) && !WorldGen.SolidTile(x - 1, y, false)))
				{
					num = 2;
					slope = 1;
				}
				if (Main.tile[x, y].slope() == 0)
				{
					WorldGen.SlopeTile(x, y, num, false);
					int num2 = (int)Main.tile[x, y].slope();
					if (Main.netMode == 1)
					{
						NetMessage.SendData(17, -1, -1, null, 14, (float)x, (float)y, (float)num2, 0, 0, 0);
						return;
					}
				}
				else if ((int)Main.tile[x, y].slope() == num)
				{
					WorldGen.SlopeTile(x, y, slope, false);
					int num3 = (int)Main.tile[x, y].slope();
					if (Main.netMode == 1)
					{
						NetMessage.SendData(17, -1, -1, null, 14, (float)x, (float)y, (float)num3, 0, 0, 0);
						return;
					}
				}
				else
				{
					WorldGen.SlopeTile(x, y, 0, false);
					int num4 = (int)Main.tile[x, y].slope();
					if (Main.netMode == 1)
					{
						NetMessage.SendData(17, -1, -1, null, 14, (float)x, (float)y, (float)num4, 0, 0, 0);
					}
					WorldGen.PoundTile(x, y);
					if (Main.netMode == 1)
					{
						NetMessage.SendData(17, -1, -1, null, 7, (float)x, (float)y, 1f, 0, 0, 0);
					}
				}
			}
		}

		// Token: 0x0600104C RID: 4172 RVA: 0x004762D8 File Offset: 0x004744D8
		public static int PlatformProperSides(int x, int y, bool acceptNonOpposing = false)
		{
			Tile tile = Main.tile[x, y];
			if (!tile.active() || !TileID.Sets.Platforms[(int)tile.type])
			{
				return 0;
			}
			int num = (int)tile.slope();
			int num2 = -1;
			if (num == 1)
			{
				num2 = 2;
			}
			if (num == 2)
			{
				num2 = 1;
			}
			int num3 = 0;
			int num4 = 1;
			int num5 = 0;
			if (num == 1)
			{
				num5 = 1;
			}
			if (num == 2)
			{
				num5 = -1;
			}
			if (acceptNonOpposing)
			{
				if (Main.tile[x + num4, y + num5].active() && TileID.Sets.Platforms[(int)Main.tile[x + num4, y + num5].type] && (int)Main.tile[x + num4, y + num5].slope() != num2)
				{
					num3++;
				}
			}
			else if (Main.tile[x + num4, y + num5].active() && TileID.Sets.Platforms[(int)Main.tile[x + num4, y + num5].type] && (int)Main.tile[x + num4, y + num5].slope() == num)
			{
				num3++;
			}
			num4 *= -1;
			num5 *= -1;
			if (acceptNonOpposing)
			{
				if (Main.tile[x + num4, y + num5].active() && TileID.Sets.Platforms[(int)Main.tile[x + num4, y + num5].type] && (int)Main.tile[x + num4, y + num5].slope() != num2)
				{
					num3++;
				}
			}
			else if (Main.tile[x + num4, y + num5].active() && TileID.Sets.Platforms[(int)Main.tile[x + num4, y + num5].type] && (int)Main.tile[x + num4, y + num5].slope() == num)
			{
				num3++;
			}
			return num3;
		}

		// Token: 0x0600104D RID: 4173 RVA: 0x004764AC File Offset: 0x004746AC
		public static bool UpdateMapTile(int i, int j, bool addToList = true)
		{
			bool result = false;
			if (!Main.dedServ && Main.mapEnabled && !WorldGen.noMapUpdate && !WorldGen.gen && !Main.refreshMap && (Main.Map[i, j].Light > 0 && Main.Map.UpdateType(i, j) && addToList))
			{
				result = true;
				if (MapHelper.numUpdateTile < MapHelper.maxUpdateTile - 1)
				{
					MapHelper.updateTileX[MapHelper.numUpdateTile] = (short)i;
					MapHelper.updateTileY[MapHelper.numUpdateTile] = (short)j;
					MapHelper.numUpdateTile++;
				}
				else
				{
					Main.refreshMap = true;
				}
			}
			return result;
		}

		// Token: 0x0600104E RID: 4174 RVA: 0x0047654C File Offset: 0x0047474C
		public static void TileMergeAttemptFrametest(int i, int j, int myType, int lookfor, ref int up, ref int down, ref int left, ref int right, ref int upLeft, ref int upRight, ref int downLeft, ref int downRight)
		{
			if (up == lookfor)
			{
				WorldGen.TileFrame(i, j - 1, false, false);
				if (WorldGen.mergeDown)
				{
					up = myType;
				}
			}
			if (down == lookfor)
			{
				WorldGen.TileFrame(i, j + 1, false, false);
				if (WorldGen.mergeUp)
				{
					down = myType;
				}
			}
			if (left == lookfor)
			{
				WorldGen.TileFrame(i - 1, j, false, false);
				if (WorldGen.mergeRight)
				{
					left = myType;
				}
			}
			if (right == lookfor)
			{
				WorldGen.TileFrame(i + 1, j, false, false);
				if (WorldGen.mergeLeft)
				{
					right = myType;
				}
			}
			if (upLeft == lookfor)
			{
				upLeft = myType;
			}
			if (upRight == lookfor)
			{
				upRight = myType;
			}
			if (downLeft == lookfor)
			{
				downLeft = myType;
			}
			if (downRight == lookfor)
			{
				downRight = myType;
			}
		}

		// Token: 0x0600104F RID: 4175 RVA: 0x004765F4 File Offset: 0x004747F4
		public static void TileMergeAttemptFrametest(int i, int j, int myType, bool[] lookfor, ref int up, ref int down, ref int left, ref int right, ref int upLeft, ref int upRight, ref int downLeft, ref int downRight)
		{
			if (up > -1 && lookfor[up])
			{
				WorldGen.TileFrame(i, j - 1, false, false);
				if (WorldGen.mergeDown)
				{
					up = myType;
				}
			}
			if (down > -1 && lookfor[down])
			{
				WorldGen.TileFrame(i, j + 1, false, false);
				if (WorldGen.mergeUp)
				{
					down = myType;
				}
			}
			if (left > -1 && lookfor[left])
			{
				WorldGen.TileFrame(i - 1, j, false, false);
				if (WorldGen.mergeRight)
				{
					left = myType;
				}
			}
			if (right > -1 && lookfor[right])
			{
				WorldGen.TileFrame(i + 1, j, false, false);
				if (WorldGen.mergeLeft)
				{
					right = myType;
				}
			}
			if (upLeft > -1 && lookfor[upLeft])
			{
				upLeft = myType;
			}
			if (upRight > -1 && lookfor[upRight])
			{
				upRight = myType;
			}
			if (downLeft > -1 && lookfor[downLeft])
			{
				downLeft = myType;
			}
			if (downRight > -1 && lookfor[downRight])
			{
				downRight = myType;
			}
		}

		// Token: 0x06001050 RID: 4176 RVA: 0x004766D1 File Offset: 0x004748D1
		public static void TileMergeAttempt(int myType, int lookfor, ref int up, ref int down, ref int left, ref int right)
		{
			if (lookfor == up)
			{
				up = myType;
			}
			if (lookfor == down)
			{
				down = myType;
			}
			if (lookfor == left)
			{
				left = myType;
			}
			if (lookfor == right)
			{
				right = myType;
			}
		}

		// Token: 0x06001051 RID: 4177 RVA: 0x004766F7 File Offset: 0x004748F7
		public static void TileMergeAttempt(int myType, bool[] lookfor, ref int up, ref int down, ref int left, ref int right)
		{
			if (up > -1 && lookfor[up])
			{
				up = myType;
			}
			if (down > -1 && lookfor[down])
			{
				down = myType;
			}
			if (left > -1 && lookfor[left])
			{
				left = myType;
			}
			if (right > -1 && lookfor[right])
			{
				right = myType;
			}
		}

		// Token: 0x06001052 RID: 4178 RVA: 0x00476738 File Offset: 0x00474938
		public static void TileMergeAttempt(int myType, int lookfor, ref int up, ref int down, ref int left, ref int right, ref int upLeft, ref int upRight, ref int downLeft, ref int downRight)
		{
			if (lookfor == up)
			{
				up = myType;
			}
			if (lookfor == down)
			{
				down = myType;
			}
			if (lookfor == left)
			{
				left = myType;
			}
			if (lookfor == right)
			{
				right = myType;
			}
			if (lookfor == upLeft)
			{
				upLeft = myType;
			}
			if (lookfor == upRight)
			{
				upRight = myType;
			}
			if (lookfor == downLeft)
			{
				downLeft = myType;
			}
			if (lookfor == downRight)
			{
				downRight = myType;
			}
		}

		// Token: 0x06001053 RID: 4179 RVA: 0x00476794 File Offset: 0x00474994
		public static void TileMergeAttempt(int myType, bool[] lookfor, ref int up, ref int down, ref int left, ref int right, ref int upLeft, ref int upRight, ref int downLeft, ref int downRight)
		{
			if (up > -1 && lookfor[up])
			{
				up = myType;
			}
			if (down > -1 && lookfor[down])
			{
				down = myType;
			}
			if (left > -1 && lookfor[left])
			{
				left = myType;
			}
			if (right > -1 && lookfor[right])
			{
				right = myType;
			}
			if (upLeft > -1 && lookfor[upLeft])
			{
				upLeft = myType;
			}
			if (upRight > -1 && lookfor[upRight])
			{
				upRight = myType;
			}
			if (downLeft > -1 && lookfor[downLeft])
			{
				downLeft = myType;
			}
			if (downRight > -1 && lookfor[downRight])
			{
				downRight = myType;
			}
		}

		// Token: 0x06001054 RID: 4180 RVA: 0x00476824 File Offset: 0x00474A24
		public static void TileMergeAttempt(int myType, bool[] lookfor, bool[] exclude, ref int up, ref int down, ref int left, ref int right, ref int upLeft, ref int upRight, ref int downLeft, ref int downRight)
		{
			if (up > -1 && !exclude[up] && lookfor[up])
			{
				up = myType;
			}
			if (down > -1 && !exclude[down] && lookfor[down])
			{
				down = myType;
			}
			if (left > -1 && !exclude[left] && lookfor[left])
			{
				left = myType;
			}
			if (right > -1 && !exclude[right] && lookfor[right])
			{
				right = myType;
			}
			if (upLeft > -1 && !exclude[upLeft] && lookfor[upLeft])
			{
				upLeft = myType;
			}
			if (upRight > -1 && !exclude[upRight] && lookfor[upRight])
			{
				upRight = myType;
			}
			if (downLeft > -1 && !exclude[downLeft] && lookfor[downLeft])
			{
				downLeft = myType;
			}
			if (downRight > -1 && !exclude[downRight] && lookfor[downRight])
			{
				downRight = myType;
			}
		}

		// Token: 0x06001055 RID: 4181 RVA: 0x004768F0 File Offset: 0x00474AF0
		public static void TileMergeAttemptWeird(int myType, int changeTo, bool[] exclude, ref int up, ref int down, ref int left, ref int right, ref int upLeft, ref int upRight, ref int downLeft, ref int downRight)
		{
			if (up > -1 && !exclude[up] && up != myType)
			{
				up = changeTo;
			}
			if (down > -1 && !exclude[down] && down != myType)
			{
				down = changeTo;
			}
			if (left > -1 && !exclude[left] && left != myType)
			{
				left = changeTo;
			}
			if (right > -1 && !exclude[right] && right != myType)
			{
				right = changeTo;
			}
			if (upLeft > -1 && !exclude[upLeft] && upLeft != myType)
			{
				upLeft = changeTo;
			}
			if (upRight > -1 && !exclude[upRight] && upRight != myType)
			{
				upRight = changeTo;
			}
			if (downLeft > -1 && !exclude[downLeft] && downLeft != myType)
			{
				downLeft = changeTo;
			}
			if (downRight > -1 && !exclude[downRight] && downRight != myType)
			{
				downRight = changeTo;
			}
		}

		// Token: 0x06001056 RID: 4182 RVA: 0x004769B4 File Offset: 0x00474BB4
		public static int GetTileMossColor(int tileType)
		{
			if (tileType <= 517)
			{
				switch (tileType)
				{
				case 179:
					break;
				case 180:
					return 1;
				case 181:
					return 2;
				case 182:
					return 3;
				case 183:
					return 4;
				default:
					if (tileType != 381)
					{
						switch (tileType)
						{
						case 512:
							return 0;
						case 513:
							return 1;
						case 514:
							return 2;
						case 515:
							return 3;
						case 516:
							return 4;
						case 517:
							break;
						default:
							return -1;
						}
					}
					return 5;
				}
				return 0;
			}
			switch (tileType)
			{
			case 534:
			case 535:
				return 6;
			case 536:
			case 537:
				return 7;
			case 538:
				break;
			case 539:
			case 540:
				return 8;
			default:
				if (tileType - 625 <= 1)
				{
					return 9;
				}
				if (tileType - 627 <= 1)
				{
					return 10;
				}
				break;
			}
			return -1;
		}

		// Token: 0x06001057 RID: 4183 RVA: 0x00476A6C File Offset: 0x00474C6C
		public static void CheckFoodPlatter(int x, int y, int type)
		{
			if (Main.tile[x, y] == null || WorldGen.destroyObject)
			{
				return;
			}
			if (!WorldGen.SolidTileAllowBottomSlope(x, y + 1))
			{
				if (type == 520)
				{
					int num = TEFoodPlatter.Find(x, y);
					if (num != -1 && ((TEFoodPlatter)TileEntity.ByID[num]).item.stack > 0)
					{
						((TEFoodPlatter)TileEntity.ByID[num]).DropItem();
						if (Main.netMode != 2)
						{
							Main.LocalPlayer.InterruptItemUsageIfOverTile(520);
						}
					}
				}
				WorldGen.destroyObject = true;
				if ((int)Main.tile[x, y].type == type)
				{
					WorldGen.KillTile(x, y, false, false, false);
				}
				if (type == 520)
				{
					TEFoodPlatter.Kill(x, y);
				}
				WorldGen.destroyObject = false;
			}
		}

		// Token: 0x1700015D RID: 349
		// (get) Token: 0x06001058 RID: 4184 RVA: 0x00476B36 File Offset: 0x00474D36
		public static bool SkipFramingBecauseOfGen
		{
			get
			{
				return WorldGen.generatingWorld && WorldGen.skipFramingDuringGen;
			}
		}

		// Token: 0x06001059 RID: 4185 RVA: 0x00476B48 File Offset: 0x00474D48
		public static void TileFrame(int i, int j, bool resetFrame = false, bool noBreak = false)
		{
			bool addToList = false;
			try
			{
				if (i > 5 && j > 5 && i < Main.maxTilesX - 5 && j < Main.maxTilesY - 5 && Main.tile[i, j] != null)
				{
					if (WorldGen.SkipFramingBecauseOfGen && !Main.tileFrameImportant[(int)Main.tile[i, j].type])
					{
						return;
					}
					addToList = WorldGen.UpdateMapTile(i, j, true);
					Tile tile = Main.tile[i, j];
					if (!tile.active())
					{
						tile.halfBrick(false);
						tile.ClearBlockPaintAndCoating();
						tile.slope(0);
					}
					if (tile.liquid > 0 && Main.netMode != 1 && !WorldGen.noLiquidCheck)
					{
						Liquid.AddWater(i, j);
					}
					if (tile.active())
					{
						if (noBreak && Main.tileFrameImportant[(int)tile.type] && tile.type != 4)
						{
							return;
						}
						int num = (int)tile.type;
						if (Main.tileStone[num])
						{
							num = 1;
						}
						int frameX = (int)tile.frameX;
						int frameY = (int)tile.frameY;
						Rectangle rectangle = new Rectangle(-1, -1, 0, 0);
						if (Main.tileFrameImportant[(int)tile.type])
						{
							if (num == 518)
							{
								WorldGen.CheckLilyPad(i, j);
								return;
							}
							if (num == 519)
							{
								WorldGen.CheckCatTail(i, j);
								return;
							}
							if (num == 549)
							{
								WorldGen.CheckUnderwaterPlant(549, i, j);
								return;
							}
							if (num == 571)
							{
								WorldGen.CheckBamboo(i, j);
								return;
							}
							if (num == 4)
							{
								WorldGen.CheckTorch(i, j);
								return;
							}
							if (num == 442)
							{
								WorldGen.CheckProjectilePressurePad(i, j);
								return;
							}
							if (num == 136)
							{
								Tile tile2 = Main.tile[i, j - 1];
								Tile tile3 = Main.tile[i, j + 1];
								Tile tile4 = Main.tile[i - 1, j];
								Tile tile5 = Main.tile[i + 1, j];
								Tile tile6 = Main.tile[i - 1, j + 1];
								Tile tile7 = Main.tile[i + 1, j + 1];
								Tile tile8 = Main.tile[i - 1, j - 1];
								Tile tile9 = Main.tile[i + 1, j - 1];
								int num2 = -1;
								int num3 = -1;
								int num4 = -1;
								int tree = -1;
								int tree2 = -1;
								int tree3 = -1;
								int tree4 = -1;
								if (tile2 != null && tile2.nactive())
								{
									ushort type = tile2.type;
								}
								if (tile3 != null && tile3.nactive() && !tile3.halfBrick() && !tile3.topSlope())
								{
									num2 = (int)tile3.type;
								}
								if (tile4 != null && tile4.nactive())
								{
									num3 = (int)tile4.type;
								}
								if (tile5 != null && tile5.nactive())
								{
									num4 = (int)tile5.type;
								}
								if (tile6 != null && tile6.nactive())
								{
									tree = (int)tile6.type;
								}
								if (tile7 != null && tile7.nactive())
								{
									tree2 = (int)tile7.type;
								}
								if (tile8 != null && tile8.nactive())
								{
									tree3 = (int)tile8.type;
								}
								if (tile9 != null && tile9.nactive())
								{
									tree4 = (int)tile9.type;
								}
								if (num2 >= 0 && Main.tileSolid[num2] && !Main.tileNoAttach[num2] && tile3 != null && !tile3.halfBrick() && (tile3.slope() == 0 || tile3.bottomSlope()))
								{
									tile.frameX = 0;
								}
								else if ((num3 >= 0 && Main.tileSolid[num3] && !Main.tileNoAttach[num3] && tile4 != null && (tile4.leftSlope() || tile4.slope() == 0) && !tile4.halfBrick()) || (num3 >= 0 && TileID.Sets.IsBeam[num3]) || (WorldGen.IsTreeType(num3) && WorldGen.IsTreeType(tree3) && WorldGen.IsTreeType(tree)))
								{
									tile.frameX = 18;
								}
								else if ((num4 >= 0 && Main.tileSolid[num4] && !Main.tileNoAttach[num4] && tile5 != null && (tile5.rightSlope() || tile5.slope() == 0) && !tile5.halfBrick()) || (num4 >= 0 && TileID.Sets.IsBeam[num4]) || (WorldGen.IsTreeType(num4) && WorldGen.IsTreeType(tree4) && WorldGen.IsTreeType(tree2)))
								{
									tile.frameX = 36;
								}
								else if (tile.wall > 0)
								{
									tile.frameX = 54;
								}
								else
								{
									WorldGen.KillTile(i, j, false, false, false);
								}
								return;
							}
							if (num == 129 || num == 149)
							{
								Tile tile2 = Main.tile[i, j - 1];
								Tile tile3 = Main.tile[i, j + 1];
								Tile tile4 = Main.tile[i - 1, j];
								Tile tile5 = Main.tile[i + 1, j];
								int num5 = -1;
								int num6 = -1;
								int num7 = -1;
								int num8 = -1;
								if (tile2 != null && tile2.nactive() && !tile2.bottomSlope())
								{
									num6 = (int)tile2.type;
								}
								if (tile3 != null && tile3.nactive() && !tile3.halfBrick() && !tile3.topSlope())
								{
									num5 = (int)tile3.type;
								}
								if (tile4 != null && tile4.nactive() && !tile5.rightSlope())
								{
									num7 = (int)tile4.type;
								}
								if (tile5 != null && tile5.nactive() && !tile5.leftSlope())
								{
									num8 = (int)tile5.type;
								}
								if (num5 >= 0 && Main.tileSolid[num5] && !Main.tileSolidTop[num5])
								{
									tile.frameY = 0;
								}
								else if (num7 >= 0 && Main.tileSolid[num7] && !Main.tileSolidTop[num7])
								{
									tile.frameY = 54;
								}
								else if (num8 >= 0 && Main.tileSolid[num8] && !Main.tileSolidTop[num8])
								{
									tile.frameY = 36;
								}
								else if (num6 >= 0 && Main.tileSolid[num6] && !Main.tileSolidTop[num6])
								{
									tile.frameY = 18;
								}
								else
								{
									WorldGen.KillTile(i, j, false, false, false);
								}
							}
							else if ((num >= 373 && num <= 375) || num == 461)
							{
								Tile tile2 = Main.tile[i, j - 1];
								if (tile2 == null || !tile2.active() || tile2.bottomSlope() || !Main.tileSolid[(int)tile2.type] || Main.tileSolidTop[(int)tile2.type])
								{
									WorldGen.KillTile(i, j, false, false, false);
								}
							}
							else if (num == 178)
							{
								Tile tile2 = Main.tile[i, j - 1];
								Tile tile3 = Main.tile[i, j + 1];
								Tile tile4 = Main.tile[i - 1, j];
								Tile tile5 = Main.tile[i + 1, j];
								int num9 = -1;
								int num10 = -1;
								int num11 = -1;
								int num12 = -1;
								if (tile2 != null && tile2.nactive() && !tile2.bottomSlope())
								{
									num10 = (int)tile2.type;
								}
								if (tile3 != null && tile3.nactive() && !tile3.halfBrick() && !tile3.topSlope())
								{
									num9 = (int)tile3.type;
								}
								if (tile4 != null && tile4.nactive() && !tile4.halfBrick() && !tile4.rightSlope())
								{
									num11 = (int)tile4.type;
								}
								if (tile5 != null && tile5.nactive() && !tile5.halfBrick() && !tile5.leftSlope())
								{
									num12 = (int)tile5.type;
								}
								if (num11 == 10)
								{
									num11 = -1;
								}
								if (num12 == 10)
								{
									num12 = -1;
								}
								short num13 = (short)(WorldGen.genRand.Next(3) * 18);
								if (num9 >= 0 && Main.tileSolid[num9] && !Main.tileSolidTop[num9])
								{
									if (tile.frameY < 0 || tile.frameY > 36)
									{
										tile.frameY = num13;
									}
								}
								else if (num11 >= 0 && Main.tileSolid[num11] && !Main.tileSolidTop[num11])
								{
									if (tile.frameY < 108 || tile.frameY > 54)
									{
										tile.frameY = 108 + num13;
									}
								}
								else if (num12 >= 0 && Main.tileSolid[num12] && !Main.tileSolidTop[num12])
								{
									if (tile.frameY < 162 || tile.frameY > 198)
									{
										tile.frameY = 162 + num13;
									}
								}
								else if (num10 >= 0 && Main.tileSolid[num10] && !Main.tileSolidTop[num10])
								{
									if (tile.frameY < 54 || tile.frameY > 90)
									{
										tile.frameY = 54 + num13;
									}
								}
								else
								{
									WorldGen.KillTile(i, j, false, false, false);
								}
							}
							else if (num == 184)
							{
								Tile tile2 = Main.tile[i, j - 1];
								Tile tile3 = Main.tile[i, j + 1];
								Tile tile4 = Main.tile[i - 1, j];
								Tile tile5 = Main.tile[i + 1, j];
								int num14 = -1;
								int num15 = -1;
								int num16 = -1;
								int num17 = -1;
								if (tile2 != null && tile2.active() && !tile2.bottomSlope())
								{
									num15 = (int)tile2.type;
								}
								if (tile3 != null && tile3.active() && !tile3.halfBrick() && !tile3.topSlope())
								{
									num14 = (int)tile3.type;
								}
								if (tile4 != null && tile4.active())
								{
									num16 = (int)tile4.type;
								}
								if (tile5 != null && tile5.active())
								{
									num17 = (int)tile5.type;
								}
								short num18 = (short)(WorldGen.genRand.Next(3) * 18);
								if (num14 >= 0 && WorldGen.GetTileMossColor(num14) != -1)
								{
									tile.frameX = (short)(22 * WorldGen.GetTileMossColor(num14));
									if (tile.frameY < 0 || tile.frameY > 36)
									{
										tile.frameY = num18;
									}
								}
								else if (num15 >= 0 && WorldGen.GetTileMossColor(num15) != -1)
								{
									tile.frameX = (short)(22 * WorldGen.GetTileMossColor(num15));
									if (tile.frameY < 54 || tile.frameY > 90)
									{
										tile.frameY = 54 + num18;
									}
								}
								else if (num16 >= 0 && WorldGen.GetTileMossColor(num16) != -1)
								{
									tile.frameX = (short)(22 * WorldGen.GetTileMossColor(num16));
									if (tile.frameY < 108 || tile.frameY > 144)
									{
										tile.frameY = 108 + num18;
									}
								}
								else if (num17 >= 0 && WorldGen.GetTileMossColor(num17) != -1)
								{
									tile.frameX = (short)(22 * WorldGen.GetTileMossColor(num17));
									if (tile.frameY < 162 || tile.frameY > 198)
									{
										tile.frameY = 162 + num18;
									}
								}
								else
								{
									WorldGen.KillTile(i, j, false, false, false);
								}
							}
							else if (num == 529)
							{
								if (!WorldGen.SolidTileAllowBottomSlope(i, j + 1))
								{
									WorldGen.KillTile(i, j, false, false, false);
								}
								else
								{
									Tile tile3 = Main.tile[i, j + 1];
									short num19 = Main.tile[i, j].frameY / 34;
									if (tile3 == null || !tile3.active() || (tile3.type >= 0 && tile3.type < TileID.Count && !TileID.Sets.Conversion.Sand[(int)tile3.type]))
									{
										WorldGen.KillTile(i, j, false, false, false);
									}
								}
							}
							else if (num == 3 || num == 24 || num == 61 || num == 71 || num == 73 || num == 74 || num == 110 || num == 113 || num == 201 || num == 637)
							{
								WorldGen.PlantCheck(i, j);
							}
							else if (num == 227)
							{
								WorldGen.CheckDye(i, j);
							}
							else if (num == 579)
							{
								WorldGen.CheckRockGolemHead(i, j);
							}
							else if (num == 12 || num == 31 || num == 639)
							{
								WorldGen.CheckOrb(i, j, num);
							}
							else if (num == 165)
							{
								WorldGen.CheckTight(i, j);
							}
							else if (num == 324)
							{
								if (!WorldGen.SolidTileAllowBottomSlope(i, j + 1))
								{
									WorldGen.KillTile(i, j, false, false, false);
								}
							}
							else if (num == 235)
							{
								WorldGen.Check3x1(i, j, num);
							}
							else if (num == 185)
							{
								WorldGen.CheckPile(i, j);
							}
							else if ((num >= 275 && num <= 281) || num == 296 || num == 297 || num == 309 || num == 358 || num == 359 || num == 413 || num == 414 || num == 542 || num == 550 || num == 551 || num == 553 || num == 554 || num == 558 || num == 559 || num == 599 || num == 600 || num == 601 || num == 602 || num == 603 || num == 604 || num == 605 || num == 606 || num == 607 || num == 608 || num == 609 || num == 610 || num == 611 || num == 612 || num == 632 || num == 640 || num == 643 || num == 644 || num == 645)
							{
								WorldGen.Check6x3(i, j, num);
							}
							else if (num == 10)
							{
								WorldGen.CheckDoorClosed(i, j, tile, num);
							}
							else if (num == 11)
							{
								WorldGen.CheckDoorOpen(i, j, tile);
							}
							else if (num == 314)
							{
								Minecart.FrameTrack(i, j, false, false);
								Tile tile2 = Main.tile[i, j - 1];
								Tile tile3 = Main.tile[i, j + 1];
								if (tile2 != null && tile2.type >= 0 && tile2.type < TileID.Count && Main.tileRope[(int)tile2.type])
								{
									WorldGen.TileFrame(i, j - 1, false, false);
								}
								if (tile3 != null && tile3.type >= 0 && tile3.type < TileID.Count && Main.tileRope[(int)tile3.type])
								{
									WorldGen.TileFrame(i, j + 1, false, false);
								}
							}
							else if (num == 380)
							{
								Tile tile4 = Main.tile[i - 1, j];
								if (tile4 != null)
								{
									Tile tile5 = Main.tile[i + 1, j];
									if (tile5 != null)
									{
										if (Main.tile[i - 1, j + 1] != null)
										{
											if (Main.tile[i + 1, j + 1] != null)
											{
												if (Main.tile[i - 1, j - 1] != null)
												{
													if (Main.tile[i + 1, j - 1] != null)
													{
														int num20 = -1;
														int num21 = -1;
														if (tile4 != null && tile4.active())
														{
															if (Main.tileStone[(int)tile4.type])
															{
																num21 = 1;
															}
															else
															{
																num21 = (int)tile4.type;
															}
														}
														if (tile5 != null && tile5.active())
														{
															if (Main.tileStone[(int)tile5.type])
															{
																num20 = 1;
															}
															else
															{
																num20 = (int)tile5.type;
															}
														}
														if (num20 >= 0 && !Main.tileSolid[num20])
														{
															num20 = -1;
														}
														if (num21 >= 0 && !Main.tileSolid[num21])
														{
															num21 = -1;
														}
														if (num21 == num && num20 == num)
														{
															rectangle.X = 18;
														}
														else if (num21 == num && num20 != num)
														{
															rectangle.X = 36;
														}
														else if (num21 != num && num20 == num)
														{
															rectangle.X = 0;
														}
														else
														{
															rectangle.X = 54;
														}
														tile.frameX = (short)rectangle.X;
													}
												}
											}
										}
									}
								}
							}
							else if (num >= 0 && TileID.Sets.Platforms[num])
							{
								Tile tile4 = Main.tile[i - 1, j];
								if (tile4 != null)
								{
									Tile tile5 = Main.tile[i + 1, j];
									if (tile5 != null)
									{
										Tile tile6 = Main.tile[i - 1, j + 1];
										if (tile6 != null)
										{
											Tile tile7 = Main.tile[i + 1, j + 1];
											if (tile7 != null)
											{
												Tile tile8 = Main.tile[i - 1, j - 1];
												if (tile8 != null)
												{
													Tile tile9 = Main.tile[i + 1, j - 1];
													if (tile9 != null)
													{
														int num22 = -1;
														int num23 = -1;
														if (tile4 != null && tile4.active())
														{
															if (Main.tileStone[(int)tile4.type])
															{
																num23 = 1;
															}
															else if (TileID.Sets.Platforms[(int)tile4.type])
															{
																num23 = num;
															}
															else
															{
																num23 = (int)tile4.type;
															}
														}
														if (tile5 != null && tile5.active())
														{
															if (Main.tileStone[(int)tile5.type])
															{
																num22 = 1;
															}
															else if (TileID.Sets.Platforms[(int)tile5.type])
															{
																num22 = num;
															}
															else
															{
																num22 = (int)tile5.type;
															}
														}
														if (num22 >= 0 && !Main.tileSolid[num22])
														{
															num22 = -1;
														}
														if (num23 >= 0 && !Main.tileSolid[num23])
														{
															num23 = -1;
														}
														if (num23 == num && tile4.halfBrick() != tile.halfBrick())
														{
															num23 = -1;
														}
														if (num22 == num && tile5.halfBrick() != tile.halfBrick())
														{
															num22 = -1;
														}
														if (num23 != -1 && num23 != num && tile.halfBrick())
														{
															num23 = -1;
														}
														if (num22 != -1 && num22 != num && tile.halfBrick())
														{
															num22 = -1;
														}
														if (num23 == -1 && tile8.active() && (int)tile8.type == num && tile8.slope() == 1)
														{
															num23 = num;
														}
														if (num22 == -1 && tile9.active() && (int)tile9.type == num && tile9.slope() == 2)
														{
															num22 = num;
														}
														if (num23 == num && tile4.slope() == 2 && num22 != num)
														{
															num22 = -1;
														}
														if (num22 == num && tile5.slope() == 1 && num23 != num)
														{
															num23 = -1;
														}
														if (tile.slope() == 1)
														{
															if (TileID.Sets.Platforms[(int)tile5.type] && tile5.slope() == 0 && !tile5.halfBrick())
															{
																rectangle.X = 468;
															}
															else if (!tile7.active() && (!TileID.Sets.Platforms[(int)tile7.type] || tile7.slope() == 2))
															{
																if (!tile4.active() && (!TileID.Sets.Platforms[(int)tile8.type] || tile8.slope() != 1))
																{
																	rectangle.X = 432;
																}
																else
																{
																	rectangle.X = 360;
																}
															}
															else if (!tile4.active() && (!TileID.Sets.Platforms[(int)tile8.type] || tile8.slope() != 1))
															{
																rectangle.X = 396;
															}
															else
															{
																rectangle.X = 180;
															}
														}
														else if (tile.slope() == 2)
														{
															if (TileID.Sets.Platforms[(int)tile4.type] && tile4.slope() == 0 && !tile4.halfBrick())
															{
																rectangle.X = 450;
															}
															else if (!tile6.active() && (!TileID.Sets.Platforms[(int)tile6.type] || tile6.slope() == 1))
															{
																if (!tile5.active() && (!TileID.Sets.Platforms[(int)tile9.type] || tile9.slope() != 2))
																{
																	rectangle.X = 414;
																}
																else
																{
																	rectangle.X = 342;
																}
															}
															else if (!tile5.active() && (!TileID.Sets.Platforms[(int)tile9.type] || tile9.slope() != 2))
															{
																rectangle.X = 378;
															}
															else
															{
																rectangle.X = 144;
															}
														}
														else if (num23 == num && num22 == num)
														{
															if (tile4.slope() == 2 && tile5.slope() == 1)
															{
																rectangle.X = 252;
															}
															else if (tile4.slope() == 2)
															{
																rectangle.X = 216;
															}
															else if (tile5.slope() == 1)
															{
																rectangle.X = 234;
															}
															else
															{
																rectangle.X = 0;
															}
														}
														else if (num23 == num && num22 == -1)
														{
															if (tile4.slope() == 2)
															{
																rectangle.X = 270;
															}
															else
															{
																rectangle.X = 18;
															}
														}
														else if (num23 == -1 && num22 == num)
														{
															if (tile5.slope() == 1)
															{
																rectangle.X = 288;
															}
															else
															{
																rectangle.X = 36;
															}
														}
														else if (num23 != num && num22 == num)
														{
															rectangle.X = 54;
														}
														else if (num23 == num && num22 != num)
														{
															rectangle.X = 72;
														}
														else if (num23 != num && num23 != -1 && num22 == -1)
														{
															rectangle.X = 108;
														}
														else if (num23 == -1 && num22 != num && num22 != -1)
														{
															rectangle.X = 126;
														}
														else
														{
															rectangle.X = 90;
														}
														tile.frameX = (short)rectangle.X;
														if (Main.tile[i, j - 1] != null && Main.tileRope[(int)Main.tile[i, j - 1].type])
														{
															WorldGen.TileFrame(i, j - 1, false, false);
														}
														if (Main.tile[i, j + 1] != null && Main.tileRope[(int)Main.tile[i, j + 1].type])
														{
															WorldGen.TileFrame(i, j + 1, false, false);
														}
													}
												}
											}
										}
									}
								}
							}
							else if (num == 233 || num == 236 || num == 238)
							{
								WorldGen.CheckJunglePlant(i, j, num);
							}
							else if (num == 530)
							{
								WorldGen.CheckOasisPlant(i, j, 530);
							}
							else if (num == 240 || num == 440)
							{
								WorldGen.Check3x3Wall(i, j);
							}
							else if (num == 245)
							{
								WorldGen.Check2x3Wall(i, j);
							}
							else if (num == 246)
							{
								WorldGen.Check3x2Wall(i, j);
							}
							else if (num == 241)
							{
								WorldGen.Check4x3Wall(i, j);
							}
							else if (num == 242)
							{
								WorldGen.Check6x4Wall(i, j);
							}
							else if (num == 464 || num == 466)
							{
								WorldGen.Check5x4(i, j, num);
							}
							else if (num == 334)
							{
								WorldGen.CheckWeaponsRack(i, j);
							}
							else if (num == 471)
							{
								TEWeaponsRack.Framing_CheckTile(i, j);
							}
							else if (num == 34 || num == 454)
							{
								WorldGen.CheckChand(i, j, num);
							}
							else if (num == 547 || num == 623)
							{
								WorldGen.Check2x5(i, j, num);
							}
							else if (num == 548 || num == 614)
							{
								WorldGen.Check3x6(i, j, num);
							}
							else if (num == 613)
							{
								WorldGen.Check3x5(i, j, num);
							}
							else if (num == 106 || num == 212 || num == 219 || num == 220 || num == 228 || num == 231 || num == 243 || num == 247 || num == 283 || (num >= 300 && num <= 308) || num == 354 || num == 406 || num == 412 || num == 355 || num == 452 || num == 455 || num == 491 || num == 499 || num == 642)
							{
								WorldGen.Check3x3(i, j, (int)((ushort)num));
							}
							else if (num == 15 || num == 497 || num == 20 || num == 590 || num == 216 || num == 338 || num == 390 || num == 493 || num == 595 || num == 615)
							{
								WorldGen.Check1x2(i, j, (ushort)num);
							}
							else if (num == 14 || num == 469 || num == 17 || num == 26 || num == 77 || num == 86 || num == 87 || num == 377 || num == 88 || num == 89 || num == 114 || num == 133 || num == 186 || num == 187 || num == 215 || num == 217 || num == 218 || num == 237 || num == 244 || num == 285 || num == 286 || num == 298 || num == 299 || num == 310 || num == 339 || num == 538 || (num >= 361 && num <= 364) || (num >= 391 && num <= 394) || num == 405 || num == 486 || num == 488 || num == 532 || num == 544 || num == 533 || num == 552 || num == 555 || num == 556 || num == 582 || num == 619 || num == 629 || num == 647 || num == 648 || num == 651)
							{
								WorldGen.Check3x2(i, j, (int)((ushort)num));
							}
							else if (num == 135 || num == 144 || num == 141 || num == 650 || num == 210 || num == 239 || num == 36 || num == 428 || num == 593 || num == 624 || num == 656)
							{
								WorldGen.Check1x1(i, j, num);
							}
							else if (num == 476)
							{
								WorldGen.CheckGolf1x1(i, j, num);
							}
							else if (num == 494)
							{
								WorldGen.CheckGolf1x1(i, j, num);
							}
							else if (num == 419 || num == 420 || num == 423 || num == 424 || num == 429 || num == 445)
							{
								WorldGen.CheckLogicTiles(i, j, num);
							}
							else if (num == 16 || num == 18 || num == 29 || num == 103 || num == 134 || num == 462 || num == 649)
							{
								WorldGen.Check2x1(i, j, (ushort)num);
							}
							else if (num == 13 || num == 33 || num == 50 || num == 78 || num == 174 || num == 372 || num == 49 || num == 646)
							{
								WorldGen.CheckOnTable1x1(i, j, num);
							}
							else if (TileID.Sets.BasicChest[num])
							{
								WorldGen.CheckChest(i, j, num);
							}
							else if (num == 128)
							{
								WorldGen.CheckMan(i, j);
							}
							else if (num == 269)
							{
								WorldGen.CheckWoman(i, j);
							}
							else if (num == 470)
							{
								TEDisplayDoll.Framing_CheckTile(i, j);
							}
							else if (num == 475)
							{
								TEHatRack.Framing_CheckTile(i, j);
							}
							else if (num == 597)
							{
								TETeleportationPylon.Framing_CheckTile(i, j);
							}
							else if (num == 27)
							{
								WorldGen.CheckSunflower(i, j, 27);
							}
							else if (num == 28 || num == 653)
							{
								WorldGen.CheckPot(i, j, num);
							}
							else if (num == 171)
							{
								WorldGen.CheckXmasTree(i, j);
							}
							else if (num == 254 || TileID.Sets.BasicChestFake[num] || num == 457)
							{
								WorldGen.Check2x2Style(i, j, num);
							}
							else if (num == 335 || num == 411 || num == 490 || num == 564 || num == 565 || num == 594)
							{
								WorldGen.Check2x2(i, j, num);
							}
							else if (num == 132 || num == 138 || num == 484 || num == 664 || num == 665 || num == 142 || num == 143 || (num >= 288 && num <= 295) || (num >= 316 && num <= 318) || num == 172 || num == 360 || num == 505 || num == 521 || num == 522 || num == 523 || num == 524 || num == 525 || num == 526 || num == 527 || num == 543 || num == 568 || num == 569 || num == 570 || num == 580 || num == 598 || num == 620 || num == 652 || num == 654)
							{
								WorldGen.Check2x2(i, j, num);
							}
							else if (num == 376 || num == 443 || num == 444 || num == 485)
							{
								WorldGen.CheckSuper(i, j, num);
							}
							else if (num == 91)
							{
								WorldGen.CheckBanner(i, j, (byte)num);
							}
							else if (num == 139 || num == 35)
							{
								WorldGen.CheckMB(i, j, (int)((byte)num));
							}
							else if (num == 386 || num == 387)
							{
								WorldGen.CheckTrapDoor(i, j, num);
							}
							else if (num == 389 || num == 388)
							{
								WorldGen.CheckTallGate(i, j, num);
							}
							else if (num == 92 || num == 93 || num == 453)
							{
								WorldGen.Check1xX(i, j, (short)num);
							}
							else if (num == 104 || num == 105 || num == 207 || num == 320 || num == 337 || num == 349 || num == 356 || num == 378 || num == 410 || num == 456 || num == 465 || num == 480 || num == 489 || num == 506 || num == 509 || num == 531 || num == 545 || num == 560 || num == 591 || num == 592 || num == 657 || num == 658 || num == 663)
							{
								WorldGen.Check2xX(i, j, (ushort)num);
							}
							else if (num == 101 || num == 102 || num == 463 || num == 617)
							{
								WorldGen.Check3x4(i, j, num);
							}
							else if (num == 42 || num == 270 || num == 271 || num == 572 || num == 581 || num == 660)
							{
								WorldGen.Check1x2Top(i, j, (ushort)num);
							}
							else if (num == 55 || num == 85 || num == 395 || num == 425 || num == 510 || num == 511 || num == 573)
							{
								WorldGen.CheckSign(i, j, (ushort)num);
							}
							else if (num == 520)
							{
								WorldGen.CheckFoodPlatter(i, j, (int)((ushort)num));
							}
							else if (num == 209)
							{
								WorldGen.CheckCannon(i, j, num);
							}
							else if (num == 79 || num == 90 || num == 487)
							{
								WorldGen.Check4x2(i, j, num);
							}
							else if (num == 94 || num == 95 || num == 97 || num == 319 || num == 98 || num == 99 || num == 100 || num == 125 || num == 126 || num == 173 || num == 282 || num == 287 || num == 621 || num == 622)
							{
								WorldGen.Check2x2(i, j, num);
							}
							else if (num == 96)
							{
								WorldGen.Check2x2Style(i, j, num);
							}
							else if (num == 81)
							{
								Tile tile2 = Main.tile[i, j - 1];
								Tile tile3 = Main.tile[i, j + 1];
								Tile tile4 = Main.tile[i - 1, j];
								Tile tile5 = Main.tile[i + 1, j];
								int num24 = -1;
								int num25 = -1;
								if (tile2 != null && tile2.active())
								{
									num25 = (int)tile2.type;
								}
								if (tile3 != null && tile3.active())
								{
									num24 = (int)tile3.type;
								}
								if (num25 != -1)
								{
									WorldGen.KillTile(i, j, false, false, false);
								}
								else if (num24 < 0 || !Main.tileSolid[num24] || (tile3 != null && (tile3.halfBrick() || tile3.topSlope())))
								{
									WorldGen.KillTile(i, j, false, false, false);
								}
							}
							else if (Main.tileAlch[num])
							{
								WorldGen.CheckAlch(i, j);
							}
							else if (num == 72)
							{
								Tile tile2 = Main.tile[i, j - 1];
								Tile tile3 = Main.tile[i, j + 1];
								int num26 = -1;
								int num27 = -1;
								if (tile2 != null && tile2.active())
								{
									num27 = (int)tile2.type;
								}
								if (tile3 != null && tile3.active())
								{
									num26 = (int)tile3.type;
								}
								if (num26 != num && num26 != 70)
								{
									WorldGen.KillTile(i, j, false, false, false);
								}
								else if (num27 != num && tile.frameX == 0)
								{
									tile.frameNumber((byte)WorldGen.genRand.Next(3));
									if (tile.frameNumber() == 0)
									{
										tile.frameX = 18;
										tile.frameY = 0;
									}
									if (tile.frameNumber() == 1)
									{
										tile.frameX = 18;
										tile.frameY = 18;
									}
									if (tile.frameNumber() == 2)
									{
										tile.frameX = 18;
										tile.frameY = 36;
									}
								}
							}
							else if (num == 5)
							{
								WorldGen.CheckTree(i, j);
							}
							else if (num == 583 || num == 584 || num == 585 || num == 586 || num == 587 || num == 588 || num == 589)
							{
								WorldGen.CheckTreeWithSettings(i, j, new WorldGen.CheckTreeSettings
								{
									IsGroundValid = new WorldGen.CheckTreeSettings.GroundValidTest(WorldGen.GemTreeGroundTest)
								});
							}
							else if (num == 596)
							{
								WorldGen.CheckTreeWithSettings(i, j, new WorldGen.CheckTreeSettings
								{
									IsGroundValid = new WorldGen.CheckTreeSettings.GroundValidTest(WorldGen.VanityTreeGroundTest)
								});
							}
							else if (num == 616)
							{
								WorldGen.CheckTreeWithSettings(i, j, new WorldGen.CheckTreeSettings
								{
									IsGroundValid = new WorldGen.CheckTreeSettings.GroundValidTest(WorldGen.VanityTreeGroundTest)
								});
							}
							else if (num == 634)
							{
								WorldGen.CheckTreeWithSettings(i, j, new WorldGen.CheckTreeSettings
								{
									IsGroundValid = new WorldGen.CheckTreeSettings.GroundValidTest(WorldGen.AshTreeGroundTest)
								});
							}
							else if (num == 323)
							{
								WorldGen.CheckPalmTree(i, j);
							}
							else if (num == 567)
							{
								WorldGen.CheckGnome(i, j);
							}
							else if (num == 630 || num == 631)
							{
								WorldGen.CheckStinkbugBlocker(i, j);
							}
							return;
						}
						else
						{
							if ((num >= 255 && num <= 268) || num == 385 || (num >= 446 && num <= 448))
							{
								Framing.SelfFrame8Way(i, j, tile, resetFrame);
								return;
							}
							Tile tile2 = Main.tile[i, j - 1];
							Tile tile3 = Main.tile[i, j + 1];
							Tile tile4 = Main.tile[i - 1, j];
							Tile tile5 = Main.tile[i + 1, j];
							Tile tile6 = Main.tile[i - 1, j + 1];
							Tile tile7 = Main.tile[i + 1, j + 1];
							Tile tile8 = Main.tile[i - 1, j - 1];
							Tile tile9 = Main.tile[i + 1, j - 1];
							int num28 = -1;
							int num29 = -1;
							int num30 = -1;
							int num31 = -1;
							int num32 = -1;
							int num33 = -1;
							int num34 = -1;
							int num35 = -1;
							if (tile4 != null && tile4.active())
							{
								if (Main.tileStone[(int)tile4.type])
								{
									num31 = 1;
								}
								else
								{
									num31 = (int)tile4.type;
								}
								if (tile4.slope() == 1 || tile4.slope() == 3)
								{
									num31 = -1;
								}
							}
							if (tile5 != null && tile5.active())
							{
								if (Main.tileStone[(int)tile5.type])
								{
									num32 = 1;
								}
								else
								{
									num32 = (int)tile5.type;
								}
								if (tile5.slope() == 2 || tile5.slope() == 4)
								{
									num32 = -1;
								}
							}
							if (tile2 != null && tile2.active())
							{
								if (Main.tileStone[(int)tile2.type])
								{
									num29 = 1;
								}
								else
								{
									num29 = (int)tile2.type;
								}
								if (tile2.slope() == 3 || tile2.slope() == 4)
								{
									num29 = -1;
								}
							}
							if (tile3 != null && tile3.active())
							{
								if (Main.tileStone[(int)tile3.type])
								{
									num34 = 1;
								}
								else
								{
									num34 = (int)tile3.type;
								}
								if (tile3.slope() == 1 || tile3.slope() == 2)
								{
									num34 = -1;
								}
							}
							if (tile8 != null && tile8.active())
							{
								if (Main.tileStone[(int)tile8.type])
								{
									num28 = 1;
								}
								else
								{
									num28 = (int)tile8.type;
								}
							}
							if (tile9 != null && tile9.active())
							{
								if (Main.tileStone[(int)tile9.type])
								{
									num30 = 1;
								}
								else
								{
									num30 = (int)tile9.type;
								}
							}
							if (tile6 != null && tile6.active())
							{
								if (Main.tileStone[(int)tile6.type])
								{
									num33 = 1;
								}
								else
								{
									num33 = (int)tile6.type;
								}
							}
							if (tile7 != null && tile7.active())
							{
								if (Main.tileStone[(int)tile7.type])
								{
									num35 = 1;
								}
								else
								{
									num35 = (int)tile7.type;
								}
							}
							if (tile.slope() == 2)
							{
								num29 = -1;
								num31 = -1;
							}
							if (tile.slope() == 1)
							{
								num29 = -1;
								num32 = -1;
							}
							if (tile.slope() == 4)
							{
								num34 = -1;
								num31 = -1;
							}
							if (tile.slope() == 3)
							{
								num34 = -1;
								num32 = -1;
							}
							if (num == 668)
							{
								num = 0;
							}
							WorldGen.TileMergeAttempt(0, TileID.Sets.Dirt, ref num29, ref num34, ref num31, ref num32, ref num28, ref num30, ref num33, ref num35);
							if (num == 147)
							{
								WorldGen.TileMergeAttempt(num, Main.tileBrick, TileID.Sets.Ices, ref num29, ref num34, ref num31, ref num32, ref num28, ref num30, ref num33, ref num35);
							}
							else if (num == 161 || num == 163 || num == 164 || num == 200)
							{
								WorldGen.TileMergeAttempt(num, Main.tileBrick, TileID.Sets.Snow, ref num29, ref num34, ref num31, ref num32, ref num28, ref num30, ref num33, ref num35);
							}
							else if (num == 162)
							{
								WorldGen.TileMergeAttempt(num, Main.tileBrick, TileID.Sets.IcesSnow, ref num29, ref num34, ref num31, ref num32, ref num28, ref num30, ref num33, ref num35);
							}
							else if (Main.tileBrick[num])
							{
								if (num == 60 || num == 70 || num == 662 || num == 661)
								{
									WorldGen.TileMergeAttempt(num, Main.tileBrick, TileID.Sets.Mud, ref num29, ref num34, ref num31, ref num32, ref num28, ref num30, ref num33, ref num35);
								}
								else if (num == 633)
								{
									WorldGen.TileMergeAttempt(num, Main.tileBrick, TileID.Sets.Ash, ref num29, ref num34, ref num31, ref num32, ref num28, ref num30, ref num33, ref num35);
								}
								else
								{
									WorldGen.TileMergeAttempt(num, Main.tileBrick, ref num29, ref num34, ref num31, ref num32, ref num28, ref num30, ref num33, ref num35);
								}
							}
							else if (Main.tilePile[num])
							{
								WorldGen.TileMergeAttempt(num, Main.tilePile, ref num29, ref num34, ref num31, ref num32, ref num28, ref num30, ref num33, ref num35);
							}
							if ((num == 1 || Main.tileMoss[num] || num == 117 || num == 25 || num == 203) && num34 == 165)
							{
								if (tile3 != null && tile3.frameY == 72)
								{
									num34 = num;
								}
								else if (tile3 != null && tile3.frameY == 0)
								{
									num34 = num;
								}
							}
							if ((num == 1 || Main.tileMoss[num] || num == 117 || num == 25 || num == 203) && num29 == 165)
							{
								if (tile2 != null && tile2.frameY == 90)
								{
									num29 = num;
								}
								else if (tile2 != null && tile2.frameY == 54)
								{
									num29 = num;
								}
							}
							if (num == 225)
							{
								if (num34 == 165)
								{
									num34 = num;
								}
								if (num29 == 165)
								{
									num29 = num;
								}
							}
							if ((num == 200 || num == 161 || num == 147 || num == 163 || num == 164) && num34 == 165)
							{
								num34 = num;
							}
							if ((tile.slope() == 1 || tile.slope() == 2) && num34 > -1 && !TileID.Sets.Platforms[num34])
							{
								num34 = num;
							}
							if (num29 > -1 && tile2 != null && (tile2.slope() == 1 || tile2.slope() == 2) && !TileID.Sets.Platforms[num29])
							{
								num29 = num;
							}
							if ((tile.slope() == 3 || tile.slope() == 4) && num29 > -1 && !TileID.Sets.Platforms[num29])
							{
								num29 = num;
							}
							if (num34 > -1 && tile3 != null && (tile3.slope() == 3 || tile3.slope() == 4) && !TileID.Sets.Platforms[num34])
							{
								num34 = num;
							}
							if (num == 124)
							{
								if (num29 > -1 && Main.tileSolid[num29] && !TileID.Sets.Platforms[num29])
								{
									num29 = num;
								}
								if (num34 > -1 && Main.tileSolid[num34] && !TileID.Sets.Platforms[num34])
								{
									num34 = num;
								}
							}
							if (num29 > -1 && tile2 != null && tile2.halfBrick() && !TileID.Sets.Platforms[num29])
							{
								num29 = num;
							}
							if (num31 > -1 && tile4 != null && tile4.halfBrick())
							{
								if (tile.halfBrick())
								{
									num31 = num;
								}
								else if ((int)tile4.type != num)
								{
									num31 = -1;
								}
							}
							if (num32 > -1 && tile5 != null && tile5.halfBrick())
							{
								if (tile.halfBrick())
								{
									num32 = num;
								}
								else if ((int)tile5.type != num)
								{
									num32 = -1;
								}
							}
							if (tile.halfBrick())
							{
								if (num31 != num)
								{
									num31 = -1;
								}
								if (num32 != num)
								{
									num32 = -1;
								}
								num29 = -1;
							}
							if (tile3 != null && tile3.halfBrick())
							{
								num34 = -1;
							}
							if (!Main.tileSolid[num])
							{
								if (num == 49)
								{
									WorldGen.CheckOnTable1x1(i, j, (int)((byte)num));
									return;
								}
								if (num == 80)
								{
									WorldGen.CactusFrame(i, j);
									return;
								}
							}
							WorldGen.mergeUp = false;
							WorldGen.mergeDown = false;
							WorldGen.mergeLeft = false;
							WorldGen.mergeRight = false;
							int num36;
							if (resetFrame)
							{
								num36 = WorldGen.genRand.Next(0, 3);
								tile.frameNumber((byte)num36);
							}
							else
							{
								num36 = (int)tile.frameNumber();
							}
							if (Main.tileLargeFrames[num] == 1)
							{
								int num37 = j % 4;
								int num38 = i % 3;
								num36 = (new int[,]
								{
									{
										2,
										4,
										2
									},
									{
										1,
										3,
										1
									},
									{
										2,
										2,
										4
									},
									{
										1,
										1,
										3
									}
								})[num37, num38] - 1;
							}
							if (Main.tileLargeFrames[num] == 2)
							{
								int num39 = i % 2;
								int num40 = j % 2;
								num36 = num39 + num40 * 2;
							}
							if (!Main.tileRope[num] && TileID.Sets.BlockMergesWithMergeAllBlock[num])
							{
								WorldGen.TileMergeAttempt(num, Main.tileBlendAll, ref num29, ref num34, ref num31, ref num32, ref num28, ref num30, ref num33, ref num35);
							}
							if (Main.tileBlendAll[num])
							{
								WorldGen.TileMergeAttempt(num, TileID.Sets.BlockMergesWithMergeAllBlock, ref num29, ref num34, ref num31, ref num32, ref num28, ref num30, ref num33, ref num35);
							}
							if (TileID.Sets.ForcedDirtMerging[num])
							{
								WorldGen.TileMergeAttempt(num, TileID.Sets.Dirt, ref num29, ref num34, ref num31, ref num32, ref num28, ref num30, ref num33, ref num35);
							}
							if (TileID.Sets.Dirt[num])
							{
								if (num29 > -1 && Main.tileMergeDirt[num29])
								{
									WorldGen.TileFrame(i, j - 1, false, false);
									if (WorldGen.mergeDown)
									{
										num29 = num;
									}
								}
								else if (num29 == 147)
								{
									WorldGen.TileFrame(i, j - 1, false, false);
									if (WorldGen.mergeDown)
									{
										num29 = num;
									}
								}
								if (num34 > -1 && Main.tileMergeDirt[num34])
								{
									WorldGen.TileFrame(i, j + 1, false, false);
									if (WorldGen.mergeUp)
									{
										num34 = num;
									}
								}
								else if (num34 == 147)
								{
									WorldGen.TileFrame(i, j + 1, false, false);
									if (WorldGen.mergeUp)
									{
										num34 = num;
									}
								}
								if (num31 > -1 && Main.tileMergeDirt[num31])
								{
									WorldGen.TileFrame(i - 1, j, false, false);
									if (WorldGen.mergeRight)
									{
										num31 = num;
									}
								}
								else if (num31 == 147)
								{
									WorldGen.TileFrame(i - 1, j, false, false);
									if (WorldGen.mergeRight)
									{
										num31 = num;
									}
								}
								if (num32 > -1 && Main.tileMergeDirt[num32])
								{
									WorldGen.TileFrame(i + 1, j, false, false);
									if (WorldGen.mergeLeft)
									{
										num32 = num;
									}
								}
								else if (num32 == 147)
								{
									WorldGen.TileFrame(i + 1, j, false, false);
									if (WorldGen.mergeLeft)
									{
										num32 = num;
									}
								}
								bool[] mergesWithDirtInASpecialWay = TileID.Sets.Conversion.MergesWithDirtInASpecialWay;
								if (num29 > -1 && mergesWithDirtInASpecialWay[num29])
								{
									num29 = num;
								}
								if (num34 > -1 && mergesWithDirtInASpecialWay[num34])
								{
									num34 = num;
								}
								if (num31 > -1 && mergesWithDirtInASpecialWay[num31])
								{
									num31 = num;
								}
								if (num32 > -1 && mergesWithDirtInASpecialWay[num32])
								{
									num32 = num;
								}
								if (num28 > -1 && Main.tileMergeDirt[num28])
								{
									num28 = num;
								}
								else if (num28 > -1 && mergesWithDirtInASpecialWay[num28])
								{
									num28 = num;
								}
								if (num30 > -1 && Main.tileMergeDirt[num30])
								{
									num30 = num;
								}
								else if (num30 > -1 && mergesWithDirtInASpecialWay[num30])
								{
									num30 = num;
								}
								if (num33 > -1 && Main.tileMergeDirt[num33])
								{
									num33 = num;
								}
								else if (num33 > -1 && mergesWithDirtInASpecialWay[num33])
								{
									num33 = num;
								}
								if (num35 > -1 && Main.tileMergeDirt[num35])
								{
									num35 = num;
								}
								else if (num35 > -1 && mergesWithDirtInASpecialWay[num35])
								{
									num35 = num;
								}
								int myType = 0;
								WorldGen.TileMergeAttempt(myType, TileID.Sets.Dirt, ref num29, ref num34, ref num31, ref num32, ref num28, ref num30, ref num33, ref num35);
								WorldGen.TileMergeAttempt(-2, TileID.Sets.Mud, ref num29, ref num34, ref num31, ref num32, ref num28, ref num30, ref num33, ref num35);
								WorldGen.TileMergeAttempt(myType, 191, ref num29, ref num34, ref num31, ref num32, ref num28, ref num30, ref num33, ref num35);
								if (num29 > -1 && TileID.Sets.ForcedDirtMerging[num29])
								{
									num29 = num;
								}
								if (num34 > -1 && TileID.Sets.ForcedDirtMerging[num34])
								{
									num34 = num;
								}
								if (num31 > -1 && TileID.Sets.ForcedDirtMerging[num31])
								{
									num31 = num;
								}
								if (num32 > -1 && TileID.Sets.ForcedDirtMerging[num32])
								{
									num32 = num;
								}
								if (num28 > -1 && TileID.Sets.ForcedDirtMerging[num28])
								{
									num28 = num;
								}
								if (num30 > -1 && TileID.Sets.ForcedDirtMerging[num30])
								{
									num30 = num;
								}
								if (num33 > -1 && TileID.Sets.ForcedDirtMerging[num33])
								{
									num33 = num;
								}
								if (num35 > -1 && TileID.Sets.ForcedDirtMerging[num35])
								{
									num35 = num;
								}
							}
							else if (Main.tileRope[num])
							{
								if (num != 504 && num29 != num && WorldGen.IsRope(i, j - 1))
								{
									num29 = num;
								}
								if (num34 != num && WorldGen.IsRope(i, j + 1))
								{
									num34 = num;
								}
								if (num != 504 && num29 > -1 && Main.tileSolid[num29] && !Main.tileSolidTop[num29])
								{
									num29 = num;
								}
								if (num34 > -1 && Main.tileSolid[num34])
								{
									num34 = num;
								}
								if (num != 504 && num29 != num)
								{
									if (num31 > -1 && Main.tileSolid[num31])
									{
										num31 = num;
									}
									if (num32 > -1 && Main.tileSolid[num32])
									{
										num32 = num;
									}
								}
							}
							else if (num == 53)
							{
								WorldGen.TileMergeAttemptFrametest(i, j, num, 397, ref num29, ref num34, ref num31, ref num32, ref num28, ref num30, ref num33, ref num35);
								WorldGen.TileMergeAttemptFrametest(i, j, num, 396, ref num29, ref num34, ref num31, ref num32, ref num28, ref num30, ref num33, ref num35);
							}
							else if (num == 234)
							{
								WorldGen.TileMergeAttemptFrametest(i, j, num, 399, ref num29, ref num34, ref num31, ref num32, ref num28, ref num30, ref num33, ref num35);
								WorldGen.TileMergeAttemptFrametest(i, j, num, 401, ref num29, ref num34, ref num31, ref num32, ref num28, ref num30, ref num33, ref num35);
							}
							else if (num == 112)
							{
								WorldGen.TileMergeAttemptFrametest(i, j, num, 398, ref num29, ref num34, ref num31, ref num32, ref num28, ref num30, ref num33, ref num35);
								WorldGen.TileMergeAttemptFrametest(i, j, num, 400, ref num29, ref num34, ref num31, ref num32, ref num28, ref num30, ref num33, ref num35);
							}
							else if (num == 116)
							{
								WorldGen.TileMergeAttemptFrametest(i, j, num, 402, ref num29, ref num34, ref num31, ref num32, ref num28, ref num30, ref num33, ref num35);
								WorldGen.TileMergeAttemptFrametest(i, j, num, 403, ref num29, ref num34, ref num31, ref num32, ref num28, ref num30, ref num33, ref num35);
							}
							if (Main.tileMergeDirt[num])
							{
								WorldGen.TileMergeAttempt(-2, TileID.Sets.Dirt, ref num29, ref num34, ref num31, ref num32, ref num28, ref num30, ref num33, ref num35);
								if (num == 1)
								{
									if ((double)j > Main.rockLayer)
									{
										WorldGen.TileMergeAttemptFrametest(i, j, num, TileID.Sets.Mud, ref num29, ref num34, ref num31, ref num32, ref num28, ref num30, ref num33, ref num35);
									}
									WorldGen.TileMergeAttemptFrametest(i, j, num, TileID.Sets.Ash, ref num29, ref num34, ref num31, ref num32, ref num28, ref num30, ref num33, ref num35);
								}
							}
							else if (num == 58 || num == 76 || num == 75)
							{
								WorldGen.TileMergeAttempt(-2, TileID.Sets.Ash, ref num29, ref num34, ref num31, ref num32, ref num28, ref num30, ref num33, ref num35);
							}
							else if (num == 57)
							{
								WorldGen.TileMergeAttempt(-2, 1, ref num29, ref num34, ref num31, ref num32, ref num28, ref num30, ref num33, ref num35);
								WorldGen.TileMergeAttempt(num, 633, ref num29, ref num34, ref num31, ref num32, ref num28, ref num30, ref num33, ref num35);
								WorldGen.TileMergeAttemptFrametest(i, j, num, TileID.Sets.HellSpecial, ref num29, ref num34, ref num31, ref num32, ref num28, ref num30, ref num33, ref num35);
							}
							else if (num == 59)
							{
								if ((double)j > Main.rockLayer)
								{
									WorldGen.TileMergeAttempt(-2, 1, ref num29, ref num34, ref num31, ref num32, ref num28, ref num30, ref num33, ref num35);
								}
								WorldGen.TileMergeAttempt(num, TileID.Sets.GrassSpecial, ref num29, ref num34, ref num31, ref num32, ref num28, ref num30, ref num33, ref num35);
								WorldGen.TileMergeAttemptFrametest(i, j, num, TileID.Sets.JungleSpecial, ref num29, ref num34, ref num31, ref num32, ref num28, ref num30, ref num33, ref num35);
								if ((double)j < Main.rockLayer)
								{
									WorldGen.TileMergeAttemptFrametest(i, j, num, TileID.Sets.Dirt, ref num29, ref num34, ref num31, ref num32, ref num28, ref num30, ref num33, ref num35);
								}
								else
								{
									WorldGen.TileMergeAttempt(num, TileID.Sets.Dirt, ref num29, ref num34, ref num31, ref num32);
								}
							}
							else if (num == 211)
							{
								WorldGen.TileMergeAttempt(59, 60, ref num29, ref num34, ref num31, ref num32);
								WorldGen.TileMergeAttempt(-2, TileID.Sets.Mud, ref num29, ref num34, ref num31, ref num32, ref num28, ref num30, ref num33, ref num35);
							}
							else if (num == 225 || num == 226)
							{
								WorldGen.TileMergeAttempt(-2, TileID.Sets.Mud, ref num29, ref num34, ref num31, ref num32, ref num28, ref num30, ref num33, ref num35);
							}
							else if (num == 60)
							{
								WorldGen.TileMergeAttempt(59, 211, ref num29, ref num34, ref num31, ref num32);
							}
							else if (num == 189)
							{
								WorldGen.TileMergeAttemptFrametest(i, j, num, TileID.Sets.MergesWithClouds, ref num29, ref num34, ref num31, ref num32, ref num28, ref num30, ref num33, ref num35);
							}
							else if (num == 196)
							{
								WorldGen.TileMergeAttempt(-2, 189, ref num29, ref num34, ref num31, ref num32, ref num28, ref num30, ref num33, ref num35);
								WorldGen.TileMergeAttempt(num, 460, ref num29, ref num34, ref num31, ref num32, ref num28, ref num30, ref num33, ref num35);
							}
							else if (num == 460)
							{
								WorldGen.TileMergeAttempt(-2, 189, ref num29, ref num34, ref num31, ref num32, ref num28, ref num30, ref num33, ref num35);
								WorldGen.TileMergeAttempt(num, 196, ref num29, ref num34, ref num31, ref num32, ref num28, ref num30, ref num33, ref num35);
							}
							else if (num == 147)
							{
								WorldGen.TileMergeAttemptFrametest(i, j, num, TileID.Sets.IcesSlush, ref num29, ref num34, ref num31, ref num32, ref num28, ref num30, ref num33, ref num35);
							}
							else if (num == 161 || num == 163 || num == 164 || num == 200 || num == 224)
							{
								WorldGen.TileMergeAttempt(-2, 147, ref num29, ref num34, ref num31, ref num32, ref num28, ref num30, ref num33, ref num35);
							}
							else if (num == 162)
							{
								WorldGen.TileMergeAttempt(-2, TileID.Sets.IcesSnow, ref num29, ref num34, ref num31, ref num32, ref num28, ref num30, ref num33, ref num35);
							}
							else if (num == 32)
							{
								if (num34 == 23)
								{
									num34 = num;
								}
							}
							else if (num == 352)
							{
								if (num34 == 199)
								{
									num34 = num;
								}
							}
							else if (num == 69)
							{
								if (num34 == 60)
								{
									num34 = num;
								}
							}
							else if (num == 655)
							{
								if (num34 == 60)
								{
									num34 = num;
								}
							}
							else if (num == 51)
							{
								WorldGen.TileMergeAttempt(num, TileID.Sets.AllTiles, Main.tileNoAttach, ref num29, ref num34, ref num31, ref num32, ref num28, ref num30, ref num33, ref num35);
							}
							else if (num == 192)
							{
								WorldGen.TileMergeAttemptFrametest(i, j, num, 191, ref num29, ref num34, ref num31, ref num32, ref num28, ref num30, ref num33, ref num35);
							}
							else if (num == 191)
							{
								WorldGen.TileMergeAttempt(-2, 192, ref num29, ref num34, ref num31, ref num32, ref num28, ref num30, ref num33, ref num35);
								WorldGen.TileMergeAttempt(num, TileID.Sets.Dirt, ref num29, ref num34, ref num31, ref num32, ref num28, ref num30, ref num33, ref num35);
							}
							else if (num == 384)
							{
								WorldGen.TileMergeAttemptFrametest(i, j, num, 383, ref num29, ref num34, ref num31, ref num32, ref num28, ref num30, ref num33, ref num35);
							}
							else if (num == 383)
							{
								WorldGen.TileMergeAttempt(-2, 384, ref num29, ref num34, ref num31, ref num32, ref num28, ref num30, ref num33, ref num35);
								WorldGen.TileMergeAttempt(num, TileID.Sets.Mud, ref num29, ref num34, ref num31, ref num32, ref num28, ref num30, ref num33, ref num35);
							}
							else if (num == 407)
							{
								WorldGen.TileMergeAttempt(-2, 404, ref num29, ref num34, ref num31, ref num32, ref num28, ref num30, ref num33, ref num35);
							}
							else if (num == 404)
							{
								WorldGen.TileMergeAttempt(-2, 396, ref num29, ref num34, ref num31, ref num32, ref num28, ref num30, ref num33, ref num35);
								WorldGen.TileMergeAttemptFrametest(i, j, num, 407, ref num29, ref num34, ref num31, ref num32, ref num28, ref num30, ref num33, ref num35);
							}
							else if (num == 397)
							{
								WorldGen.TileMergeAttempt(-2, 53, ref num29, ref num34, ref num31, ref num32, ref num28, ref num30, ref num33, ref num35);
								WorldGen.TileMergeAttemptFrametest(i, j, num, 396, ref num29, ref num34, ref num31, ref num32, ref num28, ref num30, ref num33, ref num35);
							}
							else if (num == 396)
							{
								WorldGen.TileMergeAttempt(-2, 397, ref num29, ref num34, ref num31, ref num32, ref num28, ref num30, ref num33, ref num35);
								WorldGen.TileMergeAttempt(-2, 53, ref num29, ref num34, ref num31, ref num32, ref num28, ref num30, ref num33, ref num35);
								WorldGen.TileMergeAttemptFrametest(i, j, num, 404, ref num29, ref num34, ref num31, ref num32, ref num28, ref num30, ref num33, ref num35);
							}
							else if (num == 398)
							{
								WorldGen.TileMergeAttempt(-2, 112, ref num29, ref num34, ref num31, ref num32, ref num28, ref num30, ref num33, ref num35);
								WorldGen.TileMergeAttemptFrametest(i, j, num, 400, ref num29, ref num34, ref num31, ref num32, ref num28, ref num30, ref num33, ref num35);
							}
							else if (num == 400)
							{
								WorldGen.TileMergeAttempt(-2, 398, ref num29, ref num34, ref num31, ref num32, ref num28, ref num30, ref num33, ref num35);
								WorldGen.TileMergeAttempt(-2, 112, ref num29, ref num34, ref num31, ref num32, ref num28, ref num30, ref num33, ref num35);
							}
							else if (num == 399)
							{
								WorldGen.TileMergeAttempt(-2, 234, ref num29, ref num34, ref num31, ref num32, ref num28, ref num30, ref num33, ref num35);
								WorldGen.TileMergeAttemptFrametest(i, j, num, 401, ref num29, ref num34, ref num31, ref num32, ref num28, ref num30, ref num33, ref num35);
							}
							else if (num == 401)
							{
								WorldGen.TileMergeAttempt(-2, 399, ref num29, ref num34, ref num31, ref num32, ref num28, ref num30, ref num33, ref num35);
								WorldGen.TileMergeAttempt(-2, 234, ref num29, ref num34, ref num31, ref num32, ref num28, ref num30, ref num33, ref num35);
							}
							else if (num == 402)
							{
								WorldGen.TileMergeAttempt(-2, 116, ref num29, ref num34, ref num31, ref num32, ref num28, ref num30, ref num33, ref num35);
								WorldGen.TileMergeAttemptFrametest(i, j, num, 403, ref num29, ref num34, ref num31, ref num32, ref num28, ref num30, ref num33, ref num35);
							}
							else if (num == 403)
							{
								WorldGen.TileMergeAttempt(-2, 402, ref num29, ref num34, ref num31, ref num32, ref num28, ref num30, ref num33, ref num35);
								WorldGen.TileMergeAttempt(-2, 116, ref num29, ref num34, ref num31, ref num32, ref num28, ref num30, ref num33, ref num35);
							}
							if (num == 0)
							{
								WorldGen.TileMergeAttempt(num, Main.tileMoss, ref num29, ref num34, ref num31, ref num32, ref num28, ref num30, ref num33, ref num35);
								WorldGen.TileMergeAttempt(num, TileID.Sets.tileMossBrick, ref num29, ref num34, ref num31, ref num32, ref num28, ref num30, ref num33, ref num35);
							}
							else if (Main.tileMoss[num] || TileID.Sets.tileMossBrick[num])
							{
								WorldGen.TileMergeAttempt(num, TileID.Sets.Dirt, ref num29, ref num34, ref num31, ref num32, ref num28, ref num30, ref num33, ref num35);
							}
							else if (Main.tileStone[num] || num == 1)
							{
								WorldGen.TileMergeAttempt(num, Main.tileMoss, ref num29, ref num34, ref num31, ref num32, ref num28, ref num30, ref num33, ref num35);
							}
							else if (num == 38)
							{
								WorldGen.TileMergeAttempt(num, TileID.Sets.tileMossBrick, ref num29, ref num34, ref num31, ref num32, ref num28, ref num30, ref num33, ref num35);
							}
							if (TileID.Sets.Conversion.Grass[num])
							{
								WorldGen.TileMergeAttempt(num, TileID.Sets.Ore, ref num29, ref num34, ref num31, ref num32, ref num28, ref num30, ref num33, ref num35);
							}
							else if (TileID.Sets.Ore[num])
							{
								WorldGen.TileMergeAttempt(num, TileID.Sets.Conversion.Grass, ref num29, ref num34, ref num31, ref num32, ref num28, ref num30, ref num33, ref num35);
							}
							if (num >= 0 && num < (int)TileID.Count && TileID.Sets.Mud[num])
							{
								WorldGen.TileMergeAttempt(num, TileID.Sets.OreMergesWithMud, ref num29, ref num34, ref num31, ref num32, ref num28, ref num30, ref num33, ref num35);
							}
							else if (TileID.Sets.OreMergesWithMud[num])
							{
								WorldGen.TileMergeAttempt(num, TileID.Sets.Mud, ref num29, ref num34, ref num31, ref num32, ref num28, ref num30, ref num33, ref num35);
							}
							bool flag = false;
							WorldGen.TileMergeCullCache tileMergeCullCache = default(WorldGen.TileMergeCullCache);
							if (!Main.ShouldShowInvisibleWalls())
							{
								bool flag2 = tile.invisibleBlock();
								tileMergeCullCache.CullTop |= (tile2 != null && tile2.invisibleBlock() != flag2);
								tileMergeCullCache.CullBottom |= (tile3 != null && tile3.invisibleBlock() != flag2);
								tileMergeCullCache.CullLeft |= (tile4 != null && tile4.invisibleBlock() != flag2);
								tileMergeCullCache.CullRight |= (tile5 != null && tile5.invisibleBlock() != flag2);
								tileMergeCullCache.CullTopLeft |= (tile8 != null && tile8.invisibleBlock() != flag2);
								tileMergeCullCache.CullTopRight |= (tile9 != null && tile9.invisibleBlock() != flag2);
								tileMergeCullCache.CullBottomLeft |= (tile6 != null && tile6.invisibleBlock() != flag2);
								tileMergeCullCache.CullBottomRight |= (tile7 != null && tile7.invisibleBlock() != flag2);
							}
							if (num == 2 || num == 23 || num == 661 || num == 662 || num == 60 || num == 477 || num == 492 || num == 70 || num == 109 || num == 199 || Main.tileMoss[num] || TileID.Sets.NeedsGrassFraming[num] || TileID.Sets.tileMossBrick[num])
							{
								flag = true;
								WorldGen.TileMergeAttemptWeird(num, -1, Main.tileSolid, ref num29, ref num34, ref num31, ref num32, ref num28, ref num30, ref num33, ref num35);
								int num41 = TileID.Sets.NeedsGrassFramingDirt[num];
								if (num == 60 || num == 70 || num == 661 || num == 662)
								{
									num41 = 59;
								}
								else if (Main.tileMoss[num])
								{
									num41 = 1;
								}
								else if (TileID.Sets.tileMossBrick[num])
								{
									num41 = 38;
								}
								else if (num == 2 || num == 477)
								{
									WorldGen.TileMergeAttempt(num41, 23, ref num29, ref num34, ref num31, ref num32, ref num28, ref num30, ref num33, ref num35);
								}
								else if (num == 23)
								{
									WorldGen.TileMergeAttempt(num41, 2, ref num29, ref num34, ref num31, ref num32, ref num28, ref num30, ref num33, ref num35);
								}
								tileMergeCullCache.Cull(ref num29, ref num34, ref num31, ref num32, ref num28, ref num30, ref num33, ref num35);
								if (num29 != num && num29 != num41 && (num34 == num || num34 == num41))
								{
									if (num31 == num41 && num32 == num)
									{
										if (num36 == 0)
										{
											rectangle.X = 0;
											rectangle.Y = 198;
										}
										else if (num36 == 1)
										{
											rectangle.X = 18;
											rectangle.Y = 198;
										}
										else
										{
											rectangle.X = 36;
											rectangle.Y = 198;
										}
									}
									else if (num31 == num && num32 == num41)
									{
										if (num36 == 0)
										{
											rectangle.X = 54;
											rectangle.Y = 198;
										}
										else if (num36 == 1)
										{
											rectangle.X = 72;
											rectangle.Y = 198;
										}
										else
										{
											rectangle.X = 90;
											rectangle.Y = 198;
										}
									}
								}
								else if (num34 != num && num34 != num41 && (num29 == num || num29 == num41))
								{
									if (num31 == num41 && num32 == num)
									{
										if (num36 == 0)
										{
											rectangle.X = 0;
											rectangle.Y = 216;
										}
										else if (num36 == 1)
										{
											rectangle.X = 18;
											rectangle.Y = 216;
										}
										else
										{
											rectangle.X = 36;
											rectangle.Y = 216;
										}
									}
									else if (num31 == num && num32 == num41)
									{
										if (num36 == 0)
										{
											rectangle.X = 54;
											rectangle.Y = 216;
										}
										else if (num36 == 1)
										{
											rectangle.X = 72;
											rectangle.Y = 216;
										}
										else
										{
											rectangle.X = 90;
											rectangle.Y = 216;
										}
									}
								}
								else if (num31 != num && num31 != num41 && (num32 == num || num32 == num41))
								{
									if (num29 == num41 && num34 == num)
									{
										if (num36 == 0)
										{
											rectangle.X = 72;
											rectangle.Y = 144;
										}
										else if (num36 == 1)
										{
											rectangle.X = 72;
											rectangle.Y = 162;
										}
										else
										{
											rectangle.X = 72;
											rectangle.Y = 180;
										}
									}
									else if (num34 == num && num29 == num41)
									{
										if (num36 == 0)
										{
											rectangle.X = 72;
											rectangle.Y = 90;
										}
										else if (num36 == 1)
										{
											rectangle.X = 72;
											rectangle.Y = 108;
										}
										else
										{
											rectangle.X = 72;
											rectangle.Y = 126;
										}
									}
								}
								else if (num32 != num && num32 != num41 && (num31 == num || num31 == num41))
								{
									if (num29 == num41 && num34 == num)
									{
										if (num36 == 0)
										{
											rectangle.X = 90;
											rectangle.Y = 144;
										}
										else if (num36 == 1)
										{
											rectangle.X = 90;
											rectangle.Y = 162;
										}
										else
										{
											rectangle.X = 90;
											rectangle.Y = 180;
										}
									}
									else if (num34 == num && num32 == num29)
									{
										if (num36 == 0)
										{
											rectangle.X = 90;
											rectangle.Y = 90;
										}
										else if (num36 == 1)
										{
											rectangle.X = 90;
											rectangle.Y = 108;
										}
										else
										{
											rectangle.X = 90;
											rectangle.Y = 126;
										}
									}
								}
								else if (num29 == num && num34 == num && num31 == num && num32 == num)
								{
									if (num28 != num && num30 != num && num33 != num && num35 != num)
									{
										if (num35 == num41)
										{
											if (num36 == 0)
											{
												rectangle.X = 108;
												rectangle.Y = 324;
											}
											else if (num36 == 1)
											{
												rectangle.X = 126;
												rectangle.Y = 324;
											}
											else
											{
												rectangle.X = 144;
												rectangle.Y = 324;
											}
										}
										else if (num30 == num41)
										{
											if (num36 == 0)
											{
												rectangle.X = 108;
												rectangle.Y = 342;
											}
											else if (num36 == 1)
											{
												rectangle.X = 126;
												rectangle.Y = 342;
											}
											else
											{
												rectangle.X = 144;
												rectangle.Y = 342;
											}
										}
										else if (num33 == num41)
										{
											if (num36 == 0)
											{
												rectangle.X = 108;
												rectangle.Y = 360;
											}
											else if (num36 == 1)
											{
												rectangle.X = 126;
												rectangle.Y = 360;
											}
											else
											{
												rectangle.X = 144;
												rectangle.Y = 360;
											}
										}
										else if (num28 == num41)
										{
											if (num36 == 0)
											{
												rectangle.X = 108;
												rectangle.Y = 378;
											}
											else if (num36 == 1)
											{
												rectangle.X = 126;
												rectangle.Y = 378;
											}
											else
											{
												rectangle.X = 144;
												rectangle.Y = 378;
											}
										}
										else if (num36 == 0)
										{
											rectangle.X = 144;
											rectangle.Y = 234;
										}
										else if (num36 == 1)
										{
											rectangle.X = 198;
											rectangle.Y = 234;
										}
										else
										{
											rectangle.X = 252;
											rectangle.Y = 234;
										}
									}
									else if (num28 != num && num35 != num)
									{
										if (num36 == 0)
										{
											rectangle.X = 36;
											rectangle.Y = 306;
										}
										else if (num36 == 1)
										{
											rectangle.X = 54;
											rectangle.Y = 306;
										}
										else
										{
											rectangle.X = 72;
											rectangle.Y = 306;
										}
									}
									else if (num30 != num && num33 != num)
									{
										if (num36 == 0)
										{
											rectangle.X = 90;
											rectangle.Y = 306;
										}
										else if (num36 == 1)
										{
											rectangle.X = 108;
											rectangle.Y = 306;
										}
										else
										{
											rectangle.X = 126;
											rectangle.Y = 306;
										}
									}
									else if (num28 != num && num30 == num && num33 == num && num35 == num)
									{
										if (num36 == 0)
										{
											rectangle.X = 54;
											rectangle.Y = 108;
										}
										else if (num36 == 1)
										{
											rectangle.X = 54;
											rectangle.Y = 144;
										}
										else
										{
											rectangle.X = 54;
											rectangle.Y = 180;
										}
									}
									else if (num28 == num && num30 != num && num33 == num && num35 == num)
									{
										if (num36 == 0)
										{
											rectangle.X = 36;
											rectangle.Y = 108;
										}
										else if (num36 == 1)
										{
											rectangle.X = 36;
											rectangle.Y = 144;
										}
										else
										{
											rectangle.X = 36;
											rectangle.Y = 180;
										}
									}
									else if (num28 == num && num30 == num && num33 != num && num35 == num)
									{
										if (num36 == 0)
										{
											rectangle.X = 54;
											rectangle.Y = 90;
										}
										else if (num36 == 1)
										{
											rectangle.X = 54;
											rectangle.Y = 126;
										}
										else
										{
											rectangle.X = 54;
											rectangle.Y = 162;
										}
									}
									else if (num28 == num && num30 == num && num33 == num && num35 != num)
									{
										if (num36 == 0)
										{
											rectangle.X = 36;
											rectangle.Y = 90;
										}
										else if (num36 == 1)
										{
											rectangle.X = 36;
											rectangle.Y = 126;
										}
										else
										{
											rectangle.X = 36;
											rectangle.Y = 162;
										}
									}
								}
								else if (num29 == num && num34 == num41 && num31 == num && num32 == num && num28 == -1 && num30 == -1)
								{
									if (num36 == 0)
									{
										rectangle.X = 108;
										rectangle.Y = 18;
									}
									else if (num36 == 1)
									{
										rectangle.X = 126;
										rectangle.Y = 18;
									}
									else
									{
										rectangle.X = 144;
										rectangle.Y = 18;
									}
								}
								else if (num29 == num41 && num34 == num && num31 == num && num32 == num && num33 == -1 && num35 == -1)
								{
									if (num36 == 0)
									{
										rectangle.X = 108;
										rectangle.Y = 36;
									}
									else if (num36 == 1)
									{
										rectangle.X = 126;
										rectangle.Y = 36;
									}
									else
									{
										rectangle.X = 144;
										rectangle.Y = 36;
									}
								}
								else if (num29 == num && num34 == num && num31 == num41 && num32 == num && num30 == -1 && num35 == -1)
								{
									if (num36 == 0)
									{
										rectangle.X = 198;
										rectangle.Y = 0;
									}
									else if (num36 == 1)
									{
										rectangle.X = 198;
										rectangle.Y = 18;
									}
									else
									{
										rectangle.X = 198;
										rectangle.Y = 36;
									}
								}
								else if (num29 == num && num34 == num && num31 == num && num32 == num41 && num28 == -1 && num33 == -1)
								{
									if (num36 == 0)
									{
										rectangle.X = 180;
										rectangle.Y = 0;
									}
									else if (num36 == 1)
									{
										rectangle.X = 180;
										rectangle.Y = 18;
									}
									else
									{
										rectangle.X = 180;
										rectangle.Y = 36;
									}
								}
								else if (num29 == num && num34 == num41 && num31 == num && num32 == num)
								{
									if (num30 != -1)
									{
										if (num36 == 0)
										{
											rectangle.X = 54;
											rectangle.Y = 108;
										}
										else if (num36 == 1)
										{
											rectangle.X = 54;
											rectangle.Y = 144;
										}
										else
										{
											rectangle.X = 54;
											rectangle.Y = 180;
										}
									}
									else if (num28 != -1)
									{
										if (num36 == 0)
										{
											rectangle.X = 36;
											rectangle.Y = 108;
										}
										else if (num36 == 1)
										{
											rectangle.X = 36;
											rectangle.Y = 144;
										}
										else
										{
											rectangle.X = 36;
											rectangle.Y = 180;
										}
									}
								}
								else if (num29 == num41 && num34 == num && num31 == num && num32 == num)
								{
									if (num35 != -1)
									{
										if (num36 == 0)
										{
											rectangle.X = 54;
											rectangle.Y = 90;
										}
										else if (num36 == 1)
										{
											rectangle.X = 54;
											rectangle.Y = 126;
										}
										else
										{
											rectangle.X = 54;
											rectangle.Y = 162;
										}
									}
									else if (num33 != -1)
									{
										if (num36 == 0)
										{
											rectangle.X = 36;
											rectangle.Y = 90;
										}
										else if (num36 == 1)
										{
											rectangle.X = 36;
											rectangle.Y = 126;
										}
										else
										{
											rectangle.X = 36;
											rectangle.Y = 162;
										}
									}
								}
								else if (num29 == num && num34 == num && num31 == num && num32 == num41)
								{
									if (num28 != -1)
									{
										if (num36 == 0)
										{
											rectangle.X = 54;
											rectangle.Y = 90;
										}
										else if (num36 == 1)
										{
											rectangle.X = 54;
											rectangle.Y = 126;
										}
										else
										{
											rectangle.X = 54;
											rectangle.Y = 162;
										}
									}
									else if (num33 != -1)
									{
										if (num36 == 0)
										{
											rectangle.X = 54;
											rectangle.Y = 108;
										}
										else if (num36 == 1)
										{
											rectangle.X = 54;
											rectangle.Y = 144;
										}
										else
										{
											rectangle.X = 54;
											rectangle.Y = 180;
										}
									}
								}
								else if (num29 == num && num34 == num && num31 == num41 && num32 == num)
								{
									if (num30 != -1)
									{
										if (num36 == 0)
										{
											rectangle.X = 36;
											rectangle.Y = 90;
										}
										else if (num36 == 1)
										{
											rectangle.X = 36;
											rectangle.Y = 126;
										}
										else
										{
											rectangle.X = 36;
											rectangle.Y = 162;
										}
									}
									else if (num35 != -1)
									{
										if (num36 == 0)
										{
											rectangle.X = 36;
											rectangle.Y = 108;
										}
										else if (num36 == 1)
										{
											rectangle.X = 36;
											rectangle.Y = 144;
										}
										else
										{
											rectangle.X = 36;
											rectangle.Y = 180;
										}
									}
								}
								else if ((num29 == num41 && num34 == num && num31 == num && num32 == num) || (num29 == num && num34 == num41 && num31 == num && num32 == num) || (num29 == num && num34 == num && num31 == num41 && num32 == num) || (num29 == num && num34 == num && num31 == num && num32 == num41))
								{
									if (num36 == 0)
									{
										rectangle.X = 18;
										rectangle.Y = 18;
									}
									else if (num36 == 1)
									{
										rectangle.X = 36;
										rectangle.Y = 18;
									}
									else
									{
										rectangle.X = 54;
										rectangle.Y = 18;
									}
								}
								if ((num29 == num || num29 == num41) && (num34 == num || num34 == num41) && (num31 == num || num31 == num41) && (num32 == num || num32 == num41))
								{
									if (num28 != num && num28 != num41 && (num30 == num || num30 == num41) && (num33 == num || num33 == num41) && (num35 == num || num35 == num41))
									{
										if (num36 == 0)
										{
											rectangle.X = 54;
											rectangle.Y = 108;
										}
										else if (num36 == 1)
										{
											rectangle.X = 54;
											rectangle.Y = 144;
										}
										else
										{
											rectangle.X = 54;
											rectangle.Y = 180;
										}
									}
									else if (num30 != num && num30 != num41 && (num28 == num || num28 == num41) && (num33 == num || num33 == num41) && (num35 == num || num35 == num41))
									{
										if (num36 == 0)
										{
											rectangle.X = 36;
											rectangle.Y = 108;
										}
										else if (num36 == 1)
										{
											rectangle.X = 36;
											rectangle.Y = 144;
										}
										else
										{
											rectangle.X = 36;
											rectangle.Y = 180;
										}
									}
									else if (num33 != num && num33 != num41 && (num28 == num || num28 == num41) && (num30 == num || num30 == num41) && (num35 == num || num35 == num41))
									{
										if (num36 == 0)
										{
											rectangle.X = 54;
											rectangle.Y = 90;
										}
										else if (num36 == 1)
										{
											rectangle.X = 54;
											rectangle.Y = 126;
										}
										else
										{
											rectangle.X = 54;
											rectangle.Y = 162;
										}
									}
									else if (num35 != num && num35 != num41 && (num28 == num || num28 == num41) && (num33 == num || num33 == num41) && (num30 == num || num30 == num41))
									{
										if (num36 == 0)
										{
											rectangle.X = 36;
											rectangle.Y = 90;
										}
										else if (num36 == 1)
										{
											rectangle.X = 36;
											rectangle.Y = 126;
										}
										else
										{
											rectangle.X = 36;
											rectangle.Y = 162;
										}
									}
								}
								if (num29 != num41 && num29 != num && num34 == num && num31 != num41 && num31 != num && num32 == num && num35 != num41 && num35 != num)
								{
									if (num36 == 0)
									{
										rectangle.X = 90;
										rectangle.Y = 270;
									}
									else if (num36 == 1)
									{
										rectangle.X = 108;
										rectangle.Y = 270;
									}
									else
									{
										rectangle.X = 126;
										rectangle.Y = 270;
									}
								}
								else if (num29 != num41 && num29 != num && num34 == num && num31 == num && num32 != num41 && num32 != num && num33 != num41 && num33 != num)
								{
									if (num36 == 0)
									{
										rectangle.X = 144;
										rectangle.Y = 270;
									}
									else if (num36 == 1)
									{
										rectangle.X = 162;
										rectangle.Y = 270;
									}
									else
									{
										rectangle.X = 180;
										rectangle.Y = 270;
									}
								}
								else if (num34 != num41 && num34 != num && num29 == num && num31 != num41 && num31 != num && num32 == num && num30 != num41 && num30 != num)
								{
									if (num36 == 0)
									{
										rectangle.X = 90;
										rectangle.Y = 288;
									}
									else if (num36 == 1)
									{
										rectangle.X = 108;
										rectangle.Y = 288;
									}
									else
									{
										rectangle.X = 126;
										rectangle.Y = 288;
									}
								}
								else if (num34 != num41 && num34 != num && num29 == num && num31 == num && num32 != num41 && num32 != num && num28 != num41 && num28 != num)
								{
									if (num36 == 0)
									{
										rectangle.X = 144;
										rectangle.Y = 288;
									}
									else if (num36 == 1)
									{
										rectangle.X = 162;
										rectangle.Y = 288;
									}
									else
									{
										rectangle.X = 180;
										rectangle.Y = 288;
									}
								}
								else if (num29 != num && num29 != num41 && num34 == num && num31 == num && num32 == num && num33 != num && num33 != num41 && num35 != num && num35 != num41)
								{
									if (num36 == 0)
									{
										rectangle.X = 144;
										rectangle.Y = 216;
									}
									else if (num36 == 1)
									{
										rectangle.X = 198;
										rectangle.Y = 216;
									}
									else
									{
										rectangle.X = 252;
										rectangle.Y = 216;
									}
								}
								else if (num34 != num && num34 != num41 && num29 == num && num31 == num && num32 == num && num28 != num && num28 != num41 && num30 != num && num30 != num41)
								{
									if (num36 == 0)
									{
										rectangle.X = 144;
										rectangle.Y = 252;
									}
									else if (num36 == 1)
									{
										rectangle.X = 198;
										rectangle.Y = 252;
									}
									else
									{
										rectangle.X = 252;
										rectangle.Y = 252;
									}
								}
								else if (num31 != num && num31 != num41 && num34 == num && num29 == num && num32 == num && num30 != num && num30 != num41 && num35 != num && num35 != num41)
								{
									if (num36 == 0)
									{
										rectangle.X = 126;
										rectangle.Y = 234;
									}
									else if (num36 == 1)
									{
										rectangle.X = 180;
										rectangle.Y = 234;
									}
									else
									{
										rectangle.X = 234;
										rectangle.Y = 234;
									}
								}
								else if (num32 != num && num32 != num41 && num34 == num && num29 == num && num31 == num && num28 != num && num28 != num41 && num33 != num && num33 != num41)
								{
									if (num36 == 0)
									{
										rectangle.X = 162;
										rectangle.Y = 234;
									}
									else if (num36 == 1)
									{
										rectangle.X = 216;
										rectangle.Y = 234;
									}
									else
									{
										rectangle.X = 270;
										rectangle.Y = 234;
									}
								}
								else if (num29 != num41 && num29 != num && (num34 == num41 || num34 == num) && num31 == num41 && num32 == num41)
								{
									if (num36 == 0)
									{
										rectangle.X = 36;
										rectangle.Y = 270;
									}
									else if (num36 == 1)
									{
										rectangle.X = 54;
										rectangle.Y = 270;
									}
									else
									{
										rectangle.X = 72;
										rectangle.Y = 270;
									}
								}
								else if (num34 != num41 && num34 != num && (num29 == num41 || num29 == num) && num31 == num41 && num32 == num41)
								{
									if (num36 == 0)
									{
										rectangle.X = 36;
										rectangle.Y = 288;
									}
									else if (num36 == 1)
									{
										rectangle.X = 54;
										rectangle.Y = 288;
									}
									else
									{
										rectangle.X = 72;
										rectangle.Y = 288;
									}
								}
								else if (num31 != num41 && num31 != num && (num32 == num41 || num32 == num) && num29 == num41 && num34 == num41)
								{
									if (num36 == 0)
									{
										rectangle.X = 0;
										rectangle.Y = 270;
									}
									else if (num36 == 1)
									{
										rectangle.X = 0;
										rectangle.Y = 288;
									}
									else
									{
										rectangle.X = 0;
										rectangle.Y = 306;
									}
								}
								else if (num32 != num41 && num32 != num && (num31 == num41 || num31 == num) && num29 == num41 && num34 == num41)
								{
									if (num36 == 0)
									{
										rectangle.X = 18;
										rectangle.Y = 270;
									}
									else if (num36 == 1)
									{
										rectangle.X = 18;
										rectangle.Y = 288;
									}
									else
									{
										rectangle.X = 18;
										rectangle.Y = 306;
									}
								}
								else if (num29 == num && num34 == num41 && num31 == num41 && num32 == num41)
								{
									if (num36 == 0)
									{
										rectangle.X = 198;
										rectangle.Y = 288;
									}
									else if (num36 == 1)
									{
										rectangle.X = 216;
										rectangle.Y = 288;
									}
									else
									{
										rectangle.X = 234;
										rectangle.Y = 288;
									}
								}
								else if (num29 == num41 && num34 == num && num31 == num41 && num32 == num41)
								{
									if (num36 == 0)
									{
										rectangle.X = 198;
										rectangle.Y = 270;
									}
									else if (num36 == 1)
									{
										rectangle.X = 216;
										rectangle.Y = 270;
									}
									else
									{
										rectangle.X = 234;
										rectangle.Y = 270;
									}
								}
								else if (num29 == num41 && num34 == num41 && num31 == num && num32 == num41)
								{
									if (num36 == 0)
									{
										rectangle.X = 198;
										rectangle.Y = 306;
									}
									else if (num36 == 1)
									{
										rectangle.X = 216;
										rectangle.Y = 306;
									}
									else
									{
										rectangle.X = 234;
										rectangle.Y = 306;
									}
								}
								else if (num29 == num41 && num34 == num41 && num31 == num41 && num32 == num)
								{
									if (num36 == 0)
									{
										rectangle.X = 144;
										rectangle.Y = 306;
									}
									else if (num36 == 1)
									{
										rectangle.X = 162;
										rectangle.Y = 306;
									}
									else
									{
										rectangle.X = 180;
										rectangle.Y = 306;
									}
								}
								if (num29 != num && num29 != num41 && num34 == num && num31 == num && num32 == num)
								{
									if ((num33 == num41 || num33 == num) && num35 != num41 && num35 != num)
									{
										if (num36 == 0)
										{
											rectangle.X = 0;
											rectangle.Y = 324;
										}
										else if (num36 == 1)
										{
											rectangle.X = 18;
											rectangle.Y = 324;
										}
										else
										{
											rectangle.X = 36;
											rectangle.Y = 324;
										}
									}
									else if ((num35 == num41 || num35 == num) && num33 != num41 && num33 != num)
									{
										if (num36 == 0)
										{
											rectangle.X = 54;
											rectangle.Y = 324;
										}
										else if (num36 == 1)
										{
											rectangle.X = 72;
											rectangle.Y = 324;
										}
										else
										{
											rectangle.X = 90;
											rectangle.Y = 324;
										}
									}
								}
								else if (num34 != num && num34 != num41 && num29 == num && num31 == num && num32 == num)
								{
									if ((num28 == num41 || num28 == num) && num30 != num41 && num30 != num)
									{
										if (num36 == 0)
										{
											rectangle.X = 0;
											rectangle.Y = 342;
										}
										else if (num36 == 1)
										{
											rectangle.X = 18;
											rectangle.Y = 342;
										}
										else
										{
											rectangle.X = 36;
											rectangle.Y = 342;
										}
									}
									else if ((num30 == num41 || num30 == num) && num28 != num41 && num28 != num)
									{
										if (num36 == 0)
										{
											rectangle.X = 54;
											rectangle.Y = 342;
										}
										else if (num36 == 1)
										{
											rectangle.X = 72;
											rectangle.Y = 342;
										}
										else
										{
											rectangle.X = 90;
											rectangle.Y = 342;
										}
									}
								}
								else if (num31 != num && num31 != num41 && num29 == num && num34 == num && num32 == num)
								{
									if ((num30 == num41 || num30 == num) && num35 != num41 && num35 != num)
									{
										if (num36 == 0)
										{
											rectangle.X = 54;
											rectangle.Y = 360;
										}
										else if (num36 == 1)
										{
											rectangle.X = 72;
											rectangle.Y = 360;
										}
										else
										{
											rectangle.X = 90;
											rectangle.Y = 360;
										}
									}
									else if ((num35 == num41 || num35 == num) && num30 != num41 && num30 != num)
									{
										if (num36 == 0)
										{
											rectangle.X = 0;
											rectangle.Y = 360;
										}
										else if (num36 == 1)
										{
											rectangle.X = 18;
											rectangle.Y = 360;
										}
										else
										{
											rectangle.X = 36;
											rectangle.Y = 360;
										}
									}
								}
								else if (num32 != num && num32 != num41 && num29 == num && num34 == num && num31 == num)
								{
									if ((num28 == num41 || num28 == num) && num33 != num41 && num33 != num)
									{
										if (num36 == 0)
										{
											rectangle.X = 0;
											rectangle.Y = 378;
										}
										else if (num36 == 1)
										{
											rectangle.X = 18;
											rectangle.Y = 378;
										}
										else
										{
											rectangle.X = 36;
											rectangle.Y = 378;
										}
									}
									else if ((num33 == num41 || num33 == num) && num28 != num41 && num28 != num)
									{
										if (num36 == 0)
										{
											rectangle.X = 54;
											rectangle.Y = 378;
										}
										else if (num36 == 1)
										{
											rectangle.X = 72;
											rectangle.Y = 378;
										}
										else
										{
											rectangle.X = 90;
											rectangle.Y = 378;
										}
									}
								}
								if ((num29 == num || num29 == num41) && (num34 == num || num34 == num41) && (num31 == num || num31 == num41) && (num32 == num || num32 == num41) && num28 != -1 && num30 != -1 && num33 != -1 && num35 != -1)
								{
									if ((i + j) % 2 == 1)
									{
										if (num36 == 0)
										{
											rectangle.X = 108;
											rectangle.Y = 198;
										}
										else if (num36 == 1)
										{
											rectangle.X = 126;
											rectangle.Y = 198;
										}
										else
										{
											rectangle.X = 144;
											rectangle.Y = 198;
										}
									}
									else if (num36 == 0)
									{
										rectangle.X = 18;
										rectangle.Y = 18;
									}
									else if (num36 == 1)
									{
										rectangle.X = 36;
										rectangle.Y = 18;
									}
									else
									{
										rectangle.X = 54;
										rectangle.Y = 18;
									}
								}
								if (num41 >= 0 && num41 < (int)TileID.Count && TileID.Sets.Dirt[num41])
								{
									WorldGen.TileMergeAttempt(-2, TileID.Sets.Dirt, ref num29, ref num34, ref num31, ref num32, ref num28, ref num30, ref num33, ref num35);
								}
								else if (num41 >= 0 && num41 < (int)TileID.Count && TileID.Sets.Mud[num41])
								{
									WorldGen.TileMergeAttempt(-2, TileID.Sets.Mud, ref num29, ref num34, ref num31, ref num32, ref num28, ref num30, ref num33, ref num35);
								}
								else
								{
									WorldGen.TileMergeAttempt(-2, num41, ref num29, ref num34, ref num31, ref num32, ref num28, ref num30, ref num33, ref num35);
								}
								tileMergeCullCache.Cull(ref num29, ref num34, ref num31, ref num32, ref num28, ref num30, ref num33, ref num35);
							}
							WorldGen.TileMergeAttempt(num, Main.tileMerge[num], ref num29, ref num34, ref num31, ref num32, ref num28, ref num30, ref num33, ref num35);
							if (rectangle.X == -1 && rectangle.Y == -1 && (Main.tileMergeDirt[num] || (num > -1 && TileID.Sets.ChecksForMerge[num])))
							{
								if (!flag)
								{
									flag = true;
									WorldGen.TileMergeAttemptWeird(num, -1, Main.tileSolid, ref num29, ref num34, ref num31, ref num32, ref num28, ref num30, ref num33, ref num35);
								}
								if (num29 > -1 && num29 != num)
								{
									num29 = -1;
								}
								if (num34 > -1 && num34 != num)
								{
									num34 = -1;
								}
								if (num31 > -1 && num31 != num)
								{
									num31 = -1;
								}
								if (num32 > -1 && num32 != num)
								{
									num32 = -1;
								}
								tileMergeCullCache.Cull(ref num29, ref num34, ref num31, ref num32, ref num28, ref num30, ref num33, ref num35);
								if (num29 != -1 && num34 != -1 && num31 != -1 && num32 != -1)
								{
									if (num29 == -2 && num34 == num && num31 == num && num32 == num)
									{
										if (num36 == 0)
										{
											rectangle.X = 144;
											rectangle.Y = 108;
										}
										else if (num36 == 1)
										{
											rectangle.X = 162;
											rectangle.Y = 108;
										}
										else
										{
											rectangle.X = 180;
											rectangle.Y = 108;
										}
										WorldGen.mergeUp = true;
									}
									else if (num29 == num && num34 == -2 && num31 == num && num32 == num)
									{
										if (num36 == 0)
										{
											rectangle.X = 144;
											rectangle.Y = 90;
										}
										else if (num36 == 1)
										{
											rectangle.X = 162;
											rectangle.Y = 90;
										}
										else
										{
											rectangle.X = 180;
											rectangle.Y = 90;
										}
										WorldGen.mergeDown = true;
									}
									else if (num29 == num && num34 == num && num31 == -2 && num32 == num)
									{
										if (num36 == 0)
										{
											rectangle.X = 162;
											rectangle.Y = 126;
										}
										else if (num36 == 1)
										{
											rectangle.X = 162;
											rectangle.Y = 144;
										}
										else
										{
											rectangle.X = 162;
											rectangle.Y = 162;
										}
										WorldGen.mergeLeft = true;
									}
									else if (num29 == num && num34 == num && num31 == num && num32 == -2)
									{
										if (num36 == 0)
										{
											rectangle.X = 144;
											rectangle.Y = 126;
										}
										else if (num36 == 1)
										{
											rectangle.X = 144;
											rectangle.Y = 144;
										}
										else
										{
											rectangle.X = 144;
											rectangle.Y = 162;
										}
										WorldGen.mergeRight = true;
									}
									else if (num29 == -2 && num34 == num && num31 == -2 && num32 == num)
									{
										if (num36 == 0)
										{
											rectangle.X = 36;
											rectangle.Y = 90;
										}
										else if (num36 == 1)
										{
											rectangle.X = 36;
											rectangle.Y = 126;
										}
										else
										{
											rectangle.X = 36;
											rectangle.Y = 162;
										}
										WorldGen.mergeUp = true;
										WorldGen.mergeLeft = true;
									}
									else if (num29 == -2 && num34 == num && num31 == num && num32 == -2)
									{
										if (num36 == 0)
										{
											rectangle.X = 54;
											rectangle.Y = 90;
										}
										else if (num36 == 1)
										{
											rectangle.X = 54;
											rectangle.Y = 126;
										}
										else
										{
											rectangle.X = 54;
											rectangle.Y = 162;
										}
										WorldGen.mergeUp = true;
										WorldGen.mergeRight = true;
									}
									else if (num29 == num && num34 == -2 && num31 == -2 && num32 == num)
									{
										if (num36 == 0)
										{
											rectangle.X = 36;
											rectangle.Y = 108;
										}
										else if (num36 == 1)
										{
											rectangle.X = 36;
											rectangle.Y = 144;
										}
										else
										{
											rectangle.X = 36;
											rectangle.Y = 180;
										}
										WorldGen.mergeDown = true;
										WorldGen.mergeLeft = true;
									}
									else if (num29 == num && num34 == -2 && num31 == num && num32 == -2)
									{
										if (num36 == 0)
										{
											rectangle.X = 54;
											rectangle.Y = 108;
										}
										else if (num36 == 1)
										{
											rectangle.X = 54;
											rectangle.Y = 144;
										}
										else
										{
											rectangle.X = 54;
											rectangle.Y = 180;
										}
										WorldGen.mergeDown = true;
										WorldGen.mergeRight = true;
									}
									else if (num29 == num && num34 == num && num31 == -2 && num32 == -2)
									{
										if (num36 == 0)
										{
											rectangle.X = 180;
											rectangle.Y = 126;
										}
										else if (num36 == 1)
										{
											rectangle.X = 180;
											rectangle.Y = 144;
										}
										else
										{
											rectangle.X = 180;
											rectangle.Y = 162;
										}
										WorldGen.mergeLeft = true;
										WorldGen.mergeRight = true;
									}
									else if (num29 == -2 && num34 == -2 && num31 == num && num32 == num)
									{
										if (num36 == 0)
										{
											rectangle.X = 144;
											rectangle.Y = 180;
										}
										else if (num36 == 1)
										{
											rectangle.X = 162;
											rectangle.Y = 180;
										}
										else
										{
											rectangle.X = 180;
											rectangle.Y = 180;
										}
										WorldGen.mergeUp = true;
										WorldGen.mergeDown = true;
									}
									else if (num29 == -2 && num34 == num && num31 == -2 && num32 == -2)
									{
										if (num36 == 0)
										{
											rectangle.X = 198;
											rectangle.Y = 90;
										}
										else if (num36 == 1)
										{
											rectangle.X = 198;
											rectangle.Y = 108;
										}
										else
										{
											rectangle.X = 198;
											rectangle.Y = 126;
										}
										WorldGen.mergeUp = true;
										WorldGen.mergeLeft = true;
										WorldGen.mergeRight = true;
									}
									else if (num29 == num && num34 == -2 && num31 == -2 && num32 == -2)
									{
										if (num36 == 0)
										{
											rectangle.X = 198;
											rectangle.Y = 144;
										}
										else if (num36 == 1)
										{
											rectangle.X = 198;
											rectangle.Y = 162;
										}
										else
										{
											rectangle.X = 198;
											rectangle.Y = 180;
										}
										WorldGen.mergeDown = true;
										WorldGen.mergeLeft = true;
										WorldGen.mergeRight = true;
									}
									else if (num29 == -2 && num34 == -2 && num31 == num && num32 == -2)
									{
										if (num36 == 0)
										{
											rectangle.X = 216;
											rectangle.Y = 144;
										}
										else if (num36 == 1)
										{
											rectangle.X = 216;
											rectangle.Y = 162;
										}
										else
										{
											rectangle.X = 216;
											rectangle.Y = 180;
										}
										WorldGen.mergeUp = true;
										WorldGen.mergeDown = true;
										WorldGen.mergeRight = true;
									}
									else if (num29 == -2 && num34 == -2 && num31 == -2 && num32 == num)
									{
										if (num36 == 0)
										{
											rectangle.X = 216;
											rectangle.Y = 90;
										}
										else if (num36 == 1)
										{
											rectangle.X = 216;
											rectangle.Y = 108;
										}
										else
										{
											rectangle.X = 216;
											rectangle.Y = 126;
										}
										WorldGen.mergeUp = true;
										WorldGen.mergeDown = true;
										WorldGen.mergeLeft = true;
									}
									else if (num29 == -2 && num34 == -2 && num31 == -2 && num32 == -2)
									{
										if (num36 == 0)
										{
											rectangle.X = 108;
											rectangle.Y = 198;
										}
										else if (num36 == 1)
										{
											rectangle.X = 126;
											rectangle.Y = 198;
										}
										else
										{
											rectangle.X = 144;
											rectangle.Y = 198;
										}
										WorldGen.mergeUp = true;
										WorldGen.mergeDown = true;
										WorldGen.mergeLeft = true;
										WorldGen.mergeRight = true;
									}
									else if (num29 == num && num34 == num && num31 == num && num32 == num)
									{
										if (num28 == -2)
										{
											if (num36 == 0)
											{
												rectangle.X = 18;
												rectangle.Y = 108;
											}
											else if (num36 == 1)
											{
												rectangle.X = 18;
												rectangle.Y = 144;
											}
											else
											{
												rectangle.X = 18;
												rectangle.Y = 180;
											}
										}
										if (num30 == -2)
										{
											if (num36 == 0)
											{
												rectangle.X = 0;
												rectangle.Y = 108;
											}
											else if (num36 == 1)
											{
												rectangle.X = 0;
												rectangle.Y = 144;
											}
											else
											{
												rectangle.X = 0;
												rectangle.Y = 180;
											}
										}
										if (num33 == -2)
										{
											if (num36 == 0)
											{
												rectangle.X = 18;
												rectangle.Y = 90;
											}
											else if (num36 == 1)
											{
												rectangle.X = 18;
												rectangle.Y = 126;
											}
											else
											{
												rectangle.X = 18;
												rectangle.Y = 162;
											}
										}
										if (num35 == -2)
										{
											if (num36 == 0)
											{
												rectangle.X = 0;
												rectangle.Y = 90;
											}
											else if (num36 == 1)
											{
												rectangle.X = 0;
												rectangle.Y = 126;
											}
											else
											{
												rectangle.X = 0;
												rectangle.Y = 162;
											}
										}
									}
								}
								else
								{
									if (num != 2 && num != 23 && num != 60 && num != 70 && num != 109 && num != 199 && num != 477 && num != 492 && num != 633 && num != 661 && num != 662)
									{
										if (num29 == -1 && num34 == -2 && num31 == num && num32 == num)
										{
											if (num36 == 0)
											{
												rectangle.X = 234;
												rectangle.Y = 0;
											}
											else if (num36 == 1)
											{
												rectangle.X = 252;
												rectangle.Y = 0;
											}
											else
											{
												rectangle.X = 270;
												rectangle.Y = 0;
											}
											WorldGen.mergeDown = true;
										}
										else if (num29 == -2 && num34 == -1 && num31 == num && num32 == num)
										{
											if (num36 == 0)
											{
												rectangle.X = 234;
												rectangle.Y = 18;
											}
											else if (num36 == 1)
											{
												rectangle.X = 252;
												rectangle.Y = 18;
											}
											else
											{
												rectangle.X = 270;
												rectangle.Y = 18;
											}
											WorldGen.mergeUp = true;
										}
										else if (num29 == num && num34 == num && num31 == -1 && num32 == -2)
										{
											if (num36 == 0)
											{
												rectangle.X = 234;
												rectangle.Y = 36;
											}
											else if (num36 == 1)
											{
												rectangle.X = 252;
												rectangle.Y = 36;
											}
											else
											{
												rectangle.X = 270;
												rectangle.Y = 36;
											}
											WorldGen.mergeRight = true;
										}
										else if (num29 == num && num34 == num && num31 == -2 && num32 == -1)
										{
											if (num36 == 0)
											{
												rectangle.X = 234;
												rectangle.Y = 54;
											}
											else if (num36 == 1)
											{
												rectangle.X = 252;
												rectangle.Y = 54;
											}
											else
											{
												rectangle.X = 270;
												rectangle.Y = 54;
											}
											WorldGen.mergeLeft = true;
										}
									}
									if (num29 != -1 && num34 != -1 && num31 == -1 && num32 == num)
									{
										if (num29 == -2 && num34 == num)
										{
											if (num36 == 0)
											{
												rectangle.X = 72;
												rectangle.Y = 144;
											}
											else if (num36 == 1)
											{
												rectangle.X = 72;
												rectangle.Y = 162;
											}
											else
											{
												rectangle.X = 72;
												rectangle.Y = 180;
											}
											WorldGen.mergeUp = true;
										}
										else if (num34 == -2 && num29 == num)
										{
											if (num36 == 0)
											{
												rectangle.X = 72;
												rectangle.Y = 90;
											}
											else if (num36 == 1)
											{
												rectangle.X = 72;
												rectangle.Y = 108;
											}
											else
											{
												rectangle.X = 72;
												rectangle.Y = 126;
											}
											WorldGen.mergeDown = true;
										}
									}
									else if (num29 != -1 && num34 != -1 && num31 == num && num32 == -1)
									{
										if (num29 == -2 && num34 == num)
										{
											if (num36 == 0)
											{
												rectangle.X = 90;
												rectangle.Y = 144;
											}
											else if (num36 == 1)
											{
												rectangle.X = 90;
												rectangle.Y = 162;
											}
											else
											{
												rectangle.X = 90;
												rectangle.Y = 180;
											}
											WorldGen.mergeUp = true;
										}
										else if (num34 == -2 && num29 == num)
										{
											if (num36 == 0)
											{
												rectangle.X = 90;
												rectangle.Y = 90;
											}
											else if (num36 == 1)
											{
												rectangle.X = 90;
												rectangle.Y = 108;
											}
											else
											{
												rectangle.X = 90;
												rectangle.Y = 126;
											}
											WorldGen.mergeDown = true;
										}
									}
									else if (num29 == -1 && num34 == num && num31 != -1 && num32 != -1)
									{
										if (num31 == -2 && num32 == num)
										{
											if (num36 == 0)
											{
												rectangle.X = 0;
												rectangle.Y = 198;
											}
											else if (num36 == 1)
											{
												rectangle.X = 18;
												rectangle.Y = 198;
											}
											else
											{
												rectangle.X = 36;
												rectangle.Y = 198;
											}
											WorldGen.mergeLeft = true;
										}
										else if (num32 == -2 && num31 == num)
										{
											if (num36 == 0)
											{
												rectangle.X = 54;
												rectangle.Y = 198;
											}
											else if (num36 == 1)
											{
												rectangle.X = 72;
												rectangle.Y = 198;
											}
											else
											{
												rectangle.X = 90;
												rectangle.Y = 198;
											}
											WorldGen.mergeRight = true;
										}
									}
									else if (num29 == num && num34 == -1 && num31 != -1 && num32 != -1)
									{
										if (num31 == -2 && num32 == num)
										{
											if (num36 == 0)
											{
												rectangle.X = 0;
												rectangle.Y = 216;
											}
											else if (num36 == 1)
											{
												rectangle.X = 18;
												rectangle.Y = 216;
											}
											else
											{
												rectangle.X = 36;
												rectangle.Y = 216;
											}
											WorldGen.mergeLeft = true;
										}
										else if (num32 == -2 && num31 == num)
										{
											if (num36 == 0)
											{
												rectangle.X = 54;
												rectangle.Y = 216;
											}
											else if (num36 == 1)
											{
												rectangle.X = 72;
												rectangle.Y = 216;
											}
											else
											{
												rectangle.X = 90;
												rectangle.Y = 216;
											}
											WorldGen.mergeRight = true;
										}
									}
									else if (num29 != -1 && num34 != -1 && num31 == -1 && num32 == -1)
									{
										if (num29 == -2 && num34 == -2)
										{
											if (num36 == 0)
											{
												rectangle.X = 108;
												rectangle.Y = 216;
											}
											else if (num36 == 1)
											{
												rectangle.X = 108;
												rectangle.Y = 234;
											}
											else
											{
												rectangle.X = 108;
												rectangle.Y = 252;
											}
											WorldGen.mergeUp = true;
											WorldGen.mergeDown = true;
										}
										else if (num29 == -2)
										{
											if (num36 == 0)
											{
												rectangle.X = 126;
												rectangle.Y = 144;
											}
											else if (num36 == 1)
											{
												rectangle.X = 126;
												rectangle.Y = 162;
											}
											else
											{
												rectangle.X = 126;
												rectangle.Y = 180;
											}
											WorldGen.mergeUp = true;
										}
										else if (num34 == -2)
										{
											if (num36 == 0)
											{
												rectangle.X = 126;
												rectangle.Y = 90;
											}
											else if (num36 == 1)
											{
												rectangle.X = 126;
												rectangle.Y = 108;
											}
											else
											{
												rectangle.X = 126;
												rectangle.Y = 126;
											}
											WorldGen.mergeDown = true;
										}
									}
									else if (num29 == -1 && num34 == -1 && num31 != -1 && num32 != -1)
									{
										if (num31 == -2 && num32 == -2)
										{
											if (num36 == 0)
											{
												rectangle.X = 162;
												rectangle.Y = 198;
											}
											else if (num36 == 1)
											{
												rectangle.X = 180;
												rectangle.Y = 198;
											}
											else
											{
												rectangle.X = 198;
												rectangle.Y = 198;
											}
											WorldGen.mergeLeft = true;
											WorldGen.mergeRight = true;
										}
										else if (num31 == -2)
										{
											if (num36 == 0)
											{
												rectangle.X = 0;
												rectangle.Y = 252;
											}
											else if (num36 == 1)
											{
												rectangle.X = 18;
												rectangle.Y = 252;
											}
											else
											{
												rectangle.X = 36;
												rectangle.Y = 252;
											}
											WorldGen.mergeLeft = true;
										}
										else if (num32 == -2)
										{
											if (num36 == 0)
											{
												rectangle.X = 54;
												rectangle.Y = 252;
											}
											else if (num36 == 1)
											{
												rectangle.X = 72;
												rectangle.Y = 252;
											}
											else
											{
												rectangle.X = 90;
												rectangle.Y = 252;
											}
											WorldGen.mergeRight = true;
										}
									}
									else if (num29 == -2 && num34 == -1 && num31 == -1 && num32 == -1)
									{
										if (num36 == 0)
										{
											rectangle.X = 108;
											rectangle.Y = 144;
										}
										else if (num36 == 1)
										{
											rectangle.X = 108;
											rectangle.Y = 162;
										}
										else
										{
											rectangle.X = 108;
											rectangle.Y = 180;
										}
										WorldGen.mergeUp = true;
									}
									else if (num29 == -1 && num34 == -2 && num31 == -1 && num32 == -1)
									{
										if (num36 == 0)
										{
											rectangle.X = 108;
											rectangle.Y = 90;
										}
										else if (num36 == 1)
										{
											rectangle.X = 108;
											rectangle.Y = 108;
										}
										else
										{
											rectangle.X = 108;
											rectangle.Y = 126;
										}
										WorldGen.mergeDown = true;
									}
									else if (num29 == -1 && num34 == -1 && num31 == -2 && num32 == -1)
									{
										if (num36 == 0)
										{
											rectangle.X = 0;
											rectangle.Y = 234;
										}
										else if (num36 == 1)
										{
											rectangle.X = 18;
											rectangle.Y = 234;
										}
										else
										{
											rectangle.X = 36;
											rectangle.Y = 234;
										}
										WorldGen.mergeLeft = true;
									}
									else if (num29 == -1 && num34 == -1 && num31 == -1 && num32 == -2)
									{
										if (num36 == 0)
										{
											rectangle.X = 54;
											rectangle.Y = 234;
										}
										else if (num36 == 1)
										{
											rectangle.X = 72;
											rectangle.Y = 234;
										}
										else
										{
											rectangle.X = 90;
											rectangle.Y = 234;
										}
										WorldGen.mergeRight = true;
									}
								}
							}
							int num42 = tile.blockType();
							if (TileID.Sets.HasSlopeFrames[num])
							{
								if (num42 == 0)
								{
									bool flag3 = num == num29 && tile2 != null && tile2.topSlope();
									bool flag4 = num == num31 && tile4 != null && tile4.leftSlope();
									bool flag5 = num == num32 && tile5 != null && tile5.rightSlope();
									bool flag6 = num == num34 && tile3 != null && tile3.bottomSlope();
									int num43 = 0;
									int num44 = 0;
									if (flag3.ToInt() + flag4.ToInt() + flag5.ToInt() + flag6.ToInt() > 2)
									{
										int num45 = (tile2 != null && tile2.slope() == 1).ToInt() + (tile5 != null && tile5.slope() == 1).ToInt() + (tile3 != null && tile3.slope() == 4).ToInt() + (tile4 != null && tile4.slope() == 4).ToInt();
										int num46 = (tile2 != null && tile2.slope() == 2).ToInt() + (tile5 != null && tile5.slope() == 3).ToInt() + (tile3 != null && tile3.slope() == 3).ToInt() + (tile4 != null && tile4.slope() == 2).ToInt();
										if (num45 == num46)
										{
											num43 = 2;
											num44 = 4;
										}
										else if (num45 > num46)
										{
											bool flag7 = num == num28 && tile8 != null && tile8.slope() == 0;
											bool flag8 = num == num35 && tile7 != null && tile7.slope() == 0;
											if (flag7 && flag8)
											{
												num44 = 4;
											}
											else if (flag8)
											{
												num43 = 6;
											}
											else
											{
												num43 = 7;
												num44 = 1;
											}
										}
										else
										{
											bool flag9 = num == num30 && tile9 != null && tile9.slope() == 0;
											bool flag10 = num == num33 && tile6 != null && tile6.slope() == 0;
											if (flag9 && flag10)
											{
												num44 = 4;
												num43 = 1;
											}
											else if (flag10)
											{
												num43 = 7;
											}
											else
											{
												num43 = 6;
												num44 = 1;
											}
										}
										rectangle.X = (18 + num43) * 18;
										rectangle.Y = num44 * 18;
									}
									else
									{
										if (flag3 && flag4 && num == num34 && num == num32)
										{
											num44 = 2;
										}
										else if (flag3 && flag5 && num == num34 && num == num31)
										{
											num43 = 1;
											num44 = 2;
										}
										else if (flag5 && flag6 && num == num29 && num == num31)
										{
											num43 = 1;
											num44 = 3;
										}
										else if (flag6 && flag4 && num == num29 && num == num32)
										{
											num44 = 3;
										}
										if (num43 != 0 || num44 != 0)
										{
											rectangle.X = (18 + num43) * 18;
											rectangle.Y = num44 * 18;
										}
									}
								}
								if (num42 >= 2 && (rectangle.X < 0 || rectangle.Y < 0))
								{
									int num47 = -1;
									int num48 = -1;
									int num49 = -1;
									int num50 = 0;
									int num51 = 0;
									switch (num42)
									{
									case 2:
										num47 = num31;
										num48 = num34;
										num49 = num33;
										num50++;
										break;
									case 3:
										num47 = num32;
										num48 = num34;
										num49 = num35;
										break;
									case 4:
										num47 = num31;
										num48 = num29;
										num49 = num28;
										num50++;
										num51++;
										break;
									case 5:
										num47 = num32;
										num48 = num29;
										num49 = num30;
										num51++;
										break;
									}
									if (num != num47 || num != num48 || num != num49)
									{
										if (num == num47 && num == num48)
										{
											num50 += 2;
										}
										else if (num == num47)
										{
											num50 += 4;
										}
										else if (num == num48)
										{
											num50 += 4;
											num51 += 2;
										}
										else
										{
											num50 += 2;
											num51 += 2;
										}
									}
									rectangle.X = (18 + num50) * 18;
									rectangle.Y = num51 * 18;
								}
							}
							if (rectangle.X < 0 || rectangle.Y < 0)
							{
								if (!flag)
								{
									WorldGen.TileMergeAttemptWeird(num, -1, Main.tileSolid, ref num29, ref num34, ref num31, ref num32, ref num28, ref num30, ref num33, ref num35);
									tileMergeCullCache.Cull(ref num29, ref num34, ref num31, ref num32, ref num28, ref num30, ref num33, ref num35);
								}
								if (num == 2 || num == 23 || num == 60 || num == 70 || num == 109 || num == 199 || num == 477 || num == 492 || num == 633 || num == 661 || num == 662 || Main.tileMoss[num] || TileID.Sets.tileMossBrick[num])
								{
									WorldGen.TileMergeAttempt(num, -2, ref num29, ref num34, ref num31, ref num32, ref num28, ref num30, ref num33, ref num35);
									tileMergeCullCache.Cull(ref num29, ref num34, ref num31, ref num32, ref num28, ref num30, ref num33, ref num35);
								}
								if (num29 == num && num34 == num && num31 == num && num32 == num)
								{
									if (num28 != num && num30 != num)
									{
										if (num36 == 0)
										{
											rectangle.X = 108;
											rectangle.Y = 18;
										}
										else if (num36 == 1)
										{
											rectangle.X = 126;
											rectangle.Y = 18;
										}
										else
										{
											rectangle.X = 144;
											rectangle.Y = 18;
										}
									}
									else if (num33 != num && num35 != num)
									{
										if (num36 == 0)
										{
											rectangle.X = 108;
											rectangle.Y = 36;
										}
										else if (num36 == 1)
										{
											rectangle.X = 126;
											rectangle.Y = 36;
										}
										else
										{
											rectangle.X = 144;
											rectangle.Y = 36;
										}
									}
									else if (num28 != num && num33 != num)
									{
										if (num36 == 0)
										{
											rectangle.X = 180;
											rectangle.Y = 0;
										}
										else if (num36 == 1)
										{
											rectangle.X = 180;
											rectangle.Y = 18;
										}
										else
										{
											rectangle.X = 180;
											rectangle.Y = 36;
										}
									}
									else if (num30 != num && num35 != num)
									{
										if (num36 == 0)
										{
											rectangle.X = 198;
											rectangle.Y = 0;
										}
										else if (num36 == 1)
										{
											rectangle.X = 198;
											rectangle.Y = 18;
										}
										else
										{
											rectangle.X = 198;
											rectangle.Y = 36;
										}
									}
									else if (num36 == 0)
									{
										rectangle.X = 18;
										rectangle.Y = 18;
									}
									else if (num36 == 1)
									{
										rectangle.X = 36;
										rectangle.Y = 18;
									}
									else
									{
										rectangle.X = 54;
										rectangle.Y = 18;
									}
								}
								else if (num29 != num && num34 == num && num31 == num && num32 == num)
								{
									if (num36 == 0)
									{
										rectangle.X = 18;
										rectangle.Y = 0;
									}
									else if (num36 == 1)
									{
										rectangle.X = 36;
										rectangle.Y = 0;
									}
									else
									{
										rectangle.X = 54;
										rectangle.Y = 0;
									}
								}
								else if (num29 == num && num34 != num && num31 == num && num32 == num)
								{
									if (num36 == 0)
									{
										rectangle.X = 18;
										rectangle.Y = 36;
									}
									else if (num36 == 1)
									{
										rectangle.X = 36;
										rectangle.Y = 36;
									}
									else
									{
										rectangle.X = 54;
										rectangle.Y = 36;
									}
								}
								else if (num29 == num && num34 == num && num31 != num && num32 == num)
								{
									if (num36 == 0)
									{
										rectangle.X = 0;
										rectangle.Y = 0;
									}
									else if (num36 == 1)
									{
										rectangle.X = 0;
										rectangle.Y = 18;
									}
									else
									{
										rectangle.X = 0;
										rectangle.Y = 36;
									}
								}
								else if (num29 == num && num34 == num && num31 == num && num32 != num)
								{
									if (num36 == 0)
									{
										rectangle.X = 72;
										rectangle.Y = 0;
									}
									else if (num36 == 1)
									{
										rectangle.X = 72;
										rectangle.Y = 18;
									}
									else
									{
										rectangle.X = 72;
										rectangle.Y = 36;
									}
								}
								else if (num29 != num && num34 == num && num31 != num && num32 == num)
								{
									if (num36 == 0)
									{
										rectangle.X = 0;
										rectangle.Y = 54;
									}
									else if (num36 == 1)
									{
										rectangle.X = 36;
										rectangle.Y = 54;
									}
									else
									{
										rectangle.X = 72;
										rectangle.Y = 54;
									}
								}
								else if (num29 != num && num34 == num && num31 == num && num32 != num)
								{
									if (num36 == 0)
									{
										rectangle.X = 18;
										rectangle.Y = 54;
									}
									else if (num36 == 1)
									{
										rectangle.X = 54;
										rectangle.Y = 54;
									}
									else
									{
										rectangle.X = 90;
										rectangle.Y = 54;
									}
								}
								else if (num29 == num && num34 != num && num31 != num && num32 == num)
								{
									if (num36 == 0)
									{
										rectangle.X = 0;
										rectangle.Y = 72;
									}
									else if (num36 == 1)
									{
										rectangle.X = 36;
										rectangle.Y = 72;
									}
									else
									{
										rectangle.X = 72;
										rectangle.Y = 72;
									}
								}
								else if (num29 == num && num34 != num && num31 == num && num32 != num)
								{
									if (num36 == 0)
									{
										rectangle.X = 18;
										rectangle.Y = 72;
									}
									else if (num36 == 1)
									{
										rectangle.X = 54;
										rectangle.Y = 72;
									}
									else
									{
										rectangle.X = 90;
										rectangle.Y = 72;
									}
								}
								else if (num29 == num && num34 == num && num31 != num && num32 != num)
								{
									if (num36 == 0)
									{
										rectangle.X = 90;
										rectangle.Y = 0;
									}
									else if (num36 == 1)
									{
										rectangle.X = 90;
										rectangle.Y = 18;
									}
									else
									{
										rectangle.X = 90;
										rectangle.Y = 36;
									}
								}
								else if (num29 != num && num34 != num && num31 == num && num32 == num)
								{
									if (num36 == 0)
									{
										rectangle.X = 108;
										rectangle.Y = 72;
									}
									else if (num36 == 1)
									{
										rectangle.X = 126;
										rectangle.Y = 72;
									}
									else
									{
										rectangle.X = 144;
										rectangle.Y = 72;
									}
								}
								else if (num29 != num && num34 == num && num31 != num && num32 != num)
								{
									if (num36 == 0)
									{
										rectangle.X = 108;
										rectangle.Y = 0;
									}
									else if (num36 == 1)
									{
										rectangle.X = 126;
										rectangle.Y = 0;
									}
									else
									{
										rectangle.X = 144;
										rectangle.Y = 0;
									}
								}
								else if (num29 == num && num34 != num && num31 != num && num32 != num)
								{
									if (num36 == 0)
									{
										rectangle.X = 108;
										rectangle.Y = 54;
									}
									else if (num36 == 1)
									{
										rectangle.X = 126;
										rectangle.Y = 54;
									}
									else
									{
										rectangle.X = 144;
										rectangle.Y = 54;
									}
								}
								else if (num29 != num && num34 != num && num31 != num && num32 == num)
								{
									if (num36 == 0)
									{
										rectangle.X = 162;
										rectangle.Y = 0;
									}
									else if (num36 == 1)
									{
										rectangle.X = 162;
										rectangle.Y = 18;
									}
									else
									{
										rectangle.X = 162;
										rectangle.Y = 36;
									}
								}
								else if (num29 != num && num34 != num && num31 == num && num32 != num)
								{
									if (num36 == 0)
									{
										rectangle.X = 216;
										rectangle.Y = 0;
									}
									else if (num36 == 1)
									{
										rectangle.X = 216;
										rectangle.Y = 18;
									}
									else
									{
										rectangle.X = 216;
										rectangle.Y = 36;
									}
								}
								else if (num29 != num && num34 != num && num31 != num && num32 != num)
								{
									if (num36 == 0)
									{
										rectangle.X = 162;
										rectangle.Y = 54;
									}
									else if (num36 == 1)
									{
										rectangle.X = 180;
										rectangle.Y = 54;
									}
									else
									{
										rectangle.X = 198;
										rectangle.Y = 54;
									}
								}
							}
							if (rectangle.X <= -1 || rectangle.Y <= -1)
							{
								if (num36 <= 0)
								{
									rectangle.X = 18;
									rectangle.Y = 18;
								}
								else if (num36 == 1)
								{
									rectangle.X = 36;
									rectangle.Y = 18;
								}
								if (num36 >= 2)
								{
									rectangle.X = 54;
									rectangle.Y = 18;
								}
							}
							if (Main.tileLargeFrames[num] == 1 && num36 == 3)
							{
								rectangle.Y += 90;
							}
							if (Main.tileLargeFrames[num] == 2 && num36 == 3)
							{
								rectangle.Y += 90;
							}
							tile.frameX = (short)rectangle.X;
							tile.frameY = (short)rectangle.Y;
							if (TileID.Sets.IsVine[num])
							{
								if (tile2 != null)
								{
									if (!tile2.nactive())
									{
										num29 = -1;
									}
									else if (tile2.bottomSlope())
									{
										num29 = -1;
									}
									else
									{
										num29 = (int)tile2.type;
									}
								}
								else
								{
									num29 = num;
								}
								if (num != num29)
								{
									bool flag11 = num29 == 60 || num29 == 62;
									bool flag12 = num29 == 109 || num29 == 115;
									bool flag13 = num29 == 23 || num29 == 636 || num29 == 661;
									bool flag14 = num29 == 199 || num29 == 205 || num29 == 662;
									bool flag15 = num29 == 2 || num29 == 52;
									bool flag16 = num29 == 382;
									bool flag17 = num29 == 70 || num29 == 528;
									bool flag18 = num29 == 633 || num29 == 638;
									ushort num52 = 0;
									if (flag18)
									{
										num52 = 638;
									}
									if (flag17)
									{
										num52 = 528;
									}
									if (flag12)
									{
										num52 = 115;
									}
									if (flag11)
									{
										num52 = 62;
									}
									if (flag13)
									{
										num52 = 636;
									}
									if (flag14)
									{
										num52 = 205;
									}
									if (flag15 && num != 382)
									{
										num52 = 52;
									}
									if (flag16)
									{
										num52 = 382;
									}
									if (num52 != 0 && (int)num52 != num)
									{
										tile.type = num52;
										WorldGen.SquareTileFrame(i, j, true);
										return;
									}
								}
								if (num29 != num)
								{
									bool flag19 = false;
									if (num29 == -1)
									{
										flag19 = true;
									}
									if (num == 52 && num29 != 2 && num29 != 192)
									{
										flag19 = true;
									}
									if (num == 382 && num29 != 2 && num29 != 192)
									{
										flag19 = true;
									}
									if (num == 62 && num29 != 60)
									{
										flag19 = true;
									}
									if (num == 115 && num29 != 109)
									{
										flag19 = true;
									}
									if (num == 528 && num29 != 70)
									{
										flag19 = true;
									}
									if (num == 636 && num29 != 23 && num29 != 661)
									{
										flag19 = true;
									}
									if (num == 205 && num29 != 199 && num29 != 662)
									{
										flag19 = true;
									}
									if (num == 638 && num29 != 633)
									{
										flag19 = true;
									}
									if (flag19)
									{
										WorldGen.KillTile(i, j, false, false, false);
									}
								}
							}
							bool flag20 = false;
							if (!WorldGen.noTileActions && tile.active() && TileID.Sets.Falling[num])
							{
								WorldGen.SpawnFallingBlockProjectile(i, j, tile, tile2, tile3, num);
							}
							if ((rectangle.X != frameX && rectangle.Y != frameY && frameX >= 0 && frameY >= 0) || flag20)
							{
								WorldGen.tileReframeCount++;
								if (WorldGen.tileReframeCount < 25)
								{
									bool flag21 = WorldGen.mergeUp;
									bool flag22 = WorldGen.mergeDown;
									bool flag23 = WorldGen.mergeLeft;
									bool flag24 = WorldGen.mergeRight;
									WorldGen.TileFrame(i - 1, j, false, false);
									WorldGen.TileFrame(i + 1, j, false, false);
									WorldGen.TileFrame(i, j - 1, false, false);
									WorldGen.TileFrame(i, j + 1, false, false);
									WorldGen.mergeUp = flag21;
									WorldGen.mergeDown = flag22;
									WorldGen.mergeLeft = flag23;
									WorldGen.mergeRight = flag24;
								}
								WorldGen.tileReframeCount--;
							}
						}
					}
				}
			}
			catch
			{
			}
			if (i > 0 && j > 0)
			{
				WorldGen.UpdateMapTile(i, j, addToList);
			}
		}

		// Token: 0x0600105A RID: 4186 RVA: 0x0047E9E0 File Offset: 0x0047CBE0
		private static void StopMergingByInvsibility(ref int currentMerge, Tile block, bool wantedInvisibilityState)
		{
			if (currentMerge <= -1)
			{
				return;
			}
			if (block.invisibleBlock() != wantedInvisibilityState)
			{
				currentMerge = -1;
			}
		}

		// Token: 0x0600105B RID: 4187 RVA: 0x0047E9F4 File Offset: 0x0047CBF4
		private static bool SpawnFallingBlockProjectile(int i, int j, Tile tileCache, Tile tileTopCache, Tile tileBottomCache, int type)
		{
			if (Main.netMode == 1)
			{
				return false;
			}
			if (tileCache == null || tileTopCache == null || tileBottomCache == null)
			{
				return false;
			}
			if (!WorldGen.BlockBelowMakesSandFall(i, j))
			{
				return false;
			}
			if (!WorldGen.AllowsSandfall(tileTopCache))
			{
				return false;
			}
			int num;
			int damage;
			WorldGen.GetSandfallProjData(type, out num, out damage);
			tileCache.ClearTile();
			if (Main.netMode == 0)
			{
				int num2 = Projectile.NewProjectile(WorldGen.GetProjectileSource_TileBreak(i, j), (float)(i * 16 + 8), (float)(j * 16 + 8), 0f, 0.41f, num, damage, 0f, Main.myPlayer, 0f, 0f, 0f);
				Main.projectile[num2].ai[0] = 1f;
				WorldGen.SquareTileFrame(i, j, true);
			}
			if (Main.netMode == 2)
			{
				bool flag = false;
				for (int k = 0; k < 1000; k++)
				{
					if (Main.projectile[k].active && Main.projectile[k].owner == Main.myPlayer && Main.projectile[k].type == num && Math.Abs(Main.projectile[k].timeLeft - 3600) < 60 && Main.projectile[k].Distance(new Vector2((float)(i * 16 + 8), (float)(j * 16 + 10))) < 4f)
					{
						flag = true;
						break;
					}
				}
				if (!flag)
				{
					int num3 = Projectile.NewProjectile(WorldGen.GetProjectileSource_TileBreak(i, j), (float)(i * 16 + 8), (float)(j * 16 + 8), 0f, 2.5f, num, damage, 0f, Main.myPlayer, 0f, 0f, 0f);
					Main.projectile[num3].velocity.Y = 0.5f;
					Projectile projectile = Main.projectile[num3];
					projectile.position.Y = projectile.position.Y + 2f;
					Main.projectile[num3].netUpdate = true;
				}
				WorldGen.SquareTileFrame(i, j, true);
				NetMessage.SendTileSquare(-1, i, j, TileChangeType.None);
				WorldGen.ExploitDestroyQueue.Enqueue(new Point(i, j));
				WorldGen.ExploitDestroyQueue.Enqueue(new Point(i, j - 1));
			}
			return true;
		}

		// Token: 0x0600105C RID: 4188 RVA: 0x0047EC00 File Offset: 0x0047CE00
		public static void CheckTorch(int x, int y)
		{
			for (int i = x - 1; i <= x + 1; i++)
			{
				for (int j = y - 1; j <= y + 1; j++)
				{
					if (Main.tile[i, j] == null)
					{
						return;
					}
				}
			}
			Tile tile = Main.tile[x, y];
			Tile tile2 = Main.tile[x, y - 1];
			Tile tile3 = Main.tile[x, y + 1];
			Tile tile4 = Main.tile[x - 1, y];
			Tile tile5 = Main.tile[x + 1, y];
			Tile tile6 = Main.tile[x - 1, y + 1];
			Tile tile7 = Main.tile[x + 1, y + 1];
			Tile tile8 = Main.tile[x - 1, y - 1];
			Tile tile9 = Main.tile[x + 1, y - 1];
			short num = 0;
			if (tile.frameX >= 66)
			{
				num = 66;
			}
			int num2 = -1;
			int num3 = -1;
			int num4 = -1;
			int tree = -1;
			int tree2 = -1;
			int tree3 = -1;
			int tree4 = -1;
			if (tile2 != null && tile2.active() && !tile2.bottomSlope())
			{
				ushort type = tile2.type;
			}
			if (tile3 != null && tile3.active() && ((TileID.Sets.Platforms[(int)tile3.type] && WorldGen.TopEdgeCanBeAttachedTo(x, y + 1)) || (!tile3.halfBrick() && !tile3.topSlope())))
			{
				num2 = (int)tile3.type;
			}
			if (tile4 != null && tile4.active() && (tile4.slope() == 0 || tile4.slope() % 2 != 1))
			{
				num3 = (int)tile4.type;
			}
			if (tile5 != null && tile5.active() && (tile5.slope() == 0 || tile5.slope() % 2 != 0))
			{
				num4 = (int)tile5.type;
			}
			if (tile6 != null && tile6.active())
			{
				tree = (int)tile6.type;
			}
			if (tile7 != null && tile7.active())
			{
				tree2 = (int)tile7.type;
			}
			if (tile8 != null && tile8.active())
			{
				tree3 = (int)tile8.type;
			}
			if (tile9 != null && tile9.active())
			{
				tree4 = (int)tile9.type;
			}
			if (num2 >= 0 && Main.tileSolid[num2] && (!Main.tileNoAttach[num2] || TileID.Sets.Platforms[num2]))
			{
				tile.frameX = num;
				return;
			}
			if ((num3 >= 0 && Main.tileSolid[num3] && !Main.tileNoAttach[num3]) || (num3 >= 0 && TileID.Sets.IsBeam[num3]) || (WorldGen.IsTreeType(num3) && WorldGen.IsTreeType(tree3) && WorldGen.IsTreeType(tree)))
			{
				tile.frameX = 22 + num;
				return;
			}
			if ((num4 >= 0 && Main.tileSolid[num4] && !Main.tileNoAttach[num4]) || (num4 >= 0 && TileID.Sets.IsBeam[num4]) || (WorldGen.IsTreeType(num4) && WorldGen.IsTreeType(tree4) && WorldGen.IsTreeType(tree2)))
			{
				tile.frameX = 44 + num;
				return;
			}
			if (tile.wall > 0)
			{
				tile.frameX = num;
				return;
			}
			WorldGen.KillTile(x, y, false, false, false);
		}

		// Token: 0x0600105D RID: 4189 RVA: 0x0047EEE8 File Offset: 0x0047D0E8
		public static void CheckProjectilePressurePad(int i, int j)
		{
			bool flag;
			bool flag2;
			bool flag3;
			bool flag4;
			WorldGen.CheckProjectilePressurePad_GetPossiblePlacementDirections(i, j, out flag, out flag2, out flag3, out flag4);
			Tile tile = Main.tile[i, j];
			bool flag5;
			switch (tile.frameX / 22)
			{
			case 0:
				flag5 = !flag4;
				break;
			case 1:
				flag5 = !flag;
				break;
			case 2:
				flag5 = !flag2;
				break;
			case 3:
				flag5 = !flag3;
				break;
			default:
				flag5 = true;
				break;
			}
			if (flag5)
			{
				if (flag4)
				{
					tile.frameX = 0;
					return;
				}
				if (flag)
				{
					tile.frameX = 22;
					return;
				}
				if (flag2)
				{
					tile.frameX = 44;
					return;
				}
				if (flag3)
				{
					tile.frameX = 66;
					return;
				}
				WorldGen.KillTile(i, j, false, false, false);
			}
		}

		// Token: 0x0600105E RID: 4190 RVA: 0x0047EFA0 File Offset: 0x0047D1A0
		private static void CheckProjectilePressurePad_GetPossiblePlacementDirections(int i, int j, out bool canUp, out bool canLeft, out bool canRight, out bool canDown)
		{
			canUp = false;
			canLeft = false;
			canRight = false;
			canDown = false;
			Main.tile[i, j];
			Tile tile = Main.tile[i, j - 1];
			Tile tile2 = Main.tile[i, j + 1];
			Tile tile3 = Main.tile[i - 1, j];
			Tile tile4 = Main.tile[i + 1, j];
			Tile tile5 = Main.tile[i - 1, j + 1];
			Tile tile6 = Main.tile[i + 1, j + 1];
			Tile tile7 = Main.tile[i - 1, j - 1];
			Tile tile8 = Main.tile[i + 1, j - 1];
			int num = -1;
			int num2 = -1;
			int num3 = -1;
			int num4 = -1;
			int tree = -1;
			int tree2 = -1;
			int tree3 = -1;
			int tree4 = -1;
			if (tile != null && tile.nactive() && !tile.bottomSlope())
			{
				num2 = (int)tile.type;
			}
			if (tile2 != null && tile2.nactive() && !tile2.halfBrick() && !tile2.topSlope())
			{
				num = (int)tile2.type;
			}
			if (tile3 != null && tile3.nactive() && (tile3.slope() == 0 || tile3.slope() % 2 != 1))
			{
				num3 = (int)tile3.type;
			}
			if (tile4 != null && tile4.nactive() && (tile4.slope() == 0 || tile4.slope() % 2 != 0))
			{
				num4 = (int)tile4.type;
			}
			if (tile5 != null && tile5.nactive())
			{
				tree = (int)tile5.type;
			}
			if (tile6 != null && tile6.nactive())
			{
				tree2 = (int)tile6.type;
			}
			if (tile7 != null && tile7.nactive())
			{
				tree3 = (int)tile7.type;
			}
			if (tile8 != null && tile8.nactive())
			{
				tree4 = (int)tile8.type;
			}
			if (num >= 0 && Main.tileSolid[num] && (!Main.tileNoAttach[num] || TileID.Sets.Platforms[num]) && (tile2.bottomSlope() || tile2.slope() == 0) && !tile2.halfBrick())
			{
				canDown = true;
			}
			if (num2 >= 0 && Main.tileSolid[num2] && (!Main.tileNoAttach[num2] || (TileID.Sets.Platforms[num2] && tile.halfBrick())) && (tile.topSlope() || tile.slope() == 0 || tile.halfBrick()))
			{
				canUp = true;
			}
			if ((num3 >= 0 && Main.tileSolid[num3] && !Main.tileNoAttach[num3] && (tile3.leftSlope() || tile3.slope() == 0) && !tile3.halfBrick()) || (num3 >= 0 && TileID.Sets.IsBeam[num3]) || (WorldGen.IsTreeType(num3) && WorldGen.IsTreeType(tree3) && WorldGen.IsTreeType(tree)))
			{
				canLeft = true;
			}
			if ((num4 >= 0 && Main.tileSolid[num4] && !Main.tileNoAttach[num4] && (tile4.rightSlope() || tile4.slope() == 0) && !tile4.halfBrick()) || (num4 >= 0 && TileID.Sets.IsBeam[num4]) || (WorldGen.IsTreeType(num4) && WorldGen.IsTreeType(tree4) && WorldGen.IsTreeType(tree2)))
			{
				canRight = true;
			}
		}

		// Token: 0x0600105F RID: 4191 RVA: 0x0047F287 File Offset: 0x0047D487
		public static bool IsTreeType(int tree)
		{
			return tree >= 0 && TileID.Sets.IsATreeTrunk[tree];
		}

		// Token: 0x06001060 RID: 4192 RVA: 0x0047F298 File Offset: 0x0047D498
		public static int CanPlaceProjectilePressurePad(int x, int y, int type = 442, int style = 0, int direction = 0, int alternate = 0)
		{
			bool flag;
			bool flag2;
			bool flag3;
			bool flag4;
			WorldGen.CheckProjectilePressurePad_GetPossiblePlacementDirections(x, y, out flag, out flag2, out flag3, out flag4);
			if (!flag && !flag4 && !flag2 && !flag3)
			{
				return -1;
			}
			switch (alternate)
			{
			case 0:
				if (!flag4)
				{
					return -1;
				}
				break;
			case 1:
				if (!flag)
				{
					return -1;
				}
				break;
			case 2:
				if (!flag2)
				{
					return -1;
				}
				break;
			case 3:
				if (!flag3)
				{
					return -1;
				}
				break;
			}
			return style;
		}

		// Token: 0x06001061 RID: 4193 RVA: 0x0047F2F0 File Offset: 0x0047D4F0
		private static void CheckDoorOpen(int i, int j, Tile tileCache)
		{
			if (!WorldGen.destroyObject)
			{
				int num = 0;
				int num2 = i;
				int frameX = (int)tileCache.frameX;
				int frameY = (int)tileCache.frameY;
				int num3 = frameY / 54;
				num3 += (int)(tileCache.frameX / 72 * 36);
				int num4 = j - frameY % 54 / 18;
				bool flag = false;
				int num5 = frameX % 72;
				if (num5 == 0)
				{
					num2 = i;
					num = 1;
				}
				else if (num5 == 18)
				{
					num2 = i - 1;
					num = 1;
				}
				else if (num5 == 36)
				{
					num2 = i + 1;
					num = -1;
				}
				else if (num5 == 54)
				{
					num2 = i;
					num = -1;
				}
				Tile tile = Main.tile[num2, num4 - 1];
				Tile tile2 = Main.tile[num2, num4 + 3];
				if (tile == null)
				{
					tile = new Tile();
					Main.tile[num2, num4 - 1] = tile;
				}
				if (tile2 == null)
				{
					tile2 = new Tile();
					Main.tile[num2, num4 + 3] = tile2;
				}
				if (!WorldGen.SolidTile(tile) || !WorldGen.SolidTile(tile2))
				{
					flag = true;
					WorldGen.destroyObject = true;
					WorldGen.DropDoorItem(i, j, num3);
				}
				int num6 = num2;
				if (num == -1)
				{
					num6 = num2 - 1;
				}
				for (int k = num6; k < num6 + 2; k++)
				{
					for (int l = num4; l < num4 + 3; l++)
					{
						if (!flag)
						{
							Tile tile3 = Main.tile[k, l];
							if (!tile3.active() || tile3.type != 11)
							{
								WorldGen.destroyObject = true;
								WorldGen.DropDoorItem(i, j, num3);
								flag = true;
								k = num6;
								l = num4;
							}
						}
						if (flag)
						{
							WorldGen.KillTile(k, l, false, false, false);
						}
					}
				}
				WorldGen.destroyObject = false;
			}
		}

		// Token: 0x06001062 RID: 4194 RVA: 0x0047F478 File Offset: 0x0047D678
		private static void CheckDoorClosed(int i, int j, Tile tileCache, int type)
		{
			if (!WorldGen.destroyObject)
			{
				bool flag = false;
				int frameY = (int)tileCache.frameY;
				int num = frameY / 54;
				num += (int)(tileCache.frameX / 54 * 36);
				int num2 = j - frameY % 54 / 18;
				Tile tile = Main.tile[i, num2 - 1];
				Tile tile2 = Main.tile[i, num2];
				Tile tile3 = Main.tile[i, num2 + 1];
				Tile tile4 = Main.tile[i, num2 + 2];
				Tile tile5 = Main.tile[i, num2 + 3];
				if (tile == null)
				{
					tile = new Tile();
					Main.tile[i, num2 - 1] = tile;
				}
				if (tile2 == null)
				{
					tile2 = new Tile();
					Main.tile[i, num2] = tile2;
				}
				if (tile3 == null)
				{
					tile3 = new Tile();
					Main.tile[i, num2 + 1] = tile3;
				}
				if (tile4 == null)
				{
					tile4 = new Tile();
					Main.tile[i, num2 + 2] = tile4;
				}
				if (tile5 == null)
				{
					tile5 = new Tile();
					Main.tile[i, num2 + 3] = tile5;
				}
				if (!WorldGen.SolidTile(tile))
				{
					flag = true;
				}
				if (!WorldGen.SolidTile(tile5))
				{
					flag = true;
				}
				if (!tile2.active() || (int)tile2.type != type)
				{
					flag = true;
				}
				if (!tile3.active() || (int)tile3.type != type)
				{
					flag = true;
				}
				if (!tile4.active() || (int)tile4.type != type)
				{
					flag = true;
				}
				if (flag)
				{
					WorldGen.destroyObject = true;
					WorldGen.KillTile(i, num2, false, false, false);
					WorldGen.KillTile(i, num2 + 1, false, false, false);
					WorldGen.KillTile(i, num2 + 2, false, false, false);
					WorldGen.DropDoorItem(i, j, num);
				}
				WorldGen.destroyObject = false;
			}
		}

		// Token: 0x06001063 RID: 4195 RVA: 0x0047F61C File Offset: 0x0047D81C
		private static void GetSandfallProjData(int type, out int projType, out int dmg)
		{
			dmg = 10;
			if (type == 112)
			{
				projType = 56;
				return;
			}
			if (type == 59)
			{
				projType = 39;
				return;
			}
			if (type == 116)
			{
				projType = 67;
				return;
			}
			if (type == 123)
			{
				projType = 71;
				return;
			}
			if (type == 224)
			{
				projType = 179;
				return;
			}
			if (type == 234)
			{
				projType = 241;
				return;
			}
			if (type == 330)
			{
				projType = 411;
				dmg = 0;
				return;
			}
			if (type == 331)
			{
				projType = 412;
				dmg = 0;
				return;
			}
			if (type == 332)
			{
				projType = 413;
				dmg = 0;
				return;
			}
			if (type == 333)
			{
				projType = 414;
				dmg = 0;
				return;
			}
			if (type == 495)
			{
				projType = 812;
				return;
			}
			projType = 31;
		}

		// Token: 0x06001064 RID: 4196 RVA: 0x0047F6D8 File Offset: 0x0047D8D8
		public static bool BlockBelowMakesSandConvertIntoHardenedSand(int i, int j)
		{
			bool result = false;
			if (j >= Main.maxTilesY - 1)
			{
				return false;
			}
			Tile tile = Main.tile[i, j + 1];
			if (tile == null)
			{
				return false;
			}
			if (!tile.nactive())
			{
				result = true;
			}
			else if (tile.type >= 0 && tile.type < TileID.Count && !Main.tileSolid[(int)tile.type])
			{
				result = true;
			}
			return result;
		}

		// Token: 0x06001065 RID: 4197 RVA: 0x0047F73C File Offset: 0x0047D93C
		public static bool BlockBelowMakesSandFall(int i, int j)
		{
			bool result = false;
			if (j >= Main.maxTilesY - 1)
			{
				return false;
			}
			Tile tile = Main.tile[i, j + 1];
			if (tile == null)
			{
				return false;
			}
			if (!tile.nactive())
			{
				result = true;
			}
			else if (!Main.tile[i, j + 2].nactive() && (!tile.active() || !Main.tileSolid[(int)tile.type]))
			{
				result = true;
			}
			else if (tile.active() && tile.type == 165)
			{
				result = true;
			}
			return result;
		}

		// Token: 0x06001066 RID: 4198 RVA: 0x0047F7C0 File Offset: 0x0047D9C0
		public static bool AllowsSandfall(Tile tileTopCache)
		{
			if (tileTopCache == null)
			{
				return false;
			}
			bool result = true;
			if (tileTopCache.active() && (TileID.Sets.BasicChest[(int)tileTopCache.type] || TileID.Sets.BasicChestFake[(int)tileTopCache.type] || tileTopCache.type == 323 || tileTopCache.type == 88 || tileTopCache.type == 80 || tileTopCache.type == 77 || tileTopCache.type == 26 || tileTopCache.type == 475 || tileTopCache.type == 470 || tileTopCache.type == 597))
			{
				result = false;
			}
			return result;
		}

		// Token: 0x06001067 RID: 4199 RVA: 0x0047F858 File Offset: 0x0047DA58
		public static void TriggerLunarApocalypse()
		{
			List<int> list = new List<int>
			{
				517,
				422,
				507,
				493
			};
			int[] array = new int[4];
			for (int i = 0; i < 4; i++)
			{
				array[i] = list[Main.rand.Next(list.Count)];
				list.Remove(array[i]);
			}
			int num = Main.maxTilesX / 5;
			int num2 = (int)Main.worldSurface;
			for (int j = 0; j < 4; j++)
			{
				int num3 = num * (1 + j);
				bool flag = false;
				for (int k = 0; k < 30; k++)
				{
					int num4 = Main.rand.Next(-100, 101);
					if (Main.remixWorld && Main.getGoodWorld)
					{
						int num5 = Main.rand.Next((int)Main.worldSurface, Main.maxTilesY - 350);
						if (!WorldGen.PlayerLOS(num3 + num4 - 10, num5) && !WorldGen.PlayerLOS(num3 + num4 + 10, num5) && !WorldGen.PlayerLOS(num3 + num4 - 10, num5 - 20) && !WorldGen.PlayerLOS(num3 + num4 + 10, num5 - 20))
						{
							int num6 = NPC.NewNPC(new EntitySource_WorldEvent(), (num3 + num4) * 16, num5 * 16, array[j], 0, 0f, 0f, 0f, 0f, 255);
							if (Main.netMode == 2 && num6 < 200)
							{
								NetMessage.SendData(23, -1, -1, null, num6, 0f, 0f, 0f, 0, 0, 0);
							}
							flag = true;
							break;
						}
					}
					else
					{
						for (int l = num2; l > 100; l--)
						{
							if (!Collision.SolidTiles(num3 + num4 - 10, num3 + num4 + 10, l - 20, l + 15) && !WorldGen.PlayerLOS(num3 + num4 - 10, l) && !WorldGen.PlayerLOS(num3 + num4 + 10, l) && !WorldGen.PlayerLOS(num3 + num4 - 10, l - 20) && !WorldGen.PlayerLOS(num3 + num4 + 10, l - 20))
							{
								int num7 = NPC.NewNPC(new EntitySource_WorldEvent(), (num3 + num4) * 16, l * 16, array[j], 0, 0f, 0f, 0f, 0f, 255);
								if (Main.netMode == 2 && num7 < 200)
								{
									NetMessage.SendData(23, -1, -1, null, num7, 0f, 0f, 0f, 0, 0, 0);
								}
								flag = true;
								break;
							}
						}
						if (flag)
						{
							break;
						}
					}
				}
				if (!flag)
				{
					NPC.NewNPC(new EntitySource_WorldEvent(), num3 * 16, (num2 - 40) * 16, array[j], 0, 0f, 0f, 0f, 0f, 255);
				}
			}
			NPC.TowerActiveVortex = (NPC.TowerActiveNebula = (NPC.TowerActiveSolar = (NPC.TowerActiveStardust = true)));
			NPC.LunarApocalypseIsUp = true;
			NPC.ShieldStrengthTowerSolar = (NPC.ShieldStrengthTowerVortex = (NPC.ShieldStrengthTowerNebula = (NPC.ShieldStrengthTowerStardust = NPC.ShieldStrengthTowerMax)));
			NetMessage.SendData(101, -1, -1, null, 0, 0f, 0f, 0f, 0, 0, 0);
			WorldGen.MessageLunarApocalypse();
		}

		// Token: 0x06001068 RID: 4200 RVA: 0x0047FBB0 File Offset: 0x0047DDB0
		public static void UpdateLunarApocalypse()
		{
			if (!NPC.LunarApocalypseIsUp)
			{
				return;
			}
			bool flag = false;
			bool flag2 = false;
			bool flag3 = false;
			bool flag4 = false;
			bool flag5 = false;
			for (int i = 0; i < 200; i++)
			{
				if (Main.npc[i].active)
				{
					int type = Main.npc[i].type;
					if (type <= 422)
					{
						if (type != 398)
						{
							if (type == 422)
							{
								flag3 = true;
							}
						}
						else
						{
							flag = true;
						}
					}
					else if (type != 493)
					{
						if (type != 507)
						{
							if (type == 517)
							{
								flag2 = true;
							}
						}
						else
						{
							flag4 = true;
						}
					}
					else
					{
						flag5 = true;
					}
				}
			}
			if (!flag2)
			{
				NPC.TowerActiveSolar = false;
			}
			if (!flag3)
			{
				NPC.TowerActiveVortex = false;
			}
			if (!flag4)
			{
				NPC.TowerActiveNebula = false;
			}
			if (!flag5)
			{
				NPC.TowerActiveStardust = false;
			}
			if (!NPC.TowerActiveSolar && !NPC.TowerActiveVortex && !NPC.TowerActiveNebula && !NPC.TowerActiveStardust && !flag)
			{
				WorldGen.StartImpendingDoom(3600);
			}
		}

		// Token: 0x06001069 RID: 4201 RVA: 0x0047FCA0 File Offset: 0x0047DEA0
		public static void StartImpendingDoom(int countdownTime)
		{
			NPC.LunarApocalypseIsUp = false;
			NPC.MaxMoonLordCountdown = countdownTime;
			NPC.MoonLordCountdown = NPC.MaxMoonLordCountdown;
			NetMessage.SendData(103, -1, -1, null, 0, 0f, 0f, 0f, 0, 0, 0);
			WorldGen.BroadcastText(NetworkText.FromKey(Lang.misc[52].Key, new object[0]), 50, 255, 130);
			if (Main.netMode != 1)
			{
				WorldGen.GetRidOfCultists();
			}
		}

		// Token: 0x0600106A RID: 4202 RVA: 0x0047FD18 File Offset: 0x0047DF18
		public static void GetRidOfCultists()
		{
			for (int i = 0; i < 200; i++)
			{
				if (Main.npc[i].active && (Main.npc[i].type == 437 || Main.npc[i].type == 438 || Main.npc[i].type == 379))
				{
					Main.npc[i].active = false;
					if (Main.netMode != 1)
					{
						NetMessage.SendData(23, -1, -1, null, i, 0f, 0f, 0f, 0, 0, 0);
					}
				}
			}
		}

		// Token: 0x0600106B RID: 4203 RVA: 0x0047FDB4 File Offset: 0x0047DFB4
		public static void MessageLunarApocalypse()
		{
			if (!NPC.LunarApocalypseIsUp)
			{
				return;
			}
			int num = 0;
			if (!NPC.TowerActiveSolar)
			{
				num++;
			}
			if (!NPC.TowerActiveVortex)
			{
				num++;
			}
			if (!NPC.TowerActiveNebula)
			{
				num++;
			}
			if (!NPC.TowerActiveStardust)
			{
				num++;
			}
			WorldGen.BroadcastText(NetworkText.FromKey(Lang.misc[43 + num].Key, new object[0]), 175, 75, 255);
		}

		// Token: 0x0600106C RID: 4204 RVA: 0x0047FE22 File Offset: 0x0047E022
		public static void BroadcastText(NetworkText text, Vector4 color)
		{
			WorldGen.BroadcastText(text, new Color(color));
		}

		// Token: 0x0600106D RID: 4205 RVA: 0x0047FE30 File Offset: 0x0047E030
		public static void BroadcastText(NetworkText text, Vector3 color)
		{
			WorldGen.BroadcastText(text, new Color(color));
		}

		// Token: 0x0600106E RID: 4206 RVA: 0x0047FE3E File Offset: 0x0047E03E
		public static void BroadcastText(NetworkText text, int r, int g, int b)
		{
			WorldGen.BroadcastText(text, new Color(r, g, b));
		}

		// Token: 0x0600106F RID: 4207 RVA: 0x0047FE3E File Offset: 0x0047E03E
		public static void BroadcastText(NetworkText text, byte r, byte g, byte b)
		{
			WorldGen.BroadcastText(text, new Color((int)r, (int)g, (int)b));
		}

		// Token: 0x06001070 RID: 4208 RVA: 0x0047FE4E File Offset: 0x0047E04E
		public static void BroadcastText(NetworkText text, Color color)
		{
			if (Main.netMode == 0)
			{
				Main.NewText(text.ToString(), color.R, color.G, color.B);
				return;
			}
			if (Main.netMode == 2)
			{
				ChatHelper.BroadcastChatMessage(text, color, -1);
			}
		}

		// Token: 0x06001071 RID: 4209 RVA: 0x0047FE88 File Offset: 0x0047E088
		public static bool CanCutTile(int x, int y, TileCuttingContext context)
		{
			return Main.tile[x, y + 1] != null && Main.tile[x, y + 1].type != 78 && Main.tile[x, y + 1].type != 380 && Main.tile[x, y + 1].type != 579 && (Main.tile[x, y].type != 254 || Main.tile[x, y].frameX >= 144);
		}

		// Token: 0x06001072 RID: 4210 RVA: 0x0047FF2C File Offset: 0x0047E12C
		public static bool InAPlaceWithWind(Vector2 position, int width, int height)
		{
			Point point = position.ToTileCoordinates();
			Point point2 = (position + new Vector2((float)width, (float)height)).ToTileCoordinates();
			return WorldGen.InAPlaceWithWind(point.X, point.Y, 1 + point2.X - point.X, 1 + point2.Y - point.Y);
		}

		// Token: 0x06001073 RID: 4211 RVA: 0x0047FF84 File Offset: 0x0047E184
		public static bool DoesWindBlowAtThisHeight(int tileY)
		{
			bool flag = (double)tileY < Main.worldSurface;
			if (Main.remixWorld)
			{
				flag = !flag;
			}
			return flag;
		}

		// Token: 0x06001074 RID: 4212 RVA: 0x0047FFA8 File Offset: 0x0047E1A8
		public static bool InAPlaceWithWind(int x, int y, int width, int height)
		{
			if (!WorldGen.DoesWindBlowAtThisHeight(y))
			{
				return false;
			}
			for (int i = 0; i < width; i++)
			{
				for (int j = 0; j < height; j++)
				{
					Tile tile = Main.tile[x + i, y + j];
					if (tile == null)
					{
						return false;
					}
					if (tile.liquid > 0 || (tile.wall > 0 && !WallID.Sets.AllowsWind[(int)tile.wall]))
					{
						return false;
					}
				}
			}
			return true;
		}

		// Token: 0x06001075 RID: 4213 RVA: 0x00480010 File Offset: 0x0047E210
		public static int[] CountTileTypesInWorld(params int[] oreTypes)
		{
			int[] array = new int[oreTypes.Length];
			for (int i = 0; i < Main.maxTilesX; i++)
			{
				for (int j = 0; j < Main.maxTilesY; j++)
				{
					Tile tile = Main.tile[i, j];
					if (tile.active())
					{
						for (int k = 0; k < oreTypes.Length; k++)
						{
							if (oreTypes[k] == (int)tile.type)
							{
								array[k]++;
								break;
							}
						}
					}
				}
			}
			return array;
		}

		// Token: 0x04000DE1 RID: 3553
		public static TownRoomManager TownManager = new TownRoomManager();

		// Token: 0x04000DE2 RID: 3554
		private static Queue<Action<StructureMap>> _postGenActions = new Queue<Action<StructureMap>>();

		// Token: 0x04000DE3 RID: 3555
		public static int tileReframeCount;

		// Token: 0x04000DE4 RID: 3556
		public static bool noMapUpdate;

		// Token: 0x04000DE5 RID: 3557
		public static int treeBG1;

		// Token: 0x04000DE6 RID: 3558
		public static int treeBG2;

		// Token: 0x04000DE7 RID: 3559
		public static int treeBG3;

		// Token: 0x04000DE8 RID: 3560
		public static int treeBG4;

		// Token: 0x04000DE9 RID: 3561
		public static int corruptBG;

		// Token: 0x04000DEA RID: 3562
		public static int jungleBG;

		// Token: 0x04000DEB RID: 3563
		public static int snowBG;

		// Token: 0x04000DEC RID: 3564
		public static int hallowBG;

		// Token: 0x04000DED RID: 3565
		public static int crimsonBG;

		// Token: 0x04000DEE RID: 3566
		public static int desertBG;

		// Token: 0x04000DEF RID: 3567
		public static int oceanBG;

		// Token: 0x04000DF0 RID: 3568
		public static int mushroomBG;

		// Token: 0x04000DF1 RID: 3569
		public static int underworldBG;

		// Token: 0x04000DF2 RID: 3570
		public static readonly int oceanDistance = 250;

		// Token: 0x04000DF3 RID: 3571
		public static readonly int beachDistance = 380;

		// Token: 0x04000DF4 RID: 3572
		public static readonly int shimmerSafetyDistance = 150;

		// Token: 0x04000DF5 RID: 3573
		public static bool crimson;

		// Token: 0x04000DF6 RID: 3574
		public static int[] tileCounts = new int[(int)TileID.Count];

		// Token: 0x04000DF7 RID: 3575
		public static int totalEvil;

		// Token: 0x04000DF8 RID: 3576
		public static int totalBlood;

		// Token: 0x04000DF9 RID: 3577
		public static int totalGood;

		// Token: 0x04000DFA RID: 3578
		public static int totalSolid;

		// Token: 0x04000DFB RID: 3579
		public static int totalEvil2;

		// Token: 0x04000DFC RID: 3580
		public static int totalBlood2;

		// Token: 0x04000DFD RID: 3581
		public static int totalGood2;

		// Token: 0x04000DFE RID: 3582
		public static int totalSolid2;

		// Token: 0x04000DFF RID: 3583
		public static byte tEvil;

		// Token: 0x04000E00 RID: 3584
		public static byte tBlood;

		// Token: 0x04000E01 RID: 3585
		public static byte tGood;

		// Token: 0x04000E02 RID: 3586
		public static string currentWorldSeed;

		// Token: 0x04000E03 RID: 3587
		public static int totalX;

		// Token: 0x04000E04 RID: 3588
		public static int totalD;

		// Token: 0x04000E05 RID: 3589
		public static bool IsGeneratingHardMode;

		// Token: 0x04000E06 RID: 3590
		public static bool noTileActions;

		// Token: 0x04000E07 RID: 3591
		public static bool spawnEye;

		// Token: 0x04000E08 RID: 3592
		public static int spawnHardBoss;

		// Token: 0x04000E09 RID: 3593
		public static volatile bool gen;

		// Token: 0x04000E0A RID: 3594
		public static bool shadowOrbSmashed;

		// Token: 0x04000E0B RID: 3595
		public static int shadowOrbCount;

		// Token: 0x04000E0C RID: 3596
		public static int altarCount;

		// Token: 0x04000E0D RID: 3597
		public static bool spawnMeteor;

		// Token: 0x04000E0E RID: 3598
		public static bool loadFailed = false;

		// Token: 0x04000E0F RID: 3599
		public static bool loadSuccess = false;

		// Token: 0x04000E10 RID: 3600
		public static bool worldCleared;

		// Token: 0x04000E11 RID: 3601
		public static bool worldBackup;

		// Token: 0x04000E12 RID: 3602
		public static bool loadBackup = false;

		// Token: 0x04000E13 RID: 3603
		private static int lastMaxTilesX;

		// Token: 0x04000E14 RID: 3604
		private static int lastMaxTilesY;

		// Token: 0x04000E15 RID: 3605
		private static bool mergeUp;

		// Token: 0x04000E16 RID: 3606
		private static bool mergeDown;

		// Token: 0x04000E17 RID: 3607
		private static bool mergeLeft;

		// Token: 0x04000E18 RID: 3608
		private static bool mergeRight;

		// Token: 0x04000E19 RID: 3609
		private static bool stopDrops;

		// Token: 0x04000E1A RID: 3610
		public static bool noLiquidCheck;

		// Token: 0x04000E1B RID: 3611
		public static bool AllowedToSpreadInfections = true;

		// Token: 0x04000E1C RID: 3612
		[ThreadStatic]
		public static UnifiedRandom _genRand;

		// Token: 0x04000E1D RID: 3613
		[ThreadStatic]
		public static int _genRandSeed = -2;

		// Token: 0x04000E1E RID: 3614
		public static int _lastSeed;

		// Token: 0x04000E1F RID: 3615
		public static string statusText = "";

		// Token: 0x04000E20 RID: 3616
		public static bool destroyObject;

		// Token: 0x04000E21 RID: 3617
		public static int spawnDelay;

		// Token: 0x04000E22 RID: 3618
		public static int prioritizedTownNPCType;

		// Token: 0x04000E23 RID: 3619
		public static int numTileCount;

		// Token: 0x04000E24 RID: 3620
		public static int maxTileCount = 3500;

		// Token: 0x04000E25 RID: 3621
		public static int maxWallOut2 = 5000;

		// Token: 0x04000E26 RID: 3622
		public static Dictionary<Point, bool> CountedTiles = new Dictionary<Point, bool>(WorldGen.maxTileCount);

		// Token: 0x04000E27 RID: 3623
		public static int lavaCount;

		// Token: 0x04000E28 RID: 3624
		public static int iceCount;

		// Token: 0x04000E29 RID: 3625
		public static int sandCount;

		// Token: 0x04000E2A RID: 3626
		public static int rockCount;

		// Token: 0x04000E2B RID: 3627
		public static int shroomCount;

		// Token: 0x04000E2C RID: 3628
		public static int maxRoomTiles = 750;

		// Token: 0x04000E2D RID: 3629
		public static int numRoomTiles;

		// Token: 0x04000E2E RID: 3630
		public static int[] roomX = new int[WorldGen.maxRoomTiles];

		// Token: 0x04000E2F RID: 3631
		public static int[] roomY = new int[WorldGen.maxRoomTiles];

		// Token: 0x04000E30 RID: 3632
		public static int roomCeilingsCount;

		// Token: 0x04000E31 RID: 3633
		public static int[] roomCeilingX = new int[WorldGen.maxRoomTiles];

		// Token: 0x04000E32 RID: 3634
		public static int[] roomCeilingY = new int[WorldGen.maxRoomTiles];

		// Token: 0x04000E33 RID: 3635
		public static int roomX1;

		// Token: 0x04000E34 RID: 3636
		public static int roomX2;

		// Token: 0x04000E35 RID: 3637
		public static int roomY1;

		// Token: 0x04000E36 RID: 3638
		public static int roomY2;

		// Token: 0x04000E37 RID: 3639
		public static bool canSpawn;

		// Token: 0x04000E38 RID: 3640
		public static bool[] houseTile = new bool[(int)TileID.Count];

		// Token: 0x04000E39 RID: 3641
		public static int bestX;

		// Token: 0x04000E3A RID: 3642
		public static int bestY;

		// Token: 0x04000E3B RID: 3643
		public static int hiScore;

		// Token: 0x04000E3C RID: 3644
		private static bool roomTorch;

		// Token: 0x04000E3D RID: 3645
		private static bool roomDoor;

		// Token: 0x04000E3E RID: 3646
		private static bool roomChair;

		// Token: 0x04000E3F RID: 3647
		private static bool roomTable;

		// Token: 0x04000E40 RID: 3648
		private static bool roomOccupied;

		// Token: 0x04000E41 RID: 3649
		private static bool roomEvil;

		// Token: 0x04000E42 RID: 3650
		private static bool roomHasStinkbug;

		// Token: 0x04000E43 RID: 3651
		private static bool roomHasEchoStinkbug;

		// Token: 0x04000E44 RID: 3652
		public static int WorldGenParam_Evil = -1;

		// Token: 0x04000E45 RID: 3653
		public static readonly int cactusWaterWidth = 50;

		// Token: 0x04000E46 RID: 3654
		public static readonly int cactusWaterHeight = 25;

		// Token: 0x04000E47 RID: 3655
		public static readonly int cactusWaterLimit = 25;

		// Token: 0x04000E48 RID: 3656
		public static MysticLogFairiesEvent mysticLogsEvent = new MysticLogFairiesEvent();

		// Token: 0x04000E49 RID: 3657
		private static bool currentlyTryingToUseAlternateHousingSpot;

		// Token: 0x04000E4A RID: 3658
		private static int sharedRoomX;

		// Token: 0x04000E4B RID: 3659
		public static TownNPCRoomCheckFailureReason roomCheckFailureReason = TownNPCRoomCheckFailureReason.None;

		// Token: 0x04000E4C RID: 3660
		public const int WorldSizeSmallX = 4200;

		// Token: 0x04000E4D RID: 3661
		public const int WorldSizeSmallY = 1200;

		// Token: 0x04000E4E RID: 3662
		public const int WorldSizeMediumX = 6400;

		// Token: 0x04000E4F RID: 3663
		public const int WorldSizeMediumY = 1800;

		// Token: 0x04000E50 RID: 3664
		public const int WorldSizeLargeX = 8400;

		// Token: 0x04000E51 RID: 3665
		public const int WorldSizeLargeY = 2400;

		// Token: 0x04000E52 RID: 3666
		public const int InfectionAndGrassSpreadOuterWorldBuffer = 10;

		// Token: 0x04000E53 RID: 3667
		public static bool generatingWorld = false;

		// Token: 0x04000E54 RID: 3668
		private static int[,] trapDiag = new int[4, 2];

		// Token: 0x04000E55 RID: 3669
		private static bool[] gem = new bool[6];

		// Token: 0x04000E56 RID: 3670
		private static int[] mossType = new int[3];

		// Token: 0x04000E57 RID: 3671
		private static ushort neonMossType;

		// Token: 0x04000E58 RID: 3672
		private static int tileCounterNum;

		// Token: 0x04000E59 RID: 3673
		private static int tileCounterMax = 20;

		// Token: 0x04000E5A RID: 3674
		private static int[] tileCounterX = new int[WorldGen.tileCounterMax];

		// Token: 0x04000E5B RID: 3675
		private static int[] tileCounterY = new int[WorldGen.tileCounterMax];

		// Token: 0x04000E5C RID: 3676
		private static WorldGenerator _generator;

		// Token: 0x04000E5D RID: 3677
		public static int SmallConsecutivesFound = 0;

		// Token: 0x04000E5E RID: 3678
		public static int SmallConsecutivesEliminated = 0;

		// Token: 0x04000E5F RID: 3679
		public static bool tempRemixWorldGen = false;

		// Token: 0x04000E60 RID: 3680
		public static bool remixWorldGen = false;

		// Token: 0x04000E61 RID: 3681
		public static bool everythingWorldGen = false;

		// Token: 0x04000E62 RID: 3682
		public static bool noTrapsWorldGen = false;

		// Token: 0x04000E63 RID: 3683
		public static bool drunkWorldGen = false;

		// Token: 0x04000E64 RID: 3684
		public static bool getGoodWorldGen = false;

		// Token: 0x04000E65 RID: 3685
		public static bool tempTenthAnniversaryWorldGen = false;

		// Token: 0x04000E66 RID: 3686
		public static bool tenthAnniversaryWorldGen = false;

		// Token: 0x04000E67 RID: 3687
		public static bool dontStarveWorldGen = false;

		// Token: 0x04000E68 RID: 3688
		public static bool notTheBees = false;

		// Token: 0x04000E69 RID: 3689
		public static bool drunkWorldGenText = false;

		// Token: 0x04000E6A RID: 3690
		public static bool placingTraps = false;

		// Token: 0x04000E6B RID: 3691
		public const bool USE_FRAMING_SKIP_FOR_UNIMPORTANT_TILES_IN_WORLDGEN = false;

		// Token: 0x04000E6C RID: 3692
		private const int ItemSpawnProtectionTime = 18000;

		// Token: 0x04000E6D RID: 3693
		private static List<Color> _coatingColors = new List<Color>();

		// Token: 0x04000E6E RID: 3694
		private static int catTailDistance = 8;

		// Token: 0x04000E6F RID: 3695
		public static TreeTopsInfo TreeTops = new TreeTopsInfo();

		// Token: 0x04000E70 RID: 3696
		public static BackgroundChangeFlashInfo BackgroundsCache = new BackgroundChangeFlashInfo();

		// Token: 0x04000E71 RID: 3697
		private static int maxTreeShakes = 500;

		// Token: 0x04000E72 RID: 3698
		private static int numTreeShakes = 0;

		// Token: 0x04000E73 RID: 3699
		private static int[] treeShakeX = new int[WorldGen.maxTreeShakes];

		// Token: 0x04000E74 RID: 3700
		private static int[] treeShakeY = new int[WorldGen.maxTreeShakes];

		// Token: 0x04000E75 RID: 3701
		private static bool fossilBreak = false;

		// Token: 0x04000E76 RID: 3702
		public static Queue<Point> ExploitDestroyQueue = new Queue<Point>();

		// Token: 0x04000E77 RID: 3703
		private static bool growGrassUnderground = false;

		// Token: 0x04000E78 RID: 3704
		public const bool BUBBLES_SOLID_STATE_FOR_HOUSING = true;

		// Token: 0x04000E79 RID: 3705
		public static int grassSpread;

		// Token: 0x04000E7A RID: 3706
		private static Point[] heartPos = new Point[100];

		// Token: 0x04000E7B RID: 3707
		private static int heartCount;

		// Token: 0x04000E7C RID: 3708
		private const int strip_w = 200;

		// Token: 0x04000E7D RID: 3709
		private const int strip_h = 50;

		// Token: 0x04000E7E RID: 3710
		private static readonly Vertical64BitStrips bitStrip = new Vertical64BitStrips(202);

		// Token: 0x04000E7F RID: 3711
		public static bool noMapUpdateRefresh = false;

		// Token: 0x04000E80 RID: 3712
		private static bool skipFramingDuringGen = false;

		// Token: 0x020004E4 RID: 1252
		public static class WorldSize
		{
			// Token: 0x0400571E RID: 22302
			public const int Small = 0;

			// Token: 0x0400571F RID: 22303
			public const int Medium = 1;

			// Token: 0x04005720 RID: 22304
			public const int Large = 2;
		}

		// Token: 0x020004E5 RID: 1253
		public static class SavedOreTiers
		{
			// Token: 0x04005721 RID: 22305
			public static int Copper = 7;

			// Token: 0x04005722 RID: 22306
			public static int Iron = 6;

			// Token: 0x04005723 RID: 22307
			public static int Silver = 9;

			// Token: 0x04005724 RID: 22308
			public static int Gold = 8;

			// Token: 0x04005725 RID: 22309
			public static int Cobalt = 107;

			// Token: 0x04005726 RID: 22310
			public static int Mythril = 108;

			// Token: 0x04005727 RID: 22311
			public static int Adamantite = 111;
		}

		// Token: 0x020004E6 RID: 1254
		public static class Hooks
		{
			// Token: 0x1400005C RID: 92
			// (add) Token: 0x06002F86 RID: 12166 RVA: 0x005C736C File Offset: 0x005C556C
			// (remove) Token: 0x06002F87 RID: 12167 RVA: 0x005C73A0 File Offset: 0x005C55A0
			public static event WorldGen.Hooks.WorldGenConfigProcessEvent OnWorldGenConfigProcess;

			// Token: 0x1400005D RID: 93
			// (add) Token: 0x06002F88 RID: 12168 RVA: 0x005C73D4 File Offset: 0x005C55D4
			// (remove) Token: 0x06002F89 RID: 12169 RVA: 0x005C7408 File Offset: 0x005C5608
			public static event Action OnWorldLoad;

			// Token: 0x06002F8A RID: 12170 RVA: 0x005C743C File Offset: 0x005C563C
			public static void Initialize()
			{
				Player.Hooks.OnEnterWorld += delegate(Player player)
				{
					if (player.whoAmI == Main.myPlayer)
					{
						WorldGen.Hooks.WorldLoaded();
						if (Main.netMode != 1)
						{
							Main.FixUIScale();
						}
					}
				};
				WorldGen.Hooks.OnWorldLoad += WorldGen.mysticLogsEvent.StartWorld;
				WorldGen.Hooks.OnWorldLoad += Main.checkHalloween;
				WorldGen.Hooks.OnWorldLoad += Main.checkXMas;
			}

			// Token: 0x06002F8B RID: 12171 RVA: 0x005C74A4 File Offset: 0x005C56A4
			public static void WorldLoaded()
			{
				if (WorldGen.Hooks.OnWorldLoad != null)
				{
					WorldGen.Hooks.OnWorldLoad();
				}
			}

			// Token: 0x06002F8C RID: 12172 RVA: 0x005C74B7 File Offset: 0x005C56B7
			public static void ProcessWorldGenConfig(ref WorldGenConfiguration config)
			{
				if (WorldGen.Hooks.OnWorldGenConfigProcess != null)
				{
					WorldGen.Hooks.OnWorldGenConfigProcess(ref config);
				}
			}

			// Token: 0x020007E4 RID: 2020
			// (Invoke) Token: 0x0600394E RID: 14670
			public delegate void WorldGenConfigProcessEvent(ref WorldGenConfiguration config);
		}

		// Token: 0x020004E7 RID: 1255
		public static class Spread
		{
			// Token: 0x06002F8D RID: 12173 RVA: 0x005C74CC File Offset: 0x005C56CC
			public static void Wall(int x, int y, int wallType)
			{
				if (!WorldGen.InWorld(x, y, 0))
				{
					return;
				}
				ushort wall = (ushort)wallType;
				List<Point> list = new List<Point>();
				List<Point> list2 = new List<Point>();
				HashSet<Point> hashSet = new HashSet<Point>();
				list2.Add(new Point(x, y));
				while (list2.Count > 0)
				{
					list.Clear();
					list.AddRange(list2);
					list2.Clear();
					while (list.Count > 0)
					{
						Point point = list[0];
						if (!WorldGen.InWorld(point.X, point.Y, 1))
						{
							list.Remove(point);
						}
						else
						{
							hashSet.Add(point);
							list.Remove(point);
							Tile tile = Main.tile[point.X, point.Y];
							if (WorldGen.SolidTile(point.X, point.Y, false) || tile.wall != 0)
							{
								if (tile.active() && tile.wall == 0)
								{
									tile.wall = wall;
								}
							}
							else
							{
								tile.wall = wall;
								Point item = new Point(point.X - 1, point.Y);
								if (!hashSet.Contains(item))
								{
									list2.Add(item);
								}
								item = new Point(point.X + 1, point.Y);
								if (!hashSet.Contains(item))
								{
									list2.Add(item);
								}
								item = new Point(point.X, point.Y - 1);
								if (!hashSet.Contains(item))
								{
									list2.Add(item);
								}
								item = new Point(point.X, point.Y + 1);
								if (!hashSet.Contains(item))
								{
									list2.Add(item);
								}
							}
						}
					}
				}
			}

			// Token: 0x06002F8E RID: 12174 RVA: 0x005C7684 File Offset: 0x005C5884
			public static void Wall2(int x, int y, int wallType)
			{
				if (!WorldGen.InWorld(x, y, 0))
				{
					return;
				}
				ushort num = (ushort)wallType;
				int num2 = 0;
				int maxWallOut = WorldGen.maxWallOut2;
				List<Point> list = new List<Point>();
				List<Point> list2 = new List<Point>();
				HashSet<Point> hashSet = new HashSet<Point>();
				list2.Add(new Point(x, y));
				while (list2.Count > 0)
				{
					list.Clear();
					list.AddRange(list2);
					list2.Clear();
					while (list.Count > 0)
					{
						Point point = list[0];
						if (!WorldGen.InWorld(point.X, point.Y, 1))
						{
							list.Remove(point);
						}
						else
						{
							hashSet.Add(point);
							list.Remove(point);
							Tile tile = Main.tile[point.X, point.Y];
							if (tile.wall != num && !WallID.Sets.CannotBeReplacedByWallSpread[(int)tile.wall])
							{
								if (!WorldGen.SolidTile(point.X, point.Y, false))
								{
									bool flag = WallID.Sets.WallSpreadStopsAtAir[(int)num];
									if (flag && tile.wall == 0)
									{
										list.Remove(point);
									}
									else
									{
										num2++;
										if (num2 >= maxWallOut)
										{
											list.Remove(point);
										}
										else
										{
											tile.wall = num;
											Point item = new Point(point.X - 1, point.Y);
											if (!hashSet.Contains(item))
											{
												list2.Add(item);
											}
											item = new Point(point.X + 1, point.Y);
											if (!hashSet.Contains(item))
											{
												list2.Add(item);
											}
											item = new Point(point.X, point.Y - 1);
											if (!hashSet.Contains(item))
											{
												list2.Add(item);
											}
											item = new Point(point.X, point.Y + 1);
											if (!hashSet.Contains(item))
											{
												list2.Add(item);
											}
											if (flag)
											{
												item = new Point(point.X - 1, point.Y - 1);
												if (!hashSet.Contains(item))
												{
													list2.Add(item);
												}
												item = new Point(point.X + 1, point.Y - 1);
												if (!hashSet.Contains(item))
												{
													list2.Add(item);
												}
												item = new Point(point.X - 1, point.Y + 1);
												if (!hashSet.Contains(item))
												{
													list2.Add(item);
												}
												item = new Point(point.X + 1, point.Y + 1);
												if (!hashSet.Contains(item))
												{
													list2.Add(item);
												}
												item = new Point(point.X - 2, point.Y);
												if (!hashSet.Contains(item))
												{
													list2.Add(item);
												}
												item = new Point(point.X + 2, point.Y);
												if (!hashSet.Contains(item))
												{
													list2.Add(item);
												}
											}
										}
									}
								}
								else if (tile.active())
								{
									tile.wall = num;
								}
							}
						}
					}
				}
			}

			// Token: 0x06002F8F RID: 12175 RVA: 0x005C79A8 File Offset: 0x005C5BA8
			public static void Moss(int x, int y)
			{
				if (!WorldGen.InWorld(x, y, 0))
				{
					return;
				}
				ushort mossWall = GenVars.mossWall;
				ushort mossTile = GenVars.mossTile;
				List<Point> list = new List<Point>();
				List<Point> list2 = new List<Point>();
				HashSet<Point> hashSet = new HashSet<Point>();
				list2.Add(new Point(x, y));
				while (list2.Count > 0)
				{
					list.Clear();
					list.AddRange(list2);
					list2.Clear();
					while (list.Count > 0)
					{
						Point point = list[0];
						if (!WorldGen.InWorld(point.X, point.Y, 1))
						{
							list.Remove(point);
						}
						else
						{
							hashSet.Add(point);
							list.Remove(point);
							Tile tile = Main.tile[point.X, point.Y];
							if (WorldGen.SolidTile(point.X, point.Y, false) || tile.wall != 0)
							{
								if (tile.active())
								{
									if (tile.wall == 0)
									{
										tile.wall = mossWall;
									}
									if (tile.type == 1)
									{
										tile.type = mossTile;
									}
								}
							}
							else
							{
								tile.wall = mossWall;
								Point item = new Point(point.X - 1, point.Y);
								if (!hashSet.Contains(item))
								{
									list2.Add(item);
								}
								item = new Point(point.X + 1, point.Y);
								if (!hashSet.Contains(item))
								{
									list2.Add(item);
								}
								item = new Point(point.X, point.Y - 1);
								if (!hashSet.Contains(item))
								{
									list2.Add(item);
								}
								item = new Point(point.X, point.Y + 1);
								if (!hashSet.Contains(item))
								{
									list2.Add(item);
								}
							}
						}
					}
				}
			}

			// Token: 0x06002F90 RID: 12176 RVA: 0x005C7B84 File Offset: 0x005C5D84
			public static void Gem(int x, int y)
			{
				if (!WorldGen.InWorld(x, y, 0))
				{
					return;
				}
				List<Point> list = new List<Point>();
				List<Point> list2 = new List<Point>();
				HashSet<Point> hashSet = new HashSet<Point>();
				list2.Add(new Point(x, y));
				while (list2.Count > 0)
				{
					list.Clear();
					list.AddRange(list2);
					list2.Clear();
					while (list.Count > 0)
					{
						Point point = list[0];
						if (!WorldGen.InWorld(point.X, point.Y, 1))
						{
							list.Remove(point);
						}
						else
						{
							hashSet.Add(point);
							list.Remove(point);
							Tile tile = Main.tile[point.X, point.Y];
							if (WorldGen.SolidTile(point.X, point.Y, false) || tile.wall != 0)
							{
								if (tile.active())
								{
									if (WorldGen.Spread.Gemmable((int)tile.type))
									{
										tile.type = WorldGen.randGemTile();
									}
									Tile tile2 = Main.tile[point.X - 1, point.Y];
									if (WorldGen.Spread.Gemmable((int)tile2.type))
									{
										tile2.type = WorldGen.randGemTile();
									}
									tile2 = Main.tile[point.X + 1, point.Y];
									if (WorldGen.Spread.Gemmable((int)tile2.type))
									{
										tile2.type = WorldGen.randGemTile();
									}
									tile2 = Main.tile[point.X, point.Y - 1];
									if (WorldGen.Spread.Gemmable((int)tile2.type))
									{
										tile2.type = WorldGen.randGemTile();
									}
									tile2 = Main.tile[point.X, point.Y + 1];
									if (WorldGen.Spread.Gemmable((int)tile2.type))
									{
										tile2.type = WorldGen.randGemTile();
									}
								}
							}
							else
							{
								tile.wall = (ushort)(48 + WorldGen.randGem());
								if (!tile.active() && WorldGen.genRand.Next(2) == 0)
								{
									WorldGen.PlaceTile(point.X, point.Y, 178, true, false, -1, WorldGen.randGem());
								}
								Point item = new Point(point.X - 1, point.Y);
								if (!hashSet.Contains(item))
								{
									list2.Add(item);
								}
								item = new Point(point.X + 1, point.Y);
								if (!hashSet.Contains(item))
								{
									list2.Add(item);
								}
								item = new Point(point.X, point.Y - 1);
								if (!hashSet.Contains(item))
								{
									list2.Add(item);
								}
								item = new Point(point.X, point.Y + 1);
								if (!hashSet.Contains(item))
								{
									list2.Add(item);
								}
							}
						}
					}
				}
			}

			// Token: 0x06002F91 RID: 12177 RVA: 0x005C7E58 File Offset: 0x005C6058
			public static void Spider(int x, int y)
			{
				if (!WorldGen.InWorld(x, y, 0))
				{
					return;
				}
				byte wall = 62;
				List<Point> list = new List<Point>();
				List<Point> list2 = new List<Point>();
				HashSet<Point> hashSet = new HashSet<Point>();
				list2.Add(new Point(x, y));
				while (list2.Count > 0)
				{
					list.Clear();
					list.AddRange(list2);
					list2.Clear();
					while (list.Count > 0)
					{
						Point point = list[0];
						if (!WorldGen.InWorld(point.X, point.Y, 1))
						{
							list.Remove(point);
						}
						else
						{
							hashSet.Add(point);
							list.Remove(point);
							Tile tile = Main.tile[point.X, point.Y];
							if (WorldGen.SolidTile(point.X, point.Y, false) || tile.wall != 0)
							{
								if (tile.active() && tile.wall == 0)
								{
									tile.wall = (ushort)wall;
								}
							}
							else
							{
								tile.wall = (ushort)wall;
								WorldGen.SquareWallFrame(point.X, point.Y, true);
								if (!tile.active())
								{
									tile.liquid = 0;
									tile.lava(false);
									if (WorldGen.SolidTile(point.X, point.Y + 1, false) && WorldGen.genRand.Next(3) == 0)
									{
										if (WorldGen.genRand.Next(15) == 0)
										{
											WorldGen.AddBuriedChest(point.X, point.Y, 939, true, 15, false, 0);
										}
										else
										{
											WorldGen.PlacePot(point.X, point.Y, 28, WorldGen.genRand.Next(19, 21));
										}
									}
									if (!tile.active())
									{
										if (WorldGen.SolidTile(point.X, point.Y - 1, false) && WorldGen.genRand.Next(3) == 0)
										{
											WorldGen.PlaceTight(point.X, point.Y, true);
										}
										else if (WorldGen.SolidTile(point.X, point.Y + 1, false))
										{
											WorldGen.PlaceTile(point.X, point.Y, 187, true, false, -1, 9 + WorldGen.genRand.Next(5));
											if (WorldGen.genRand.Next(3) == 0)
											{
												if (!tile.active())
												{
													WorldGen.PlaceSmallPile(point.X, point.Y, 34 + WorldGen.genRand.Next(4), 1, 185);
												}
												if (!tile.active())
												{
													WorldGen.PlaceSmallPile(point.X, point.Y, 48 + WorldGen.genRand.Next(6), 0, 185);
												}
											}
										}
									}
								}
								Point item = new Point(point.X - 1, point.Y);
								if (!hashSet.Contains(item))
								{
									list2.Add(item);
								}
								item = new Point(point.X + 1, point.Y);
								if (!hashSet.Contains(item))
								{
									list2.Add(item);
								}
								item = new Point(point.X, point.Y - 1);
								if (!hashSet.Contains(item))
								{
									list2.Add(item);
								}
								item = new Point(point.X, point.Y + 1);
								if (!hashSet.Contains(item))
								{
									list2.Add(item);
								}
							}
						}
					}
				}
			}

			// Token: 0x06002F92 RID: 12178 RVA: 0x005C81B0 File Offset: 0x005C63B0
			public static void WallDungeon(int x, int y, int wallType)
			{
				if (!WorldGen.InWorld(x, y, 0))
				{
					return;
				}
				ushort num = (ushort)wallType;
				List<Point> list = new List<Point>();
				List<Point> list2 = new List<Point>();
				HashSet<Point> hashSet = new HashSet<Point>();
				list2.Add(new Point(x, y));
				while (list2.Count > 0)
				{
					list.Clear();
					list.AddRange(list2);
					list2.Clear();
					while (list.Count > 0)
					{
						Point point = list[0];
						if (!WorldGen.InWorld(point.X, point.Y, 1))
						{
							list.Remove(point);
						}
						else
						{
							hashSet.Add(point);
							list.Remove(point);
							Tile tile = Main.tile[point.X, point.Y];
							if (!WorldGen.SolidTile(point.X, point.Y, false) && tile.wall != num && tile.wall > 0 && tile.wall != 244)
							{
								tile.wall = num;
								Point item = new Point(point.X - 1, point.Y);
								if (!hashSet.Contains(item))
								{
									list2.Add(item);
								}
								item = new Point(point.X + 1, point.Y);
								if (!hashSet.Contains(item))
								{
									list2.Add(item);
								}
								item = new Point(point.X, point.Y - 1);
								if (!hashSet.Contains(item))
								{
									list2.Add(item);
								}
								item = new Point(point.X, point.Y + 1);
								if (!hashSet.Contains(item))
								{
									list2.Add(item);
								}
							}
							else if (tile.active())
							{
								tile.wall = num;
							}
						}
					}
				}
			}

			// Token: 0x06002F93 RID: 12179 RVA: 0x005C837A File Offset: 0x005C657A
			private static bool Gemmable(int type)
			{
				return type == 0 || type == 1 || type == 40 || type == 59 || type == 60 || type == 70 || type == 147 || type == 161;
			}
		}

		// Token: 0x020004E8 RID: 1256
		public static class TenthAnniversaryWorldInfo
		{
			// Token: 0x0400572A RID: 22314
			public static int[] GoodPrefixIdsForAccessory = new int[]
			{
				65,
				68,
				72,
				76
			};

			// Token: 0x0400572B RID: 22315
			public static int[] GoodPrefixIdsForMeleeWeapon = new int[]
			{
				81,
				59,
				57
			};

			// Token: 0x0400572C RID: 22316
			public static int[] GoodPrefixIdsForRangedWeapon = new int[]
			{
				82,
				57,
				60
			};

			// Token: 0x0400572D RID: 22317
			public static int[] GoodPrefixIdsForMagicWeapon = new int[]
			{
				83,
				57,
				60
			};

			// Token: 0x0400572E RID: 22318
			public static int[] GoodPrefixIdsForSummonerWeapon = new int[]
			{
				83,
				57,
				60
			};
		}

		// Token: 0x020004E9 RID: 1257
		public struct GrowTreeSettings
		{
			// Token: 0x0400572F RID: 22319
			public ushort TreeTileType;

			// Token: 0x04005730 RID: 22320
			public int TreeHeightMin;

			// Token: 0x04005731 RID: 22321
			public int TreeHeightMax;

			// Token: 0x04005732 RID: 22322
			public int TreeTopPaddingNeeded;

			// Token: 0x04005733 RID: 22323
			public WorldGen.GrowTreeSettings.IsTileFitForTreeGroundTest GroundTest;

			// Token: 0x04005734 RID: 22324
			public WorldGen.GrowTreeSettings.IsWallTypeFitForTreeBack WallTest;

			// Token: 0x04005735 RID: 22325
			public ushort SaplingTileType;

			// Token: 0x020007E6 RID: 2022
			// (Invoke) Token: 0x06003955 RID: 14677
			public delegate bool IsTileFitForTreeGroundTest(int tileType);

			// Token: 0x020007E7 RID: 2023
			// (Invoke) Token: 0x06003959 RID: 14681
			public delegate bool IsWallTypeFitForTreeBack(int wallType);

			// Token: 0x020007E8 RID: 2024
			public static class Profiles
			{
				// Token: 0x0600395C RID: 14684 RVA: 0x00615534 File Offset: 0x00613734
				public static bool TryGetFromItemId(int itemType, out WorldGen.GrowTreeSettings profile)
				{
					switch (itemType)
					{
					case 4851:
						profile = WorldGen.GrowTreeSettings.Profiles.GemTree_Topaz;
						return true;
					case 4852:
						profile = WorldGen.GrowTreeSettings.Profiles.GemTree_Amethyst;
						return true;
					case 4853:
						profile = WorldGen.GrowTreeSettings.Profiles.GemTree_Sappphire;
						return true;
					case 4854:
						profile = WorldGen.GrowTreeSettings.Profiles.GemTree_Emerald;
						return true;
					case 4855:
						profile = WorldGen.GrowTreeSettings.Profiles.GemTree_Ruby;
						return true;
					case 4856:
						profile = WorldGen.GrowTreeSettings.Profiles.GemTree_Diamond;
						return true;
					case 4857:
						profile = WorldGen.GrowTreeSettings.Profiles.GemTree_Amber;
						return true;
					default:
						if (itemType == 4871)
						{
							profile = WorldGen.GrowTreeSettings.Profiles.VanityTree_Sakura;
							return true;
						}
						if (itemType != 4907)
						{
							profile = default(WorldGen.GrowTreeSettings);
							return false;
						}
						profile = WorldGen.GrowTreeSettings.Profiles.VanityTree_Willow;
						return true;
					}
				}

				// Token: 0x0600395D RID: 14685 RVA: 0x006155F8 File Offset: 0x006137F8
				public static bool TryGetFromTreeId(int tileType, out WorldGen.GrowTreeSettings profile)
				{
					switch (tileType)
					{
					case 583:
						profile = WorldGen.GrowTreeSettings.Profiles.GemTree_Topaz;
						return true;
					case 584:
						profile = WorldGen.GrowTreeSettings.Profiles.GemTree_Amethyst;
						return true;
					case 585:
						profile = WorldGen.GrowTreeSettings.Profiles.GemTree_Sappphire;
						return true;
					case 586:
						profile = WorldGen.GrowTreeSettings.Profiles.GemTree_Emerald;
						return true;
					case 587:
						profile = WorldGen.GrowTreeSettings.Profiles.GemTree_Ruby;
						return true;
					case 588:
						profile = WorldGen.GrowTreeSettings.Profiles.GemTree_Diamond;
						return true;
					case 589:
						profile = WorldGen.GrowTreeSettings.Profiles.GemTree_Amber;
						return true;
					case 590:
					case 591:
					case 592:
					case 593:
					case 594:
					case 595:
						break;
					case 596:
						profile = WorldGen.GrowTreeSettings.Profiles.VanityTree_Sakura;
						return true;
					default:
						if (tileType == 616)
						{
							profile = WorldGen.GrowTreeSettings.Profiles.VanityTree_Willow;
							return true;
						}
						if (tileType == 634)
						{
							profile = WorldGen.GrowTreeSettings.Profiles.Tree_Ash;
							return true;
						}
						break;
					}
					profile = default(WorldGen.GrowTreeSettings);
					return false;
				}

				// Token: 0x040064BA RID: 25786
				public static WorldGen.GrowTreeSettings GemTree_Ruby = new WorldGen.GrowTreeSettings
				{
					GroundTest = new WorldGen.GrowTreeSettings.IsTileFitForTreeGroundTest(WorldGen.GemTreeGroundTest),
					WallTest = new WorldGen.GrowTreeSettings.IsWallTypeFitForTreeBack(WorldGen.GemTreeWallTest),
					TreeHeightMax = 12,
					TreeHeightMin = 7,
					TreeTileType = 587,
					TreeTopPaddingNeeded = 4,
					SaplingTileType = 590
				};

				// Token: 0x040064BB RID: 25787
				public static WorldGen.GrowTreeSettings GemTree_Diamond = new WorldGen.GrowTreeSettings
				{
					GroundTest = new WorldGen.GrowTreeSettings.IsTileFitForTreeGroundTest(WorldGen.GemTreeGroundTest),
					WallTest = new WorldGen.GrowTreeSettings.IsWallTypeFitForTreeBack(WorldGen.GemTreeWallTest),
					TreeHeightMax = 12,
					TreeHeightMin = 7,
					TreeTileType = 588,
					TreeTopPaddingNeeded = 4,
					SaplingTileType = 590
				};

				// Token: 0x040064BC RID: 25788
				public static WorldGen.GrowTreeSettings GemTree_Topaz = new WorldGen.GrowTreeSettings
				{
					GroundTest = new WorldGen.GrowTreeSettings.IsTileFitForTreeGroundTest(WorldGen.GemTreeGroundTest),
					WallTest = new WorldGen.GrowTreeSettings.IsWallTypeFitForTreeBack(WorldGen.GemTreeWallTest),
					TreeHeightMax = 12,
					TreeHeightMin = 7,
					TreeTileType = 583,
					TreeTopPaddingNeeded = 4,
					SaplingTileType = 590
				};

				// Token: 0x040064BD RID: 25789
				public static WorldGen.GrowTreeSettings GemTree_Amethyst = new WorldGen.GrowTreeSettings
				{
					GroundTest = new WorldGen.GrowTreeSettings.IsTileFitForTreeGroundTest(WorldGen.GemTreeGroundTest),
					WallTest = new WorldGen.GrowTreeSettings.IsWallTypeFitForTreeBack(WorldGen.GemTreeWallTest),
					TreeHeightMax = 12,
					TreeHeightMin = 7,
					TreeTileType = 584,
					TreeTopPaddingNeeded = 4,
					SaplingTileType = 590
				};

				// Token: 0x040064BE RID: 25790
				public static WorldGen.GrowTreeSettings GemTree_Sappphire = new WorldGen.GrowTreeSettings
				{
					GroundTest = new WorldGen.GrowTreeSettings.IsTileFitForTreeGroundTest(WorldGen.GemTreeGroundTest),
					WallTest = new WorldGen.GrowTreeSettings.IsWallTypeFitForTreeBack(WorldGen.GemTreeWallTest),
					TreeHeightMax = 12,
					TreeHeightMin = 7,
					TreeTileType = 585,
					TreeTopPaddingNeeded = 4,
					SaplingTileType = 590
				};

				// Token: 0x040064BF RID: 25791
				public static WorldGen.GrowTreeSettings GemTree_Emerald = new WorldGen.GrowTreeSettings
				{
					GroundTest = new WorldGen.GrowTreeSettings.IsTileFitForTreeGroundTest(WorldGen.GemTreeGroundTest),
					WallTest = new WorldGen.GrowTreeSettings.IsWallTypeFitForTreeBack(WorldGen.GemTreeWallTest),
					TreeHeightMax = 12,
					TreeHeightMin = 7,
					TreeTileType = 586,
					TreeTopPaddingNeeded = 4,
					SaplingTileType = 590
				};

				// Token: 0x040064C0 RID: 25792
				public static WorldGen.GrowTreeSettings GemTree_Amber = new WorldGen.GrowTreeSettings
				{
					GroundTest = new WorldGen.GrowTreeSettings.IsTileFitForTreeGroundTest(WorldGen.GemTreeGroundTest),
					WallTest = new WorldGen.GrowTreeSettings.IsWallTypeFitForTreeBack(WorldGen.GemTreeWallTest),
					TreeHeightMax = 12,
					TreeHeightMin = 7,
					TreeTileType = 589,
					TreeTopPaddingNeeded = 4,
					SaplingTileType = 590
				};

				// Token: 0x040064C1 RID: 25793
				public static WorldGen.GrowTreeSettings VanityTree_Sakura = new WorldGen.GrowTreeSettings
				{
					GroundTest = new WorldGen.GrowTreeSettings.IsTileFitForTreeGroundTest(WorldGen.VanityTreeGroundTest),
					WallTest = new WorldGen.GrowTreeSettings.IsWallTypeFitForTreeBack(WorldGen.DefaultTreeWallTest),
					TreeHeightMax = 12,
					TreeHeightMin = 7,
					TreeTileType = 596,
					TreeTopPaddingNeeded = 4,
					SaplingTileType = 595
				};

				// Token: 0x040064C2 RID: 25794
				public static WorldGen.GrowTreeSettings VanityTree_Willow = new WorldGen.GrowTreeSettings
				{
					GroundTest = new WorldGen.GrowTreeSettings.IsTileFitForTreeGroundTest(WorldGen.VanityTreeGroundTest),
					WallTest = new WorldGen.GrowTreeSettings.IsWallTypeFitForTreeBack(WorldGen.DefaultTreeWallTest),
					TreeHeightMax = 12,
					TreeHeightMin = 7,
					TreeTileType = 616,
					TreeTopPaddingNeeded = 4,
					SaplingTileType = 615
				};

				// Token: 0x040064C3 RID: 25795
				public static WorldGen.GrowTreeSettings Tree_Ash = new WorldGen.GrowTreeSettings
				{
					GroundTest = new WorldGen.GrowTreeSettings.IsTileFitForTreeGroundTest(WorldGen.AshTreeGroundTest),
					WallTest = new WorldGen.GrowTreeSettings.IsWallTypeFitForTreeBack(WorldGen.DefaultTreeWallTest),
					TreeHeightMax = 12,
					TreeHeightMin = 7,
					TreeTileType = 634,
					TreeTopPaddingNeeded = 4,
					SaplingTileType = 20
				};
			}
		}

		// Token: 0x020004EA RID: 1258
		public struct CheckTreeSettings
		{
			// Token: 0x04005736 RID: 22326
			public WorldGen.CheckTreeSettings.GroundValidTest IsGroundValid;

			// Token: 0x020007E9 RID: 2025
			// (Invoke) Token: 0x06003960 RID: 14688
			public delegate bool GroundValidTest(int groundTileType);
		}

		// Token: 0x020004EB RID: 1259
		public enum SpecialKillTileContext
		{
			// Token: 0x04005738 RID: 22328
			None,
			// Token: 0x04005739 RID: 22329
			MowingTheGrass
		}

		// Token: 0x020004EC RID: 1260
		// (Invoke) Token: 0x06002F96 RID: 12182
		public delegate bool GetTreeFoliageDataMethod(int i, int j, int xoffset, ref int treeFrame, ref int treeStyle, out int floorY, out int topTextureFrameWidth, out int topTextureFrameHeight);

		// Token: 0x020004ED RID: 1261
		public struct TileMergeCullCache
		{
			// Token: 0x06002F99 RID: 12185 RVA: 0x005C8428 File Offset: 0x005C6628
			public void Cull(ref int up, ref int down, ref int left, ref int right, ref int upLeft, ref int upRight, ref int downLeft, ref int downRight)
			{
				if (this.CullTop)
				{
					up = -1;
				}
				if (this.CullBottom)
				{
					down = -1;
				}
				if (this.CullLeft)
				{
					left = -1;
				}
				if (this.CullRight)
				{
					right = -1;
				}
				if (this.CullTopLeft)
				{
					upLeft = -1;
				}
				if (this.CullTopRight)
				{
					upRight = -1;
				}
				if (this.CullBottomLeft)
				{
					downLeft = -1;
				}
				if (this.CullBottomRight)
				{
					downRight = -1;
				}
			}

			// Token: 0x0400573A RID: 22330
			public bool CullTop;

			// Token: 0x0400573B RID: 22331
			public bool CullBottom;

			// Token: 0x0400573C RID: 22332
			public bool CullLeft;

			// Token: 0x0400573D RID: 22333
			public bool CullRight;

			// Token: 0x0400573E RID: 22334
			public bool CullTopLeft;

			// Token: 0x0400573F RID: 22335
			public bool CullTopRight;

			// Token: 0x04005740 RID: 22336
			public bool CullBottomLeft;

			// Token: 0x04005741 RID: 22337
			public bool CullBottomRight;
		}
	}
}
